// Generated from PLSQL.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PLSQLListener = require('./PLSQLListener').PLSQLListener;
var grammarFileName = "PLSQL.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3\u0266\u1489\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t",
    "\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20",
    "\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4",
    "\27\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35",
    "\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'",
    "\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61",
    "\t\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4",
    "8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C",
    "\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\t",
    "N\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY",
    "\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t",
    "d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to",
    "\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4",
    "{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4",
    "\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085\t\u0085\4\u0086",
    "\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a",
    "\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f",
    "\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093\t\u0093",
    "\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098",
    "\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c",
    "\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1",
    "\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4\4\u00a5\t\u00a5",
    "\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa",
    "\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae",
    "\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2\4\u00b3",
    "\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7",
    "\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc",
    "\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf\4\u00c0\t\u00c0",
    "\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4\t\u00c4\4\u00c5",
    "\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9",
    "\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd\4\u00ce",
    "\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1\4\u00d2\t\u00d2",
    "\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7",
    "\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db",
    "\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df\t\u00df\4\u00e0",
    "\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3\4\u00e4\t\u00e4",
    "\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9",
    "\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed\t\u00ed",
    "\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1\t\u00f1\4\u00f2",
    "\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6",
    "\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb",
    "\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe\4\u00ff\t\u00ff",
    "\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103\t\u0103\4\u0104",
    "\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108",
    "\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c\4\u010d",
    "\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110\4\u0111\t\u0111",
    "\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116",
    "\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a",
    "\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e\t\u011e\4\u011f",
    "\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122\4\u0123\t\u0123",
    "\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128",
    "\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c\t\u012c",
    "\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130\t\u0130\4\u0131",
    "\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135",
    "\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a",
    "\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d\4\u013e\t\u013e",
    "\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142\t\u0142\4\u0143",
    "\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147",
    "\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b\4\u014c",
    "\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f\4\u0150\t\u0150",
    "\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155",
    "\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159",
    "\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d\t\u015d\4\u015e",
    "\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161\4\u0162\t\u0162",
    "\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167",
    "\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b\t\u016b",
    "\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f\t\u016f\4\u0170",
    "\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174",
    "\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179",
    "\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\3\2\6\2\u02f8\n\2\r\2\16\2",
    "\u02f9\3\3\7\3\u02fd\n\3\f\3\16\3\u0300\13\3\3\3\3\3\3\4\3\4\7\4\u0306",
    "\n\4\f\4\16\4\u0309\13\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5",
    "\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0320\n\5\3\6\3\6\3\6\3",
    "\6\3\6\3\7\3\7\3\7\3\7\3\7\5\7\u032c\n\7\3\7\7\7\u032f\n\7\f\7\16\7",
    "\u0332\13\7\3\7\3\7\5\7\u0336\n\7\3\7\3\7\3\b\3\b\3\b\5\b\u033d\n\b",
    "\5\b\u033f\n\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0347\n\b\f\b\16\b\u034a",
    "\13\b\3\b\3\b\5\b\u034e\n\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0356\n\b\f",
    "\b\16\b\u0359\13\b\3\b\5\b\u035c\n\b\3\b\3\b\5\b\u0360\n\b\3\b\7\b\u0363",
    "\n\b\f\b\16\b\u0366\13\b\3\b\3\b\5\b\u036a\n\b\3\b\3\b\3\b\5\b\u036f",
    "\n\b\3\b\3\b\3\t\3\t\5\t\u0375\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3",
    "\n\3\n\7\n\u0381\n\n\f\n\16\n\u0384\13\n\3\n\3\n\5\n\u0388\n\n\3\n\5",
    "\n\u038b\n\n\3\n\3\n\3\13\3\13\5\13\u0391\n\13\3\f\3\f\3\f\3\f\3\f\7",
    "\f\u0398\n\f\f\f\16\f\u039b\13\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r",
    "\7\r\u03a6\n\r\f\r\16\r\u03a9\13\r\3\r\3\r\3\16\3\16\3\16\5\16\u03b0",
    "\n\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\5\17\u03ba\n\17\3\17\5",
    "\17\u03bd\n\17\3\17\7\17\u03c0\n\17\f\17\16\17\u03c3\13\17\3\17\3\17",
    "\5\17\u03c7\n\17\3\17\3\17\3\20\3\20\3\20\5\20\u03ce\n\20\3\20\3\20",
    "\3\20\5\20\u03d3\n\20\3\20\3\20\3\21\3\21\3\21\3\21\7\21\u03db\n\21",
    "\f\21\16\21\u03de\13\21\3\21\3\21\3\21\3\21\5\21\u03e4\n\21\5\21\u03e6",
    "\n\21\3\22\3\22\5\22\u03ea\n\22\3\22\3\22\7\22\u03ee\n\22\f\22\16\22",
    "\u03f1\13\22\3\22\3\22\5\22\u03f5\n\22\3\23\3\23\3\23\3\23\3\23\3\23",
    "\3\23\3\23\5\23\u03ff\n\23\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u0407",
    "\n\24\f\24\16\24\u040a\13\24\3\24\3\24\5\24\u040e\n\24\3\24\3\24\3\25",
    "\3\25\3\25\3\25\3\25\3\25\7\25\u0418\n\25\f\25\16\25\u041b\13\25\3\25",
    "\3\25\5\25\u041f\n\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3",
    "\26\3\26\3\26\5\26\u042d\n\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30",
    "\3\30\3\30\5\30\u0439\n\30\3\30\7\30\u043c\n\30\f\30\16\30\u043f\13",
    "\30\3\30\3\30\5\30\u0443\n\30\3\30\3\30\3\31\3\31\3\31\5\31\u044a\n",
    "\31\5\31\u044c\n\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u0454\n\31\f",
    "\31\16\31\u0457\13\31\3\31\3\31\5\31\u045b\n\31\3\31\5\31\u045e\n\31",
    "\3\31\3\31\5\31\u0462\n\31\3\31\7\31\u0465\n\31\f\31\16\31\u0468\13",
    "\31\3\31\3\31\3\31\5\31\u046d\n\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32",
    "\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u047f\n\33\3\33\7",
    "\33\u0482\n\33\f\33\16\33\u0485\13\33\3\33\3\33\5\33\u0489\n\33\5\33",
    "\u048b\n\33\3\33\3\33\3\34\3\34\3\34\5\34\u0492\n\34\3\34\3\34\3\34",
    "\3\34\3\34\5\34\u0499\n\34\3\34\5\34\u049c\n\34\3\34\5\34\u049f\n\34",
    "\3\34\5\34\u04a2\n\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\7\35\u04ab",
    "\n\35\f\35\16\35\u04ae\13\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37",
    "\3\37\5\37\u04b9\n\37\3\37\3\37\5\37\u04bd\n\37\3\37\5\37\u04c0\n\37",
    "\3 \3 \3 \3 \3!\3!\3!\5!\u04c9\n!\3\"\3\"\3\"\3\"\7\"\u04cf\n\"\f\"",
    "\16\"\u04d2\13\"\3\"\3\"\3\"\3\"\3\"\5\"\u04d9\n\"\3\"\5\"\u04dc\n\"",
    "\3#\3#\3#\3#\3#\5#\u04e3\n#\3$\3$\5$\u04e7\n$\3%\3%\3%\7%\u04ec\n%\f",
    "%\16%\u04ef\13%\3%\6%\u04f2\n%\r%\16%\u04f3\3%\3%\3%\3&\3&\3&\3&\3&",
    "\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3",
    "&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u051d\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3",
    "\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3",
    "\'\3\'\5\'\u0539\n\'\3(\3(\3(\7(\u053e\n(\f(\16(\u0541\13(\3(\3(\5(",
    "\u0545\n(\3(\3(\3)\3)\3)\3)\3)\7)\u054e\n)\f)\16)\u0551\13)\5)\u0553",
    "\n)\3*\3*\3*\3*\3*\3+\3+\6+\u055c\n+\r+\16+\u055d\3,\3,\3,\3-\3-\3-",
    "\5-\u0566\n-\3-\3-\5-\u056a\n-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0576",
    "\n.\3.\5.\u0579\n.\3.\3.\3/\3/\5/\u057f\n/\3/\5/\u0582\n/\3/\7/\u0585",
    "\n/\f/\16/\u0588\13/\3/\3/\5/\u058c\n/\3\60\3\60\5\60\u0590\n\60\3\60",
    "\3\60\3\60\3\60\3\60\3\60\7\60\u0598\n\60\f\60\16\60\u059b\13\60\3\60",
    "\3\60\3\61\3\61\3\61\7\61\u05a2\n\61\f\61\16\61\u05a5\13\61\3\62\3\62",
    "\3\62\5\62\u05aa\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u05b3",
    "\n\63\f\63\16\63\u05b6\13\63\3\63\3\63\5\63\u05ba\n\63\3\64\3\64\5\64",
    "\u05be\n\64\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u05c6\n\65\3\66\3\66",
    "\3\66\3\66\3\66\3\66\5\66\u05ce\n\66\3\66\3\66\3\66\5\66\u05d3\n\66",
    "\3\66\5\66\u05d6\n\66\5\66\u05d8\n\66\3\67\5\67\u05db\n\67\3\67\3\67",
    "\3\67\3\67\38\38\38\58\u05e4\n8\38\38\38\58\u05e9\n8\38\38\39\39\39",
    "\59\u05f0\n9\39\59\u05f3\n9\3:\5:\u05f6\n:\3:\3:\5:\u05fa\n:\3:\5:\u05fd",
    "\n:\3:\3:\3:\3:\7:\u0603\n:\f:\16:\u0606\13:\3:\3:\5:\u060a\n:\3:\7",
    ":\u060d\n:\f:\16:\u0610\13:\3;\3;\3;\3;\5;\u0616\n;\3<\3<\3<\3=\3=\3",
    "=\3=\3=\5=\u0620\n=\3>\3>\3>\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\7?\u0630",
    "\n?\f?\16?\u0633\13?\3?\3?\3@\3@\5@\u0639\n@\3A\3A\3A\3A\3B\3B\3B\3",
    "B\5B\u0643\nB\3C\3C\3C\3C\3C\3C\7C\u064b\nC\fC\16C\u064e\13C\3C\3C\3",
    "C\3C\5C\u0654\nC\3C\7C\u0657\nC\fC\16C\u065a\13C\3C\3C\3C\5C\u065f\n",
    "C\3D\3D\3D\3D\3D\3D\7D\u0667\nD\fD\16D\u066a\13D\3D\3D\5D\u066e\nD\3",
    "D\3D\3D\3D\3D\5D\u0675\nD\3D\7D\u0678\nD\fD\16D\u067b\13D\3D\3D\3D\5",
    "D\u0680\nD\3E\5E\u0683\nE\3E\5E\u0686\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E",
    "\3E\3E\3E\3E\7E\u0695\nE\fE\16E\u0698\13E\3E\3E\5E\u069c\nE\3E\3E\3",
    "E\3E\3E\3E\3E\5E\u06a5\nE\3E\7E\u06a8\nE\fE\16E\u06ab\13E\3E\3E\3E\5",
    "E\u06b0\nE\3F\5F\u06b3\nF\3F\3F\3G\3G\3G\5G\u06ba\nG\3G\5G\u06bd\nG",
    "\3H\3H\3H\3H\3I\5I\u06c4\nI\3I\6I\u06c7\nI\rI\16I\u06c8\3I\3I\5I\u06cd",
    "\nI\3J\3J\3J\5J\u06d2\nJ\3K\3K\3K\5K\u06d7\nK\3L\3L\3L\3L\3L\3L\7L\u06df",
    "\nL\fL\16L\u06e2\13L\3L\3L\3L\5L\u06e7\nL\3M\3M\3M\3M\3M\3M\7M\u06ef",
    "\nM\fM\16M\u06f2\13M\3M\3M\5M\u06f6\nM\3M\3M\3M\3M\3M\5M\u06fd\nM\3",
    "M\3M\3M\3M\5M\u0703\nM\3M\3M\5M\u0707\nM\3N\5N\u070a\nN\3N\5N\u070d",
    "\nN\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\7N\u071c\nN\fN\16N\u071f",
    "\13N\3N\3N\5N\u0723\nN\3N\3N\3N\3N\3N\3N\5N\u072b\nN\3O\3O\3O\3O\3P",
    "\3P\3P\3P\3P\3P\7P\u0737\nP\fP\16P\u073a\13P\3P\3P\3Q\3Q\5Q\u0740\n",
    "Q\3R\3R\3R\3S\3S\3S\3S\3S\3T\3T\3T\3T\6T\u074e\nT\rT\16T\u074f\3T\3",
    "T\3U\3U\3U\3U\3U\7U\u0759\nU\fU\16U\u075c\13U\3U\3U\3V\3V\3V\3V\3V\3",
    "V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0770\nV\3W\3W\3W\3W\3X\3X\3X\3Y",
    "\3Y\3Y\3Y\3Z\3Z\3Z\5Z\u0780\nZ\3[\3[\3[\3[\3\\\3\\\3\\\5\\\u0789\n\\",
    "\3\\\3\\\3\\\5\\\u078e\n\\\3\\\3\\\5\\\u0792\n\\\3\\\5\\\u0795\n\\\3",
    "]\3]\3]\3]\3]\3]\7]\u079d\n]\f]\16]\u07a0\13]\3]\3]\3^\3^\3^\3^\3^\7",
    "^\u07a9\n^\f^\16^\u07ac\13^\3^\3^\3^\5^\u07b1\n^\3^\3^\3_\3_\7_\u07b7",
    "\n_\f_\16_\u07ba\13_\3_\5_\u07bd\n_\3_\5_\u07c0\n_\3`\3`\3`\3a\3a\3",
    "a\3a\3a\3a\3a\3a\3a\5a\u07ce\na\3b\3b\5b\u07d2\nb\3b\3b\3b\5b\u07d7",
    "\nb\3b\5b\u07da\nb\3b\3b\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u07e7\nc\3c\3",
    "c\5c\u07eb\nc\3c\3c\3d\3d\3d\3d\3d\3d\7d\u07f5\nd\fd\16d\u07f8\13d\3",
    "d\3d\5d\u07fc\nd\3d\3d\5d\u0800\nd\3d\3d\5d\u0804\nd\3d\3d\3e\3e\5e",
    "\u080a\ne\3e\5e\u080d\ne\3e\5e\u0810\ne\3f\3f\3f\3f\3g\3g\3g\3g\3g\3",
    "g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u082b\ng\3g\3g\6g",
    "\u082f\ng\rg\16g\u0830\3g\3g\5g\u0835\ng\3g\3g\3h\3h\5h\u083b\nh\3i",
    "\3i\3i\3i\3i\3i\3i\3i\7i\u0845\ni\fi\16i\u0848\13i\3i\3i\3i\3i\3i\3",
    "i\5i\u0850\ni\5i\u0852\ni\3i\3i\3j\3j\5j\u0858\nj\3j\3j\5j\u085c\nj",
    "\3j\5j\u085f\nj\3k\3k\3k\3k\3k\3l\3l\5l\u0868\nl\3l\3l\3m\3m\3m\3m\3",
    "m\3m\3m\5m\u0873\nm\3m\3m\5m\u0877\nm\3m\5m\u087a\nm\3n\3n\5n\u087e",
    "\nn\3n\3n\3n\3o\3o\3o\5o\u0886\no\3o\3o\3o\3o\3o\3o\3o\5o\u088f\no\3",
    "p\3p\3p\3q\3q\3q\3q\6q\u0898\nq\rq\16q\u0899\3r\3r\3r\3r\3r\3r\3s\3",
    "s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\5s",
    "\u08b9\ns\3t\3t\5t\u08bd\nt\3t\3t\3t\3u\3u\5u\u08c4\nu\3u\3u\5u\u08c8",
    "\nu\3v\3v\5v\u08cc\nv\3v\3v\5v\u08d0\nv\3w\3w\3w\3x\3x\3x\3x\3x\7x\u08da",
    "\nx\fx\16x\u08dd\13x\3x\5x\u08e0\nx\3x\3x\3x\3y\3y\3y\3y\3y\3z\3z\3",
    "z\3{\5{\u08ee\n{\3{\3{\3{\3{\5{\u08f4\n{\3{\3{\3{\3{\3{\5{\u08fb\n{",
    "\3|\3|\3|\5|\u0900\n|\3|\3|\3|\3|\3|\3|\3|\3|\5|\u090a\n|\3|\3|\3|\3",
    "|\5|\u0910\n|\5|\u0912\n|\3}\3}\3}\3}\3}\3}\3}\5}\u091b\n}\3~\3~\3~",
    "\3~\3~\3~\3~\3~\5~\u0925\n~\3~\3~\3~\5~\u092a\n~\3\177\3\177\3\177\3",
    "\177\3\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0082\3\u0082\3\u0083\3",
    "\u0083\5\u0083\u0939\n\u0083\3\u0084\3\u0084\5\u0084\u093d\n\u0084\3",
    "\u0085\5\u0085\u0940\n\u0085\3\u0085\3\u0085\5\u0085\u0944\n\u0085\3",
    "\u0086\3\u0086\3\u0086\5\u0086\u0949\n\u0086\3\u0086\3\u0086\5\u0086",
    "\u094d\n\u0086\3\u0087\3\u0087\6\u0087\u0951\n\u0087\r\u0087\16\u0087",
    "\u0952\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u0959\n\u0088\f\u0088",
    "\16\u0088\u095c\13\u0088\3\u0088\3\u0088\3\u0088\3\u0089\5\u0089\u0962",
    "\n\u0089\3\u0089\6\u0089\u0965\n\u0089\r\u0089\16\u0089\u0966\5\u0089",
    "\u0969\n\u0089\3\u0089\3\u0089\3\u008a\5\u008a\u096e\n\u008a\3\u008a",
    "\6\u008a\u0971\n\u008a\r\u008a\16\u008a\u0972\3\u008a\3\u008a\3\u008b",
    "\3\u008b\3\u008b\3\u008b\5\u008b\u097b\n\u008b\3\u008c\3\u008c\3\u008c",
    "\3\u008c\3\u008c\5\u008c\u0982\n\u008c\3\u008c\3\u008c\5\u008c\u0986",
    "\n\u008c\3\u008c\5\u008c\u0989\n\u008c\3\u008d\3\u008d\3\u008d\3\u008e",
    "\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0995\n\u008e",
    "\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u099b\n\u008f\3\u0090\3\u0090",
    "\3\u0090\3\u0091\3\u0091\3\u0091\5\u0091\u09a3\n\u0091\3\u0092\3\u0092",
    "\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u09ab\n\u0092\f\u0092\16\u0092",
    "\u09ae\13\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092",
    "\u09b6\n\u0092\f\u0092\16\u0092\u09b9\13\u0092\5\u0092\u09bb\n\u0092",
    "\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u09c2\n\u0093\3\u0093",
    "\5\u0093\u09c5\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094",
    "\u09cc\n\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095",
    "\3\u0095\3\u0095\5\u0095\u09d7\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095",
    "\5\u0095\u09dd\n\u0095\3\u0095\3\u0095\5\u0095\u09e1\n\u0095\3\u0096",
    "\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\7\u0096\u09e9\n\u0096\f\u0096",
    "\16\u0096\u09ec\13\u0096\5\u0096\u09ee\n\u0096\3\u0096\3\u0096\3\u0097",
    "\3\u0097\5\u0097\u09f4\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097",
    "\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u09ff\n\u0097\5\u0097\u0a01",
    "\n\u0097\5\u0097\u0a03\n\u0097\3\u0097\5\u0097\u0a06\n\u0097\3\u0098",
    "\3\u0098\5\u0098\u0a0a\n\u0098\3\u0098\5\u0098\u0a0d\n\u0098\3\u0099",
    "\3\u0099\5\u0099\u0a11\n\u0099\3\u0099\3\u0099\5\u0099\u0a15\n\u0099",
    "\3\u0099\3\u0099\3\u0099\5\u0099\u0a1a\n\u0099\3\u009a\3\u009a\3\u009a",
    "\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0a25\n\u009b",
    "\3\u009b\3\u009b\5\u009b\u0a29\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b",
    "\3\u009b\3\u009b\5\u009b\u0a31\n\u009b\3\u009c\5\u009c\u0a34\n\u009c",
    "\3\u009c\3\u009c\3\u009c\7\u009c\u0a39\n\u009c\f\u009c\16\u009c\u0a3c",
    "\13\u009c\3\u009d\3\u009d\3\u009d\3\u009d\7\u009d\u0a42\n\u009d\f\u009d",
    "\16\u009d\u0a45\13\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e",
    "\u0a4c\n\u009e\f\u009e\16\u009e\u0a4f\13\u009e\3\u009e\3\u009e\5\u009e",
    "\u0a53\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0a59\n\u009e",
    "\3\u009e\3\u009e\5\u009e\u0a5d\n\u009e\3\u009e\5\u009e\u0a60\n\u009e",
    "\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0a68\n\u009f",
    "\3\u009f\5\u009f\u0a6b\n\u009f\3\u009f\3\u009f\5\u009f\u0a6f\n\u009f",
    "\3\u009f\3\u009f\5\u009f\u0a73\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f",
    "\u0a78\n\u009f\3\u009f\5\u009f\u0a7b\n\u009f\3\u009f\3\u009f\5\u009f",
    "\u0a7f\n\u009f\3\u009f\3\u009f\5\u009f\u0a83\n\u009f\7\u009f\u0a85\n",
    "\u009f\f\u009f\16\u009f\u0a88\13\u009f\3\u009f\3\u009f\3\u009f\3\u00a0",
    "\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0a91\n\u00a0\f\u00a0\16\u00a0\u0a94",
    "\13\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3",
    "\u00a1\3\u00a1\7\u00a1\u0a9f\n\u00a1\f\u00a1\16\u00a1\u0aa2\13\u00a1",
    "\3\u00a2\3\u00a2\5\u00a2\u0aa6\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u0aaa",
    "\n\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3",
    "\u0ab3\n\u00a3\3\u00a4\3\u00a4\5\u00a4\u0ab7\n\u00a4\3\u00a4\3\u00a4",
    "\3\u00a4\3\u00a4\7\u00a4\u0abd\n\u00a4\f\u00a4\16\u00a4\u0ac0\13\u00a4",
    "\5\u00a4\u0ac2\n\u00a4\3\u00a4\5\u00a4\u0ac5\n\u00a4\3\u00a4\3\u00a4",
    "\5\u00a4\u0ac9\n\u00a4\3\u00a4\5\u00a4\u0acc\n\u00a4\3\u00a4\5\u00a4",
    "\u0acf\n\u00a4\3\u00a4\5\u00a4\u0ad2\n\u00a4\3\u00a5\3\u00a5\5\u00a5",
    "\u0ad6\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7",
    "\3\u00a7\5\u00a7\u0ae0\n\u00a7\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0ae5",
    "\n\u00a8\f\u00a8\16\u00a8\u0ae8\13\u00a8\3\u00a9\3\u00a9\7\u00a9\u0aec",
    "\n\u00a9\f\u00a9\16\u00a9\u0aef\13\u00a9\3\u00a9\3\u00a9\5\u00a9\u0af3",
    "\n\u00a9\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0af8\n\u00aa\3\u00aa\3\u00aa",
    "\3\u00aa\7\u00aa\u0afd\n\u00aa\f\u00aa\16\u00aa\u0b00\13\u00aa\3\u00aa",
    "\3\u00aa\3\u00aa\5\u00aa\u0b05\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa",
    "\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0b0f\n\u00aa\5\u00aa\u0b11",
    "\n\u00aa\3\u00aa\7\u00aa\u0b14\n\u00aa\f\u00aa\16\u00aa\u0b17\13\u00aa",
    "\3\u00aa\5\u00aa\u0b1a\n\u00aa\3\u00ab\5\u00ab\u0b1d\n\u00ab\3\u00ab",
    "\5\u00ab\u0b20\n\u00ab\3\u00ab\3\u00ab\5\u00ab\u0b24\n\u00ab\3\u00ab",
    "\3\u00ab\3\u00ab\5\u00ab\u0b29\n\u00ab\3\u00ab\3\u00ab\7\u00ab\u0b2d",
    "\n\u00ab\f\u00ab\16\u00ab\u0b30\13\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ad",
    "\3\u00ad\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u0b3a\n\u00ad\f\u00ad\16\u00ad",
    "\u0b3d\13\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\5\u00ae\u0b43\n\u00ae",
    "\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af",
    "\3\u00af\7\u00af\u0b4f\n\u00af\f\u00af\16\u00af\u0b52\13\u00af\5\u00af",
    "\u0b54\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0",
    "\3\u00b0\5\u00b0\u0b5e\n\u00b0\3\u00b1\3\u00b1\5\u00b1\u0b62\n\u00b1",
    "\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0b68\n\u00b1\f\u00b1\16\u00b1",
    "\u0b6b\13\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2",
    "\3\u00b2\3\u00b2\5\u00b2\u0b76\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3",
    "\3\u00b3\3\u00b3\7\u00b3\u0b7e\n\u00b3\f\u00b3\16\u00b3\u0b81\13\u00b3",
    "\3\u00b3\3\u00b3\5\u00b3\u0b85\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4",
    "\3\u00b4\3\u00b4\7\u00b4\u0b8d\n\u00b4\f\u00b4\16\u00b4\u0b90\13\u00b4",
    "\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u0b95\n\u00b4\f\u00b4\16\u00b4\u0b98",
    "\13\u00b4\5\u00b4\u0b9a\n\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\5\u00b5",
    "\u0ba0\n\u00b5\3\u00b6\3\u00b6\5\u00b6\u0ba4\n\u00b6\3\u00b7\3\u00b7",
    "\3\u00b7\5\u00b7\u0ba9\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7",
    "\3\u00b7\7\u00b7\u0bb1\n\u00b7\f\u00b7\16\u00b7\u0bb4\13\u00b7\3\u00b7",
    "\3\u00b7\5\u00b7\u0bb8\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b8",
    "\3\u00b8\3\u00b8\3\u00b8\3\u00b8\7\u00b8\u0bc3\n\u00b8\f\u00b8\16\u00b8",
    "\u0bc6\13\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9",
    "\7\u00b9\u0bcf\n\u00b9\f\u00b9\16\u00b9\u0bd2\13\u00b9\3\u00b9\3\u00b9",
    "\5\u00b9\u0bd6\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9",
    "\7\u00b9\u0bde\n\u00b9\f\u00b9\16\u00b9\u0be1\13\u00b9\3\u00b9\3\u00b9",
    "\5\u00b9\u0be5\n\u00b9\5\u00b9\u0be7\n\u00b9\3\u00ba\3\u00ba\3\u00ba",
    "\5\u00ba\u0bec\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u0bf0\n\u00ba\3\u00ba",
    "\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0bf6\n\u00ba\3\u00ba\3\u00ba\5\u00ba",
    "\u0bfa\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc",
    "\3\u00bc\3\u00bc\7\u00bc\u0c05\n\u00bc\f\u00bc\16\u00bc\u0c08\13\u00bc",
    "\3\u00bc\5\u00bc\u0c0b\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc",
    "\3\u00bc\7\u00bc\u0c13\n\u00bc\f\u00bc\16\u00bc\u0c16\13\u00bc\5\u00bc",
    "\u0c18\n\u00bc\5\u00bc\u0c1a\n\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd",
    "\u0c1f\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0c26",
    "\n\u00be\f\u00be\16\u00be\u0c29\13\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf",
    "\3\u00bf\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u0c33\n\u00bf\f\u00bf\16\u00bf",
    "\u0c36\13\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0c3d",
    "\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\7\u00c2\u0c44\n\u00c2",
    "\f\u00c2\16\u00c2\u0c47\13\u00c2\3\u00c2\5\u00c2\u0c4a\n\u00c2\3\u00c2",
    "\7\u00c2\u0c4d\n\u00c2\f\u00c2\16\u00c2\u0c50\13\u00c2\3\u00c2\3\u00c2",
    "\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0c5a\n\u00c3",
    "\5\u00c3\u0c5c\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5",
    "\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u0c6a\n\u00c5",
    "\f\u00c5\16\u00c5\u0c6d\13\u00c5\3\u00c6\3\u00c6\5\u00c6\u0c71\n\u00c6",
    "\3\u00c6\3\u00c6\7\u00c6\u0c75\n\u00c6\f\u00c6\16\u00c6\u0c78\13\u00c6",
    "\3\u00c6\3\u00c6\3\u00c7\5\u00c7\u0c7d\n\u00c7\3\u00c7\3\u00c7\3\u00c7",
    "\3\u00c7\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9",
    "\3\u00c9\3\u00c9\7\u00c9\u0c8d\n\u00c9\f\u00c9\16\u00c9\u0c90\13\u00c9",
    "\3\u00c9\3\u00c9\3\u00ca\3\u00ca\5\u00ca\u0c96\n\u00ca\3\u00cb\5\u00cb",
    "\u0c99\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0c9f\n\u00cb",
    "\f\u00cb\16\u00cb\u0ca2\13\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc",
    "\3\u00cc\5\u00cc\u0caa\n\u00cc\5\u00cc\u0cac\n\u00cc\3\u00cc\3\u00cc",
    "\5\u00cc\u0cb0\n\u00cc\3\u00cc\5\u00cc\u0cb3\n\u00cc\3\u00cd\3\u00cd",
    "\3\u00cd\5\u00cd\u0cb8\n\u00cd\5\u00cd\u0cba\n\u00cd\3\u00cd\3\u00cd",
    "\5\u00cd\u0cbe\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00cf",
    "\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0cca\n\u00cf\3\u00d0\3\u00d0",
    "\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1\5\u00d1\u0cd3\n\u00d1\3\u00d1",
    "\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u0cd9\n\u00d1\f\u00d1\16\u00d1\u0cdc",
    "\13\u00d1\3\u00d2\3\u00d2\5\u00d2\u0ce0\n\u00d2\3\u00d2\3\u00d2\5\u00d2",
    "\u0ce4\n\u00d2\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0ce9\n\u00d3\3\u00d3",
    "\5\u00d3\u0cec\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u0cf2",
    "\n\u00d4\f\u00d4\16\u00d4\u0cf5\13\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5",
    "\3\u00d5\5\u00d5\u0cfc\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6",
    "\u0d02\n\u00d6\3\u00d6\5\u00d6\u0d05\n\u00d6\3\u00d6\5\u00d6\u0d08\n",
    "\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u0d0e\n\u00d7\f\u00d7",
    "\16\u00d7\u0d11\13\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7",
    "\3\u00d7\5\u00d7\u0d1a\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8",
    "\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0d24\n\u00d8\f\u00d8\16\u00d8\u0d27",
    "\13\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0d2d\n\u00d8\3\u00d9",
    "\3\u00d9\5\u00d9\u0d31\n\u00d9\3\u00d9\3\u00d9\5\u00d9\u0d35\n\u00d9",
    "\3\u00d9\5\u00d9\u0d38\n\u00d9\3\u00d9\5\u00d9\u0d3b\n\u00d9\3\u00da",
    "\3\u00da\3\u00da\5\u00da\u0d40\n\u00da\3\u00db\3\u00db\3\u00db\5\u00db",
    "\u0d45\n\u00db\3\u00db\5\u00db\u0d48\n\u00db\3\u00db\5\u00db\u0d4b\n",
    "\u00db\3\u00dc\3\u00dc\6\u00dc\u0d4f\n\u00dc\r\u00dc\16\u00dc\u0d50",
    "\3\u00dc\5\u00dc\u0d54\n\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\5\u00dd",
    "\u0d5a\n\u00dd\3\u00dd\5\u00dd\u0d5d\n\u00dd\3\u00de\5\u00de\u0d60\n",
    "\u00de\3\u00de\6\u00de\u0d63\n\u00de\r\u00de\16\u00de\u0d64\3\u00de",
    "\5\u00de\u0d68\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\6\u00df\u0d6e",
    "\n\u00df\r\u00df\16\u00df\u0d6f\3\u00e0\3\u00e0\6\u00e0\u0d74\n\u00e0",
    "\r\u00e0\16\u00e0\u0d75\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1",
    "\7\u00e1\u0d7e\n\u00e1\f\u00e1\16\u00e1\u0d81\13\u00e1\3\u00e1\3\u00e1",
    "\5\u00e1\u0d85\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3\3\u00e3",
    "\3\u00e3\5\u00e3\u0d8e\n\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3",
    "\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0d98\n\u00e3\3\u00e3\3\u00e3\5\u00e3",
    "\u0d9c\n\u00e3\5\u00e3\u0d9e\n\u00e3\3\u00e3\5\u00e3\u0da1\n\u00e3\3",
    "\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\7\u00e4",
    "\u0dab\n\u00e4\f\u00e4\16\u00e4\u0dae\13\u00e4\3\u00e4\5\u00e4\u0db1",
    "\n\u00e4\3\u00e4\5\u00e4\u0db4\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5",
    "\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7",
    "\3\u00e7\3\u00e7\3\u00e7\7\u00e7\u0dc6\n\u00e7\f\u00e7\16\u00e7\u0dc9",
    "\13\u00e7\3\u00e7\3\u00e7\5\u00e7\u0dcd\n\u00e7\3\u00e7\3\u00e7\3\u00e7",
    "\5\u00e7\u0dd2\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8",
    "\u0dd9\n\u00e8\3\u00e8\5\u00e8\u0ddc\n\u00e8\3\u00e9\3\u00e9\3\u00e9",
    "\3\u00e9\3\u00e9\7\u00e9\u0de3\n\u00e9\f\u00e9\16\u00e9\u0de6\13\u00e9",
    "\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0dec\n\u00e9\3\u00ea\3\u00ea",
    "\3\u00ea\5\u00ea\u0df1\n\u00ea\3\u00eb\3\u00eb\5\u00eb\u0df5\n\u00eb",
    "\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0dfd\n\u00ec",
    "\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0e03\n\u00ec\3\u00ed\3\u00ed",
    "\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0e0b\n\u00ed\3\u00ed\5\u00ed",
    "\u0e0e\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u0e14\n\u00ee",
    "\f\u00ee\16\u00ee\u0e17\13\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00ef",
    "\5\u00ef\u0e1e\n\u00ef\3\u00ef\5\u00ef\u0e21\n\u00ef\3\u00ef\5\u00ef",
    "\u0e24\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1",
    "\5\u00f1\u0e2d\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0e33",
    "\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0e39\n\u00f2\5\u00f2",
    "\u0e3b\n\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3",
    "\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0e48\n\u00f3\5\u00f3\u0e4a",
    "\n\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4",
    "\u0e53\n\u00f4\5\u00f4\u0e55\n\u00f4\3\u00f5\3\u00f5\5\u00f5\u0e59\n",
    "\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u0e5f\n\u00f5\3\u00f5",
    "\3\u00f5\5\u00f5\u0e63\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6",
    "\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\5\u00f8\u0e71",
    "\n\u00f8\3\u00f8\3\u00f8\7\u00f8\u0e75\n\u00f8\f\u00f8\16\u00f8\u0e78",
    "\13\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fb\3",
    "\u00fb\3\u00fb\3\u00fb\7\u00fb\u0e84\n\u00fb\f\u00fb\16\u00fb\u0e87",
    "\13\u00fb\5\u00fb\u0e89\n\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd",
    "\7\u00fd\u0e90\n\u00fd\f\u00fd\16\u00fd\u0e93\13\u00fd\3\u00fe\3\u00fe",
    "\3\u00fe\5\u00fe\u0e98\n\u00fe\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0e9d",
    "\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff",
    "\3\u00ff\5\u00ff\u0ea8\n\u00ff\3\u00ff\3\u00ff\5\u00ff\u0eac\n\u00ff",
    "\3\u00ff\3\u00ff\3\u00ff\7\u00ff\u0eb1\n\u00ff\f\u00ff\16\u00ff\u0eb4",
    "\13\u00ff\3\u00ff\3\u00ff\5\u00ff\u0eb8\n\u00ff\7\u00ff\u0eba\n\u00ff",
    "\f\u00ff\16\u00ff\u0ebd\13\u00ff\3\u0100\3\u0100\3\u0100\5\u0100\u0ec2",
    "\n\u0100\3\u0100\3\u0100\5\u0100\u0ec6\n\u0100\3\u0101\3\u0101\3\u0102",
    "\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0ed1\n\u0102",
    "\3\u0102\7\u0102\u0ed4\n\u0102\f\u0102\16\u0102\u0ed7\13\u0102\3\u0103",
    "\3\u0103\5\u0103\u0edb\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103",
    "\3\u0103\3\u0103\5\u0103\u0ee4\n\u0103\5\u0103\u0ee6\n\u0103\5\u0103",
    "\u0ee8\n\u0103\3\u0104\3\u0104\3\u0105\3\u0105\3\u0105\3\u0106\3\u0106",
    "\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\7\u0106\u0ef7\n\u0106",
    "\f\u0106\16\u0106\u0efa\13\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106",
    "\5\u0106\u0f01\n\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0108\3\u0108",
    "\3\u0108\3\u0108\7\u0108\u0f0b\n\u0108\f\u0108\16\u0108\u0f0e\13\u0108",
    "\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\7\u010a\u0f15\n\u010a\f\u010a",
    "\16\u010a\u0f18\13\u010a\3\u010b\3\u010b\3\u010b\7\u010b\u0f1d\n\u010b",
    "\f\u010b\16\u010b\u0f20\13\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c",
    "\3\u010c\5\u010c\u0f28\n\u010c\3\u010c\5\u010c\u0f2b\n\u010c\3\u010d",
    "\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u0f32\n\u010d\3\u010d\3\u010d",
    "\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u0f3a\n\u010d\3\u010d\3\u010d",
    "\3\u010d\3\u010d\3\u010d\5\u010d\u0f41\n\u010d\3\u010d\3\u010d\5\u010d",
    "\u0f45\n\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u0f4c",
    "\n\u010e\3\u010f\3\u010f\5\u010f\u0f50\n\u010f\3\u010f\3\u010f\3\u010f",
    "\5\u010f\u0f55\n\u010f\7\u010f\u0f57\n\u010f\f\u010f\16\u010f\u0f5a",
    "\13\u010f\3\u010f\3\u010f\3\u010f\7\u010f\u0f5f\n\u010f\f\u010f\16\u010f",
    "\u0f62\13\u010f\3\u010f\5\u010f\u0f65\n\u010f\3\u0110\3\u0110\3\u0110",
    "\3\u0110\3\u0110\5\u0110\u0f6c\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110",
    "\3\u0110\3\u0110\3\u0110\5\u0110\u0f75\n\u0110\3\u0111\3\u0111\3\u0111",
    "\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\7\u0113\u0f81",
    "\n\u0113\f\u0113\16\u0113\u0f84\13\u0113\3\u0113\3\u0113\3\u0113\3\u0113",
    "\3\u0113\3\u0113\3\u0113\3\u0113\7\u0113\u0f8e\n\u0113\f\u0113\16\u0113",
    "\u0f91\13\u0113\3\u0113\3\u0113\5\u0113\u0f95\n\u0113\3\u0113\3\u0113",
    "\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114",
    "\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114",
    "\5\u0114\u0fab\n\u0114\3\u0115\3\u0115\5\u0115\u0faf\n\u0115\3\u0116",
    "\5\u0116\u0fb2\n\u0116\3\u0116\3\u0116\3\u0116\6\u0116\u0fb7\n\u0116",
    "\r\u0116\16\u0116\u0fb8\3\u0116\5\u0116\u0fbc\n\u0116\3\u0116\3\u0116",
    "\5\u0116\u0fc0\n\u0116\3\u0116\5\u0116\u0fc3\n\u0116\3\u0117\3\u0117",
    "\3\u0117\3\u0117\3\u0117\5\u0117\u0fca\n\u0117\3\u0118\5\u0118\u0fcd",
    "\n\u0118\3\u0118\3\u0118\6\u0118\u0fd1\n\u0118\r\u0118\16\u0118\u0fd2",
    "\3\u0118\5\u0118\u0fd6\n\u0118\3\u0118\3\u0118\5\u0118\u0fda\n\u0118",
    "\3\u0118\5\u0118\u0fdd\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119",
    "\5\u0119\u0fe4\n\u0119\3\u011a\3\u011a\3\u011a\5\u011a\u0fe9\n\u011a",
    "\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b",
    "\3\u011b\7\u011b\u0ff5\n\u011b\f\u011b\16\u011b\u0ff8\13\u011b\3\u011b",
    "\3\u011b\3\u011b\5\u011b\u0ffd\n\u011b\5\u011b\u0fff\n\u011b\3\u011c",
    "\3\u011c\5\u011c\u1003\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\7\u011d",
    "\u1009\n\u011d\f\u011d\16\u011d\u100c\13\u011d\3\u011e\3\u011e\3\u011e",
    "\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1017\n\u011e",
    "\3\u011f\3\u011f\3\u011f\5\u011f\u101c\n\u011f\3\u011f\3\u011f\3\u011f",
    "\5\u011f\u1021\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1027",
    "\n\u011f\3\u011f\5\u011f\u102a\n\u011f\3\u011f\3\u011f\5\u011f\u102e",
    "\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f",
    "\5\u011f\u1038\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f",
    "\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f",
    "\u1048\n\u011f\3\u011f\3\u011f\5\u011f\u104c\n\u011f\3\u011f\3\u011f",
    "\3\u011f\3\u011f\3\u011f\6\u011f\u1053\n\u011f\r\u011f\16\u011f\u1054",
    "\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u105b\n\u011f\3\u011f\3\u011f",
    "\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f",
    "\3\u011f\5\u011f\u1069\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f",
    "\3\u011f\3\u011f\7\u011f\u1072\n\u011f\f\u011f\16\u011f\u1075\13\u011f",
    "\3\u011f\5\u011f\u1078\n\u011f\3\u011f\5\u011f\u107b\n\u011f\3\u011f",
    "\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1084\n\u011f",
    "\3\u011f\3\u011f\7\u011f\u1088\n\u011f\f\u011f\16\u011f\u108b\13\u011f",
    "\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1094",
    "\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u109c",
    "\n\u011f\3\u011f\5\u011f\u109f\n\u011f\3\u011f\5\u011f\u10a2\n\u011f",
    "\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u10ab",
    "\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u10b0\n\u011f\3\u011f\3\u011f",
    "\3\u011f\3\u011f\3\u011f\7\u011f\u10b7\n\u011f\f\u011f\16\u011f\u10ba",
    "\13\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u10bf\n\u011f\3\u011f\3\u011f",
    "\3\u011f\5\u011f\u10c4\n\u011f\3\u011f\5\u011f\u10c7\n\u011f\3\u011f",
    "\3\u011f\3\u011f\5\u011f\u10cc\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f",
    "\u10d1\n\u011f\7\u011f\u10d3\n\u011f\f\u011f\16\u011f\u10d6\13\u011f",
    "\3\u011f\3\u011f\3\u011f\5\u011f\u10db\n\u011f\3\u011f\3\u011f\3\u011f",
    "\3\u011f\5\u011f\u10e1\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f",
    "\3\u011f\3\u011f\5\u011f\u10ea\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f",
    "\u10ef\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f",
    "\u10f7\n\u011f\3\u011f\3\u011f\5\u011f\u10fb\n\u011f\3\u011f\3\u011f",
    "\3\u011f\5\u011f\u1100\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f",
    "\u1106\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u110d",
    "\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1112\n\u011f\3\u011f\3\u011f",
    "\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u111a\n\u011f\3\u011f\3\u011f",
    "\3\u011f\5\u011f\u111f\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f",
    "\3\u011f\5\u011f\u1127\n\u011f\3\u011f\5\u011f\u112a\n\u011f\3\u011f",
    "\5\u011f\u112d\n\u011f\3\u011f\5\u011f\u1130\n\u011f\3\u011f\3\u011f",
    "\5\u011f\u1134\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1139\n\u011f",
    "\3\u011f\3\u011f\3\u011f\5\u011f\u113e\n\u011f\3\u011f\3\u011f\5\u011f",
    "\u1142\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1149",
    "\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u114e\n\u011f\5\u011f\u1150",
    "\n\u011f\3\u0120\3\u0120\3\u0121\3\u0121\3\u0122\3\u0122\3\u0123\3\u0123",
    "\3\u0123\5\u0123\u115b\n\u0123\3\u0123\3\u0123\5\u0123\u115f\n\u0123",
    "\5\u0123\u1161\n\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\3\u0124",
    "\3\u0124\3\u0124\3\u0124\5\u0124\u116c\n\u0124\3\u0125\3\u0125\3\u0126",
    "\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1177\n\u0126",
    "\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\7\u0127\u117e\n\u0127\f\u0127",
    "\16\u0127\u1181\13\u0127\5\u0127\u1183\n\u0127\3\u0128\3\u0128\5\u0128",
    "\u1187\n\u0128\3\u0128\5\u0128\u118a\n\u0128\3\u0128\3\u0128\5\u0128",
    "\u118e\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a",
    "\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u119b\n\u012a\3\u012b\3\u012b",
    "\3\u012b\5\u012b\u11a0\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\7\u012b",
    "\u11a6\n\u012b\f\u012b\16\u012b\u11a9\13\u012b\3\u012b\3\u012b\3\u012b",
    "\3\u012b\5\u012b\u11af\n\u012b\3\u012c\3\u012c\3\u012c\5\u012c\u11b4",
    "\n\u012c\3\u012c\3\u012c\5\u012c\u11b8\n\u012c\3\u012c\3\u012c\3\u012c",
    "\5\u012c\u11bd\n\u012c\3\u012d\3\u012d\3\u012d\5\u012d\u11c2\n\u012d",
    "\3\u012d\5\u012d\u11c5\n\u012d\3\u012d\3\u012d\3\u012d\7\u012d\u11ca",
    "\n\u012d\f\u012d\16\u012d\u11cd\13\u012d\3\u012d\3\u012d\3\u012e\3\u012e",
    "\3\u012e\3\u012e\3\u012e\5\u012e\u11d6\n\u012e\3\u012e\3\u012e\3\u012e",
    "\3\u012e\7\u012e\u11dc\n\u012e\f\u012e\16\u012e\u11df\13\u012e\3\u012e",
    "\5\u012e\u11e2\n\u012e\3\u012e\3\u012e\3\u012f\3\u012f\3\u012f\3\u012f",
    "\3\u012f\3\u012f\5\u012f\u11ec\n\u012f\3\u012f\5\u012f\u11ef\n\u012f",
    "\5\u012f\u11f1\n\u012f\3\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131",
    "\3\u0131\3\u0131\5\u0131\u11fb\n\u0131\5\u0131\u11fd\n\u0131\3\u0132",
    "\3\u0132\3\u0132\3\u0132\5\u0132\u1203\n\u0132\3\u0133\3\u0133\3\u0133",
    "\3\u0133\5\u0133\u1209\n\u0133\5\u0133\u120b\n\u0133\3\u0134\3\u0134",
    "\3\u0134\3\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136",
    "\3\u0136\5\u0136\u1219\n\u0136\5\u0136\u121b\n\u0136\3\u0137\3\u0137",
    "\3\u0137\3\u0137\3\u0137\5\u0137\u1222\n\u0137\3\u0137\5\u0137\u1225",
    "\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138",
    "\u122e\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139",
    "\5\u0139\u1237\n\u0139\3\u013a\3\u013a\3\u013b\3\u013b\3\u013c\3\u013c",
    "\5\u013c\u123f\n\u013c\3\u013c\3\u013c\3\u013d\5\u013d\u1244\n\u013d",
    "\3\u013d\3\u013d\5\u013d\u1248\n\u013d\3\u013d\5\u013d\u124b\n\u013d",
    "\3\u013e\3\u013e\5\u013e\u124f\n\u013e\3\u013f\3\u013f\3\u0140\3\u0140",
    "\3\u0140\5\u0140\u1256\n\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0142",
    "\3\u0142\3\u0142\3\u0142\7\u0142\u1260\n\u0142\f\u0142\16\u0142\u1263",
    "\13\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\7\u0142\u126b",
    "\n\u0142\f\u0142\16\u0142\u126e\13\u0142\5\u0142\u1270\n\u0142\3\u0143",
    "\3\u0143\5\u0143\u1274\n\u0143\3\u0144\3\u0144\3\u0145\3\u0145\3\u0146",
    "\3\u0146\3\u0147\3\u0147\3\u0148\3\u0148\3\u0149\3\u0149\3\u014a\3\u014a",
    "\3\u014a\7\u014a\u1285\n\u014a\f\u014a\16\u014a\u1288\13\u014a\3\u014a",
    "\3\u014a\5\u014a\u128c\n\u014a\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c",
    "\5\u014c\u1293\n\u014c\3\u014d\3\u014d\3\u014e\3\u014e\3\u014f\3\u014f",
    "\3\u0150\3\u0150\3\u0150\7\u0150\u129e\n\u0150\f\u0150\16\u0150\u12a1",
    "\13\u0150\3\u0151\3\u0151\3\u0152\3\u0152\3\u0152\7\u0152\u12a8\n\u0152",
    "\f\u0152\16\u0152\u12ab\13\u0152\3\u0152\3\u0152\5\u0152\u12af\n\u0152",
    "\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154\7\u0154\u12b6\n\u0154\f\u0154",
    "\16\u0154\u12b9\13\u0154\3\u0155\3\u0155\3\u0155\7\u0155\u12be\n\u0155",
    "\f\u0155\16\u0155\u12c1\13\u0155\3\u0156\3\u0156\3\u0156\7\u0156\u12c6",
    "\n\u0156\f\u0156\16\u0156\u12c9\13\u0156\3\u0157\3\u0157\3\u0157\5\u0157",
    "\u12ce\n\u0157\3\u0158\3\u0158\3\u0158\5\u0158\u12d3\n\u0158\3\u0159",
    "\3\u0159\3\u0159\5\u0159\u12d8\n\u0159\3\u015a\3\u015a\5\u015a\u12dc",
    "\n\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u12e1\n\u015a\3\u015a\5\u015a",
    "\u12e4\n\u015a\3\u015b\3\u015b\3\u015c\3\u015c\5\u015c\u12ea\n\u015c",
    "\3\u015d\3\u015d\5\u015d\u12ee\n\u015d\3\u015e\3\u015e\3\u015e\5\u015e",
    "\u12f3\n\u015e\3\u015f\3\u015f\3\u0160\3\u0160\3\u0160\7\u0160\u12fa",
    "\n\u0160\f\u0160\16\u0160\u12fd\13\u0160\3\u0161\3\u0161\3\u0161\5\u0161",
    "\u1302\n\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u1307\n\u0161\3\u0162",
    "\3\u0162\3\u0162\7\u0162\u130c\n\u0162\f\u0162\16\u0162\u130f\13\u0162",
    "\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1318",
    "\n\u0163\3\u0164\3\u0164\5\u0164\u131c\n\u0164\3\u0164\3\u0164\7\u0164",
    "\u1320\n\u0164\f\u0164\16\u0164\u1323\13\u0164\3\u0164\3\u0164\5\u0164",
    "\u1327\n\u0164\3\u0165\3\u0165\3\u0165\5\u0165\u132c\n\u0165\5\u0165",
    "\u132e\n\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u1333\n\u0165\7\u0165",
    "\u1335\n\u0165\f\u0165\16\u0165\u1338\13\u0165\3\u0165\3\u0165\5\u0165",
    "\u133c\n\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\5\u0166\u1343",
    "\n\u0166\3\u0166\3\u0166\3\u0166\5\u0166\u1348\n\u0166\5\u0166\u134a",
    "\n\u0166\5\u0166\u134c\n\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166",
    "\3\u0166\3\u0166\3\u0166\5\u0166\u1356\n\u0166\3\u0166\3\u0166\3\u0166",
    "\5\u0166\u135b\n\u0166\7\u0166\u135d\n\u0166\f\u0166\16\u0166\u1360",
    "\13\u0166\5\u0166\u1362\n\u0166\3\u0166\3\u0166\5\u0166\u1366\n\u0166",
    "\3\u0167\3\u0167\3\u0167\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u136f",
    "\n\u0168\3\u0168\3\u0168\3\u0169\3\u0169\5\u0169\u1375\n\u0169\3\u0169",
    "\3\u0169\5\u0169\u1379\n\u0169\5\u0169\u137b\n\u0169\3\u016a\3\u016a",
    "\5\u016a\u137f\n\u016a\3\u016a\3\u016a\5\u016a\u1383\n\u016a\3\u016a",
    "\3\u016a\5\u016a\u1387\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a",
    "\3\u016a\5\u016a\u138f\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a",
    "\3\u016a\5\u016a\u1397\n\u016a\5\u016a\u1399\n\u016a\3\u016b\3\u016b",
    "\3\u016b\3\u016b\5\u016b\u139f\n\u016b\3\u016b\5\u016b\u13a2\n\u016b",
    "\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c",
    "\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c",
    "\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u13ba\n\u016c\3\u016c\3\u016c",
    "\3\u016c\3\u016c\3\u016c\5\u016c\u13c1\n\u016c\3\u016c\3\u016c\3\u016c",
    "\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c",
    "\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c",
    "\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c",
    "\3\u016c\5\u016c\u13e2\n\u016c\3\u016d\3\u016d\3\u016d\5\u016d\u13e7",
    "\n\u016d\3\u016d\5\u016d\u13ea\n\u016d\3\u016d\3\u016d\3\u016d\5\u016d",
    "\u13ef\n\u016d\5\u016d\u13f1\n\u016d\3\u016d\3\u016d\7\u016d\u13f5\n",
    "\u016d\f\u016d\16\u016d\u13f8\13\u016d\3\u016e\3\u016e\3\u016e\7\u016e",
    "\u13fd\n\u016e\f\u016e\16\u016e\u1400\13\u016e\3\u016f\3\u016f\5\u016f",
    "\u1404\n\u016f\3\u016f\3\u016f\3\u016f\7\u016f\u1409\n\u016f\f\u016f",
    "\16\u016f\u140c\13\u016f\3\u016f\5\u016f\u140f\n\u016f\3\u0170\3\u0170",
    "\5\u0170\u1413\n\u0170\3\u0170\3\u0170\3\u0170\7\u0170\u1418\n\u0170",
    "\f\u0170\16\u0170\u141b\13\u0170\3\u0171\3\u0171\3\u0171\5\u0171\u1420",
    "\n\u0171\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u1426\n\u0171\3\u0171",
    "\3\u0171\3\u0171\3\u0171\5\u0171\u142c\n\u0171\3\u0171\3\u0171\3\u0171",
    "\3\u0171\5\u0171\u1432\n\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u1437",
    "\n\u0171\5\u0171\u1439\n\u0171\3\u0171\5\u0171\u143c\n\u0171\3\u0171",
    "\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u1446",
    "\n\u0171\3\u0171\5\u0171\u1449\n\u0171\5\u0171\u144b\n\u0171\5\u0171",
    "\u144d\n\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171",
    "\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u145b\n\u0171\3\u0172",
    "\3\u0172\3\u0173\3\u0173\3\u0174\3\u0174\5\u0174\u1463\n\u0174\3\u0174",
    "\3\u0174\3\u0175\3\u0175\5\u0175\u1469\n\u0175\3\u0176\3\u0176\3\u0176",
    "\3\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u1472\n\u0176\3\u0177\3\u0177",
    "\3\u0177\5\u0177\u1477\n\u0177\3\u0178\3\u0178\3\u0178\5\u0178\u147c",
    "\n\u0178\3\u0179\3\u0179\3\u0179\5\u0179\u1481\n\u0179\3\u017a\3\u017a",
    "\3\u017a\3\u017a\3\u017b\3\u017b\3\u017b\2\2\u017c\2\4\6\b\n\f\16\20",
    "\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdf",
    "hjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2",
    "\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da",
    "\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2",
    "\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a",
    "\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122",
    "\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a",
    "\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152",
    "\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a",
    "\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182",
    "\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a",
    "\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2",
    "\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca",
    "\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2",
    "\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa",
    "\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212",
    "\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a",
    "\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242",
    "\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a",
    "\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272",
    "\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a",
    "\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2",
    "\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba",
    "\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2",
    "\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea",
    "\u02ec\u02ee\u02f0\u02f2\u02f4\2R\3\2\u01f6\u01f6\4\2\17\17\u00bb\u00bb",
    "\4\2\b\b\u011c\u011c\4\2\u009e\u009e\u0129\u0129\4\288\u010c\u010c\5",
    "\2##\u0113\u0113\u0166\u0166\4\2mmyy\4\2\6\6\32\32\5\2hh\u00b2\u00b2",
    "\u0194\u0194\5\2\u00ee\u00ee\u0105\u0105\u0116\u0116\4\2\u0096\u0096",
    "\u019a\u019a\4\2##\u0166\u0166\4\2\5\5rr\5\2\5\5rr\u00e2\u00e2\5\2U",
    "U\u010b\u010b\u0167\u0167\4\2\u00d6\u00d6\u010c\u010c\4\2\u00da\u00da",
    "\u016e\u016e\5\2\u008e\u008e\u00b3\u00b3\u0112\u0112\4\2SSgg\6\2\u00a5",
    "\u00a5\u00b1\u00b1\u00f2\u00f2\u010f\u010f\4\2dd\u01f3\u01f3\3\2\u011a",
    "\u011b\3\3\u01f6\u01f6\3\2\u0139\u013a\4\2\u0107\u0107\u01ae\u01ae\3",
    "\2DE\4\2ff\u00a4\u00a4\4\2\u00fb\u00fb\u01a4\u01a4\4\2\31\31\u00a4\u00a4",
    "\4\2&&ii\5\2\t\too\u0190\u0190\4\2PP\u00e7\u00e7\5\2\u0098\u0098\u00c5",
    "\u00c5\u013e\u013e\4\2\u014a\u014a\u017b\u017b\5\2\u014a\u014a\u0164",
    "\u0164\u017b\u017b\4\2\u0083\u0083\u00a6\u00a6\4\2QQ\u0140\u0140\4\2",
    "\u00a3\u00a3\u00c0\u00c0\4\2\t\t\u0195\u0195\4\2\27\27\u0152\u0152\4",
    "\2\20\20jj\4\2\u008f\u008f\u00c2\u00c2\4\2\t\t\u008f\u008f\3\2\u0177",
    "\u0178\4\2\u00da\u00da\u0171\u0171\3\2\u00c8\u00cb\3\2\u01ee\u01ef\4",
    "\2\u01ed\u01ed\u01f1\u01f1\4\2cc\u00a8\u00a8\6\2\t\t\r\r\u0086\u0086",
    "\u0165\u0165\4\2\60\60\u01b2\u01b2\4\2oo\u0190\u0190\4\2-->>\4\2\u0090",
    "\u0090\u00c3\u00c3\4\2\62\62\u00eb\u00eb\5\2%%\u00c4\u00c4\u0184\u0184",
    "\4\2\u01b3\u01b3\u01b6\u01b6\4\2||\u00f4\u00f4\4\2\177\177\u00e5\u00e5",
    "\4\2GGpp\4\2\u00a0\u00a0\u015b\u015b\3\2\u01cf\u01de\3\2\u01c8\u01ce",
    "\3\2\u01c2\u01c7\4\2\u0129\u0129\u0143\u0143\4\2\u0092\u0092\u0123\u0123",
    "\4\2\u00f9\u00f9\u0149\u0149\4\2\u010e\u010e\u0168\u0168\5\2\u008b\u008b",
    "\u0175\u0175\u01a5\u01a5\4\2<<\u013f\u013f\5\2<<\u00f7\u00f7\u013f\u013f",
    "\4\2\u0117\u0117\u0172\u0172\4\2\u00a3\u00a3\u0135\u0135\4\2ZZ\u01be",
    "\u01be\4\2\u00e3\u00e3\u014c\u014c\4\2))\61\61\6\2ZZ\u00a1\u00a1\u00dd",
    "\u00dd\u014c\u014c\3\2\u01e4\u01e5\4\2\u01df\u01df\u01e6\u01e6G\2\4",
    "\b\13\13\16\16\21\32\35%\'\')*,.\60\63\65@CNPQSXZ`bcegknpqsuxz|\u0083",
    "\u0085\u0085\u0087\u008b\u008e\u0093\u0095\u0096\u0098\u0099\u009d\u009e",
    "\u00a0\u00a1\u00a3\u00a4\u00a6\u00a9\u00ab\u00b1\u00b3\u00b6\u00b8\u00b8",
    "\u00ba\u00ba\u00bc\u00c7\u00c9\u00cd\u00cf\u00db\u00dd\u00df\u00e1\u00f0",
    "\u00f2\u00f4\u00f7\u00f7\u00f9\u00f9\u00fd\u0101\u0103\u0105\u0107\u0108",
    "\u010b\u010b\u010d\u0119\u011c\u011c\u011e\u0125\u0128\u013c\u013e\u014a",
    "\u014c\u014e\u0150\u0150\u0152\u0159\u015b\u0160\u0162\u0169\u016b\u0176",
    "\u017a\u0182\u0184\u0189\u018b\u018e\u0191\u0191\u0193\u0193\u0195\u0198",
    "\u019a\u019b\u019d\u01a6\u01a8\u01a8\u01aa\u01aa\u01ac\u01de\u0265\u0265",
    "\u16d4\2\u02f7\3\2\2\2\4\u02fe\3\2\2\2\6\u0307\3\2\2\2\b\u031f\3\2\2",
    "\2\n\u0321\3\2\2\2\f\u0326\3\2\2\2\16\u033e\3\2\2\2\20\u0372\3\2\2\2",
    "\22\u0376\3\2\2\2\24\u038e\3\2\2\2\26\u0392\3\2\2\2\30\u039e\3\2\2\2",
    "\32\u03ac\3\2\2\2\34\u03b4\3\2\2\2\36\u03ca\3\2\2\2 \u03d6\3\2\2\2\"",
    "\u03e7\3\2\2\2$\u03fe\3\2\2\2&\u0400\3\2\2\2(\u0411\3\2\2\2*\u042c\3",
    "\2\2\2,\u042e\3\2\2\2.\u0433\3\2\2\2\60\u044b\3\2\2\2\62\u0470\3\2\2",
    "\2\64\u0475\3\2\2\2\66\u048e\3\2\2\28\u04a6\3\2\2\2:\u04af\3\2\2\2<",
    "\u04b8\3\2\2\2>\u04c1\3\2\2\2@\u04c5\3\2\2\2B\u04ca\3\2\2\2D\u04e2\3",
    "\2\2\2F\u04e4\3\2\2\2H\u04e8\3\2\2\2J\u051c\3\2\2\2L\u0538\3\2\2\2N",
    "\u053a\3\2\2\2P\u0548\3\2\2\2R\u0554\3\2\2\2T\u0559\3\2\2\2V\u055f\3",
    "\2\2\2X\u0562\3\2\2\2Z\u056d\3\2\2\2\\\u057c\3\2\2\2^\u058d\3\2\2\2",
    "`\u059e\3\2\2\2b\u05a6\3\2\2\2d\u05ab\3\2\2\2f\u05bb\3\2\2\2h\u05bf",
    "\3\2\2\2j\u05d7\3\2\2\2l\u05da\3\2\2\2n\u05e0\3\2\2\2p\u05ec\3\2\2\2",
    "r\u05f5\3\2\2\2t\u0611\3\2\2\2v\u0617\3\2\2\2x\u061a\3\2\2\2z\u0621",
    "\3\2\2\2|\u0629\3\2\2\2~\u0638\3\2\2\2\u0080\u063a\3\2\2\2\u0082\u063e",
    "\3\2\2\2\u0084\u0644\3\2\2\2\u0086\u0660\3\2\2\2\u0088\u0682\3\2\2\2",
    "\u008a\u06b2\3\2\2\2\u008c\u06bc\3\2\2\2\u008e\u06be\3\2\2\2\u0090\u06c3",
    "\3\2\2\2\u0092\u06d1\3\2\2\2\u0094\u06d3\3\2\2\2\u0096\u06d8\3\2\2\2",
    "\u0098\u06e8\3\2\2\2\u009a\u0709\3\2\2\2\u009c\u072c\3\2\2\2\u009e\u0730",
    "\3\2\2\2\u00a0\u073f\3\2\2\2\u00a2\u0741\3\2\2\2\u00a4\u0744\3\2\2\2",
    "\u00a6\u0749\3\2\2\2\u00a8\u0753\3\2\2\2\u00aa\u076f\3\2\2\2\u00ac\u0771",
    "\3\2\2\2\u00ae\u0775\3\2\2\2\u00b0\u0778\3\2\2\2\u00b2\u077c\3\2\2\2",
    "\u00b4\u0781\3\2\2\2\u00b6\u0785\3\2\2\2\u00b8\u0796\3\2\2\2\u00ba\u07a3",
    "\3\2\2\2\u00bc\u07b4\3\2\2\2\u00be\u07c1\3\2\2\2\u00c0\u07cd\3\2\2\2",
    "\u00c2\u07cf\3\2\2\2\u00c4\u07dd\3\2\2\2\u00c6\u07ee\3\2\2\2\u00c8\u0807",
    "\3\2\2\2\u00ca\u0811\3\2\2\2\u00cc\u0815\3\2\2\2\u00ce\u083a\3\2\2\2",
    "\u00d0\u083c\3\2\2\2\u00d2\u0855\3\2\2\2\u00d4\u0860\3\2\2\2\u00d6\u0867",
    "\3\2\2\2\u00d8\u086b\3\2\2\2\u00da\u087d\3\2\2\2\u00dc\u0885\3\2\2\2",
    "\u00de\u0890\3\2\2\2\u00e0\u0897\3\2\2\2\u00e2\u089b\3\2\2\2\u00e4\u08b8",
    "\3\2\2\2\u00e6\u08bc\3\2\2\2\u00e8\u08c1\3\2\2\2\u00ea\u08c9\3\2\2\2",
    "\u00ec\u08d1\3\2\2\2\u00ee\u08d4\3\2\2\2\u00f0\u08e4\3\2\2\2\u00f2\u08e9",
    "\3\2\2\2\u00f4\u08ed\3\2\2\2\u00f6\u0911\3\2\2\2\u00f8\u0913\3\2\2\2",
    "\u00fa\u0929\3\2\2\2\u00fc\u092b\3\2\2\2\u00fe\u0930\3\2\2\2\u0100\u0932",
    "\3\2\2\2\u0102\u0934\3\2\2\2\u0104\u0936\3\2\2\2\u0106\u093a\3\2\2\2",
    "\u0108\u093f\3\2\2\2\u010a\u0945\3\2\2\2\u010c\u094e\3\2\2\2\u010e\u0954",
    "\3\2\2\2\u0110\u0968\3\2\2\2\u0112\u096d\3\2\2\2\u0114\u097a\3\2\2\2",
    "\u0116\u097c\3\2\2\2\u0118\u098a\3\2\2\2\u011a\u0994\3\2\2\2\u011c\u099a",
    "\3\2\2\2\u011e\u099c\3\2\2\2\u0120\u099f\3\2\2\2\u0122\u09a4\3\2\2\2",
    "\u0124\u09bc\3\2\2\2\u0126\u09cb\3\2\2\2\u0128\u09cd\3\2\2\2\u012a\u09e2",
    "\3\2\2\2\u012c\u09f1\3\2\2\2\u012e\u0a07\3\2\2\2\u0130\u0a0e\3\2\2\2",
    "\u0132\u0a1b\3\2\2\2\u0134\u0a1e\3\2\2\2\u0136\u0a33\3\2\2\2\u0138\u0a3d",
    "\3\2\2\2\u013a\u0a46\3\2\2\2\u013c\u0a61\3\2\2\2\u013e\u0a8c\3\2\2\2",
    "\u0140\u0a9c\3\2\2\2\u0142\u0aa9\3\2\2\2\u0144\u0ab2\3\2\2\2\u0146\u0ab4",
    "\3\2\2\2\u0148\u0ad3\3\2\2\2\u014a\u0ad7\3\2\2\2\u014c\u0adf\3\2\2\2",
    "\u014e\u0ae1\3\2\2\2\u0150\u0ae9\3\2\2\2\u0152\u0b10\3\2\2\2\u0154\u0b1c",
    "\3\2\2\2\u0156\u0b31\3\2\2\2\u0158\u0b34\3\2\2\2\u015a\u0b40\3\2\2\2",
    "\u015c\u0b44\3\2\2\2\u015e\u0b5d\3\2\2\2\u0160\u0b5f\3\2\2\2\u0162\u0b70",
    "\3\2\2\2\u0164\u0b77\3\2\2\2\u0166\u0b86\3\2\2\2\u0168\u0b9d\3\2\2\2",
    "\u016a\u0ba3\3\2\2\2\u016c\u0ba5\3\2\2\2\u016e\u0bbd\3\2\2\2\u0170\u0bd5",
    "\3\2\2\2\u0172\u0bf9\3\2\2\2\u0174\u0bfb\3\2\2\2\u0176\u0c19\3\2\2\2",
    "\u0178\u0c1e\3\2\2\2\u017a\u0c20\3\2\2\2\u017c\u0c2c\3\2\2\2\u017e\u0c3c",
    "\3\2\2\2\u0180\u0c3e\3\2\2\2\u0182\u0c41\3\2\2\2\u0184\u0c5b\3\2\2\2",
    "\u0186\u0c5d\3\2\2\2\u0188\u0c61\3\2\2\2\u018a\u0c70\3\2\2\2\u018c\u0c7c",
    "\3\2\2\2\u018e\u0c84\3\2\2\2\u0190\u0c88\3\2\2\2\u0192\u0c93\3\2\2\2",
    "\u0194\u0c98\3\2\2\2\u0196\u0ca5\3\2\2\2\u0198\u0cb9\3\2\2\2\u019a\u0cc2",
    "\3\2\2\2\u019c\u0cc4\3\2\2\2\u019e\u0ccb\3\2\2\2\u01a0\u0cd0\3\2\2\2",
    "\u01a2\u0cdd\3\2\2\2\u01a4\u0ce5\3\2\2\2\u01a6\u0ced\3\2\2\2\u01a8\u0cfb",
    "\3\2\2\2\u01aa\u0cfd\3\2\2\2\u01ac\u0d09\3\2\2\2\u01ae\u0d2c\3\2\2\2",
    "\u01b0\u0d2e\3\2\2\2\u01b2\u0d3c\3\2\2\2\u01b4\u0d41\3\2\2\2\u01b6\u0d53",
    "\3\2\2\2\u01b8\u0d57\3\2\2\2\u01ba\u0d5f\3\2\2\2\u01bc\u0d69\3\2\2\2",
    "\u01be\u0d71\3\2\2\2\u01c0\u0d77\3\2\2\2\u01c2\u0d86\3\2\2\2\u01c4\u0d89",
    "\3\2\2\2\u01c6\u0da2\3\2\2\2\u01c8\u0db5\3\2\2\2\u01ca\u0db9\3\2\2\2",
    "\u01cc\u0dbc\3\2\2\2\u01ce\u0dd8\3\2\2\2\u01d0\u0ddd\3\2\2\2\u01d2\u0df0",
    "\3\2\2\2\u01d4\u0df2\3\2\2\2\u01d6\u0e02\3\2\2\2\u01d8\u0e0a\3\2\2\2",
    "\u01da\u0e0f\3\2\2\2\u01dc\u0e1a\3\2\2\2\u01de\u0e25\3\2\2\2\u01e0\u0e28",
    "\3\2\2\2\u01e2\u0e3a\3\2\2\2\u01e4\u0e3c\3\2\2\2\u01e6\u0e4b\3\2\2\2",
    "\u01e8\u0e56\3\2\2\2\u01ea\u0e64\3\2\2\2\u01ec\u0e69\3\2\2\2\u01ee\u0e6e",
    "\3\2\2\2\u01f0\u0e7b\3\2\2\2\u01f2\u0e7d\3\2\2\2\u01f4\u0e88\3\2\2\2",
    "\u01f6\u0e8a\3\2\2\2\u01f8\u0e8c\3\2\2\2\u01fa\u0e97\3\2\2\2\u01fc\u0e99",
    "\3\2\2\2\u01fe\u0ebe\3\2\2\2\u0200\u0ec7\3\2\2\2\u0202\u0ec9\3\2\2\2",
    "\u0204\u0ed8\3\2\2\2\u0206\u0ee9\3\2\2\2\u0208\u0eeb\3\2\2\2\u020a\u0f00",
    "\3\2\2\2\u020c\u0f02\3\2\2\2\u020e\u0f06\3\2\2\2\u0210\u0f0f\3\2\2\2",
    "\u0212\u0f11\3\2\2\2\u0214\u0f19\3\2\2\2\u0216\u0f21\3\2\2\2\u0218\u0f44",
    "\3\2\2\2\u021a\u0f46\3\2\2\2\u021c\u0f64\3\2\2\2\u021e\u0f66\3\2\2\2",
    "\u0220\u0f76\3\2\2\2\u0222\u0f79\3\2\2\2\u0224\u0f7b\3\2\2\2\u0226\u0faa",
    "\3\2\2\2\u0228\u0fae\3\2\2\2\u022a\u0fb1\3\2\2\2\u022c\u0fc4\3\2\2\2",
    "\u022e\u0fcc\3\2\2\2\u0230\u0fde\3\2\2\2\u0232\u0fe5\3\2\2\2\u0234\u0ffe",
    "\3\2\2\2\u0236\u1000\3\2\2\2\u0238\u1004\3\2\2\2\u023a\u100d\3\2\2\2",
    "\u023c\u114f\3\2\2\2\u023e\u1151\3\2\2\2\u0240\u1153\3\2\2\2\u0242\u1155",
    "\3\2\2\2\u0244\u1157\3\2\2\2\u0246\u1164\3\2\2\2\u0248\u116d\3\2\2\2",
    "\u024a\u1176\3\2\2\2\u024c\u1178\3\2\2\2\u024e\u1189\3\2\2\2\u0250\u118f",
    "\3\2\2\2\u0252\u119a\3\2\2\2\u0254\u119c\3\2\2\2\u0256\u11b0\3\2\2\2",
    "\u0258\u11be\3\2\2\2\u025a\u11d0\3\2\2\2\u025c\u11e5\3\2\2\2\u025e\u11f2",
    "\3\2\2\2\u0260\u11f5\3\2\2\2\u0262\u11fe\3\2\2\2\u0264\u1204\3\2\2\2",
    "\u0266\u120c\3\2\2\2\u0268\u120f\3\2\2\2\u026a\u121a\3\2\2\2\u026c\u1221",
    "\3\2\2\2\u026e\u1226\3\2\2\2\u0270\u122f\3\2\2\2\u0272\u1238\3\2\2\2",
    "\u0274\u123a\3\2\2\2\u0276\u123c\3\2\2\2\u0278\u124a\3\2\2\2\u027a\u124e",
    "\3\2\2\2\u027c\u1250\3\2\2\2\u027e\u1252\3\2\2\2\u0280\u1257\3\2\2\2",
    "\u0282\u126f\3\2\2\2\u0284\u1273\3\2\2\2\u0286\u1275\3\2\2\2\u0288\u1277",
    "\3\2\2\2\u028a\u1279\3\2\2\2\u028c\u127b\3\2\2\2\u028e\u127d\3\2\2\2",
    "\u0290\u127f\3\2\2\2\u0292\u1281\3\2\2\2\u0294\u128d\3\2\2\2\u0296\u128f",
    "\3\2\2\2\u0298\u1294\3\2\2\2\u029a\u1296\3\2\2\2\u029c\u1298\3\2\2\2",
    "\u029e\u129a\3\2\2\2\u02a0\u12a2\3\2\2\2\u02a2\u12a4\3\2\2\2\u02a4\u12b0",
    "\3\2\2\2\u02a6\u12b2\3\2\2\2\u02a8\u12ba\3\2\2\2\u02aa\u12c2\3\2\2\2",
    "\u02ac\u12ca\3\2\2\2\u02ae\u12cf\3\2\2\2\u02b0\u12d4\3\2\2\2\u02b2\u12e3",
    "\3\2\2\2\u02b4\u12e5\3\2\2\2\u02b6\u12e9\3\2\2\2\u02b8\u12ed\3\2\2\2",
    "\u02ba\u12ef\3\2\2\2\u02bc\u12f4\3\2\2\2\u02be\u12f6\3\2\2\2\u02c0\u12fe",
    "\3\2\2\2\u02c2\u1308\3\2\2\2\u02c4\u1310\3\2\2\2\u02c6\u1319\3\2\2\2",
    "\u02c8\u1328\3\2\2\2\u02ca\u133d\3\2\2\2\u02cc\u1367\3\2\2\2\u02ce\u136e",
    "\3\2\2\2\u02d0\u137a\3\2\2\2\u02d2\u1398\3\2\2\2\u02d4\u139a\3\2\2\2",
    "\u02d6\u13e1\3\2\2\2\u02d8\u13e6\3\2\2\2\u02da\u13f9\3\2\2\2\u02dc\u1403",
    "\3\2\2\2\u02de\u1412\3\2\2\2\u02e0\u145a\3\2\2\2\u02e2\u145c\3\2\2\2",
    "\u02e4\u145e\3\2\2\2\u02e6\u1462\3\2\2\2\u02e8\u1468\3\2\2\2\u02ea\u1471",
    "\3\2\2\2\u02ec\u1476\3\2\2\2\u02ee\u147b\3\2\2\2\u02f0\u1480\3\2\2\2",
    "\u02f2\u1482\3\2\2\2\u02f4\u1486\3\2\2\2\u02f6\u02f8\n\2\2\2\u02f7\u02f6",
    "\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02f7\3\2\2\2\u02f9\u02fa\3\2\2\2",
    "\u02fa\3\3\2\2\2\u02fb\u02fd\5\b\5\2\u02fc\u02fb\3\2\2\2\u02fd\u0300",
    "\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0301\3\2\2\2",
    "\u0300\u02fe\3\2\2\2\u0301\u0302\7\2\2\3\u0302\5\3\2\2\2\u0303\u0306",
    "\5\b\5\2\u0304\u0306\5\u026c\u0137\2\u0305\u0303\3\2\2\2\u0305\u0304",
    "\3\2\2\2\u0306\u0309\3\2\2\2\u0307\u0305\3\2\2\2\u0307\u0308\3\2\2\2",
    "\u0308\u030a\3\2\2\2\u0309\u0307\3\2\2\2\u030a\u030b\7\2\2\3\u030b\7",
    "\3\2\2\2\u030c\u0320\5\f\7\2\u030d\u0320\5\34\17\2\u030e\u0320\5.\30",
    "\2\u030f\u0320\5\u00a6T\2\u0310\u0320\5\64\33\2\u0311\u0320\5Z.\2\u0312",
    "\u0320\5\16\b\2\u0313\u0320\5\60\31\2\u0314\u0320\5\36\20\2\u0315\u0320",
    "\5\u00a8U\2\u0316\u0320\5\66\34\2\u0317\u0320\5n8\2\u0318\u0320\5\n",
    "\6\2\u0319\u0320\5\32\16\2\u031a\u0320\5,\27\2\u031b\u0320\5\u00a4S",
    "\2\u031c\u0320\5\62\32\2\u031d\u0320\5X-\2\u031e\u0320\5\u011a\u008e",
    "\2\u031f\u030c\3\2\2\2\u031f\u030d\3\2\2\2\u031f\u030e\3\2\2\2\u031f",
    "\u030f\3\2\2\2\u031f\u0310\3\2\2\2\u031f\u0311\3\2\2\2\u031f\u0312\3",
    "\2\2\2\u031f\u0313\3\2\2\2\u031f\u0314\3\2\2\2\u031f\u0315\3\2\2\2\u031f",
    "\u0316\3\2\2\2\u031f\u0317\3\2\2\2\u031f\u0318\3\2\2\2\u031f\u0319\3",
    "\2\2\2\u031f\u031a\3\2\2\2\u031f\u031b\3\2\2\2\u031f\u031c\3\2\2\2\u031f",
    "\u031d\3\2\2\2\u031f\u031e\3\2\2\2\u0320\t\3\2\2\2\u0321\u0322\7r\2",
    "\2\u0322\u0323\7\u0099\2\2\u0323\u0324\5\u02ac\u0157\2\u0324\u0325\7",
    "\u01f6\2\2\u0325\13\3\2\2\2\u0326\u0327\7\n\2\2\u0327\u0328\7\u0099",
    "\2\2\u0328\u0329\5\u02ac\u0157\2\u0329\u032b\7?\2\2\u032a\u032c\7^\2",
    "\2\u032b\u032a\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u0330\3\2\2\2\u032d",
    "\u032f\5\u00b0Y\2\u032e\u032d\3\2\2\2\u032f\u0332\3\2\2\2\u0330\u032e",
    "\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0335\3\2\2\2\u0332\u0330\3\2\2\2",
    "\u0333\u0334\7\u013b\2\2\u0334\u0336\7\u0159\2\2\u0335\u0333\3\2\2\2",
    "\u0335\u0336\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u0338\7\u01f6\2\2\u0338",
    "\r\3\2\2\2\u0339\u033c\7O\2\2\u033a\u033b\7\u010a\2\2\u033b\u033d\7",
    "\u0134\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u033f\3\2\2",
    "\2\u033e\u0339\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0340\3\2\2\2\u0340",
    "\u0341\7\u0099\2\2\u0341\u034d\5\u02ac\u0157\2\u0342\u0343\7\u01ea\2",
    "\2\u0343\u0348\5\u00bc_\2\u0344\u0345\7\u01f0\2\2\u0345\u0347\5\u00bc",
    "_\2\u0346\u0344\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0346\3\2\2\2\u0348",
    "\u0349\3\2\2\2\u0349\u034b\3\2\2\2\u034a\u0348\3\2\2\2\u034b\u034c\7",
    "\u01eb\2\2\u034c\u034e\3\2\2\2\u034d\u0342\3\2\2\2\u034d\u034e\3\2\2",
    "\2\u034e\u034f\3\2\2\2\u034f\u0350\7\u0139\2\2\u0350\u0357\5\u02d0\u0169",
    "\2\u0351\u0356\5\u00aeX\2\u0352\u0356\5\20\t\2\u0353\u0356\5\24\13\2",
    "\u0354\u0356\7k\2\2\u0355\u0351\3\2\2\2\u0355\u0352\3\2\2\2\u0355\u0353",
    "\3\2\2\2\u0355\u0354\3\2\2\2\u0356\u0359\3\2\2\2\u0357\u0355\3\2\2\2",
    "\u0357\u0358\3\2\2\2\u0358\u036e\3\2\2\2\u0359\u0357\3\2\2\2\u035a\u035c",
    "\7\u011c\2\2\u035b\u035a\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\3\2",
    "\2\2\u035d\u0369\t\3\2\2\u035e\u0360\7a\2\2\u035f\u035e\3\2\2\2\u035f",
    "\u0360\3\2\2\2\u0360\u0364\3\2\2\2\u0361\u0363\5\u00c0a\2\u0362\u0361",
    "\3\2\2\2\u0363\u0366\3\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2",
    "\u0365\u0367\3\2\2\2\u0366\u0364\3\2\2\2\u0367\u036a\5\u010a\u0086\2",
    "\u0368\u036a\5\u00b2Z\2\u0369\u035f\3\2\2\2\u0369\u0368\3\2\2\2\u036a",
    "\u036f\3\2\2\2\u036b\u036c\t\4\2\2\u036c\u036d\7\u0199\2\2\u036d\u036f",
    "\5\u0296\u014c\2\u036e\u035b\3\2\2\2\u036e\u036b\3\2\2\2\u036f\u0370",
    "\3\2\2\2\u0370\u0371\7\u01f6\2\2\u0371\17\3\2\2\2\u0372\u0374\7\u0114",
    "\2\2\u0373\u0375\5\22\n\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375",
    "\21\3\2\2\2\u0376\u0377\7\u01ea\2\2\u0377\u0378\7\u0117\2\2\u0378\u0379",
    "\5\u01f4\u00fb\2\u0379\u0387\7(\2\2\u037a\u0388\7\r\2\2\u037b\u037c",
    "\t\5\2\2\u037c\u037d\7\u01ea\2\2\u037d\u0382\5\u02be\u0160\2\u037e\u037f",
    "\7\u01f0\2\2\u037f\u0381\5\u02be\u0160\2\u0380\u037e\3\2\2\2\u0381\u0384",
    "\3\2\2\2\u0382\u0380\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0385\3\2\2\2",
    "\u0384\u0382\3\2\2\2\u0385\u0386\7\u01eb\2\2\u0386\u0388\3\2\2\2\u0387",
    "\u037a\3\2\2\2\u0387\u037b\3\2\2\2\u0388\u038a\3\2\2\2\u0389\u038b\5",
    "\30\r\2\u038a\u0389\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038c\3\2\2\2",
    "\u038c\u038d\7\u01eb\2\2\u038d\23\3\2\2\2\u038e\u0390\7\u0138\2\2\u038f",
    "\u0391\5\26\f\2\u0390\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391\25\3\2",
    "\2\2\u0392\u0393\7\u0132\2\2\u0393\u0394\7\u01ea\2\2\u0394\u0399\5\u02c0",
    "\u0161\2\u0395\u0396\7\u01f0\2\2\u0396\u0398\5\u02c0\u0161\2\u0397\u0395",
    "\3\2\2\2\u0398\u039b\3\2\2\2\u0399\u0397\3\2\2\2\u0399\u039a\3\2\2\2",
    "\u039a\u039c\3\2\2\2\u039b\u0399\3\2\2\2\u039c\u039d\7\u01eb\2\2\u039d",
    "\27\3\2\2\2\u039e\u039f\t\6\2\2\u039f\u03a0\5\u01f4\u00fb\2\u03a0\u03a1",
    "\7(\2\2\u03a1\u03a2\7\u01ea\2\2\u03a2\u03a7\5\u02be\u0160\2\u03a3\u03a4",
    "\7\u01f0\2\2\u03a4\u03a6\5\u02be\u0160\2\u03a5\u03a3\3\2\2\2\u03a6\u03a9",
    "\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03aa\3\2\2\2",
    "\u03a9\u03a7\3\2\2\2\u03aa\u03ab\7\u01eb\2\2\u03ab\31\3\2\2\2\u03ac",
    "\u03ad\7r\2\2\u03ad\u03af\7\u0113\2\2\u03ae\u03b0\7#\2\2\u03af\u03ae",
    "\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b2\5\u0294",
    "\u014b\2\u03b2\u03b3\7\u01f6\2\2\u03b3\33\3\2\2\2\u03b4\u03b5\7\n\2",
    "\2\u03b5\u03b6\7\u0113\2\2\u03b6\u03b7\5\u0294\u014b\2\u03b7\u03b9\7",
    "?\2\2\u03b8\u03ba\7^\2\2\u03b9\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba",
    "\u03bc\3\2\2\2\u03bb\u03bd\t\7\2\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3",
    "\2\2\2\u03bd\u03c1\3\2\2\2\u03be\u03c0\5\u00b0Y\2\u03bf\u03be\3\2\2",
    "\2\u03c0\u03c3\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2",
    "\u03c6\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c4\u03c5\7\u013b\2\2\u03c5\u03c7",
    "\7\u0159\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c8\3\2",
    "\2\2\u03c8\u03c9\7\u01f6\2\2\u03c9\35\3\2\2\2\u03ca\u03cd\7O\2\2\u03cb",
    "\u03cc\7\u010a\2\2\u03cc\u03ce\7\u0134\2\2\u03cd\u03cb\3\2\2\2\u03cd",
    "\u03ce\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d2\7\u0113\2\2\u03d0\u03d3",
    "\5\"\22\2\u03d1\u03d3\5 \21\2\u03d2\u03d0\3\2\2\2\u03d2\u03d1\3\2\2",
    "\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d5\7\u01f6\2\2\u03d5",
    "\37\3\2\2\2\u03d6\u03d7\7#\2\2\u03d7\u03d8\5\u0294\u014b\2\u03d8\u03dc",
    "\t\3\2\2\u03d9\u03db\5*\26\2\u03da\u03d9\3\2\2\2\u03db\u03de\3\2\2\2",
    "\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03e5\3\2\2\2\u03de\u03dc",
    "\3\2\2\2\u03df\u03e0\7\33\2\2\u03e0\u03e6\5\u00e0q\2\u03e1\u03e3\7{",
    "\2\2\u03e2\u03e4\5\u0294\u014b\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4\3\2",
    "\2\2\u03e4\u03e6\3\2\2\2\u03e5\u03df\3\2\2\2\u03e5\u03e1\3\2\2\2\u03e6",
    "!\3\2\2\2\u03e7\u03e9\5\u0294\u014b\2\u03e8\u03ea\5\u00aeX\2\u03e9\u03e8",
    "\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ef\t\3\2\2",
    "\u03ec\u03ee\5$\23\2\u03ed\u03ec\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed",
    "\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f2\3\2\2\2\u03f1\u03ef\3\2\2\2",
    "\u03f2\u03f4\7{\2\2\u03f3\u03f5\5\u0294\u014b\2\u03f4\u03f3\3\2\2\2",
    "\u03f4\u03f5\3\2\2\2\u03f5#\3\2\2\2\u03f6\u03ff\5\u00c2b\2\u03f7\u03ff",
    "\5\u00c4c\2\u03f8\u03ff\5\u00c6d\2\u03f9\u03ff\5\u00caf\2\u03fa\u03ff",
    "\5\u00ceh\2\u03fb\u03ff\5\u00d6l\2\u03fc\u03ff\5&\24\2\u03fd\u03ff\5",
    "(\25\2\u03fe\u03f6\3\2\2\2\u03fe\u03f7\3\2\2\2\u03fe\u03f8\3\2\2\2\u03fe",
    "\u03f9\3\2\2\2\u03fe\u03fa\3\2\2\2\u03fe\u03fb\3\2\2\2\u03fe\u03fc\3",
    "\2\2\2\u03fe\u03fd\3\2\2\2\u03ff%\3\2\2\2\u0400\u0401\7\u0127\2\2\u0401",
    "\u040d\5\u02ae\u0158\2\u0402\u0403\7\u01ea\2\2\u0403\u0408\5\u00bc_",
    "\2\u0404\u0405\7\u01f0\2\2\u0405\u0407\5\u00bc_\2\u0406\u0404\3\2\2",
    "\2\u0407\u040a\3\2\2\2\u0408\u0406\3\2\2\2\u0408\u0409\3\2\2\2\u0409",
    "\u040b\3\2\2\2\u040a\u0408\3\2\2\2\u040b\u040c\7\u01eb\2\2\u040c\u040e",
    "\3\2\2\2\u040d\u0402\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u040f\3\2\2\2",
    "\u040f\u0410\7\u01f6\2\2\u0410\'\3\2\2\2\u0411\u0412\7\u0099\2\2\u0412",
    "\u041e\5\u02ac\u0157\2\u0413\u0414\7\u01ea\2\2\u0414\u0419\5\u00bc_",
    "\2\u0415\u0416\7\u01f0\2\2\u0416\u0418\5\u00bc_\2\u0417\u0415\3\2\2",
    "\2\u0418\u041b\3\2\2\2\u0419\u0417\3\2\2\2\u0419\u041a\3\2\2\2\u041a",
    "\u041c\3\2\2\2\u041b\u0419\3\2\2\2\u041c\u041d\7\u01eb\2\2\u041d\u041f",
    "\3\2\2\2\u041e\u0413\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420\3\2\2\2",
    "\u0420\u0421\7\u0139\2\2\u0421\u0422\5\u02d0\u0169\2\u0422\u0423\7\u01f6",
    "\2\2\u0423)\3\2\2\2\u0424\u042d\5\u00c2b\2\u0425\u042d\5\u00c4c\2\u0426",
    "\u042d\5\u00c6d\2\u0427\u042d\5\u00caf\2\u0428\u042d\5\u00ceh\2\u0429",
    "\u042d\5\u00d6l\2\u042a\u042d\5\60\31\2\u042b\u042d\5\16\b\2\u042c\u0424",
    "\3\2\2\2\u042c\u0425\3\2\2\2\u042c\u0426\3\2\2\2\u042c\u0427\3\2\2\2",
    "\u042c\u0428\3\2\2\2\u042c\u0429\3\2\2\2\u042c\u042a\3\2\2\2\u042c\u042b",
    "\3\2\2\2\u042d+\3\2\2\2\u042e\u042f\7r\2\2\u042f\u0430\7\u0127\2\2\u0430",
    "\u0431\5\u02ae\u0158\2\u0431\u0432\7\u01f6\2\2\u0432-\3\2\2\2\u0433",
    "\u0434\7\n\2\2\u0434\u0435\7\u0127\2\2\u0435\u0436\5\u02ae\u0158\2\u0436",
    "\u0438\7?\2\2\u0437\u0439\7^\2\2\u0438\u0437\3\2\2\2\u0438\u0439\3\2",
    "\2\2\u0439\u043d\3\2\2\2\u043a\u043c\5\u00b0Y\2\u043b\u043a\3\2\2\2",
    "\u043c\u043f\3\2\2\2\u043d\u043b\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0442",
    "\3\2\2\2\u043f\u043d\3\2\2\2\u0440\u0441\7\u013b\2\2\u0441\u0443\7\u0159",
    "\2\2\u0442\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0444\3\2\2\2\u0444",
    "\u0445\7\u01f6\2\2\u0445/\3\2\2\2\u0446\u0449\7O\2\2\u0447\u0448\7\u010a",
    "\2\2\u0448\u044a\7\u0134\2\2\u0449\u0447\3\2\2\2\u0449\u044a\3\2\2\2",
    "\u044a\u044c\3\2\2\2\u044b\u0446\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d",
    "\3\2\2\2\u044d\u044e\7\u0127\2\2\u044e\u045a\5\u02ae\u0158\2\u044f\u0450",
    "\7\u01ea\2\2\u0450\u0455\5\u00bc_\2\u0451\u0452\7\u01f0\2\2\u0452\u0454",
    "\5\u00bc_\2\u0453\u0451\3\2\2\2\u0454\u0457\3\2\2\2\u0455\u0453\3\2",
    "\2\2\u0455\u0456\3\2\2\2\u0456\u0458\3\2\2\2\u0457\u0455\3\2\2\2\u0458",
    "\u0459\7\u01eb\2\2\u0459\u045b\3\2\2\2\u045a\u044f\3\2\2\2\u045a\u045b",
    "\3\2\2\2\u045b\u045d\3\2\2\2\u045c\u045e\5\u00aeX\2\u045d\u045c\3\2",
    "\2\2\u045d\u045e\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u046c\t\3\2\2\u0460",
    "\u0462\7a\2\2\u0461\u0460\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0466\3",
    "\2\2\2\u0463\u0465\5\u00c0a\2\u0464\u0463\3\2\2\2\u0465\u0468\3\2\2",
    "\2\u0466\u0464\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u0469\3\2\2\2\u0468",
    "\u0466\3\2\2\2\u0469\u046d\5\u010a\u0086\2\u046a\u046d\5\u00b2Z\2\u046b",
    "\u046d\7\u0089\2\2\u046c\u0461\3\2\2\2\u046c\u046a\3\2\2\2\u046c\u046b",
    "\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u046f\7\u01f6\2\2\u046f\61\3\2\2",
    "\2\u0470\u0471\7r\2\2\u0471\u0472\7\u0188\2\2\u0472\u0473\5\u02b0\u0159",
    "\2\u0473\u0474\7\u01f6\2\2\u0474\63\3\2\2\2\u0475\u0476\7\n\2\2\u0476",
    "\u0477\7\u0188\2\2\u0477\u048a\5\u02b0\u0159\2\u0478\u048b\t\b\2\2\u0479",
    "\u047a\7\u0133\2\2\u047a\u047b\7\u0183\2\2\u047b\u048b\5\u02b0\u0159",
    "\2\u047c\u047e\7?\2\2\u047d\u047f\7^\2\2\u047e\u047d\3\2\2\2\u047e\u047f",
    "\3\2\2\2\u047f\u0483\3\2\2\2\u0480\u0482\5\u00b0Y\2\u0481\u0480\3\2",
    "\2\2\u0482\u0485\3\2\2\2\u0483\u0481\3\2\2\2\u0483\u0484\3\2\2\2\u0484",
    "\u0488\3\2\2\2\u0485\u0483\3\2\2\2\u0486\u0487\7\u013b\2\2\u0487\u0489",
    "\7\u0159\2\2\u0488\u0486\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048b\3\2",
    "\2\2\u048a\u0478\3\2\2\2\u048a\u0479\3\2\2\2\u048a\u047c\3\2\2\2\u048b",
    "\u048c\3\2\2\2\u048c\u048d\7\u01f6\2\2\u048d\65\3\2\2\2\u048e\u0491",
    "\7O\2\2\u048f\u0490\7\u010a\2\2\u0490\u0492\7\u0134\2\2\u0491\u048f",
    "\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\7\u0188",
    "\2\2\u0494\u0498\5\u02b0\u0159\2\u0495\u0499\5<\37\2\u0496\u0499\5@",
    "!\2\u0497\u0499\5B\"\2\u0498\u0495\3\2\2\2\u0498\u0496\3\2\2\2\u0498",
    "\u0497\3\2\2\2\u0499\u049b\3\2\2\2\u049a\u049c\58\35\2\u049b\u049a\3",
    "\2\2\2\u049b\u049c\3\2\2\2\u049c\u049e\3\2\2\2\u049d\u049f\t\b\2\2\u049e",
    "\u049d\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a1\3\2\2\2\u04a0\u04a2\5",
    ":\36\2\u04a1\u04a0\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3",
    "\u04a4\5D#\2\u04a4\u04a5\7\u01f6\2\2\u04a5\67\3\2\2\2\u04a6\u04a7\7",
    "\u0093\2\2\u04a7\u04ac\5\u02b0\u0159\2\u04a8\u04a9\7\u01f0\2\2\u04a9",
    "\u04ab\5\u02b0\u0159\2\u04aa\u04a8\3\2\2\2\u04ab\u04ae\3\2\2\2\u04ac",
    "\u04aa\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad9\3\2\2\2\u04ae\u04ac\3\2\2",
    "\2\u04af\u04b0\7\u01a7\2\2\u04b0\u04b1\7\u01ea\2\2\u04b1\u04b2\5\u01f0",
    "\u00f9\2\u04b2\u04b3\7\u01eb\2\2\u04b3;\3\2\2\2\u04b4\u04b9\7\32\2\2",
    "\u04b5\u04b9\7\6\2\2\u04b6\u04b7\7\u00b4\2\2\u04b7\u04b9\7\u0102\2\2",
    "\u04b8\u04b4\3\2\2\2\u04b8\u04b5\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b9\u04ba",
    "\3\2\2\2\u04ba\u04bc\5N(\2\u04bb\u04bd\5T+\2\u04bc\u04bb\3\2\2\2\u04bc",
    "\u04bd\3\2\2\2\u04bd\u04bf\3\2\2\2\u04be\u04c0\5> \2\u04bf\u04be\3\2",
    "\2\2\u04bf\u04c0\3\2\2\2\u04c0=\3\2\2\2\u04c1\u04c2\7\u0094\2\2\u04c2",
    "\u04c3\7t\2\2\u04c3\u04c4\7\u0141\2\2\u04c4?\3\2\2\2\u04c5\u04c6\7\u0094",
    "\2\2\u04c6\u04c8\5N(\2\u04c7\u04c9\5T+\2\u04c8\u04c7\3\2\2\2\u04c8\u04c9",
    "\3\2\2\2\u04c9A\3\2\2\2\u04ca\u04cb\t\t\2\2\u04cb\u04d0\5L\'\2\u04cc",
    "\u04cd\7\u010a\2\2\u04cd\u04cf\5L\'\2\u04ce\u04cc\3\2\2\2\u04cf\u04d2",
    "\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d3\3\2\2\2",
    "\u04d2\u04d0\3\2\2\2\u04d3\u04db\7\u0106\2\2\u04d4\u04dc\7X\2\2\u04d5",
    "\u04d6\5\u0290\u0149\2\u04d6\u04d7\7\u01e3\2\2\u04d7\u04d9\3\2\2\2\u04d8",
    "\u04d5\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04dc\7",
    "\u0148\2\2\u04db\u04d4\3\2\2\2\u04db\u04d8\3\2\2\2\u04dcC\3\2\2\2\u04dd",
    "\u04de\7@\2\2\u04de\u04e3\7\u0188\2\2\u04df\u04e0\7,\2\2\u04e0\u04e3",
    "\5\u02e6\u0174\2\u04e1\u04e3\5\u0110\u0089\2\u04e2\u04dd\3\2\2\2\u04e2",
    "\u04df\3\2\2\2\u04e2\u04e1\3\2\2\2\u04e3E\3\2\2\2\u04e4\u04e6\5\u0292",
    "\u014a\2\u04e5\u04e7\5\u02c6\u0164\2\u04e6\u04e5\3\2\2\2\u04e6\u04e7",
    "\3\2\2\2\u04e7G\3\2\2\2\u04e8\u04e9\7@\2\2\u04e9\u04ed\7\u0188\2\2\u04ea",
    "\u04ec\5\u00c0a\2\u04eb\u04ea\3\2\2\2\u04ec\u04ef\3\2\2\2\u04ed\u04eb",
    "\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f1\3\2\2\2\u04ef\u04ed\3\2\2\2",
    "\u04f0\u04f2\5J&\2\u04f1\u04f0\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f1",
    "\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6\7{\2\2",
    "\u04f6\u04f7\5\u02b0\u0159\2\u04f7I\3\2\2\2\u04f8\u04f9\7\32\2\2\u04f9",
    "\u04fa\7\u016c\2\2\u04fa\u04fb\7\u00bb\2\2\u04fb\u04fc\5\u0110\u0089",
    "\2\u04fc\u04fd\7\32\2\2\u04fd\u04fe\7\u016c\2\2\u04fe\u04ff\7\u01f6",
    "\2\2\u04ff\u051d\3\2\2\2\u0500\u0501\7\32\2\2\u0501\u0502\7t\2\2\u0502",
    "\u0503\7\u0141\2\2\u0503\u0504\7\u00bb\2\2\u0504\u0505\5\u0110\u0089",
    "\2\u0505\u0506\7\32\2\2\u0506\u0507\7t\2\2\u0507\u0508\7\u0141\2\2\u0508",
    "\u0509\7\u01f6\2\2\u0509\u051d\3\2\2\2\u050a\u050b\7\6\2\2\u050b\u050c",
    "\7\u016c\2\2\u050c\u050d\7\u00bb\2\2\u050d\u050e\5\u0110\u0089\2\u050e",
    "\u050f\7\6\2\2\u050f\u0510\7\u016c\2\2\u0510\u0511\7\u01f6\2\2\u0511",
    "\u051d\3\2\2\2\u0512\u0513\7\6\2\2\u0513\u0514\7t\2\2\u0514\u0515\7",
    "\u0141\2\2\u0515\u0516\7\u00bb\2\2\u0516\u0517\5\u0110\u0089\2\u0517",
    "\u0518\7\6\2\2\u0518\u0519\7t\2\2\u0519\u051a\7\u0141\2\2\u051a\u051b",
    "\7\u01f6\2\2\u051b\u051d\3\2\2\2\u051c\u04f8\3\2\2\2\u051c\u0500\3\2",
    "\2\2\u051c\u050a\3\2\2\2\u051c\u0512\3\2\2\2\u051dK\3\2\2\2\u051e\u0539",
    "\7\n\2\2\u051f\u0539\7\13\2\2\u0520\u0521\7\21\2\2\u0521\u0539\7\u016f",
    "\2\2\u0522\u0539\7\24\2\2\u0523\u0539\7;\2\2\u0524\u0539\7O\2\2\u0525",
    "\u0526\7n\2\2\u0526\u0539\7\u016f\2\2\u0527\u0539\7r\2\2\u0528\u0539",
    "\7\u009b\2\2\u0529\u0539\7\u00f0\2\2\u052a\u0539\7\u0133\2\2\u052b\u0539",
    "\7\u013d\2\2\u052c\u0539\7\u018b\2\2\u052d\u0539\7]\2\2\u052e\u0539",
    "\7\u016b\2\2\u052f\u0539\7\u015c\2\2\u0530\u0539\7[\2\2\u0531\u0539",
    "\7\u00d2\2\2\u0532\u0539\7\u00d1\2\2\u0533\u0539\7\u0155\2\2\u0534\u0539",
    "\7\u0176\2\2\u0535\u0539\7X\2\2\u0536\u0539\7\u0148\2\2\u0537\u0539",
    "\7\u0093\2\2\u0538\u051e\3\2\2\2\u0538\u051f\3\2\2\2\u0538\u0520\3\2",
    "\2\2\u0538\u0522\3\2\2\2\u0538\u0523\3\2\2\2\u0538\u0524\3\2\2\2\u0538",
    "\u0525\3\2\2\2\u0538\u0527\3\2\2\2\u0538\u0528\3\2\2\2\u0538\u0529\3",
    "\2\2\2\u0538\u052a\3\2\2\2\u0538\u052b\3\2\2\2\u0538\u052c\3\2\2\2\u0538",
    "\u052d\3\2\2\2\u0538\u052e\3\2\2\2\u0538\u052f\3\2\2\2\u0538\u0530\3",
    "\2\2\2\u0538\u0531\3\2\2\2\u0538\u0532\3\2\2\2\u0538\u0533\3\2\2\2\u0538",
    "\u0534\3\2\2\2\u0538\u0535\3\2\2\2\u0538\u0536\3\2\2\2\u0538\u0537\3",
    "\2\2\2\u0539M\3\2\2\2\u053a\u053f\5P)\2\u053b\u053c\7\u010a\2\2\u053c",
    "\u053e\5P)\2\u053d\u053b\3\2\2\2\u053e\u0541\3\2\2\2\u053f\u053d\3\2",
    "\2\2\u053f\u0540\3\2\2\2\u0540\u0542\3\2\2\2\u0541\u053f\3\2\2\2\u0542",
    "\u0544\7\u0106\2\2\u0543\u0545\5R*\2\u0544\u0543\3\2\2\2\u0544\u0545",
    "\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0547\5\u02c0\u0161\2\u0547O\3\2",
    "\2\2\u0548\u0552\t\n\2\2\u0549\u054a\7\u0102\2\2\u054a\u054f\5\u02be",
    "\u0160\2\u054b\u054c\7\u01f0\2\2\u054c\u054e\5\u02be\u0160\2\u054d\u054b",
    "\3\2\2\2\u054e\u0551\3\2\2\2\u054f\u054d\3\2\2\2\u054f\u0550\3\2\2\2",
    "\u0550\u0553\3\2\2\2\u0551\u054f\3\2\2\2\u0552\u0549\3\2\2\2\u0552\u0553",
    "\3\2\2\2\u0553Q\3\2\2\2\u0554\u0555\7\u00ed\2\2\u0555\u0556\7\u0177",
    "\2\2\u0556\u0557\5\u02c0\u0161\2\u0557\u0558\7\u0102\2\2\u0558S\3\2",
    "\2\2\u0559\u055b\7\u0130\2\2\u055a\u055c\5V,\2\u055b\u055a\3\2\2\2\u055c",
    "\u055d\3\2\2\2\u055d\u055b\3\2\2\2\u055d\u055e\3\2\2\2\u055eU\3\2\2",
    "\2\u055f\u0560\t\13\2\2\u0560\u0561\5\u0278\u013d\2\u0561W\3\2\2\2\u0562",
    "\u0563\7r\2\2\u0563\u0565\7\u018c\2\2\u0564\u0566\7#\2\2\u0565\u0564",
    "\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u0569\5\u02a6",
    "\u0154\2\u0568\u056a\t\f\2\2\u0569\u0568\3\2\2\2\u0569\u056a\3\2\2\2",
    "\u056a\u056b\3\2\2\2\u056b\u056c\7\u01f6\2\2\u056cY\3\2\2\2\u056d\u056e",
    "\7\n\2\2\u056e\u056f\7\u018c\2\2\u056f\u0575\5\u02a6\u0154\2\u0570\u0576",
    "\5\\/\2\u0571\u0576\5^\60\2\u0572\u0576\5`\61\2\u0573\u0576\5h\65\2",
    "\u0574\u0576\5\u008aF\2\u0575\u0570\3\2\2\2\u0575\u0571\3\2\2\2\u0575",
    "\u0572\3\2\2\2\u0575\u0573\3\2\2\2\u0575\u0574\3\2\2\2\u0576\u0578\3",
    "\2\2\2\u0577\u0579\5j\66\2\u0578\u0577\3\2\2\2\u0578\u0579\3\2\2\2\u0579",
    "\u057a\3\2\2\2\u057a\u057b\7\u01f6\2\2\u057b[\3\2\2\2\u057c\u057e\7",
    "?\2\2\u057d\u057f\7^\2\2\u057e\u057d\3\2\2\2\u057e\u057f\3\2\2\2\u057f",
    "\u0581\3\2\2\2\u0580\u0582\t\r\2\2\u0581\u0580\3\2\2\2\u0581\u0582\3",
    "\2\2\2\u0582\u0586\3\2\2\2\u0583\u0585\5\u00b0Y\2\u0584\u0583\3\2\2",
    "\2\u0585\u0588\3\2\2\2\u0586\u0584\3\2\2\2\u0586\u0587\3\2\2\2\u0587",
    "\u058b\3\2\2\2\u0588\u0586\3\2\2\2\u0589\u058a\7\u013b\2\2\u058a\u058c",
    "\7\u0159\2\2\u058b\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058c]\3\2\2\2",
    "\u058d\u058f\7\u0134\2\2\u058e\u0590\5\u00aeX\2\u058f\u058e\3\2\2\2",
    "\u058f\u0590\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592\7\17\2\2\u0592",
    "\u0593\7\u0101\2\2\u0593\u0594\7\u01ea\2\2\u0594\u0599\5\u008cG\2\u0595",
    "\u0596\7\u01f0\2\2\u0596\u0598\5\u008cG\2\u0597\u0595\3\2\2\2\u0598",
    "\u059b\3\2\2\2\u0599\u0597\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059c\3",
    "\2\2\2\u059b\u0599\3\2\2\2\u059c\u059d\7\u01eb\2\2\u059d_\3\2\2\2\u059e",
    "\u05a3\5b\62\2\u059f\u05a0\7\u01f0\2\2\u05a0\u05a2\5b\62\2\u05a1\u059f",
    "\3\2\2\2\u05a2\u05a5\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2",
    "\u05a4a\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a6\u05a9\t\16\2\2\u05a7\u05aa",
    "\5\u009cO\2\u05a8\u05aa\5\u0094K\2\u05a9\u05a7\3\2\2\2\u05a9\u05a8\3",
    "\2\2\2\u05aac\3\2\2\2\u05ab\u05ac\t\17\2\2\u05ac\u05b9\7\23\2\2\u05ad",
    "\u05ba\5f\64\2\u05ae\u05af\7\u01ea\2\2\u05af\u05b4\5f\64\2\u05b0\u05b1",
    "\7\u01f0\2\2\u05b1\u05b3\5f\64\2\u05b2\u05b0\3\2\2\2\u05b3\u05b6\3\2",
    "\2\2\u05b4\u05b2\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6",
    "\u05b4\3\2\2\2\u05b7\u05b8\7\u01eb\2\2\u05b8\u05ba\3\2\2\2\u05b9\u05ad",
    "\3\2\2\2\u05b9\u05ae\3\2\2\2\u05bae\3\2\2\2\u05bb\u05bd\5\u0288\u0145",
    "\2\u05bc\u05be\5\u02d0\u0169\2\u05bd\u05bc\3\2\2\2\u05bd\u05be\3\2\2",
    "\2\u05beg\3\2\2\2\u05bf\u05c5\7\u00e2\2\2\u05c0\u05c1\7\u00cc\2\2\u05c1",
    "\u05c6\5\u01f4\u00fb\2\u05c2\u05c3\7u\2\2\u05c3\u05c4\7\u018c\2\2\u05c4",
    "\u05c6\5\u02d0\u0169\2\u05c5\u05c0\3\2\2\2\u05c5\u05c2\3\2\2\2\u05c6",
    "i\3\2\2\2\u05c7\u05d8\7\u00ba\2\2\u05c8\u05d2\7.\2\2\u05c9\u05ca\7J",
    "\2\2\u05ca\u05cb\7\u0183\2\2\u05cb\u05d3\7\u0173\2\2\u05cc\u05ce\7\u00fa",
    "\2\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf",
    "\u05d0\7\u00a7\2\2\u05d0\u05d1\7\u0177\2\2\u05d1\u05d3\7W\2\2\u05d2",
    "\u05c9\3\2\2\2\u05d2\u05cd\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d5\3",
    "\2\2\2\u05d4\u05d6\5l\67\2\u05d5\u05d4\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6",
    "\u05d8\3\2\2\2\u05d7\u05c7\3\2\2\2\u05d7\u05c8\3\2\2\2\u05d8k\3\2\2",
    "\2\u05d9\u05db\7\u0096\2\2\u05da\u05d9\3\2\2\2\u05da\u05db\3\2\2\2\u05db",
    "\u05dc\3\2\2\2\u05dc\u05dd\7\u0082\2\2\u05dd\u05de\7\u00b9\2\2\u05de",
    "\u05df\5\u02c0\u0161\2\u05dfm\3\2\2\2\u05e0\u05e3\7O\2\2\u05e1\u05e2",
    "\7\u010a\2\2\u05e2\u05e4\7\u0134\2\2\u05e3\u05e1\3\2\2\2\u05e3\u05e4",
    "\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05e8\7\u018c\2\2\u05e6\u05e9\5p",
    "9\2\u05e7\u05e9\5|?\2\u05e8\u05e6\3\2\2\2\u05e8\u05e7\3\2\2\2\u05e9",
    "\u05ea\3\2\2\2\u05ea\u05eb\7\u01f6\2\2\u05ebo\3\2\2\2\u05ec\u05ef\5",
    "\u02a6\u0154\2\u05ed\u05ee\7\u0104\2\2\u05ee\u05f0\7\u01e6\2\2\u05ef",
    "\u05ed\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05f3\5",
    "r:\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3q\3\2\2\2\u05f4\u05f6",
    "\5\u00aeX\2\u05f5\u05f4\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f9\3\2",
    "\2\2\u05f7\u05fa\5t;\2\u05f8\u05fa\5v<\2\u05f9\u05f7\3\2\2\2\u05f9\u05f8",
    "\3\2\2\2\u05fa\u05fc\3\2\2\2\u05fb\u05fd\5z>\2\u05fc\u05fb\3\2\2\2\u05fc",
    "\u05fd\3\2\2\2\u05fd\u0609\3\2\2\2\u05fe\u05ff\7\u01ea\2\2\u05ff\u0604",
    "\5\u008cG\2\u0600\u0601\7\u01f0\2\2\u0601\u0603\5\u008cG\2\u0602\u0600",
    "\3\2\2\2\u0603\u0606\3\2\2\2\u0604\u0602\3\2\2\2\u0604\u0605\3\2\2\2",
    "\u0605\u0607\3\2\2\2\u0606\u0604\3\2\2\2\u0607\u0608\7\u01eb\2\2\u0608",
    "\u060a\3\2\2\2\u0609\u05fe\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060e\3",
    "\2\2\2\u060b\u060d\5\u008aF\2\u060c\u060b\3\2\2\2\u060d\u0610\3\2\2",
    "\2\u060e\u060c\3\2\2\2\u060e\u060f\3\2\2\2\u060fs\3\2\2\2\u0610\u060e",
    "\3\2\2\2\u0611\u0615\t\3\2\2\u0612\u0616\7\u0101\2\2\u0613\u0616\5\u00dc",
    "o\2\u0614\u0616\5x=\2\u0615\u0612\3\2\2\2\u0615\u0613\3\2\2\2\u0615",
    "\u0614\3\2\2\2\u0616u\3\2\2\2\u0617\u0618\7\u018e\2\2\u0618\u0619\5",
    "\u02d0\u0169\2\u0619w\3\2\2\2\u061a\u061b\7\u0177\2\2\u061b\u061c\7",
    "\u0102\2\2\u061c\u061f\5\u02d0\u0169\2\u061d\u061e\7\u00fa\2\2\u061e",
    "\u0620\7\u00fc\2\2\u061f\u061d\3\2\2\2\u061f\u0620\3\2\2\2\u0620y\3",
    "\2\2\2\u0621\u0622\7\u0089\2\2\u0622\u0623\7\u00e5\2\2\u0623\u0624\5",
    "\u01f4\u00fb\2\u0624\u0625\7\u00c1\2\2\u0625\u0626\7\u00be\2\2\u0626",
    "\u0627\7\u0199\2\2\u0627\u0628\t\20\2\2\u0628{\3\2\2\2\u0629\u062a\7",
    "#\2\2\u062a\u062b\5\u02a6\u0154\2\u062b\u062c\t\3\2\2\u062c\u0631\5",
    "~@\2\u062d\u062e\7\u01f0\2\2\u062e\u0630\5~@\2\u062f\u062d\3\2\2\2\u0630",
    "\u0633\3\2\2\2\u0631\u062f\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0634\3",
    "\2\2\2\u0633\u0631\3\2\2\2\u0634\u0635\7{\2\2\u0635}\3\2\2\2\u0636\u0639",
    "\5\u0080A\2\u0637\u0639\5\u0082B\2\u0638\u0636\3\2\2\2\u0638\u0637\3",
    "\2\2\2\u0639\177\3\2\2\2\u063a\u063b\t\21\2\2\u063b\u063c\7\u00da\2",
    "\2\u063c\u063d\5\u0086D\2\u063d\u0081\3\2\2\2\u063e\u0642\t\22\2\2\u063f",
    "\u0643\5\u0084C\2\u0640\u0643\5\u0086D\2\u0641\u0643\5\u0088E\2\u0642",
    "\u063f\3\2\2\2\u0642\u0640\3\2\2\2\u0642\u0641\3\2\2\2\u0643\u0083\3",
    "\2\2\2\u0644\u0645\7\u0127\2\2\u0645\u0646\5\u02ae\u0158\2\u0646\u0647",
    "\7\u01ea\2\2\u0647\u064c\5\u00a2R\2\u0648\u0649\7\u01f0\2\2\u0649\u064b",
    "\5\u00a2R\2\u064a\u0648\3\2\2\2\u064b\u064e\3\2\2\2\u064c\u064a\3\2",
    "\2\2\u064c\u064d\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u064c\3\2\2\2\u064f",
    "\u0650\7\u01eb\2\2\u0650\u065e\t\3\2\2\u0651\u065f\5\u00b2Z\2\u0652",
    "\u0654\7a\2\2\u0653\u0652\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u0658\3",
    "\2\2\2\u0655\u0657\5\u00c0a\2\u0656\u0655\3\2\2\2\u0657\u065a\3\2\2",
    "\2\u0658\u0656\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065b\3\2\2\2\u065a",
    "\u0658\3\2\2\2\u065b\u065c\5\u010a\u0086\2\u065c\u065d\7\u01f6\2\2\u065d",
    "\u065f\3\2\2\2\u065e\u0651\3\2\2\2\u065e\u0653\3\2\2\2\u065f\u0085\3",
    "\2\2\2\u0660\u0661\7\u0099\2\2\u0661\u066d\5\u02ac\u0157\2\u0662\u0663",
    "\7\u01ea\2\2\u0663\u0668\5\u00a2R\2\u0664\u0665\7\u01f0\2\2\u0665\u0667",
    "\5\u00a2R\2\u0666\u0664\3\2\2\2\u0667\u066a\3\2\2\2\u0668\u0666\3\2",
    "\2\2\u0668\u0669\3\2\2\2\u0669\u066b\3\2\2\2\u066a\u0668\3\2\2\2\u066b",
    "\u066c\7\u01eb\2\2\u066c\u066e\3\2\2\2\u066d\u0662\3\2\2\2\u066d\u066e",
    "\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0670\7\u0139\2\2\u0670\u0671\5\u02d0",
    "\u0169\2\u0671\u067f\t\3\2\2\u0672\u0680\5\u00b2Z\2\u0673\u0675\7a\2",
    "\2\u0674\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0679\3\2\2\2\u0676",
    "\u0678\5\u00c0a\2\u0677\u0676\3\2\2\2\u0678\u067b\3\2\2\2\u0679\u0677",
    "\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u067c\3\2\2\2\u067b\u0679\3\2\2\2",
    "\u067c\u067d\5\u010a\u0086\2\u067d\u067e\7\u01f6\2\2\u067e\u0680\3\2",
    "\2\2\u067f\u0672\3\2\2\2\u067f\u0674\3\2\2\2\u0680\u0087\3\2\2\2\u0681",
    "\u0683\7\u008e\2\2\u0682\u0681\3\2\2\2\u0682\u0683\3\2\2\2\u0683\u0685",
    "\3\2\2\2\u0684\u0686\7\u00b3\2\2\u0685\u0684\3\2\2\2\u0685\u0686\3\2",
    "\2\2\u0686\u0687\3\2\2\2\u0687\u0688\7F\2\2\u0688\u0689\7\u0099\2\2",
    "\u0689\u069b\5\u02d0\u0169\2\u068a\u068b\7\u01ea\2\2\u068b\u068c\7\u0150",
    "\2\2\u068c\u068d\7\u00a5\2\2\u068d\u068e\7\u010f\2\2\u068e\u068f\5\u02d0",
    "\u0169\2\u068f\u0690\7\u01f0\2\2\u0690\u0691\3\2\2\2\u0691\u0696\5\u00a2",
    "R\2\u0692\u0693\7\u01f0\2\2\u0693\u0695\5\u00a2R\2\u0694\u0692\3\2\2",
    "\2\u0695\u0698\3\2\2\2\u0696\u0694\3\2\2\2\u0696\u0697\3\2\2\2\u0697",
    "\u0699\3\2\2\2\u0698\u0696\3\2\2\2\u0699\u069a\7\u01eb\2\2\u069a\u069c",
    "\3\2\2\2\u069b\u068a\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069d\3\2\2\2",
    "\u069d\u069e\7\u0139\2\2\u069e\u069f\7\u0150\2\2\u069f\u06a0\7\17\2",
    "\2\u06a0\u06a1\7\u0137\2\2\u06a1\u06af\t\3\2\2\u06a2\u06b0\5\u00b2Z",
    "\2\u06a3\u06a5\7a\2\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5",
    "\u06a9\3\2\2\2\u06a6\u06a8\5\u00c0a\2\u06a7\u06a6\3\2\2\2\u06a8\u06ab",
    "\3\2\2\2\u06a9\u06a7\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ac\3\2\2\2",
    "\u06ab\u06a9\3\2\2\2\u06ac\u06ad\5\u010a\u0086\2\u06ad\u06ae\7\u01f6",
    "\2\2\u06ae\u06b0\3\2\2\2\u06af\u06a2\3\2\2\2\u06af\u06a4\3\2\2\2\u06b0",
    "\u0089\3\2\2\2\u06b1\u06b3\7\u00fa\2\2\u06b2\u06b1\3\2\2\2\u06b2\u06b3",
    "\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\t\23\2\2\u06b5\u008b\3\2\2",
    "\2\u06b6\u06b7\5\u02e6\u0174\2\u06b7\u06b9\5\u02d0\u0169\2\u06b8\u06ba",
    "\5\u008eH\2\u06b9\u06b8\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06bd\3\2",
    "\2\2\u06bb\u06bd\5\u0090I\2\u06bc\u06b6\3\2\2\2\u06bc\u06bb\3\2\2\2",
    "\u06bd\u008d\3\2\2\2\u06be\u06bf\7\u0089\2\2\u06bf\u06c0\7\u00e5\2\2",
    "\u06c0\u06c1\5\u01f4\u00fb\2\u06c1\u008f\3\2\2\2\u06c2\u06c4\5\u008a",
    "F\2\u06c3\u06c2\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06c6\3\2\2\2\u06c5",
    "\u06c7\5\u0092J\2\u06c6\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06c6",
    "\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06cc\3\2\2\2\u06ca\u06cb\7\u01f0",
    "\2\2\u06cb\u06cd\5\u009eP\2\u06cc\u06ca\3\2\2\2\u06cc\u06cd\3\2\2\2",
    "\u06cd\u0091\3\2\2\2\u06ce\u06d2\5\u0094K\2\u06cf\u06d2\5\u009aN\2\u06d0",
    "\u06d2\5\u009cO\2\u06d1\u06ce\3\2\2\2\u06d1\u06cf\3\2\2\2\u06d1\u06d0",
    "\3\2\2\2\u06d2\u0093\3\2\2\2\u06d3\u06d6\t\22\2\2\u06d4\u06d7\5\u0096",
    "L\2\u06d5\u06d7\5\u0098M\2\u06d6\u06d4\3\2\2\2\u06d6\u06d5\3\2\2\2\u06d7",
    "\u0095\3\2\2\2\u06d8\u06d9\7\u0127\2\2\u06d9\u06da\5\u02ae\u0158\2\u06da",
    "\u06db\7\u01ea\2\2\u06db\u06e0\5\u00a2R\2\u06dc\u06dd\7\u01f0\2\2\u06dd",
    "\u06df\5\u00a2R\2\u06de\u06dc\3\2\2\2\u06df\u06e2\3\2\2\2\u06e0\u06de",
    "\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06e3\3\2\2\2\u06e2\u06e0\3\2\2\2",
    "\u06e3\u06e6\7\u01eb\2\2\u06e4\u06e5\t\3\2\2\u06e5\u06e7\5\u00b2Z\2",
    "\u06e6\u06e4\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u0097\3\2\2\2\u06e8\u06e9",
    "\7\u0099\2\2\u06e9\u06f5\5\u02ac\u0157\2\u06ea\u06eb\7\u01ea\2\2\u06eb",
    "\u06f0\5\u00a2R\2\u06ec\u06ed\7\u01f0\2\2\u06ed\u06ef\5\u00a2R\2\u06ee",
    "\u06ec\3\2\2\2\u06ef\u06f2\3\2\2\2\u06f0\u06ee\3\2\2\2\u06f0\u06f1\3",
    "\2\2\2\u06f1\u06f3\3\2\2\2\u06f2\u06f0\3\2\2\2\u06f3\u06f4\7\u01eb\2",
    "\2\u06f4\u06f6\3\2\2\2\u06f5\u06ea\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6",
    "\u06f7\3\2\2\2\u06f7\u06fc\7\u0139\2\2\u06f8\u06fd\5\u02d0\u0169\2\u06f9",
    "\u06fa\7\u0150\2\2\u06fa\u06fb\7\17\2\2\u06fb\u06fd\7\u0137\2\2\u06fc",
    "\u06f8\3\2\2\2\u06fc\u06f9\3\2\2\2\u06fd\u0706\3\2\2\2\u06fe\u06ff\t",
    "\3\2\2\u06ff\u0707\5\u00b2Z\2\u0700\u0702\7\u0089\2\2\u0701\u0703\7",
    "\u019f\2\2\u0702\u0701\3\2\2\2\u0702\u0703\3\2\2\2\u0703\u0704\3\2\2",
    "\2\u0704\u0705\7\u00e5\2\2\u0705\u0707\5\u01f4\u00fb\2\u0706\u06fe\3",
    "\2\2\2\u0706\u0700\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0099\3\2\2\2\u0708",
    "\u070a\7\u008e\2\2\u0709\u0708\3\2\2\2\u0709\u070a\3\2\2\2\u070a\u070c",
    "\3\2\2\2\u070b\u070d\7\u00b3\2\2\u070c\u070b\3\2\2\2\u070c\u070d\3\2",
    "\2\2\u070d\u070e\3\2\2\2\u070e\u070f\7F\2\2\u070f\u0710\7\u0099\2\2",
    "\u0710\u0722\5\u02d0\u0169\2\u0711\u0712\7\u01ea\2\2\u0712\u0713\7\u0150",
    "\2\2\u0713\u0714\7\u00a5\2\2\u0714\u0715\7\u010f\2\2\u0715\u0716\5\u02d0",
    "\u0169\2\u0716\u0717\7\u01f0\2\2\u0717\u0718\3\2\2\2\u0718\u071d\5\u00a2",
    "R\2\u0719\u071a\7\u01f0\2\2\u071a\u071c\5\u00a2R\2\u071b\u0719\3\2\2",
    "\2\u071c\u071f\3\2\2\2\u071d\u071b\3\2\2\2\u071d\u071e\3\2\2\2\u071e",
    "\u0720\3\2\2\2\u071f\u071d\3\2\2\2\u0720\u0721\7\u01eb\2\2\u0721\u0723",
    "\3\2\2\2\u0722\u0711\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0724\3\2\2\2",
    "\u0724\u0725\7\u0139\2\2\u0725\u0726\7\u0150\2\2\u0726\u0727\7\17\2",
    "\2\u0727\u072a\7\u0137\2\2\u0728\u0729\t\3\2\2\u0729\u072b\5\u00b2Z",
    "\2\u072a\u0728\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u009b\3\2\2\2\u072c",
    "\u072d\t\21\2\2\u072d\u072e\7\u00da\2\2\u072e\u072f\5\u0098M\2\u072f",
    "\u009d\3\2\2\2\u0730\u0731\7\u0122\2\2\u0731\u0732\7\u0136\2\2\u0732",
    "\u0733\7\u01ea\2\2\u0733\u0738\5\u00a0Q\2\u0734\u0735\7\u01f0\2\2\u0735",
    "\u0737\5\u00a0Q\2\u0736\u0734\3\2\2\2\u0737\u073a\3\2\2\2\u0738\u0736",
    "\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u073b\3\2\2\2\u073a\u0738\3\2\2\2",
    "\u073b\u073c\7\u01eb\2\2\u073c\u009f\3\2\2\2\u073d\u0740\5\u02e6\u0174",
    "\2\u073e\u0740\7d\2\2\u073f\u073d\3\2\2\2\u073f\u073e\3\2\2\2\u0740",
    "\u00a1\3\2\2\2\u0741\u0742\5\u0298\u014d\2\u0742\u0743\5\u02d0\u0169",
    "\2\u0743\u00a3\3\2\2\2\u0744\u0745\7r\2\2\u0745\u0746\7\u0151\2\2\u0746",
    "\u0747\5\u02a8\u0155\2\u0747\u0748\7\u01f6\2\2\u0748\u00a5\3\2\2\2\u0749",
    "\u074a\7\n\2\2\u074a\u074b\7\u0151\2\2\u074b\u074d\5\u02a8\u0155\2\u074c",
    "\u074e\5\u00aaV\2\u074d\u074c\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u074d",
    "\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0752\7\u01f6",
    "\2\2\u0752\u00a7\3\2\2\2\u0753\u0754\7O\2\2\u0754\u0755\7\u0151\2\2",
    "\u0755\u075a\5\u02a8\u0155\2\u0756\u0759\5\u00acW\2\u0757\u0759\5\u00aa",
    "V\2\u0758\u0756\3\2\2\2\u0758\u0757\3\2\2\2\u0759\u075c\3\2\2\2\u075a",
    "\u0758\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u075d\3\2\2\2\u075c\u075a\3",
    "\2\2\2\u075d\u075e\7\u01f6\2\2\u075e\u00a9\3\2\2\2\u075f\u0760\7\u00a8",
    "\2\2\u0760\u0761\7(\2\2\u0761\u0770\7\u01e4\2\2\u0762\u0763\7\u00d8",
    "\2\2\u0763\u0770\7\u01e4\2\2\u0764\u0770\7\u00f5\2\2\u0765\u0766\7\u00de",
    "\2\2\u0766\u0770\7\u01e4\2\2\u0767\u0770\7\u00f6\2\2\u0768\u0770\7V",
    "\2\2\u0769\u0770\7\u00f3\2\2\u076a\u076b\7+\2\2\u076b\u0770\7\u01e4",
    "\2\2\u076c\u0770\7\u00f1\2\2\u076d\u0770\7\u010c\2\2\u076e\u0770\7\u00f8",
    "\2\2\u076f\u075f\3\2\2\2\u076f\u0762\3\2\2\2\u076f\u0764\3\2\2\2\u076f",
    "\u0765\3\2\2\2\u076f\u0767\3\2\2\2\u076f\u0768\3\2\2\2\u076f\u0769\3",
    "\2\2\2\u076f\u076a\3\2\2\2\u076f\u076c\3\2\2\2\u076f\u076d\3\2\2\2\u076f",
    "\u076e\3\2\2\2\u0770\u00ab\3\2\2\2\u0771\u0772\7\u016a\2\2\u0772\u0773",
    "\7\u01ab\2\2\u0773\u0774\7\u01e4\2\2\u0774\u00ad\3\2\2\2\u0775\u0776",
    "\7\25\2\2\u0776\u0777\t\24\2\2\u0777\u00af\3\2\2\2\u0778\u0779\5\u02e6",
    "\u0174\2\u0779\u077a\7\u0201\2\2\u077a\u077b\5\u01f4\u00fb\2\u077b\u00b1",
    "\3\2\2\2\u077c\u077f\7\u00c1\2\2\u077d\u0780\5\u00b4[\2\u077e\u0780",
    "\5\u00b6\\\2\u077f\u077d\3\2\2\2\u077f\u077e\3\2\2\2\u0780\u00b3\3\2",
    "\2\2\u0781\u0782\7\u00be\2\2\u0782\u0783\7\u00e5\2\2\u0783\u0784\7\u01e6",
    "\2\2\u0784\u00b5\3\2\2\2\u0785\u0788\7*\2\2\u0786\u0787\7\u00e5\2\2",
    "\u0787\u0789\7\u01e6\2\2\u0788\u0786\3\2\2\2\u0788\u0789\3\2\2\2\u0789",
    "\u078a\3\2\2\2\u078a\u078b\7\u00c7\2\2\u078b\u078d\5\u02e6\u0174\2\u078c",
    "\u078e\5\u00b8]\2\u078d\u078c\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0791",
    "\3\2\2\2\u078f\u0790\7\u01ab\2\2\u0790\u0792\7H\2\2\u0791\u078f\3\2",
    "\2\2\u0791\u0792\3\2\2\2\u0792\u0794\3\2\2\2\u0793\u0795\5\u00ba^\2",
    "\u0794\u0793\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u00b7\3\2\2\2\u0796\u0797",
    "\7\7\2\2\u0797\u0798\7\u00a5\2\2\u0798\u0799\7\u01ea\2\2\u0799\u079e",
    "\5\u01f4\u00fb\2\u079a\u079b\7\u01f0\2\2\u079b\u079d\5\u01f4\u00fb\2",
    "\u079c\u079a\3\2\2\2\u079d\u07a0\3\2\2\2\u079e\u079c\3\2\2\2\u079e\u079f",
    "\3\2\2\2\u079f\u07a1\3\2\2\2\u07a0\u079e\3\2\2\2\u07a1\u07a2\7\u01eb",
    "\2\2\u07a2\u00b9\3\2\2\2\u07a3\u07a4\7\u0115\2\2\u07a4\u07b0\7\u01ea",
    "\2\2\u07a5\u07aa\5\u01f4\u00fb\2\u07a6\u07a7\7\u01f0\2\2\u07a7\u07a9",
    "\5\u01f4\u00fb\2\u07a8\u07a6\3\2\2\2\u07a9\u07ac\3\2\2\2\u07aa\u07a8",
    "\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07b1\3\2\2\2\u07ac\u07aa\3\2\2\2",
    "\u07ad\u07ae\7\u01e3\2\2\u07ae\u07af\7\u01e3\2\2\u07af\u07b1\7\u01e3",
    "\2\2\u07b0\u07a5\3\2\2\2\u07b0\u07ad\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2",
    "\u07b3\7\u01eb\2\2\u07b3\u00bb\3\2\2\2\u07b4\u07b8\5\u0298\u014d\2\u07b5",
    "\u07b7\t\25\2\2\u07b6\u07b5\3\2\2\2\u07b7\u07ba\3\2\2\2\u07b8\u07b6",
    "\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07bc\3\2\2\2\u07ba\u07b8\3\2\2\2",
    "\u07bb\u07bd\5\u02d0\u0169\2\u07bc\u07bb\3\2\2\2\u07bc\u07bd\3\2\2\2",
    "\u07bd\u07bf\3\2\2\2\u07be\u07c0\5\u00be`\2\u07bf\u07be\3\2\2\2\u07bf",
    "\u07c0\3\2\2\2\u07c0\u00bd\3\2\2\2\u07c1\u07c2\t\26\2\2\u07c2\u07c3",
    "\5\u01f4\u00fb\2\u07c3\u00bf\3\2\2\2\u07c4\u07ce\5\u00c2b\2\u07c5\u07ce",
    "\5\u00c4c\2\u07c6\u07ce\5\u00c6d\2\u07c7\u07ce\5\u00caf\2\u07c8\u07ce",
    "\5\u00ccg\2\u07c9\u07ce\5\u00ceh\2\u07ca\u07ce\5\u00d6l\2\u07cb\u07ce",
    "\5\60\31\2\u07cc\u07ce\5\16\b\2\u07cd\u07c4\3\2\2\2\u07cd\u07c5\3\2",
    "\2\2\u07cd\u07c6\3\2\2\2\u07cd\u07c7\3\2\2\2\u07cd\u07c8\3\2\2\2\u07cd",
    "\u07c9\3\2\2\2\u07cd\u07ca\3\2\2\2\u07cd\u07cb\3\2\2\2\u07cd\u07cc\3",
    "\2\2\2\u07ce\u00c1\3\2\2\2\u07cf\u07d1\5\u02b2\u015a\2\u07d0\u07d2\7",
    "C\2\2\u07d1\u07d0\3\2\2\2\u07d1\u07d2\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3",
    "\u07d6\5\u02d0\u0169\2\u07d4\u07d5\7\u00fa\2\2\u07d5\u07d7\7\u00fc\2",
    "\2\u07d6\u07d4\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d9\3\2\2\2\u07d8",
    "\u07da\5\u00be`\2\u07d9\u07d8\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db",
    "\3\2\2\2\u07db\u07dc\7\u01f6\2\2\u07dc\u00c3\3\2\2\2\u07dd\u07de\7\u0174",
    "\2\2\u07de\u07df\5\u02a6\u0154\2\u07df\u07e0\7\u00bb\2\2\u07e0\u07e6",
    "\5\u02d0\u0169\2\u07e1\u07e2\7\u0129\2\2\u07e2\u07e3\5\u01f4\u00fb\2",
    "\u07e3\u07e4\7\3\2\2\u07e4\u07e5\5\u01f4\u00fb\2\u07e5\u07e7\3\2\2\2",
    "\u07e6\u07e1\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u07ea\3\2\2\2\u07e8\u07e9",
    "\7\u00fa\2\2\u07e9\u07eb\7\u00fc\2\2\u07ea\u07e8\3\2\2\2\u07ea\u07eb",
    "\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07ed\7\u01f6\2\2\u07ed\u00c5\3\2",
    "\2\2\u07ee\u07ef\7T\2\2\u07ef\u07fb\5\u02b6\u015c\2\u07f0\u07f1\7\u01ea",
    "\2\2\u07f1\u07f6\5\u00c8e\2\u07f2\u07f3\7\u01f0\2\2\u07f3\u07f5\5\u00c8",
    "e\2\u07f4\u07f2\3\2\2\2\u07f5\u07f8\3\2\2\2\u07f6\u07f4\3\2\2\2\u07f6",
    "\u07f7\3\2\2\2\u07f7\u07f9\3\2\2\2\u07f8\u07f6\3\2\2\2\u07f9\u07fa\7",
    "\u01eb\2\2\u07fa\u07fc\3\2\2\2\u07fb\u07f0\3\2\2\2\u07fb\u07fc\3\2\2",
    "\2\u07fc\u07ff\3\2\2\2\u07fd\u07fe\7\u0139\2\2\u07fe\u0800\5\u02d0\u0169",
    "\2\u07ff\u07fd\3\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0803\3\2\2\2\u0801",
    "\u0802\7\u00bb\2\2\u0802\u0804\5\u0136\u009c\2\u0803\u0801\3\2\2\2\u0803",
    "\u0804\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0806\7\u01f6\2\2\u0806\u00c7",
    "\3\2\2\2\u0807\u080c\5\u0298\u014d\2\u0808\u080a\7\u00a5\2\2\u0809\u0808",
    "\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080d\5\u02d0",
    "\u0169\2\u080c\u0809\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080f\3\2\2\2",
    "\u080e\u0810\5\u00be`\2\u080f\u080e\3\2\2\2\u080f\u0810\3\2\2\2\u0810",
    "\u00c9\3\2\2\2\u0811\u0812\5\u02aa\u0156\2\u0812\u0813\7\u0080\2\2\u0813",
    "\u0814\7\u01f6\2\2\u0814\u00cb\3\2\2\2\u0815\u0834\7\u0122\2\2\u0816",
    "\u0835\7\u0154\2\2\u0817\u0835\7\30\2\2\u0818\u0819\7\u0081\2\2\u0819",
    "\u081a\7\u01ea\2\2\u081a\u081b\5\u02aa\u0156\2\u081b\u081c\7\u01f0\2",
    "\2\u081c\u081d\5\u02e2\u0172\2\u081d\u081e\7\u01eb\2\2\u081e\u0835\3",
    "\2\2\2\u081f\u0820\7\u00af\2\2\u0820\u0821\7\u01ea\2\2\u0821\u0822\5",
    "\u02e6\u0174\2\u0822\u0823\7\u01f0\2\2\u0823\u0824\5\u01f4\u00fb\2\u0824",
    "\u0825\7\u01eb\2\2\u0825\u0835\3\2\2\2\u0826\u0827\7\u0136\2\2\u0827",
    "\u082a\7\u01ea\2\2\u0828\u082b\5\u02e6\u0174\2\u0829\u082b\7d\2\2\u082a",
    "\u0828\3\2\2\2\u082a\u0829\3\2\2\2\u082b\u082e\3\2\2\2\u082c\u082d\7",
    "\u01f0\2\2\u082d\u082f\5\u02e6\u0174\2\u082e\u082c\3\2\2\2\u082f\u0830",
    "\3\2\2\2\u0830\u082e\3\2\2\2\u0830\u0831\3\2\2\2\u0831\u0832\3\2\2\2",
    "\u0832\u0833\7\u01eb\2\2\u0833\u0835\3\2\2\2\u0834\u0816\3\2\2\2\u0834",
    "\u0817\3\2\2\2\u0834\u0818\3\2\2\2\u0834\u081f\3\2\2\2\u0834\u0826\3",
    "\2\2\2\u0835\u0836\3\2\2\2\u0836\u0837\7\u01f6\2\2\u0837\u00cd\3\2\2",
    "\2\u0838\u083b\5\u00d0i\2\u0839\u083b\5\u00d4k\2\u083a\u0838\3\2\2\2",
    "\u083a\u0839\3\2\2\2\u083b\u00cf\3\2\2\2\u083c\u083d\7\u018c\2\2\u083d",
    "\u083e\5\u02a6\u0154\2\u083e\u0851\7\u00bb\2\2\u083f\u0840\7\u012d\2",
    "\2\u0840\u0841\7\u01ea\2\2\u0841\u0846\5\u00d2j\2\u0842\u0843\7\u01f0",
    "\2\2\u0843\u0845\5\u00d2j\2\u0844\u0842\3\2\2\2\u0845\u0848\3\2\2\2",
    "\u0846\u0844\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u0849\3\2\2\2\u0848\u0846",
    "\3\2\2\2\u0849\u084a\7\u01eb\2\2\u084a\u0852\3\2\2\2\u084b\u084c\7\u012e",
    "\2\2\u084c\u084f\7T\2\2\u084d\u084e\7\u0139\2\2\u084e\u0850\5\u02d0",
    "\u0169\2\u084f\u084d\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u0852\3\2\2\2",
    "\u0851\u083f\3\2\2\2\u0851\u084b\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u0854",
    "\7\u01f6\2\2\u0854\u00d1\3\2\2\2\u0855\u0857\5\u02be\u0160\2\u0856\u0858",
    "\5\u02d0\u0169\2\u0857\u0856\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u085b",
    "\3\2\2\2\u0859\u085a\7\u00fa\2\2\u085a\u085c\7\u00fc\2\2\u085b\u0859",
    "\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085e\3\2\2\2\u085d\u085f\5\u00be",
    "`\2\u085e\u085d\3\2\2\2\u085e\u085f\3\2\2\2\u085f\u00d3\3\2\2\2\u0860",
    "\u0861\5\u02b8\u015d\2\u0861\u0862\5\u02a6\u0154\2\u0862\u0863\t\27",
    "\2\2\u0863\u0864\7\u01f6\2\2\u0864\u00d5\3\2\2\2\u0865\u0868\5\u00d8",
    "m\2\u0866\u0868\5\u00dep\2\u0867\u0865\3\2\2\2\u0867\u0866\3\2\2\2\u0868",
    "\u0869\3\2\2\2\u0869\u086a\7\u01f6\2\2\u086a\u00d7\3\2\2\2\u086b\u086c",
    "\7\u018c\2\2\u086c\u086d\5\u02a6\u0154\2\u086d\u0879\7\u00bb\2\2\u086e",
    "\u086f\7\u0177\2\2\u086f\u0870\7\u0102\2\2\u0870\u0872\5\u02d0\u0169",
    "\2\u0871\u0873\5\u00dan\2\u0872\u0871\3\2\2\2\u0872\u0873\3\2\2\2\u0873",
    "\u0876\3\2\2\2\u0874\u0875\7\u00fa\2\2\u0875\u0877\7\u00fc\2\2\u0876",
    "\u0874\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u087a\3\2\2\2\u0878\u087a\5",
    "\u00dco\2\u0879\u086e\3\2\2\2\u0879\u0878\3\2\2\2\u087a\u00d9\3\2\2",
    "\2\u087b\u087e\7\u00ab\2\2\u087c\u087e\7\u00aa\2\2\u087d\u087b\3\2\2",
    "\2\u087d\u087c\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u0880\7(\2\2\u0880",
    "\u0881\5\u02d0\u0169\2\u0881\u00db\3\2\2\2\u0882\u0886\7\u01a0\2\2\u0883",
    "\u0884\7\u01a1\2\2\u0884\u0886\7\16\2\2\u0885\u0882\3\2\2\2\u0885\u0883",
    "\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888\7\u01ea\2\2\u0888\u0889\5\u01f4",
    "\u00fb\2\u0889\u088a\7\u01eb\2\2\u088a\u088b\7\u0102\2\2\u088b\u088e",
    "\5\u02d0\u0169\2\u088c\u088d\7\u00fa\2\2\u088d\u088f\7\u00fc\2\2\u088e",
    "\u088c\3\2\2\2\u088e\u088f\3\2\2\2\u088f\u00dd\3\2\2\2\u0890\u0891\5",
    "\u028e\u0148\2\u0891\u0892\5\u02d0\u0169\2\u0892\u00df\3\2\2\2\u0893",
    "\u0894\5\u00e4s\2\u0894\u0895\t\30\2\2\u0895\u0898\3\2\2\2\u0896\u0898",
    "\5\u00e2r\2\u0897\u0893\3\2\2\2\u0897\u0896\3\2\2\2\u0898\u0899\3\2",
    "\2\2\u0899\u0897\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u00e1\3\2\2\2\u089b",
    "\u089c\7\u01f8\2\2\u089c\u089d\7\u01f8\2\2\u089d\u089e\5\u02a4\u0153",
    "\2\u089e\u089f\7\u01fe\2\2\u089f\u08a0\7\u01fe\2\2\u08a0\u00e3\3\2\2",
    "\2\u08a1\u08a2\7O\2\2\u08a2\u08b9\5\2\2\2\u08a3\u08a4\7\n\2\2\u08a4",
    "\u08b9\5\2\2\2\u08a5\u08a6\7\u009b\2\2\u08a6\u08b9\5\2\2\2\u08a7\u08a8",
    "\7\u018b\2\2\u08a8\u08b9\5\2\2\2\u08a9\u08b9\5\u010a\u0086\2\u08aa\u08b9",
    "\5\u0112\u008a\2\u08ab\u08b9\5\u00e6t\2\u08ac\u08b9\5\u00e8u\2\u08ad",
    "\u08b9\5\u00eav\2\u08ae\u08b9\5\u00ecw\2\u08af\u08b9\5\u00eex\2\u08b0",
    "\u08b9\5\u00f4{\2\u08b1\u08b9\5\u00f8}\2\u08b2\u08b9\5\u0102\u0082\2",
    "\u08b3\u08b9\5\u0104\u0083\2\u08b4\u08b9\5\u0106\u0084\2\u08b5\u08b9",
    "\5\u0228\u0115\2\u08b6\u08b9\5\u0114\u008b\2\u08b7\u08b9\5\u0108\u0085",
    "\2\u08b8\u08a1\3\2\2\2\u08b8\u08a3\3\2\2\2\u08b8\u08a5\3\2\2\2\u08b8",
    "\u08a7\3\2\2\2\u08b8\u08a9\3\2\2\2\u08b8\u08aa\3\2\2\2\u08b8\u08ab\3",
    "\2\2\2\u08b8\u08ac\3\2\2\2\u08b8\u08ad\3\2\2\2\u08b8\u08ae\3\2\2\2\u08b8",
    "\u08af\3\2\2\2\u08b8\u08b0\3\2\2\2\u08b8\u08b1\3\2\2\2\u08b8\u08b2\3",
    "\2\2\2\u08b8\u08b3\3\2\2\2\u08b8\u08b4\3\2\2\2\u08b8\u08b5\3\2\2\2\u08b8",
    "\u08b6\3\2\2\2\u08b8\u08b7\3\2\2\2\u08b9\u00e5\3\2\2\2\u08ba\u08bd\5",
    "\u02da\u016e\2\u08bb\u08bd\5\u02d8\u016d\2\u08bc\u08ba\3\2\2\2\u08bc",
    "\u08bb\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u08bf\7\u01f3\2\2\u08bf\u08c0",
    "\5\u01f4\u00fb\2\u08c0\u00e7\3\2\2\2\u08c1\u08c3\7I\2\2\u08c2\u08c4",
    "\5\u02a4\u0153\2\u08c3\u08c2\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c7",
    "\3\2\2\2\u08c5\u08c6\7\u01a7\2\2\u08c6\u08c8\5\u01f0\u00f9\2\u08c7\u08c5",
    "\3\2\2\2\u08c7\u08c8\3\2\2\2\u08c8\u00e9\3\2\2\2\u08c9\u08cb\7\u0087",
    "\2\2\u08ca\u08cc\5\u02a4\u0153\2\u08cb\u08ca\3\2\2\2\u08cb\u08cc\3\2",
    "\2\2\u08cc\u08cf\3\2\2\2\u08cd\u08ce\7\u01a7\2\2\u08ce\u08d0\5\u01f0",
    "\u00f9\2\u08cf\u08cd\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u00eb\3\2\2\2",
    "\u08d1\u08d2\7\u009a\2\2\u08d2\u08d3\5\u02a4\u0153\2\u08d3\u00ed\3\2",
    "\2\2\u08d4\u08d5\7\u00a2\2\2\u08d5\u08d6\5\u01f0\u00f9\2\u08d6\u08d7",
    "\7\u0179\2\2\u08d7\u08db\5\u00e0q\2\u08d8\u08da\5\u00f0y\2\u08d9\u08d8",
    "\3\2\2\2\u08da\u08dd\3\2\2\2\u08db\u08d9\3\2\2\2\u08db\u08dc\3\2\2\2",
    "\u08dc\u08df\3\2\2\2\u08dd\u08db\3\2\2\2\u08de\u08e0\5\u00f2z\2\u08df",
    "\u08de\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u08e2\7",
    "{\2\2\u08e2\u08e3\7\u00a2\2\2\u08e3\u00ef\3\2\2\2\u08e4\u08e5\7w\2\2",
    "\u08e5\u08e6\5\u01f0\u00f9\2\u08e6\u08e7\7\u0179\2\2\u08e7\u08e8\5\u00e0",
    "q\2\u08e8\u00f1\3\2\2\2\u08e9\u08ea\7v\2\2\u08ea\u08eb\5\u00e0q\2\u08eb",
    "\u00f3\3\2\2\2\u08ec\u08ee\5\u02a4\u0153\2\u08ed\u08ec\3\2\2\2\u08ed",
    "\u08ee\3\2\2\2\u08ee\u08f3\3\2\2\2\u08ef\u08f0\7\u01aa\2\2\u08f0\u08f4",
    "\5\u01f0\u00f9\2\u08f1\u08f2\7\u0094\2\2\u08f2\u08f4\5\u00f6|\2\u08f3",
    "\u08ef\3\2\2\2\u08f3\u08f1\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u08f5\3",
    "\2\2\2\u08f5\u08f6\7\u00d4\2\2\u08f6\u08f7\5\u00e0q\2\u08f7\u08f8\7",
    "{\2\2\u08f8\u08fa\7\u00d4\2\2\u08f9\u08fb\5\u02a4\u0153\2\u08fa\u08f9",
    "\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u00f5\3\2\2\2\u08fc\u08fd\5\u02b4",
    "\u015b\2\u08fd\u08ff\7\u00a5\2\2\u08fe\u0900\7\u013c\2\2\u08ff\u08fe",
    "\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0901\3\2\2\2\u0901\u0902\5\u00fe",
    "\u0080\2\u0902\u0903\7\3\2\2\u0903\u0904\5\u0100\u0081\2\u0904\u0912",
    "\3\2\2\2\u0905\u0906\5\u02b8\u015d\2\u0906\u090f\7\u00a5\2\2\u0907\u0909",
    "\5\u02b6\u015c\2\u0908\u090a\5\u01ee\u00f8\2\u0909\u0908\3\2\2\2\u0909",
    "\u090a\3\2\2\2\u090a\u0910\3\2\2\2\u090b\u090c\7\u01ea\2\2\u090c\u090d",
    "\5\u0136\u009c\2\u090d\u090e\7\u01eb\2\2\u090e\u0910\3\2\2\2\u090f\u0907",
    "\3\2\2\2\u090f\u090b\3\2\2\2\u0910\u0912\3\2\2\2\u0911\u08fc\3\2\2\2",
    "\u0911\u0905\3\2\2\2\u0912\u00f7\3\2\2\2\u0913\u0914\7\u0095\2\2\u0914",
    "\u0915\5\u02b4\u015b\2\u0915\u0916\7\u00a5\2\2\u0916\u0917\5\u00fa~",
    "\2\u0917\u091a\5\u0114\u008b\2\u0918\u0919\7\u0146\2\2\u0919\u091b\7",
    "\u0082\2\2\u091a\u0918\3\2\2\2\u091a\u091b\3\2\2\2\u091b\u00f9\3\2\2",
    "\2\u091c\u091d\5\u00fe\u0080\2\u091d\u091e\7\3\2\2\u091e\u091f\5\u0100",
    "\u0081\2\u091f\u092a\3\2\2\2\u0920\u0921\7\u00ad\2\2\u0921\u0922\7\u0102",
    "\2\2\u0922\u0924\5\u02ba\u015e\2\u0923\u0925\5\u00fc\177\2\u0924\u0923",
    "\3\2\2\2\u0924\u0925\3\2\2\2\u0925\u092a\3\2\2\2\u0926\u0927\7\u019c",
    "\2\2\u0927\u0928\7\u0102\2\2\u0928\u092a\5\u02b4\u015b\2\u0929\u091c",
    "\3\2\2\2\u0929\u0920\3\2\2\2\u0929\u0926\3\2\2\2\u092a\u00fb\3\2\2\2",
    "\u092b\u092c\7\34\2\2\u092c\u092d\5\u00fe\u0080\2\u092d\u092e\7\f\2",
    "\2\u092e\u092f\5\u0100\u0081\2\u092f\u00fd\3\2\2\2\u0930\u0931\5\u020e",
    "\u0108\2\u0931\u00ff\3\2\2\2\u0932\u0933\5\u020e\u0108\2\u0933\u0101",
    "\3\2\2\2\u0934\u0935\7\u00fc\2\2\u0935\u0103\3\2\2\2\u0936\u0938\7\u0128",
    "\2\2\u0937\u0939\5\u02aa\u0156\2\u0938\u0937\3\2\2\2\u0938\u0939\3\2",
    "\2\2\u0939\u0105\3\2\2\2\u093a\u093c\7\u0139\2\2\u093b\u093d\5\u01f0",
    "\u00f9\2\u093c\u093b\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u0107\3\2\2\2",
    "\u093e\u0940\7,\2\2\u093f\u093e\3\2\2\2\u093f\u0940\3\2\2\2\u0940\u0941",
    "\3\2\2\2\u0941\u0943\5\u0292\u014a\2\u0942\u0944\5\u02c6\u0164\2\u0943",
    "\u0942\3\2\2\2\u0943\u0944\3\2\2\2\u0944\u0109\3\2\2\2\u0945\u0946\7",
    "\33\2\2\u0946\u0948\5\u00e0q\2\u0947\u0949\5\u010c\u0087\2\u0948\u0947",
    "\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094c\7{\2\2",
    "\u094b\u094d\5\u02a4\u0153\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2\2\2",
    "\u094d\u010b\3\2\2\2\u094e\u0950\7\u0080\2\2\u094f\u0951\5\u010e\u0088",
    "\2\u0950\u094f\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0950\3\2\2\2\u0952",
    "\u0953\3\2\2\2\u0953\u010d\3\2\2\2\u0954\u0955\7\u01a7\2\2\u0955\u095a",
    "\5\u02aa\u0156\2\u0956\u0957\7\u010a\2\2\u0957\u0959\5\u02aa\u0156\2",
    "\u0958\u0956\3\2\2\2\u0959\u095c\3\2\2\2\u095a\u0958\3\2\2\2\u095a\u095b",
    "\3\2\2\2\u095b\u095d\3\2\2\2\u095c\u095a\3\2\2\2\u095d\u095e\7\u0179",
    "\2\2\u095e\u095f\5\u00e0q\2\u095f\u010f\3\2\2\2\u0960\u0962\7a\2\2\u0961",
    "\u0960\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u0964\3\2\2\2\u0963\u0965\5",
    "\u00c0a\2\u0964\u0963\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0964\3\2\2",
    "\2\u0966\u0967\3\2\2\2\u0967\u0969\3\2\2\2\u0968\u0961\3\2\2\2\u0968",
    "\u0969\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096b\5\u010a\u0086\2\u096b",
    "\u0111\3\2\2\2\u096c\u096e\7a\2\2\u096d\u096c\3\2\2\2\u096d\u096e\3",
    "\2\2\2\u096e\u0970\3\2\2\2\u096f\u0971\5\u00c0a\2\u0970\u096f\3\2\2",
    "\2\u0971\u0972\3\2\2\2\u0972\u0970\3\2\2\2\u0972\u0973\3\2\2\2\u0973",
    "\u0974\3\2\2\2\u0974\u0975\5\u010a\u0086\2\u0975\u0113\3\2\2\2\u0976",
    "\u097b\5\u0116\u008c\2\u0977\u097b\5\u011a\u008e\2\u0978\u097b\5\u011c",
    "\u008f\2\u0979\u097b\5\u0126\u0094\2\u097a\u0976\3\2\2\2\u097a\u0977",
    "\3\2\2\2\u097a\u0978\3\2\2\2\u097a\u0979\3\2\2\2\u097b\u0115\3\2\2\2",
    "\u097c\u097d\7\u0085\2\2\u097d\u097e\7\u00a4\2\2\u097e\u0988\5\u01f4",
    "\u00fb\2\u097f\u0981\5\u0282\u0142\2\u0980\u0982\5\u024c\u0127\2\u0981",
    "\u0980\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u0989\3\2\2\2\u0983\u0985\5",
    "\u024c\u0127\2\u0984\u0986\5\u0118\u008d\2\u0985\u0984\3\2\2\2\u0985",
    "\u0986\3\2\2\2\u0986\u0989\3\2\2\2\u0987\u0989\5\u0118\u008d\2\u0988",
    "\u097f\3\2\2\2\u0988\u0983\3\2\2\2\u0988\u0987\3\2\2\2\u0988\u0989\3",
    "\2\2\2\u0989\u0117\3\2\2\2\u098a\u098b\t\31\2\2\u098b\u098c\5\u0282",
    "\u0142\2\u098c\u0119\3\2\2\2\u098d\u0995\5\u01c4\u00e3\2\u098e\u0995",
    "\5\u01d0\u00e9\2\u098f\u0995\5\u0136\u009c\2\u0990\u0995\5\u01aa\u00d6",
    "\2\u0991\u0995\5\u01b0\u00d9\2\u0992\u0995\5\u01b2\u00da\2\u0993\u0995",
    "\5\u0134\u009b\2\u0994\u098d\3\2\2\2\u0994\u098e\3\2\2\2\u0994\u098f",
    "\3\2\2\2\u0994\u0990\3\2\2\2\u0994\u0991\3\2\2\2\u0994\u0992\3\2\2\2",
    "\u0994\u0993\3\2\2\2\u0995\u011b\3\2\2\2\u0996\u099b\5\u011e\u0090\2",
    "\u0997\u099b\5\u0120\u0091\2\u0998\u099b\5\u0122\u0092\2\u0999\u099b",
    "\5\u0124\u0093\2\u099a\u0996\3\2\2\2\u099a\u0997\3\2\2\2\u099a\u0998",
    "\3\2\2\2\u099a\u0999\3\2\2\2\u099b\u011d\3\2\2\2\u099c\u099d\7\67\2",
    "\2\u099d\u099e\5\u02b6\u015c\2\u099e\u011f\3\2\2\2\u099f\u09a0\7\u0108",
    "\2\2\u09a0\u09a2\5\u02b6\u015c\2\u09a1\u09a3\5\u01ee\u00f8\2\u09a2\u09a1",
    "\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3\u0121\3\2\2\2\u09a4\u09a5\7\u008d",
    "\2\2\u09a5\u09ba\5\u02b6\u015c\2\u09a6\u09a7\7\u00b9\2\2\u09a7\u09ac",
    "\5\u02b2\u015a\2\u09a8\u09a9\7\u01f0\2\2\u09a9\u09ab\5\u02b2\u015a\2",
    "\u09aa\u09a8\3\2\2\2\u09ab\u09ae\3\2\2\2\u09ac\u09aa\3\2\2\2\u09ac\u09ad",
    "\3\2\2\2\u09ad\u09bb\3\2\2\2\u09ae\u09ac\3\2\2\2\u09af\u09b0\7\'\2\2",
    "\u09b0\u09b1\79\2\2\u09b1\u09b2\7\u00b9\2\2\u09b2\u09b7\5\u02b2\u015a",
    "\2\u09b3\u09b4\7\u01f0\2\2\u09b4\u09b6\5\u02b2\u015a\2\u09b5\u09b3\3",
    "\2\2\2\u09b6\u09b9\3\2\2\2\u09b7\u09b5\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8",
    "\u09bb\3\2\2\2\u09b9\u09b7\3\2\2\2\u09ba\u09a6\3\2\2\2\u09ba\u09af\3",
    "\2\2\2\u09bb\u0123\3\2\2\2\u09bc\u09bd\7\u0108\2\2\u09bd\u09be\5\u02b2",
    "\u015a\2\u09be\u09c1\7\u0094\2\2\u09bf\u09c2\5\u0136\u009c\2\u09c0\u09c2",
    "\5\u01f4\u00fb\2\u09c1\u09bf\3\2\2\2\u09c1\u09c0\3\2\2\2\u09c2\u09c4",
    "\3\2\2\2\u09c3\u09c5\5\u024c\u0127\2\u09c4\u09c3\3\2\2\2\u09c4\u09c5",
    "\3\2\2\2\u09c5\u0125\3\2\2\2\u09c6\u09cc\5\u0128\u0095\2\u09c7\u09cc",
    "\5\u012a\u0096\2\u09c8\u09cc\5\u012c\u0097\2\u09c9\u09cc\5\u0130\u0099",
    "\2\u09ca\u09cc\5\u0132\u009a\2\u09cb\u09c6\3\2\2\2\u09cb\u09c7\3\2\2",
    "\2\u09cb\u09c8\3\2\2\2\u09cb\u09c9\3\2\2\2\u09cb\u09ca\3\2\2\2\u09cc",
    "\u0127\3\2\2\2\u09cd\u09ce\7\u0157\2\2\u09ce\u09dc\7\u0185\2\2\u09cf",
    "\u09d0\7\u012b\2\2\u09d0\u09dd\t\32\2\2\u09d1\u09d2\7\u00bc\2\2\u09d2",
    "\u09d6\7\u00c6\2\2\u09d3\u09d7\7\u0153\2\2\u09d4\u09d5\7\u012b\2\2\u09d5",
    "\u09d7\7=\2\2\u09d6\u09d3\3\2\2\2\u09d6\u09d4\3\2\2\2\u09d7\u09dd\3",
    "\2\2\2\u09d8\u09d9\7\u0198\2\2\u09d9\u09da\7\u013f\2\2\u09da\u09db\7",
    "\u014e\2\2\u09db\u09dd\5\u028c\u0147\2\u09dc\u09cf\3\2\2\2\u09dc\u09d1",
    "\3\2\2\2\u09dc\u09d8\3\2\2\2\u09dc\u09dd\3\2\2\2\u09dd\u09e0\3\2\2\2",
    "\u09de\u09df\7\u00e5\2\2\u09df\u09e1\5\u02e4\u0173\2\u09e0\u09de\3\2",
    "\2\2\u09e0\u09e1\3\2\2\2\u09e1\u0129\3\2\2\2\u09e2\u09e3\7\u0157\2\2",
    "\u09e3\u09ed\t\33\2\2\u09e4\u09ee\7\t\2\2\u09e5\u09ea\5\u02a2\u0152",
    "\2\u09e6\u09e7\7\u01f0\2\2\u09e7\u09e9\5\u02a2\u0152\2\u09e8\u09e6\3",
    "\2\2\2\u09e9\u09ec\3\2\2\2\u09ea\u09e8\3\2\2\2\u09ea\u09eb\3\2\2\2\u09eb",
    "\u09ee\3\2\2\2\u09ec\u09ea\3\2\2\2\u09ed\u09e4\3\2\2\2\u09ed\u09e5\3",
    "\2\2\2\u09ee\u09ef\3\2\2\2\u09ef\u09f0\t\34\2\2\u09f0\u012b\3\2\2\2",
    "\u09f1\u09f3\7<\2\2\u09f2\u09f4\7\u01ad\2\2\u09f3\u09f2\3\2\2\2\u09f3",
    "\u09f4\3\2\2\2\u09f4\u0a02\3\2\2\2\u09f5\u09f6\7;\2\2\u09f6\u0a03\5",
    "\u01f4\u00fb\2\u09f7\u0a00\7\u0096\2\2\u09f8\u09f9\7K\2\2\u09f9\u0a01",
    "\5\u01f4\u00fb\2\u09fa\u0a01\7L\2\2\u09fb\u09fe\5\u01f4\u00fb\2\u09fc",
    "\u09fd\7\u01f0\2\2\u09fd\u09ff\5\u01f4\u00fb\2\u09fe\u09fc\3\2\2\2\u09fe",
    "\u09ff\3\2\2\2\u09ff\u0a01\3\2\2\2\u0a00\u09f8\3\2\2\2\u0a00\u09fa\3",
    "\2\2\2\u0a00\u09fb\3\2\2\2\u0a01\u0a03\3\2\2\2\u0a02\u09f5\3\2\2\2\u0a02",
    "\u09f7\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a05\3\2\2\2\u0a04\u0a06\5",
    "\u012e\u0098\2\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u012d\3",
    "\2\2\2\u0a07\u0a09\7\u01ae\2\2\u0a08\u0a0a\t\35\2\2\u0a09\u0a08\3\2",
    "\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0c\3\2\2\2\u0a0b\u0a0d\t\36\2\2\u0a0c",
    "\u0a0b\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u012f\3\2\2\2\u0a0e\u0a10\7",
    "\u013f\2\2\u0a0f\u0a11\7\u01ad\2\2\u0a10\u0a0f\3\2\2\2\u0a10\u0a11\3",
    "\2\2\2\u0a11\u0a19\3\2\2\2\u0a12\u0a14\7\u0183\2\2\u0a13\u0a15\7\u0147",
    "\2\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16",
    "\u0a1a\5\u028a\u0146\2\u0a17\u0a18\7\u0096\2\2\u0a18\u0a1a\5\u02e4\u0173",
    "\2\u0a19\u0a12\3\2\2\2\u0a19\u0a17\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a",
    "\u0131\3\2\2\2\u0a1b\u0a1c\7\u0147\2\2\u0a1c\u0a1d\5\u028a\u0146\2\u0a1d",
    "\u0133\3\2\2\2\u0a1e\u0a1f\7\u0088\2\2\u0a1f\u0a24\7\u011e\2\2\u0a20",
    "\u0a21\7\u0157\2\2\u0a21\u0a22\7\u016d\2\2\u0a22\u0a23\7\u0201\2\2\u0a23",
    "\u0a25\5\u02e4\u0173\2\u0a24\u0a20\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25",
    "\u0a28\3\2\2\2\u0a26\u0a27\7\u00b9\2\2\u0a27\u0a29\5\u02c0\u0161\2\u0a28",
    "\u0a26\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a30\7",
    "\u0094\2\2\u0a2b\u0a31\5\u0136\u009c\2\u0a2c\u0a31\5\u01aa\u00d6\2\u0a2d",
    "\u0a31\5\u01b0\u00d9\2\u0a2e\u0a31\5\u01b2\u00da\2\u0a2f\u0a31\5\u01c4",
    "\u00e3\2\u0a30\u0a2b\3\2\2\2\u0a30\u0a2c\3\2\2\2\u0a30\u0a2d\3\2\2\2",
    "\u0a30\u0a2e\3\2\2\2\u0a30\u0a2f\3\2\2\2\u0a31\u0135\3\2\2\2\u0a32\u0a34",
    "\5\u0138\u009d\2\u0a33\u0a32\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a35",
    "\3\2\2\2\u0a35\u0a3a\5\u0140\u00a1\2\u0a36\u0a39\5\u01a4\u00d3\2\u0a37",
    "\u0a39\5\u01a0\u00d1\2\u0a38\u0a36\3\2\2\2\u0a38\u0a37\3\2\2\2\u0a39",
    "\u0a3c\3\2\2\2\u0a3a\u0a38\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0137\3",
    "\2\2\2\u0a3c\u0a3a\3\2\2\2\u0a3d\u0a3e\7\u01ab\2\2\u0a3e\u0a43\5\u013a",
    "\u009e\2\u0a3f\u0a40\7\u01f0\2\2\u0a40\u0a42\5\u013a\u009e\2\u0a41\u0a3f",
    "\3\2\2\2\u0a42\u0a45\3\2\2\2\u0a43\u0a41\3\2\2\2\u0a43\u0a44\3\2\2\2",
    "\u0a44\u0139\3\2\2\2\u0a45\u0a43\3\2\2\2\u0a46\u0a52\5\u02a0\u0151\2",
    "\u0a47\u0a48\7\u01ea\2\2\u0a48\u0a4d\5\u02be\u0160\2\u0a49\u0a4a\7\u01f0",
    "\2\2\u0a4a\u0a4c\5\u02be\u0160\2\u0a4b\u0a49\3\2\2\2\u0a4c\u0a4f\3\2",
    "\2\2\u0a4d\u0a4b\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e\u0a50\3\2\2\2\u0a4f",
    "\u0a4d\3\2\2\2\u0a50\u0a51\7\u01eb\2\2\u0a51\u0a53\3\2\2\2\u0a52\u0a47",
    "\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a55\7\17\2",
    "\2\u0a55\u0a56\7\u01ea\2\2\u0a56\u0a58\5\u0140\u00a1\2\u0a57\u0a59\5",
    "\u01a0\u00d1\2\u0a58\u0a57\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5a\3",
    "\2\2\2\u0a5a\u0a5c\7\u01eb\2\2\u0a5b\u0a5d\5\u013c\u009f\2\u0a5c\u0a5b",
    "\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a5f\3\2\2\2\u0a5e\u0a60\5\u013e",
    "\u00a0\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u013b\3\2\2\2",
    "\u0a61\u0a62\7\u014b\2\2\u0a62\u0a63\t\37\2\2\u0a63\u0a64\7\u008f\2",
    "\2\u0a64\u0a65\7(\2\2\u0a65\u0a67\5\u02be\u0160\2\u0a66\u0a68\7\20\2",
    "\2\u0a67\u0a66\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68\u0a6a\3\2\2\2\u0a69",
    "\u0a6b\7j\2\2\u0a6a\u0a69\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a6e\3",
    "\2\2\2\u0a6c\u0a6d\7\u00fd\2\2\u0a6d\u0a6f\7\u008f\2\2\u0a6e\u0a6c\3",
    "\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a72\3\2\2\2\u0a70\u0a71\7\u00fd\2",
    "\2\u0a71\u0a73\7\u00c2\2\2\u0a72\u0a70\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73",
    "\u0a86\3\2\2\2\u0a74\u0a75\7\u01f0\2\2\u0a75\u0a77\5\u02be\u0160\2\u0a76",
    "\u0a78\7\20\2\2\u0a77\u0a76\3\2\2\2\u0a77\u0a78\3\2\2\2\u0a78\u0a7a",
    "\3\2\2\2\u0a79\u0a7b\7j\2\2\u0a7a\u0a79\3\2\2\2\u0a7a\u0a7b\3\2\2\2",
    "\u0a7b\u0a7e\3\2\2\2\u0a7c\u0a7d\7\u00fd\2\2\u0a7d\u0a7f\7\u008f\2\2",
    "\u0a7e\u0a7c\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a82\3\2\2\2\u0a80\u0a81",
    "\7\u00fd\2\2\u0a81\u0a83\7\u00c2\2\2\u0a82\u0a80\3\2\2\2\u0a82\u0a83",
    "\3\2\2\2\u0a83\u0a85\3\2\2\2\u0a84\u0a74\3\2\2\2\u0a85\u0a88\3\2\2\2",
    "\u0a86\u0a84\3\2\2\2\u0a86\u0a87\3\2\2\2\u0a87\u0a89\3\2\2\2\u0a88\u0a86",
    "\3\2\2\2\u0a89\u0a8a\7\u0157\2\2\u0a8a\u0a8b\5\u02be\u0160\2\u0a8b\u013d",
    "\3\2\2\2\u0a8c\u0a8d\7V\2\2\u0a8d\u0a92\5\u02be\u0160\2\u0a8e\u0a8f",
    "\7\u01f0\2\2\u0a8f\u0a91\5\u02be\u0160\2\u0a90\u0a8e\3\2\2\2\u0a91\u0a94",
    "\3\2\2\2\u0a92\u0a90\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a95\3\2\2\2",
    "\u0a94\u0a92\3\2\2\2\u0a95\u0a96\7\u0157\2\2\u0a96\u0a97\5\u02be\u0160",
    "\2\u0a97\u0a98\7\u0183\2\2\u0a98\u0a99\5\u01f4\u00fb\2\u0a99\u0a9a\7",
    "d\2\2\u0a9a\u0a9b\5\u01f4\u00fb\2\u0a9b\u013f\3\2\2\2\u0a9c\u0aa0\5",
    "\u0144\u00a3\2\u0a9d\u0a9f\5\u0142\u00a2\2\u0a9e\u0a9d\3\2\2\2\u0a9f",
    "\u0aa2\3\2\2\2\u0aa0\u0a9e\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0141\3",
    "\2\2\2\u0aa2\u0aa0\3\2\2\2\u0aa3\u0aa5\7\u018f\2\2\u0aa4\u0aa6\7\t\2",
    "\2\u0aa5\u0aa4\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aaa\3\2\2\2\u0aa7",
    "\u0aaa\7\u00b7\2\2\u0aa8\u0aaa\7\u00dc\2\2\u0aa9\u0aa3\3\2\2\2\u0aa9",
    "\u0aa7\3\2\2\2\u0aa9\u0aa8\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aac\5",
    "\u0144\u00a3\2\u0aac\u0143\3\2\2\2\u0aad\u0ab3\5\u0146\u00a4\2\u0aae",
    "\u0aaf\7\u01ea\2\2\u0aaf\u0ab0\5\u0140\u00a1\2\u0ab0\u0ab1\7\u01eb\2",
    "\2\u0ab1\u0ab3\3\2\2\2\u0ab2\u0aad\3\2\2\2\u0ab2\u0aae\3\2\2\2\u0ab3",
    "\u0145\3\2\2\2\u0ab4\u0ab6\7\u014f\2\2\u0ab5\u0ab7\t \2\2\u0ab6\u0ab5",
    "\3\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0ac1\3\2\2\2\u0ab8\u0ac2\7\u01ed",
    "\2\2\u0ab9\u0abe\5\u0148\u00a5\2\u0aba\u0abb\7\u01f0\2\2\u0abb\u0abd",
    "\5\u0148\u00a5\2\u0abc\u0aba\3\2\2\2\u0abd\u0ac0\3\2\2\2\u0abe\u0abc",
    "\3\2\2\2\u0abe\u0abf\3\2\2\2\u0abf\u0ac2\3\2\2\2\u0ac0\u0abe\3\2\2\2",
    "\u0ac1\u0ab8\3\2\2\2\u0ac1\u0ab9\3\2\2\2\u0ac2\u0ac4\3\2\2\2\u0ac3\u0ac5",
    "\5\u0282\u0142\2\u0ac4\u0ac3\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ac6",
    "\3\2\2\2\u0ac6\u0ac8\5\u014a\u00a6\2\u0ac7\u0ac9\5\u027e\u0140\2\u0ac8",
    "\u0ac7\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0acb\3\2\2\2\u0aca\u0acc\5",
    "\u0172\u00ba\2\u0acb\u0aca\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0ace\3",
    "\2\2\2\u0acd\u0acf\5\u0176\u00bc\2\u0ace\u0acd\3\2\2\2\u0ace\u0acf\3",
    "\2\2\2\u0acf\u0ad1\3\2\2\2\u0ad0\u0ad2\5\u0182\u00c2\2\u0ad1\u0ad0\3",
    "\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u0147\3\2\2\2\u0ad3\u0ad5\5\u014c\u00a7",
    "\2\u0ad4\u0ad6\5\u0278\u013d\2\u0ad5\u0ad4\3\2\2\2\u0ad5\u0ad6\3\2\2",
    "\2\u0ad6\u0149\3\2\2\2\u0ad7\u0ad8\7\u0097\2\2\u0ad8\u0ad9\5\u014e\u00a8",
    "\2\u0ad9\u014b\3\2\2\2\u0ada\u0adb\5\u02c0\u0161\2\u0adb\u0adc\7\u01e3",
    "\2\2\u0adc\u0add\7\u01ed\2\2\u0add\u0ae0\3\2\2\2\u0ade\u0ae0\5\u01f4",
    "\u00fb\2\u0adf\u0ada\3\2\2\2\u0adf\u0ade\3\2\2\2\u0ae0\u014d\3\2\2\2",
    "\u0ae1\u0ae6\5\u0150\u00a9\2\u0ae2\u0ae3\7\u01f0\2\2\u0ae3\u0ae5\5\u0150",
    "\u00a9\2\u0ae4\u0ae2\3\2\2\2\u0ae5\u0ae8\3\2\2\2\u0ae6\u0ae4\3\2\2\2",
    "\u0ae6\u0ae7\3\2\2\2\u0ae7\u014f\3\2\2\2\u0ae8\u0ae6\3\2\2\2\u0ae9\u0aed",
    "\5\u0152\u00aa\2\u0aea\u0aec\5\u0154\u00ab\2\u0aeb\u0aea\3\2\2\2\u0aec",
    "\u0aef\3\2\2\2\u0aed\u0aeb\3\2\2\2\u0aed\u0aee\3\2\2\2\u0aee\u0af2\3",
    "\2\2\2\u0aef\u0aed\3\2\2\2\u0af0\u0af3\5\u0160\u00b1\2\u0af1\u0af3\5",
    "\u016c\u00b7\2\u0af2\u0af0\3\2\2\2\u0af2\u0af1\3\2\2\2\u0af2\u0af3\3",
    "\2\2\2\u0af3\u0151\3\2\2\2\u0af4\u0af7\5\u01e2\u00f2\2\u0af5\u0af8\5",
    "\u0160\u00b1\2\u0af6\u0af8\5\u016c\u00b7\2\u0af7\u0af5\3\2\2\2\u0af7",
    "\u0af6\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0b11\3\2\2\2\u0af9\u0afa\7",
    "\u01ea\2\2\u0afa\u0afe\5\u0150\u00a9\2\u0afb\u0afd\5\u0142\u00a2\2\u0afc",
    "\u0afb\3\2\2\2\u0afd\u0b00\3\2\2\2\u0afe\u0afc\3\2\2\2\u0afe\u0aff\3",
    "\2\2\2\u0aff\u0b01\3\2\2\2\u0b00\u0afe\3\2\2\2\u0b01\u0b04\7\u01eb\2",
    "\2\u0b02\u0b05\5\u0160\u00b1\2\u0b03\u0b05\5\u016c\u00b7\2\u0b04\u0b02",
    "\3\2\2\2\u0b04\u0b03\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05\u0b11\3\2\2\2",
    "\u0b06\u0b07\7\u0107\2\2\u0b07\u0b08\7\u01ea\2\2\u0b08\u0b09\5\u01e2",
    "\u00f2\2\u0b09\u0b0a\7\u01eb\2\2\u0b0a\u0b11\3\2\2\2\u0b0b\u0b0e\5\u01e2",
    "\u00f2\2\u0b0c\u0b0f\5\u0160\u00b1\2\u0b0d\u0b0f\5\u016c\u00b7\2\u0b0e",
    "\u0b0c\3\2\2\2\u0b0e\u0b0d\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b11\3",
    "\2\2\2\u0b10\u0af4\3\2\2\2\u0b10\u0af9\3\2\2\2\u0b10\u0b06\3\2\2\2\u0b10",
    "\u0b0b\3\2\2\2\u0b11\u0b15\3\2\2\2\u0b12\u0b14\5\u015e\u00b0\2\u0b13",
    "\u0b12\3\2\2\2\u0b14\u0b17\3\2\2\2\u0b15\u0b13\3\2\2\2\u0b15\u0b16\3",
    "\2\2\2\u0b16\u0b19\3\2\2\2\u0b17\u0b15\3\2\2\2\u0b18\u0b1a\5\u027a\u013e",
    "\2\u0b19\u0b18\3\2\2\2\u0b19\u0b1a\3\2\2\2\u0b1a\u0153\3\2\2\2\u0b1b",
    "\u0b1d\5\u015c\u00af\2\u0b1c\u0b1b\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d",
    "\u0b1f\3\2\2\2\u0b1e\u0b20\t!\2\2\u0b1f\u0b1e\3\2\2\2\u0b1f\u0b20\3",
    "\2\2\2\u0b20\u0b23\3\2\2\2\u0b21\u0b24\7\u00b0\2\2\u0b22\u0b24\5\u015a",
    "\u00ae\2\u0b23\u0b21\3\2\2\2\u0b23\u0b22\3\2\2\2\u0b23\u0b24\3\2\2\2",
    "\u0b24\u0b25\3\2\2\2\u0b25\u0b26\7\u00bf\2\2\u0b26\u0b28\5\u0152\u00aa",
    "\2\u0b27\u0b29\5\u015c\u00af\2\u0b28\u0b27\3\2\2\2\u0b28\u0b29\3\2\2",
    "\2\u0b29\u0b2e\3\2\2\2\u0b2a\u0b2d\5\u0156\u00ac\2\u0b2b\u0b2d\5\u0158",
    "\u00ad\2\u0b2c\u0b2a\3\2\2\2\u0b2c\u0b2b\3\2\2\2\u0b2d\u0b30\3\2\2\2",
    "\u0b2e\u0b2c\3\2\2\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u0155\3\2\2\2\u0b30\u0b2e",
    "\3\2\2\2\u0b31\u0b32\7\u0106\2\2\u0b32\u0b33\5\u01f0\u00f9\2\u0b33\u0157",
    "\3\2\2\2\u0b34\u0b35\7\u0199\2\2\u0b35\u0b36\7\u01ea\2\2\u0b36\u0b3b",
    "\5\u02be\u0160\2\u0b37\u0b38\7\u01f0\2\2\u0b38\u0b3a\5\u02be\u0160\2",
    "\u0b39\u0b37\3\2\2\2\u0b3a\u0b3d\3\2\2\2\u0b3b\u0b39\3\2\2\2\u0b3b\u0b3c",
    "\3\2\2\2\u0b3c\u0b3e\3\2\2\2\u0b3d\u0b3b\3\2\2\2\u0b3e\u0b3f\7\u01eb",
    "\2\2\u0b3f\u0159\3\2\2\2\u0b40\u0b42\t\"\2\2\u0b41\u0b43\7\u0110\2\2",
    "\u0b42\u0b41\3\2\2\2\u0b42\u0b43\3\2\2\2\u0b43\u015b\3\2\2\2\u0b44\u0b45",
    "\7\u0117\2\2\u0b45\u0b53\7(\2\2\u0b46\u0b47\7\u01ea\2\2\u0b47\u0b48",
    "\5\u0140\u00a1\2\u0b48\u0b49\7\u01eb\2\2\u0b49\u0b54\3\2\2\2\u0b4a\u0b54",
    "\5\u01ee\u00f8\2\u0b4b\u0b50\5\u01f4\u00fb\2\u0b4c\u0b4d\7\u01f0\2\2",
    "\u0b4d\u0b4f\5\u01f4\u00fb\2\u0b4e\u0b4c\3\2\2\2\u0b4f\u0b52\3\2\2\2",
    "\u0b50\u0b4e\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b54\3\2\2\2\u0b52\u0b50",
    "\3\2\2\2\u0b53\u0b46\3\2\2\2\u0b53\u0b4a\3\2\2\2\u0b53\u0b4b\3\2\2\2",
    "\u0b54\u015d\3\2\2\2\u0b55\u0b56\7\u01a3\2\2\u0b56\u0b57\7\34\2\2\u0b57",
    "\u0b58\t#\2\2\u0b58\u0b5e\5\u01f4\u00fb\2\u0b59\u0b5a\7\17\2\2\u0b5a",
    "\u0b5b\7\u0102\2\2\u0b5b\u0b5c\t$\2\2\u0b5c\u0b5e\5\u01f4\u00fb\2\u0b5d",
    "\u0b55\3\2\2\2\u0b5d\u0b59\3\2\2\2\u0b5e\u015f\3\2\2\2\u0b5f\u0b61\7",
    "\u011d\2\2\u0b60\u0b62\7\u01af\2\2\u0b61\u0b60\3\2\2\2\u0b61\u0b62\3",
    "\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b64\7\u01ea\2\2\u0b64\u0b69\5\u0162",
    "\u00b2\2\u0b65\u0b66\7\u01f0\2\2\u0b66\u0b68\5\u0162\u00b2\2\u0b67\u0b65",
    "\3\2\2\2\u0b68\u0b6b\3\2\2\2\u0b69\u0b67\3\2\2\2\u0b69\u0b6a\3\2\2\2",
    "\u0b6a\u0b6c\3\2\2\2\u0b6b\u0b69\3\2\2\2\u0b6c\u0b6d\5\u0164\u00b3\2",
    "\u0b6d\u0b6e\5\u0166\u00b4\2\u0b6e\u0b6f\7\u01eb\2\2\u0b6f\u0161\3\2",
    "\2\2\u0b70\u0b71\5\u029e\u0150\2\u0b71\u0b72\7\u01ea\2\2\u0b72\u0b73",
    "\5\u01f4\u00fb\2\u0b73\u0b75\7\u01eb\2\2\u0b74\u0b76\5\u0278\u013d\2",
    "\u0b75\u0b74\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0163\3\2\2\2\u0b77\u0b84",
    "\7\u0094\2\2\u0b78\u0b85\5\u02be\u0160\2\u0b79\u0b7a\7\u01ea\2\2\u0b7a",
    "\u0b7f\5\u02be\u0160\2\u0b7b\u0b7c\7\u01f0\2\2\u0b7c\u0b7e\5\u02be\u0160",
    "\2\u0b7d\u0b7b\3\2\2\2\u0b7e\u0b81\3\2\2\2\u0b7f\u0b7d\3\2\2\2\u0b7f",
    "\u0b80\3\2\2\2\u0b80\u0b82\3\2\2\2\u0b81\u0b7f\3\2\2\2\u0b82\u0b83\7",
    "\u01eb\2\2\u0b83\u0b85\3\2\2\2\u0b84\u0b78\3\2\2\2\u0b84\u0b79\3\2\2",
    "\2\u0b85\u0165\3\2\2\2\u0b86\u0b87\7\u00a5\2\2\u0b87\u0b99\7\u01ea\2",
    "\2\u0b88\u0b9a\5\u0140\u00a1\2\u0b89\u0b8e\7\r\2\2\u0b8a\u0b8b\7\u01f0",
    "\2\2\u0b8b\u0b8d\7\r\2\2\u0b8c\u0b8a\3\2\2\2\u0b8d\u0b90\3\2\2\2\u0b8e",
    "\u0b8c\3\2\2\2\u0b8e\u0b8f\3\2\2\2\u0b8f\u0b9a\3\2\2\2\u0b90\u0b8e\3",
    "\2\2\2\u0b91\u0b96\5\u0168\u00b5\2\u0b92\u0b93\7\u01f0\2\2\u0b93\u0b95",
    "\5\u0168\u00b5\2\u0b94\u0b92\3\2\2\2\u0b95\u0b98\3\2\2\2\u0b96\u0b94",
    "\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0b9a\3\2\2\2\u0b98\u0b96\3\2\2\2",
    "\u0b99\u0b88\3\2\2\2\u0b99\u0b89\3\2\2\2\u0b99\u0b91\3\2\2\2\u0b9a\u0b9b",
    "\3\2\2\2\u0b9b\u0b9c\7\u01eb\2\2\u0b9c\u0167\3\2\2\2\u0b9d\u0b9f\5\u016a",
    "\u00b6\2\u0b9e\u0ba0\5\u0278\u013d\2\u0b9f\u0b9e\3\2\2\2\u0b9f\u0ba0",
    "\3\2\2\2\u0ba0\u0169\3\2\2\2\u0ba1\u0ba4\5\u01f4\u00fb\2\u0ba2\u0ba4",
    "\5\u01ee\u00f8\2\u0ba3\u0ba1\3\2\2\2\u0ba3\u0ba2\3\2\2\2\u0ba4\u016b",
    "\3\2\2\2\u0ba5\u0ba8\7\u0192\2\2\u0ba6\u0ba7\t%\2\2\u0ba7\u0ba9\7\u00fd",
    "\2\2\u0ba8\u0ba6\3\2\2\2\u0ba8\u0ba9\3\2\2\2\u0ba9\u0baa\3\2\2\2\u0baa",
    "\u0bb7\7\u01ea\2\2\u0bab\u0bb8\5\u02be\u0160\2\u0bac\u0bad\7\u01ea\2",
    "\2\u0bad\u0bb2\5\u02be\u0160\2\u0bae\u0baf\7\u01f0\2\2\u0baf\u0bb1\5",
    "\u02be\u0160\2\u0bb0\u0bae\3\2\2\2\u0bb1\u0bb4\3\2\2\2\u0bb2\u0bb0\3",
    "\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb5\3\2\2\2\u0bb4\u0bb2\3\2\2\2\u0bb5",
    "\u0bb6\7\u01eb\2\2\u0bb6\u0bb8\3\2\2\2\u0bb7\u0bab\3\2\2\2\u0bb7\u0bac",
    "\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bba\5\u0164\u00b3\2\u0bba\u0bbb",
    "\5\u016e\u00b8\2\u0bbb\u0bbc\7\u01eb\2\2\u0bbc\u016d\3\2\2\2\u0bbd\u0bbe",
    "\7\u00a5\2\2\u0bbe\u0bbf\7\u01ea\2\2\u0bbf\u0bc4\5\u0170\u00b9\2\u0bc0",
    "\u0bc1\7\u01f0\2\2\u0bc1\u0bc3\5\u0170\u00b9\2\u0bc2\u0bc0\3\2\2\2\u0bc3",
    "\u0bc6\3\2\2\2\u0bc4\u0bc2\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bc7\3",
    "\2\2\2\u0bc6\u0bc4\3\2\2\2\u0bc7\u0bc8\7\u01eb\2\2\u0bc8\u016f\3\2\2",
    "\2\u0bc9\u0bd6\5\u02be\u0160\2\u0bca\u0bcb\7\u01ea\2\2\u0bcb\u0bd0\5",
    "\u02be\u0160\2\u0bcc\u0bcd\7\u01f0\2\2\u0bcd\u0bcf\5\u02be\u0160\2\u0bce",
    "\u0bcc\3\2\2\2\u0bcf\u0bd2\3\2\2\2\u0bd0\u0bce\3\2\2\2\u0bd0\u0bd1\3",
    "\2\2\2\u0bd1\u0bd3\3\2\2\2\u0bd2\u0bd0\3\2\2\2\u0bd3\u0bd4\7\u01eb\2",
    "\2\u0bd4\u0bd6\3\2\2\2\u0bd5\u0bc9\3\2\2\2\u0bd5\u0bca\3\2\2\2\u0bd6",
    "\u0be6\3\2\2\2\u0bd7\u0be4\7\17\2\2\u0bd8\u0be5\5\u02e0\u0171\2\u0bd9",
    "\u0bda\7\u01ea\2\2\u0bda\u0bdf\5\u02e0\u0171\2\u0bdb\u0bdc\7\u01f0\2",
    "\2\u0bdc\u0bde\5\u02e0\u0171\2\u0bdd\u0bdb\3\2\2\2\u0bde\u0be1\3\2\2",
    "\2\u0bdf\u0bdd\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be2\3\2\2\2\u0be1",
    "\u0bdf\3\2\2\2\u0be2\u0be3\7\u01eb\2\2\u0be3\u0be5\3\2\2\2\u0be4\u0bd8",
    "\3\2\2\2\u0be4\u0bd9\3\2\2\2\u0be5\u0be7\3\2\2\2\u0be6\u0bd7\3\2\2\2",
    "\u0be6\u0be7\3\2\2\2\u0be7\u0171\3\2\2\2\u0be8\u0be9\7A\2\2\u0be9\u0beb",
    "\7(\2\2\u0bea\u0bec\7\u00f3\2\2\u0beb\u0bea\3\2\2\2\u0beb\u0bec\3\2",
    "\2\2\u0bec\u0bed\3\2\2\2\u0bed\u0bef\5\u01f0\u00f9\2\u0bee\u0bf0\5\u0174",
    "\u00bb\2\u0bef\u0bee\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bfa\3\2\2\2",
    "\u0bf1\u0bf2\5\u0174\u00bb\2\u0bf2\u0bf3\7A\2\2\u0bf3\u0bf5\7(\2\2\u0bf4",
    "\u0bf6\7\u00f3\2\2\u0bf5\u0bf4\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0bf7",
    "\3\2\2\2\u0bf7\u0bf8\5\u01f0\u00f9\2\u0bf8\u0bfa\3\2\2\2\u0bf9\u0be8",
    "\3\2\2\2\u0bf9\u0bf1\3\2\2\2\u0bfa\u0173\3\2\2\2\u0bfb\u0bfc\7\u016a",
    "\2\2\u0bfc\u0bfd\7\u01ab\2\2\u0bfd\u0bfe\5\u01f0\u00f9\2\u0bfe\u0175",
    "\3\2\2\2\u0bff\u0c00\7\u009c\2\2\u0c00\u0c01\7(\2\2\u0c01\u0c06\5\u0178",
    "\u00bd\2\u0c02\u0c03\7\u01f0\2\2\u0c03\u0c05\5\u0178\u00bd\2\u0c04\u0c02",
    "\3\2\2\2\u0c05\u0c08\3\2\2\2\u0c06\u0c04\3\2\2\2\u0c06\u0c07\3\2\2\2",
    "\u0c07\u0c0a\3\2\2\2\u0c08\u0c06\3\2\2\2\u0c09\u0c0b\5\u0180\u00c1\2",
    "\u0c0a\u0c09\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c1a\3\2\2\2\u0c0c\u0c17",
    "\5\u0180\u00c1\2\u0c0d\u0c0e\7\u009c\2\2\u0c0e\u0c0f\7(\2\2\u0c0f\u0c14",
    "\5\u0178\u00bd\2\u0c10\u0c11\7\u01f0\2\2\u0c11\u0c13\5\u0178\u00bd\2",
    "\u0c12\u0c10\3\2\2\2\u0c13\u0c16\3\2\2\2\u0c14\u0c12\3\2\2\2\u0c14\u0c15",
    "\3\2\2\2\u0c15\u0c18\3\2\2\2\u0c16\u0c14\3\2\2\2\u0c17\u0c0d\3\2\2\2",
    "\u0c17\u0c18\3\2\2\2\u0c18\u0c1a\3\2\2\2\u0c19\u0bff\3\2\2\2\u0c19\u0c0c",
    "\3\2\2\2\u0c1a\u0177\3\2\2\2\u0c1b\u0c1f\5\u017c\u00bf\2\u0c1c\u0c1f",
    "\5\u017a\u00be\2\u0c1d\u0c1f\5\u01f4\u00fb\2\u0c1e\u0c1b\3\2\2\2\u0c1e",
    "\u0c1c\3\2\2\2\u0c1e\u0c1d\3\2\2\2\u0c1f\u0179\3\2\2\2\u0c20\u0c21\t",
    "&\2\2\u0c21\u0c22\7\u01ea\2\2\u0c22\u0c27\5\u017e\u00c0\2\u0c23\u0c24",
    "\7\u01f0\2\2\u0c24\u0c26\5\u017e\u00c0\2\u0c25\u0c23\3\2\2\2\u0c26\u0c29",
    "\3\2\2\2\u0c27\u0c25\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c2a\3\2\2\2",
    "\u0c29\u0c27\3\2\2\2\u0c2a\u0c2b\7\u01eb\2\2\u0c2b\u017b\3\2\2\2\u0c2c",
    "\u0c2d\7\u009d\2\2\u0c2d\u0c2e\7\u0158\2\2\u0c2e\u0c2f\7\u01ea\2\2\u0c2f",
    "\u0c34\5\u017e\u00c0\2\u0c30\u0c31\7\u01f0\2\2\u0c31\u0c33\5\u017e\u00c0",
    "\2\u0c32\u0c30\3\2\2\2\u0c33\u0c36\3\2\2\2\u0c34\u0c32\3\2\2\2\u0c34",
    "\u0c35\3\2\2\2\u0c35\u0c37\3\2\2\2\u0c36\u0c34\3\2\2\2\u0c37\u0c38\7",
    "\u01eb\2\2\u0c38\u017d\3\2\2\2\u0c39\u0c3d\5\u017a\u00be\2\u0c3a\u0c3d",
    "\5\u01ee\u00f8\2\u0c3b\u0c3d\5\u01f4\u00fb\2\u0c3c\u0c39\3\2\2\2\u0c3c",
    "\u0c3a\3\2\2\2\u0c3c\u0c3b\3\2\2\2\u0c3d\u017f\3\2\2\2\u0c3e\u0c3f\7",
    "\u009f\2\2\u0c3f\u0c40\5\u01f0\u00f9\2\u0c40\u0181\3\2\2\2\u0c41\u0c45",
    "\7\u00e1\2\2\u0c42\u0c44\5\u0184\u00c3\2\u0c43\u0c42\3\2\2\2\u0c44\u0c47",
    "\3\2\2\2\u0c45\u0c43\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46\u0c49\3\2\2\2",
    "\u0c47\u0c45\3\2\2\2\u0c48\u0c4a\5\u0186\u00c4\2\u0c49\u0c48\3\2\2\2",
    "\u0c49\u0c4a\3\2\2\2\u0c4a\u0c4e\3\2\2\2\u0c4b\u0c4d\5\u0188\u00c5\2",
    "\u0c4c\u0c4b\3\2\2\2\u0c4d\u0c50\3\2\2\2\u0c4e\u0c4c\3\2\2\2\u0c4e\u0c4f",
    "\3\2\2\2\u0c4f\u0c51\3\2\2\2\u0c50\u0c4e\3\2\2\2\u0c51\u0c52\5\u018a",
    "\u00c6\2\u0c52\u0183\3\2\2\2\u0c53\u0c54\t\'\2\2\u0c54\u0c5c\7\u00e9",
    "\2\2\u0c55\u0c59\7\u0190\2\2\u0c56\u0c5a\7l\2\2\u0c57\u0c58\7\u0160",
    "\2\2\u0c58\u0c5a\7\u012f\2\2\u0c59\u0c56\3\2\2\2\u0c59\u0c57\3\2\2\2",
    "\u0c5a\u0c5c\3\2\2\2\u0c5b\u0c53\3\2\2\2\u0c5b\u0c55\3\2\2\2\u0c5c\u0185",
    "\3\2\2\2\u0c5d\u0c5e\7\u0139\2\2\u0c5e\u0c5f\t(\2\2\u0c5f\u0c60\7\u0143",
    "\2\2\u0c60\u0187\3\2\2\2\u0c61\u0c62\7\u012f\2\2\u0c62\u0c63\5\u029a",
    "\u014e\2\u0c63\u0c64\7\u0106\2\2\u0c64\u0c65\7\u01ea\2\2\u0c65\u0c66",
    "\5\u0140\u00a1\2\u0c66\u0c67\7\u01eb\2\2\u0c67\u0c6b\5\u018c\u00c7\2",
    "\u0c68\u0c6a\5\u0184\u00c3\2\u0c69\u0c68\3\2\2\2\u0c6a\u0c6d\3\2\2\2",
    "\u0c6b\u0c69\3\2\2\2\u0c6b\u0c6c\3\2\2\2\u0c6c\u0189\3\2\2\2\u0c6d\u0c6b",
    "\3\2\2\2\u0c6e\u0c6f\7\u00d5\2\2\u0c6f\u0c71\5\u029c\u014f\2\u0c70\u0c6e",
    "\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72\u0c76\5\u018c",
    "\u00c7\2\u0c73\u0c75\5\u0184\u00c3\2\u0c74\u0c73\3\2\2\2\u0c75\u0c78",
    "\3\2\2\2\u0c76\u0c74\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0c79\3\2\2\2",
    "\u0c78\u0c76\3\2\2\2\u0c79\u0c7a\5\u0194\u00cb\2\u0c7a\u018b\3\2\2\2",
    "\u0c7b\u0c7d\5\u018e\u00c8\2\u0c7c\u0c7b\3\2\2\2\u0c7c\u0c7d\3\2\2\2",
    "\u0c7d\u0c7e\3\2\2\2\u0c7e\u0c7f\7l\2\2\u0c7f\u0c80\7(\2\2\u0c80\u0c81",
    "\5\u0190\u00c9\2\u0c81\u0c82\7\u00d9\2\2\u0c82\u0c83\5\u0190\u00c9\2",
    "\u0c83\u018d\3\2\2\2\u0c84\u0c85\7\u0117\2\2\u0c85\u0c86\7(\2\2\u0c86",
    "\u0c87\5\u0190\u00c9\2\u0c87\u018f\3\2\2\2\u0c88\u0c89\7\u01ea\2\2\u0c89",
    "\u0c8e\5\u0192\u00ca\2\u0c8a\u0c8b\7\u01f0\2\2\u0c8b\u0c8d\5\u0192\u00ca",
    "\2\u0c8c\u0c8a\3\2\2\2\u0c8d\u0c90\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8e",
    "\u0c8f\3\2\2\2\u0c8f\u0c91\3\2\2\2\u0c90\u0c8e\3\2\2\2\u0c91\u0c92\7",
    "\u01eb\2\2\u0c92\u0191\3\2\2\2\u0c93\u0c95\5\u01f4\u00fb\2\u0c94\u0c96",
    "\5\u027a\u013e\2\u0c95\u0c94\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96\u0193",
    "\3\2\2\2\u0c97\u0c99\5\u0196\u00cc\2\u0c98\u0c97\3\2\2\2\u0c98\u0c99",
    "\3\2\2\2\u0c99\u0c9a\3\2\2\2\u0c9a\u0c9b\7\u01ea\2\2\u0c9b\u0ca0\5\u0198",
    "\u00cd\2\u0c9c\u0c9d\7\u01f0\2\2\u0c9d\u0c9f\5\u0198\u00cd\2\u0c9e\u0c9c",
    "\3\2\2\2\u0c9f\u0ca2\3\2\2\2\u0ca0\u0c9e\3\2\2\2\u0ca0\u0ca1\3\2\2\2",
    "\u0ca1\u0ca3\3\2\2\2\u0ca2\u0ca0\3\2\2\2\u0ca3\u0ca4\7\u01eb\2\2\u0ca4",
    "\u0195\3\2\2\2\u0ca5\u0cab\7\u0144\2\2\u0ca6\u0cac\7\u0194\2\2\u0ca7",
    "\u0ca9\7\u0196\2\2\u0ca8\u0caa\7\t\2\2\u0ca9\u0ca8\3\2\2\2\u0ca9\u0caa",
    "\3\2\2\2\u0caa\u0cac\3\2\2\2\u0cab\u0ca6\3\2\2\2\u0cab\u0ca7\3\2\2\2",
    "\u0cab\u0cac\3\2\2\2\u0cac\u0caf\3\2\2\2\u0cad\u0cae\t)\2\2\u0cae\u0cb0",
    "\7\u010c\2\2\u0caf\u0cad\3\2\2\2\u0caf\u0cb0\3\2\2\2\u0cb0\u0cb2\3\2",
    "\2\2\u0cb1\u0cb3\5\u019c\u00cf\2\u0cb2\u0cb1\3\2\2\2\u0cb2\u0cb3\3\2",
    "\2\2\u0cb3\u0197\3\2\2\2\u0cb4\u0cba\7\u0194\2\2\u0cb5\u0cb7\7\u0196",
    "\2\2\u0cb6\u0cb8\7\t\2\2\u0cb7\u0cb6\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8",
    "\u0cba\3\2\2\2\u0cb9\u0cb4\3\2\2\2\u0cb9\u0cb5\3\2\2\2\u0cb9\u0cba\3",
    "\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbd\5\u019a\u00ce\2\u0cbc\u0cbe\5",
    "\u01a0\u00d1\2\u0cbd\u0cbc\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0cbf\3",
    "\2\2\2\u0cbf\u0cc0\7\u0201\2\2\u0cc0\u0cc1\5\u01f4\u00fb\2\u0cc1\u0199",
    "\3\2\2\2\u0cc2\u0cc3\5\u021a\u010e\2\u0cc3\u019b\3\2\2\2\u0cc4\u0cc5",
    "\7\u00bd\2\2\u0cc5\u0cc6\7\u01ea\2\2\u0cc6\u0cc7\5\u01f4\u00fb\2\u0cc7",
    "\u0cc9\7\u01eb\2\2\u0cc8\u0cca\5\u019e\u00d0\2\u0cc9\u0cc8\3\2\2\2\u0cc9",
    "\u0cca\3\2\2\2\u0cca\u019d\3\2\2\2\u0ccb\u0ccc\7\u0193\2\2\u0ccc\u0ccd",
    "\7\u01ea\2\2\u0ccd\u0cce\5\u01f0\u00f9\2\u0cce\u0ccf\7\u01eb\2\2\u0ccf",
    "\u019f\3\2\2\2\u0cd0\u0cd2\7\u010c\2\2\u0cd1\u0cd3\7\u015d\2\2\u0cd2",
    "\u0cd1\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3\u0cd4\3\2\2\2\u0cd4\u0cd5\7",
    "(\2\2\u0cd5\u0cda\5\u01a2\u00d2\2\u0cd6\u0cd7\7\u01f0\2\2\u0cd7\u0cd9",
    "\5\u01a2\u00d2\2\u0cd8\u0cd6\3\2\2\2\u0cd9\u0cdc\3\2\2\2\u0cda\u0cd8",
    "\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u01a1\3\2\2\2\u0cdc\u0cda\3\2\2\2",
    "\u0cdd\u0cdf\5\u01f4\u00fb\2\u0cde\u0ce0\t*\2\2\u0cdf\u0cde\3\2\2\2",
    "\u0cdf\u0ce0\3\2\2\2\u0ce0\u0ce3\3\2\2\2\u0ce1\u0ce2\7\u00fd\2\2\u0ce2",
    "\u0ce4\t+\2\2\u0ce3\u0ce1\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4\u01a3\3",
    "\2\2\2\u0ce5\u0ce6\7\u0094\2\2\u0ce6\u0ce8\7\u0194\2\2\u0ce7\u0ce9\5",
    "\u01a6\u00d4\2\u0ce8\u0ce7\3\2\2\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0ceb\3",
    "\2\2\2\u0cea\u0cec\5\u01a8\u00d5\2\u0ceb\u0cea\3\2\2\2\u0ceb\u0cec\3",
    "\2\2\2\u0cec\u01a5\3\2\2\2\u0ced\u0cee\7\u0102\2\2\u0cee\u0cf3\5\u02be",
    "\u0160\2\u0cef\u0cf0\7\u01f0\2\2\u0cf0\u0cf2\5\u02be\u0160\2\u0cf1\u0cef",
    "\3\2\2\2\u0cf2\u0cf5\3\2\2\2\u0cf3\u0cf1\3\2\2\2\u0cf3\u0cf4\3\2\2\2",
    "\u0cf4\u01a7\3\2\2\2\u0cf5\u0cf3\3\2\2\2\u0cf6\u0cf7\7\u0162\2\2\u0cf7",
    "\u0cfc\7\u00cf\2\2\u0cf8\u0cfc\7\u00fb\2\2\u0cf9\u0cfa\7\u01a4\2\2\u0cfa",
    "\u0cfc\5\u01f4\u00fb\2\u0cfb\u0cf6\3\2\2\2\u0cfb\u0cf8\3\2\2\2\u0cfb",
    "\u0cf9\3\2\2\2\u0cfc\u01a9\3\2\2\2\u0cfd\u0cfe\7\u0194\2\2\u0cfe\u0cff",
    "\5\u01d8\u00ed\2\u0cff\u0d01\5\u01ac\u00d7\2\u0d00\u0d02\5\u027e\u0140",
    "\2\u0d01\u0d00\3\2\2\2\u0d01\u0d02\3\2\2\2\u0d02\u0d04\3\2\2\2\u0d03",
    "\u0d05\5\u01da\u00ee\2\u0d04\u0d03\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05",
    "\u0d07\3\2\2\2\u0d06\u0d08\5\u01dc\u00ef\2\u0d07\u0d06\3\2\2\2\u0d07",
    "\u0d08\3\2\2\2\u0d08\u01ab\3\2\2\2\u0d09\u0d19\7\u0157\2\2\u0d0a\u0d0f",
    "\5\u01ae\u00d8\2\u0d0b\u0d0c\7\u01f0\2\2\u0d0c\u0d0e\5\u01ae\u00d8\2",
    "\u0d0d\u0d0b\3\2\2\2\u0d0e\u0d11\3\2\2\2\u0d0f\u0d0d\3\2\2\2\u0d0f\u0d10",
    "\3\2\2\2\u0d10\u0d1a\3\2\2\2\u0d11\u0d0f\3\2\2\2\u0d12\u0d13\7\u019b",
    "\2\2\u0d13\u0d14\7\u01ea\2\2\u0d14\u0d15\5\u02e6\u0174\2\u0d15\u0d16",
    "\7\u01eb\2\2\u0d16\u0d17\7\u0201\2\2\u0d17\u0d18\5\u01f4\u00fb\2\u0d18",
    "\u0d1a\3\2\2\2\u0d19\u0d0a\3\2\2\2\u0d19\u0d12\3\2\2\2\u0d1a\u01ad\3",
    "\2\2\2\u0d1b\u0d1c\5\u02be\u0160\2\u0d1c\u0d1d\7\u0201\2\2\u0d1d\u0d1e",
    "\5\u01f4\u00fb\2\u0d1e\u0d2d\3\2\2\2\u0d1f\u0d20\7\u01ea\2\2\u0d20\u0d25",
    "\5\u02be\u0160\2\u0d21\u0d22\7\u01f0\2\2\u0d22\u0d24\5\u02be\u0160\2",
    "\u0d23\u0d21\3\2\2\2\u0d24\u0d27\3\2\2\2\u0d25\u0d23\3\2\2\2\u0d25\u0d26",
    "\3\2\2\2\u0d26\u0d28\3\2\2\2\u0d27\u0d25\3\2\2\2\u0d28\u0d29\7\u01eb",
    "\2\2\u0d29\u0d2a\7\u0201\2\2\u0d2a\u0d2b\5\u0140\u00a1\2\u0d2b\u0d2d",
    "\3\2\2\2\u0d2c\u0d1b\3\2\2\2\u0d2c\u0d1f\3\2\2\2\u0d2d\u01af\3\2\2\2",
    "\u0d2e\u0d30\7h\2\2\u0d2f\u0d31\7\u0097\2\2\u0d30\u0d2f\3\2\2\2\u0d30",
    "\u0d31\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0d34\5\u01d8\u00ed\2\u0d33",
    "\u0d35\5\u027e\u0140\2\u0d34\u0d33\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35",
    "\u0d37\3\2\2\2\u0d36\u0d38\5\u01da\u00ee\2\u0d37\u0d36\3\2\2\2\u0d37",
    "\u0d38\3\2\2\2\u0d38\u0d3a\3\2\2\2\u0d39\u0d3b\5\u01dc\u00ef\2\u0d3a",
    "\u0d39\3\2\2\2\u0d3a\u0d3b\3\2\2\2\u0d3b\u01b1\3\2\2\2\u0d3c\u0d3f\7",
    "\u00b2\2\2\u0d3d\u0d40\5\u01b4\u00db\2\u0d3e\u0d40\5\u01b6\u00dc\2\u0d3f",
    "\u0d3d\3\2\2\2\u0d3f\u0d3e\3\2\2\2\u0d40\u01b3\3\2\2\2\u0d41\u0d47\5",
    "\u01c0\u00e1\2\u0d42\u0d44\5\u01c2\u00e2\2\u0d43\u0d45\5\u01da\u00ee",
    "\2\u0d44\u0d43\3\2\2\2\u0d44\u0d45\3\2\2\2\u0d45\u0d48\3\2\2\2\u0d46",
    "\u0d48\5\u0136\u009c\2\u0d47\u0d42\3\2\2\2\u0d47\u0d46\3\2\2\2\u0d48",
    "\u0d4a\3\2\2\2\u0d49\u0d4b\5\u01dc\u00ef\2\u0d4a\u0d49\3\2\2\2\u0d4a",
    "\u0d4b\3\2\2\2\u0d4b\u01b5\3\2\2\2\u0d4c\u0d4e\7\t\2\2\u0d4d\u0d4f\5",
    "\u01b8\u00dd\2\u0d4e\u0d4d\3\2\2\2\u0d4f\u0d50\3\2\2\2\u0d50\u0d4e\3",
    "\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d54\3\2\2\2\u0d52\u0d54\5\u01ba\u00de",
    "\2\u0d53\u0d4c\3\2\2\2\u0d53\u0d52\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55",
    "\u0d56\5\u0136\u009c\2\u0d56\u01b7\3\2\2\2\u0d57\u0d59\5\u01c0\u00e1",
    "\2\u0d58\u0d5a\5\u01c2\u00e2\2\u0d59\u0d58\3\2\2\2\u0d59\u0d5a\3\2\2",
    "\2\u0d5a\u0d5c\3\2\2\2\u0d5b\u0d5d\5\u01dc\u00ef\2\u0d5c\u0d5b\3\2\2",
    "\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u01b9\3\2\2\2\u0d5e\u0d60\t,\2\2\u0d5f",
    "\u0d5e\3\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d62\3\2\2\2\u0d61\u0d63\5",
    "\u01bc\u00df\2\u0d62\u0d61\3\2\2\2\u0d63\u0d64\3\2\2\2\u0d64\u0d62\3",
    "\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d67\3\2\2\2\u0d66\u0d68\5\u01be\u00e0",
    "\2\u0d67\u0d66\3\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u01bb\3\2\2\2\u0d69",
    "\u0d6a\7\u01a7\2\2\u0d6a\u0d6b\5\u01f0\u00f9\2\u0d6b\u0d6d\7\u0179\2",
    "\2\u0d6c\u0d6e\5\u01b8\u00dd\2\u0d6d\u0d6c\3\2\2\2\u0d6e\u0d6f\3\2\2",
    "\2\u0d6f\u0d6d\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u01bd\3\2\2\2\u0d71",
    "\u0d73\7v\2\2\u0d72\u0d74\5\u01b8\u00dd\2\u0d73\u0d72\3\2\2\2\u0d74",
    "\u0d75\3\2\2\2\u0d75\u0d73\3\2\2\2\u0d75\u0d76\3\2\2\2\u0d76\u01bf\3",
    "\2\2\2\u0d77\u0d78\7\u00b9\2\2\u0d78\u0d84\5\u01d8\u00ed\2\u0d79\u0d7a",
    "\7\u01ea\2\2\u0d7a\u0d7f\5\u02be\u0160\2\u0d7b\u0d7c\7\u01f0\2\2\u0d7c",
    "\u0d7e\5\u02be\u0160\2\u0d7d\u0d7b\3\2\2\2\u0d7e\u0d81\3\2\2\2\u0d7f",
    "\u0d7d\3\2\2\2\u0d7f\u0d80\3\2\2\2\u0d80\u0d82\3\2\2\2\u0d81\u0d7f\3",
    "\2\2\2\u0d82\u0d83\7\u01eb\2\2\u0d83\u0d85\3\2\2\2\u0d84\u0d79\3\2\2",
    "\2\u0d84\u0d85\3\2\2\2\u0d85\u01c1\3\2\2\2\u0d86\u0d87\7\u019c\2\2\u0d87",
    "\u0d88\5\u01ee\u00f8\2\u0d88\u01c3\3\2\2\2\u0d89\u0d8a\7\u00db\2\2\u0d8a",
    "\u0d8b\7\u00b9\2\2\u0d8b\u0d8d\5\u02c0\u0161\2\u0d8c\u0d8e\5\u027a\u013e",
    "\2\u0d8d\u0d8c\3\2\2\2\u0d8d\u0d8e\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f",
    "\u0d90\7\u0199\2\2\u0d90\u0d91\5\u01ce\u00e8\2\u0d91\u0d92\7\u0106\2",
    "\2\u0d92\u0d93\7\u01ea\2\2\u0d93\u0d94\5\u01f0\u00f9\2\u0d94\u0d9d\7",
    "\u01eb\2\2\u0d95\u0d97\5\u01c6\u00e4\2\u0d96\u0d98\5\u01cc\u00e7\2\u0d97",
    "\u0d96\3\2\2\2\u0d97\u0d98\3\2\2\2\u0d98\u0d9e\3\2\2\2\u0d99\u0d9b\5",
    "\u01cc\u00e7\2\u0d9a\u0d9c\5\u01c6\u00e4\2\u0d9b\u0d9a\3\2\2\2\u0d9b",
    "\u0d9c\3\2\2\2\u0d9c\u0d9e\3\2\2\2\u0d9d\u0d95\3\2\2\2\u0d9d\u0d99\3",
    "\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0da0\3\2\2\2\u0d9f\u0da1\5\u01dc\u00ef",
    "\2\u0da0\u0d9f\3\2\2\2\u0da0\u0da1\3\2\2\2\u0da1\u01c5\3\2\2\2\u0da2",
    "\u0da3\7\u01a7\2\2\u0da3\u0da4\7\u00d7\2\2\u0da4\u0da5\7\u0179\2\2\u0da5",
    "\u0da6\7\u0194\2\2\u0da6\u0da7\7\u0157\2\2\u0da7\u0dac\5\u01c8\u00e5",
    "\2\u0da8\u0da9\7\u01f0\2\2\u0da9\u0dab\5\u01c8\u00e5\2\u0daa\u0da8\3",
    "\2\2\2\u0dab\u0dae\3\2\2\2\u0dac\u0daa\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad",
    "\u0db0\3\2\2\2\u0dae\u0dac\3\2\2\2\u0daf\u0db1\5\u027e\u0140\2\u0db0",
    "\u0daf\3\2\2\2\u0db0\u0db1\3\2\2\2\u0db1\u0db3\3\2\2\2\u0db2\u0db4\5",
    "\u01ca\u00e6\2\u0db3\u0db2\3\2\2\2\u0db3\u0db4\3\2\2\2\u0db4\u01c7\3",
    "\2\2\2\u0db5\u0db6\5\u02be\u0160\2\u0db6\u0db7\7\u0201\2\2\u0db7\u0db8",
    "\5\u01f4\u00fb\2\u0db8\u01c9\3\2\2\2\u0db9\u0dba\7h\2\2\u0dba\u0dbb",
    "\5\u027e\u0140\2\u0dbb\u01cb\3\2\2\2\u0dbc\u0dbd\7\u01a7\2\2\u0dbd\u0dbe",
    "\7\u00fa\2\2\u0dbe\u0dbf\7\u00d7\2\2\u0dbf\u0dc0\7\u0179\2\2\u0dc0\u0dcc",
    "\7\u00b2\2\2\u0dc1\u0dc2\7\u01ea\2\2\u0dc2\u0dc7\5\u02be\u0160\2\u0dc3",
    "\u0dc4\7\u01f0\2\2\u0dc4\u0dc6\5\u02be\u0160\2\u0dc5\u0dc3\3\2\2\2\u0dc6",
    "\u0dc9\3\2\2\2\u0dc7\u0dc5\3\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0dca\3",
    "\2\2\2\u0dc9\u0dc7\3\2\2\2\u0dca\u0dcb\7\u01eb\2\2\u0dcb\u0dcd\3\2\2",
    "\2\u0dcc\u0dc1\3\2\2\2\u0dcc\u0dcd\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce",
    "\u0dcf\7\u019c\2\2\u0dcf\u0dd1\5\u01ee\u00f8\2\u0dd0\u0dd2\5\u027e\u0140",
    "\2\u0dd1\u0dd0\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2\u01cd\3\2\2\2\u0dd3",
    "\u0dd9\5\u02c0\u0161\2\u0dd4\u0dd5\7\u01ea\2\2\u0dd5\u0dd6\5\u0136\u009c",
    "\2\u0dd6\u0dd7\7\u01eb\2\2\u0dd7\u0dd9\3\2\2\2\u0dd8\u0dd3\3\2\2\2\u0dd8",
    "\u0dd4\3\2\2\2\u0dd9\u0ddb\3\2\2\2\u0dda\u0ddc\5\u027a\u013e\2\u0ddb",
    "\u0dda\3\2\2\2\u0ddb\u0ddc\3\2\2\2\u0ddc\u01cf\3\2\2\2\u0ddd\u0dde\7",
    "\u00ce\2\2\u0dde\u0ddf\7\u0177\2\2\u0ddf\u0de4\5\u01d4\u00eb\2\u0de0",
    "\u0de1\7\u01f0\2\2\u0de1\u0de3\5\u01d4\u00eb\2\u0de2\u0de0\3\2\2\2\u0de3",
    "\u0de6\3\2\2\2\u0de4\u0de2\3\2\2\2\u0de4\u0de5\3\2\2\2\u0de5\u0de7\3",
    "\2\2\2\u0de6\u0de4\3\2\2\2\u0de7\u0de8\7\u00a5\2\2\u0de8\u0de9\5\u01d6",
    "\u00ec\2\u0de9\u0deb\7\u00e0\2\2\u0dea\u0dec\5\u01d2\u00ea\2\u0deb\u0dea",
    "\3\2\2\2\u0deb\u0dec\3\2\2\2\u0dec\u01d1\3\2\2\2\u0ded\u0dee\7\u01a4",
    "\2\2\u0dee\u0df1\5\u01f4\u00fb\2\u0def\u0df1\7\u00fb\2\2\u0df0\u0ded",
    "\3\2\2\2\u0df0\u0def\3\2\2\2\u0df1\u01d3\3\2\2\2\u0df2\u0df4\5\u02c0",
    "\u0161\2\u0df3\u0df5\5\u0276\u013c\2\u0df4\u0df3\3\2\2\2\u0df4\u0df5",
    "\3\2\2\2\u0df5\u01d5\3\2\2\2\u0df6\u0df7\7\u0141\2\2\u0df7\u0e03\7\u015a",
    "\2\2\u0df8\u0df9\7\u0141\2\2\u0df9\u0e03\7\u0084\2\2\u0dfa\u0dfc\7\u015a",
    "\2\2\u0dfb\u0dfd\7\u0194\2\2\u0dfc\u0dfb\3\2\2\2\u0dfc\u0dfd\3\2\2\2",
    "\u0dfd\u0e03\3\2\2\2\u0dfe\u0dff\7\u015a\2\2\u0dff\u0e00\7\u0141\2\2",
    "\u0e00\u0e03\7\u0084\2\2\u0e01\u0e03\7\u0084\2\2\u0e02\u0df6\3\2\2\2",
    "\u0e02\u0df8\3\2\2\2\u0e02\u0dfa\3\2\2\2\u0e02\u0dfe\3\2\2\2\u0e02\u0e01",
    "\3\2\2\2\u0e03\u01d7\3\2\2\2\u0e04\u0e0b\5\u01e2\u00f2\2\u0e05\u0e06",
    "\7\u0107\2\2\u0e06\u0e07\7\u01ea\2\2\u0e07\u0e08\5\u01e2\u00f2\2\u0e08",
    "\u0e09\7\u01eb\2\2\u0e09\u0e0b\3\2\2\2\u0e0a\u0e04\3\2\2\2\u0e0a\u0e05",
    "\3\2\2\2\u0e0b\u0e0d\3\2\2\2\u0e0c\u0e0e\5\u027a\u013e\2\u0e0d\u0e0c",
    "\3\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e\u01d9\3\2\2\2\u0e0f\u0e10\t\31\2",
    "\2\u0e10\u0e15\5\u01f4\u00fb\2\u0e11\u0e12\7\u01f0\2\2\u0e12\u0e14\5",
    "\u01f4\u00fb\2\u0e13\u0e11\3\2\2\2\u0e14\u0e17\3\2\2\2\u0e15\u0e13\3",
    "\2\2\2\u0e15\u0e16\3\2\2\2\u0e16\u0e18\3\2\2\2\u0e17\u0e15\3\2\2\2\u0e18",
    "\u0e19\5\u0282\u0142\2\u0e19\u01db\3\2\2\2\u0e1a\u0e1b\7\u00d0\2\2\u0e1b",
    "\u0e1d\7}\2\2\u0e1c\u0e1e\5\u01de\u00f0\2\u0e1d\u0e1c\3\2\2\2\u0e1d",
    "\u0e1e\3\2\2\2\u0e1e\u0e20\3\2\2\2\u0e1f\u0e21\5\u01f6\u00fc\2\u0e20",
    "\u0e1f\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0e23\3\2\2\2\u0e22\u0e24\5",
    "\u01e0\u00f1\2\u0e23\u0e22\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24\u01dd\3",
    "\2\2\2\u0e25\u0e26\7\u00b9\2\2\u0e26\u0e27\5\u02c0\u0161\2\u0e27\u01df",
    "\3\2\2\2\u0e28\u0e29\7\u0131\2\2\u0e29\u0e2c\7\u00cc\2\2\u0e2a\u0e2d",
    "\7\u0191\2\2\u0e2b\u0e2d\5\u01f6\u00fc\2\u0e2c\u0e2a\3\2\2\2\u0e2c\u0e2b",
    "\3\2\2\2\u0e2d\u01e1\3\2\2\2\u0e2e\u0e3b\5\u01e4\u00f3\2\u0e2f\u0e30",
    "\7\u01ea\2\2\u0e30\u0e32\5\u0136\u009c\2\u0e31\u0e33\5\u01e6\u00f4\2",
    "\u0e32\u0e31\3\2\2\2\u0e32\u0e33\3\2\2\2\u0e33\u0e34\3\2\2\2\u0e34\u0e35",
    "\7\u01eb\2\2\u0e35\u0e3b\3\2\2\2\u0e36\u0e38\5\u02c0\u0161\2\u0e37\u0e39",
    "\5\u01e8\u00f5\2\u0e38\u0e37\3\2\2\2\u0e38\u0e39\3\2\2\2\u0e39\u0e3b",
    "\3\2\2\2\u0e3a\u0e2e\3\2\2\2\u0e3a\u0e2f\3\2\2\2\u0e3a\u0e36\3\2\2\2",
    "\u0e3b\u01e3\3\2\2\2\u0e3c\u0e49\t-\2\2\u0e3d\u0e3e\7\u01ea\2\2\u0e3e",
    "\u0e3f\5\u0140\u00a1\2\u0e3f\u0e40\7\u01eb\2\2\u0e40\u0e4a\3\2\2\2\u0e41",
    "\u0e42\7\u01ea\2\2\u0e42\u0e43\5\u01f4\u00fb\2\u0e43\u0e47\7\u01eb\2",
    "\2\u0e44\u0e45\7\u01ea\2\2\u0e45\u0e46\7\u01ee\2\2\u0e46\u0e48\7\u01eb",
    "\2\2\u0e47\u0e44\3\2\2\2\u0e47\u0e48\3\2\2\2\u0e48\u0e4a\3\2\2\2\u0e49",
    "\u0e3d\3\2\2\2\u0e49\u0e41\3\2\2\2\u0e4a\u01e5\3\2\2\2\u0e4b\u0e54\7",
    "\u01ab\2\2\u0e4c\u0e4d\7\u012b\2\2\u0e4d\u0e55\7\u0107\2\2\u0e4e\u0e4f",
    "\7\64\2\2\u0e4f\u0e52\7\u0109\2\2\u0e50\u0e51\7D\2\2\u0e51\u0e53\5\u02a2",
    "\u0152\2\u0e52\u0e50\3\2\2\2\u0e52\u0e53\3\2\2\2\u0e53\u0e55\3\2\2\2",
    "\u0e54\u0e4c\3\2\2\2\u0e54\u0e4e\3\2\2\2\u0e55\u01e7\3\2\2\2\u0e56\u0e58",
    "\7\u0145\2\2\u0e57\u0e59\7\"\2\2\u0e58\u0e57\3\2\2\2\u0e58\u0e59\3\2",
    "\2\2\u0e59\u0e5a\3\2\2\2\u0e5a\u0e5b\7\u01ea\2\2\u0e5b\u0e5e\5\u01f4",
    "\u00fb\2\u0e5c\u0e5d\7\u01f0\2\2\u0e5d\u0e5f\5\u01f4\u00fb\2\u0e5e\u0e5c",
    "\3\2\2\2\u0e5e\u0e5f\3\2\2\2\u0e5f\u0e60\3\2\2\2\u0e60\u0e62\7\u01eb",
    "\2\2\u0e61\u0e63\5\u01ea\u00f6\2\u0e62\u0e61\3\2\2\2\u0e62\u0e63\3\2",
    "\2\2\u0e63\u01e9\3\2\2\2\u0e64\u0e65\7\u014d\2\2\u0e65\u0e66\7\u01ea",
    "\2\2\u0e66\u0e67\5\u01f4\u00fb\2\u0e67\u0e68\7\u01eb\2\2\u0e68\u01eb",
    "\3\2\2\2\u0e69\u0e6a\7T\2\2\u0e6a\u0e6b\7\u01ea\2\2\u0e6b\u0e6c\5\u0140",
    "\u00a1\2\u0e6c\u0e6d\7\u01eb\2\2\u0e6d\u01ed\3\2\2\2\u0e6e\u0e70\7\u01ea",
    "\2\2\u0e6f\u0e71\5\u01f4\u00fb\2\u0e70\u0e6f\3\2\2\2\u0e70\u0e71\3\2",
    "\2\2\u0e71\u0e76\3\2\2\2\u0e72\u0e73\7\u01f0\2\2\u0e73\u0e75\5\u01f4",
    "\u00fb\2\u0e74\u0e72\3\2\2\2\u0e75\u0e78\3\2\2\2\u0e76\u0e74\3\2\2\2",
    "\u0e76\u0e77\3\2\2\2\u0e77\u0e79\3\2\2\2\u0e78\u0e76\3\2\2\2\u0e79\u0e7a",
    "\7\u01eb\2\2\u0e7a\u01ef\3\2\2\2\u0e7b\u0e7c\5\u01f4\u00fb\2\u0e7c\u01f1",
    "\3\2\2\2\u0e7d\u0e7e\5\u01f4\u00fb\2\u0e7e\u01f3\3\2\2\2\u0e7f\u0e89",
    "\5\u01ec\u00f7\2\u0e80\u0e85\5\u01f8\u00fd\2\u0e81\u0e82\7\u010a\2\2",
    "\u0e82\u0e84\5\u01f8\u00fd\2\u0e83\u0e81\3\2\2\2\u0e84\u0e87\3\2\2\2",
    "\u0e85\u0e83\3\2\2\2\u0e85\u0e86\3\2\2\2\u0e86\u0e89\3\2\2\2\u0e87\u0e85",
    "\3\2\2\2\u0e88\u0e7f\3\2\2\2\u0e88\u0e80\3\2\2\2\u0e89\u01f5\3\2\2\2",
    "\u0e8a\u0e8b\5\u01f4\u00fb\2\u0e8b\u01f7\3\2\2\2\u0e8c\u0e91\5\u01fa",
    "\u00fe\2\u0e8d\u0e8e\7\f\2\2\u0e8e\u0e90\5\u01fa\u00fe\2\u0e8f\u0e8d",
    "\3\2\2\2\u0e90\u0e93\3\2\2\2\u0e91\u0e8f\3\2\2\2\u0e91\u0e92\3\2\2\2",
    "\u0e92\u01f9\3\2\2\2\u0e93\u0e91\3\2\2\2\u0e94\u0e95\7\u00fa\2\2\u0e95",
    "\u0e98\5\u01fa\u00fe\2\u0e96\u0e98\5\u01fc\u00ff\2\u0e97\u0e94\3\2\2",
    "\2\u0e97\u0e96\3\2\2\2\u0e98\u01fb\3\2\2\2\u0e99\u0ebb\5\u01fe\u0100",
    "\2\u0e9a\u0e9c\7\u00bb\2\2\u0e9b\u0e9d\7\u00fa\2\2\u0e9c\u0e9b\3\2\2",
    "\2\u0e9c\u0e9d\3\2\2\2\u0e9d\u0eb7\3\2\2\2\u0e9e\u0eb8\7\u00fc\2\2\u0e9f",
    "\u0eb8\7\u00e6\2\2\u0ea0\u0eb8\7\u0125\2\2\u0ea1\u0eb8\7\u00ae\2\2\u0ea2",
    "\u0ea3\7\4\2\2\u0ea3\u0eb8\7\u0157\2\2\u0ea4\u0eb8\7x\2\2\u0ea5\u0ea7",
    "\7\u0102\2\2\u0ea6\u0ea8\7\u018c\2\2\u0ea7\u0ea6\3\2\2\2\u0ea7\u0ea8",
    "\3\2\2\2\u0ea8\u0ea9\3\2\2\2\u0ea9\u0eab\7\u01ea\2\2\u0eaa\u0eac\7\u0107",
    "\2\2\u0eab\u0eaa\3\2\2\2\u0eab\u0eac\3\2\2\2\u0eac\u0ead\3\2\2\2\u0ead",
    "\u0eb2\5\u02d0\u0169\2\u0eae\u0eaf\7\u01f0\2\2\u0eaf\u0eb1\5\u02d0\u0169",
    "\2\u0eb0\u0eae\3\2\2\2\u0eb1\u0eb4\3\2\2\2\u0eb2\u0eb0\3\2\2\2\u0eb2",
    "\u0eb3\3\2\2\2\u0eb3\u0eb5\3\2\2\2\u0eb4\u0eb2\3\2\2\2\u0eb5\u0eb6\7",
    "\u01eb\2\2\u0eb6\u0eb8\3\2\2\2\u0eb7\u0e9e\3\2\2\2\u0eb7\u0e9f\3\2\2",
    "\2\u0eb7\u0ea0\3\2\2\2\u0eb7\u0ea1\3\2\2\2\u0eb7\u0ea2\3\2\2\2\u0eb7",
    "\u0ea4\3\2\2\2\u0eb7\u0ea5\3\2\2\2\u0eb8\u0eba\3\2\2\2\u0eb9\u0e9a\3",
    "\2\2\2\u0eba\u0ebd\3\2\2\2\u0ebb\u0eb9\3\2\2\2\u0ebb\u0ebc\3\2\2\2\u0ebc",
    "\u01fd\3\2\2\2\u0ebd\u0ebb\3\2\2\2\u0ebe\u0ec5\5\u0202\u0102\2\u0ebf",
    "\u0ec1\5\u0200\u0101\2\u0ec0\u0ec2\7\u0102\2\2\u0ec1\u0ec0\3\2\2\2\u0ec1",
    "\u0ec2\3\2\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3\u0ec4\5\u020e\u0108\2\u0ec4",
    "\u0ec6\3\2\2\2\u0ec5\u0ebf\3\2\2\2\u0ec5\u0ec6\3\2\2\2\u0ec6\u01ff\3",
    "\2\2\2\u0ec7\u0ec8\t.\2\2\u0ec8\u0201\3\2\2\2\u0ec9\u0ed5\5\u0204\u0103",
    "\2\u0eca\u0ed1\7\u0201\2\2\u0ecb\u0ed1\5\u02ea\u0176\2\u0ecc\u0ed1\7",
    "\u01f8\2\2\u0ecd\u0ed1\7\u01fe\2\2\u0ece\u0ed1\5\u02ee\u0178\2\u0ecf",
    "\u0ed1\5\u02ec\u0177\2\u0ed0\u0eca\3\2\2\2\u0ed0\u0ecb\3\2\2\2\u0ed0",
    "\u0ecc\3\2\2\2\u0ed0\u0ecd\3\2\2\2\u0ed0\u0ece\3\2\2\2\u0ed0\u0ecf\3",
    "\2\2\2\u0ed1\u0ed2\3\2\2\2\u0ed2\u0ed4\5\u0204\u0103\2\u0ed3\u0ed0\3",
    "\2\2\2\u0ed4\u0ed7\3\2\2\2\u0ed5\u0ed3\3\2\2\2\u0ed5\u0ed6\3\2\2\2\u0ed6",
    "\u0203\3\2\2\2\u0ed7\u0ed5\3\2\2\2\u0ed8\u0ee7\5\u020e\u0108\2\u0ed9",
    "\u0edb\7\u00fa\2\2\u0eda\u0ed9\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb\u0ee5",
    "\3\2\2\2\u0edc\u0edd\7\u00a5\2\2\u0edd\u0ee6\5\u020a\u0106\2\u0ede\u0edf",
    "\7\34\2\2\u0edf\u0ee6\5\u020c\u0107\2\u0ee0\u0ee1\5\u0206\u0104\2\u0ee1",
    "\u0ee3\5\u020e\u0108\2\u0ee2\u0ee4\5\u0208\u0105\2\u0ee3\u0ee2\3\2\2",
    "\2\u0ee3\u0ee4\3\2\2\2\u0ee4\u0ee6\3\2\2\2\u0ee5\u0edc\3\2\2\2\u0ee5",
    "\u0ede\3\2\2\2\u0ee5\u0ee0\3\2\2\2\u0ee6\u0ee8\3\2\2\2\u0ee7\u0eda\3",
    "\2\2\2\u0ee7\u0ee8\3\2\2\2\u0ee8\u0205\3\2\2\2\u0ee9\u0eea\t/\2\2\u0eea",
    "\u0207\3\2\2\2\u0eeb\u0eec\7~\2\2\u0eec\u0eed\5\u020e\u0108\2\u0eed",
    "\u0209\3\2\2\2\u0eee\u0eef\7\u01ea\2\2\u0eef\u0ef0\5\u0140\u00a1\2\u0ef0",
    "\u0ef1\7\u01eb\2\2\u0ef1\u0f01\3\2\2\2\u0ef2\u0ef3\7\u01ea\2\2\u0ef3",
    "\u0ef8\5\u0210\u0109\2\u0ef4\u0ef5\7\u01f0\2\2\u0ef5\u0ef7\5\u0210\u0109",
    "\2\u0ef6\u0ef4\3\2\2\2\u0ef7\u0efa\3\2\2\2\u0ef8\u0ef6\3\2\2\2\u0ef8",
    "\u0ef9\3\2\2\2\u0ef9\u0efb\3\2\2\2\u0efa\u0ef8\3\2\2\2\u0efb\u0efc\7",
    "\u01eb\2\2\u0efc\u0f01\3\2\2\2\u0efd\u0f01\5\u02e0\u0171\2\u0efe\u0f01",
    "\5\u02d8\u016d\2\u0eff\u0f01\5\u02da\u016e\2\u0f00\u0eee\3\2\2\2\u0f00",
    "\u0ef2\3\2\2\2\u0f00\u0efd\3\2\2\2\u0f00\u0efe\3\2\2\2\u0f00\u0eff\3",
    "\2\2\2\u0f01\u020b\3\2\2\2\u0f02\u0f03\5\u020e\u0108\2\u0f03\u0f04\7",
    "\f\2\2\u0f04\u0f05\5\u020e\u0108\2\u0f05\u020d\3\2\2\2\u0f06\u0f0c\5",
    "\u0212\u010a\2\u0f07\u0f08\5\u02f0\u0179\2\u0f08\u0f09\5\u0212\u010a",
    "\2\u0f09\u0f0b\3\2\2\2\u0f0a\u0f07\3\2\2\2\u0f0b\u0f0e\3\2\2\2\u0f0c",
    "\u0f0a\3\2\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u020f\3\2\2\2\u0f0e\u0f0c\3",
    "\2\2\2\u0f0f\u0f10\5\u020e\u0108\2\u0f10\u0211\3\2\2\2\u0f11\u0f16\5",
    "\u0214\u010b\2\u0f12\u0f13\t\60\2\2\u0f13\u0f15\5\u0214\u010b\2\u0f14",
    "\u0f12\3\2\2\2\u0f15\u0f18\3\2\2\2\u0f16\u0f14\3\2\2\2\u0f16\u0f17\3",
    "\2\2\2\u0f17\u0213\3\2\2\2\u0f18\u0f16\3\2\2\2\u0f19\u0f1e\5\u0216\u010c",
    "\2\u0f1a\u0f1b\t\61\2\2\u0f1b\u0f1d\5\u0216\u010c\2\u0f1c\u0f1a\3\2",
    "\2\2\u0f1d\u0f20\3\2\2\2\u0f1e\u0f1c\3\2\2\2\u0f1e\u0f1f\3\2\2\2\u0f1f",
    "\u0215\3\2\2\2\u0f20\u0f1e\3\2\2\2\u0f21\u0f2a\5\u021a\u010e\2\u0f22",
    "\u0f27\7\22\2\2\u0f23\u0f28\7\u00cd\2\2\u0f24\u0f25\7\u017a\2\2\u0f25",
    "\u0f26\7\u01c1\2\2\u0f26\u0f28\5\u0210\u0109\2\u0f27\u0f23\3\2\2\2\u0f27",
    "\u0f24\3\2\2\2\u0f28\u0f2b\3\2\2\2\u0f29\u0f2b\5\u0218\u010d\2\u0f2a",
    "\u0f22\3\2\2\2\u0f2a\u0f29\3\2\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0217\3",
    "\2\2\2\u0f2c\u0f31\7Z\2\2\u0f2d\u0f2e\7\u01ea\2\2\u0f2e\u0f2f\5\u0210",
    "\u0109\2\u0f2f\u0f30\7\u01eb\2\2\u0f30\u0f32\3\2\2\2\u0f31\u0f2d\3\2",
    "\2\2\u0f31\u0f32\3\2\2\2\u0f32\u0f33\3\2\2\2\u0f33\u0f34\7\u0183\2\2",
    "\u0f34\u0f39\7\u014c\2\2\u0f35\u0f36\7\u01ea\2\2\u0f36\u0f37\5\u0210",
    "\u0109\2\u0f37\u0f38\7\u01eb\2\2\u0f38\u0f3a\3\2\2\2\u0f39\u0f35\3\2",
    "\2\2\u0f39\u0f3a\3\2\2\2\u0f3a\u0f45\3\2\2\2\u0f3b\u0f40\7\u01be\2\2",
    "\u0f3c\u0f3d\7\u01ea\2\2\u0f3d\u0f3e\5\u0210\u0109\2\u0f3e\u0f3f\7\u01eb",
    "\2\2\u0f3f\u0f41\3\2\2\2\u0f40\u0f3c\3\2\2\2\u0f40\u0f41\3\2\2\2\u0f41",
    "\u0f42\3\2\2\2\u0f42\u0f43\7\u0183\2\2\u0f43\u0f45\7\u00e3\2\2\u0f44",
    "\u0f2c\3\2\2\2\u0f44\u0f3b\3\2\2\2\u0f45\u0219\3\2\2\2\u0f46\u0f4b\5",
    "\u0226\u0114\2\u0f47\u0f48\7\u0202\2\2\u0f48\u0f49\5\u021c\u010f\2\u0f49",
    "\u0f4a\7\u0203\2\2\u0f4a\u0f4c\3\2\2\2\u0f4b\u0f47\3\2\2\2\u0f4b\u0f4c",
    "\3\2\2\2\u0f4c\u021b\3\2\2\2\u0f4d\u0f50\7\r\2\2\u0f4e\u0f50\5\u01f2",
    "\u00fa\2\u0f4f\u0f4d\3\2\2\2\u0f4f\u0f4e\3\2\2\2\u0f50\u0f58\3\2\2\2",
    "\u0f51\u0f54\7\u01f0\2\2\u0f52\u0f55\7\r\2\2\u0f53\u0f55\5\u01f2\u00fa",
    "\2\u0f54\u0f52\3\2\2\2\u0f54\u0f53\3\2\2\2\u0f55\u0f57\3\2\2\2\u0f56",
    "\u0f51\3\2\2\2\u0f57\u0f5a\3\2\2\2\u0f58\u0f56\3\2\2\2\u0f58\u0f59\3",
    "\2\2\2\u0f59\u0f65\3\2\2\2\u0f5a\u0f58\3\2\2\2\u0f5b\u0f60\5\u021e\u0110",
    "\2\u0f5c\u0f5d\7\u01f0\2\2\u0f5d\u0f5f\5\u021e\u0110\2\u0f5e\u0f5c\3",
    "\2\2\2\u0f5f\u0f62\3\2\2\2\u0f60\u0f5e\3\2\2\2\u0f60\u0f61\3\2\2\2\u0f61",
    "\u0f65\3\2\2\2\u0f62\u0f60\3\2\2\2\u0f63\u0f65\5\u0224\u0113\2\u0f64",
    "\u0f4f\3\2\2\2\u0f64\u0f5b\3\2\2\2\u0f64\u0f63\3\2\2\2\u0f65\u021d\3",
    "\2\2\2\u0f66\u0f67\7\u0094\2\2\u0f67\u0f74\5\u02be\u0160\2\u0f68\u0f69",
    "\7\u00a5\2\2\u0f69\u0f75\5\u01ee\u00f8\2\u0f6a\u0f6c\5\u0220\u0111\2",
    "\u0f6b\u0f6a\3\2\2\2\u0f6b\u0f6c\3\2\2\2\u0f6c\u0f6d\3\2\2\2\u0f6d\u0f6e",
    "\7\u0097\2\2\u0f6e\u0f6f\5\u01f4\u00fb\2\u0f6f\u0f70\7\u0183\2\2\u0f70",
    "\u0f71\5\u01f4\u00fb\2\u0f71\u0f72\5\u0222\u0112\2\u0f72\u0f73\5\u01f4",
    "\u00fb\2\u0f73\u0f75\3\2\2\2\u0f74\u0f68\3\2\2\2\u0f74\u0f6b\3\2\2\2",
    "\u0f75\u021f\3\2\2\2\u0f76\u0f77\7\u00c8\2\2\u0f77\u0f78\5\u01f4\u00fb",
    "\2\u0f78\u0221\3\2\2\2\u0f79\u0f7a\t\62\2\2\u0f7a\u0223\3\2\2\2\u0f7b",
    "\u0f7c\7\u0094\2\2\u0f7c\u0f7d\7\u01ea\2\2\u0f7d\u0f82\5\u02be\u0160",
    "\2\u0f7e\u0f7f\7\u01f0\2\2\u0f7f\u0f81\5\u02be\u0160\2\u0f80\u0f7e\3",
    "\2\2\2\u0f81\u0f84\3\2\2\2\u0f82\u0f80\3\2\2\2\u0f82\u0f83\3\2\2\2\u0f83",
    "\u0f85\3\2\2\2\u0f84\u0f82\3\2\2\2\u0f85\u0f86\7\u01eb\2\2\u0f86\u0f87",
    "\7\u00a5\2\2\u0f87\u0f94\7\u01ea\2\2\u0f88\u0f95\5\u0140\u00a1\2\u0f89",
    "\u0f8a\7\u01ea\2\2\u0f8a\u0f8f\5\u01ee\u00f8\2\u0f8b\u0f8c\7\u01f0\2",
    "\2\u0f8c\u0f8e\5\u01ee\u00f8\2\u0f8d\u0f8b\3\2\2\2\u0f8e\u0f91\3\2\2",
    "\2\u0f8f\u0f8d\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0f92\3\2\2\2\u0f91",
    "\u0f8f\3\2\2\2\u0f92\u0f93\7\u01eb\2\2\u0f93\u0f95\3\2\2\2\u0f94\u0f88",
    "\3\2\2\2\u0f94\u0f89\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0f97\7\u01eb",
    "\2\2\u0f97\u0225\3\2\2\2\u0f98\u0f99\7\u01ef\2\2\u0f99\u0fab\5\u0226",
    "\u0114\2\u0f9a\u0f9b\7\u01ee\2\2\u0f9b\u0fab\5\u0226\u0114\2\u0f9c\u0f9d",
    "\7\u0126\2\2\u0f9d\u0fab\5\u0226\u0114\2\u0f9e\u0f9f\7B\2\2\u0f9f\u0fab",
    "\5\u0226\u0114\2\u0fa0\u0fa1\7\u00ee\2\2\u0fa1\u0fab\5\u0226\u0114\2",
    "\u0fa2\u0fa3\7o\2\2\u0fa3\u0fab\5\u0226\u0114\2\u0fa4\u0fa5\7\t\2\2",
    "\u0fa5\u0fab\5\u0226\u0114\2\u0fa6\u0fab\5\u0228\u0115\2\u0fa7\u0fab",
    "\5\u023a\u011e\2\u0fa8\u0fab\5\u023c\u011f\2\u0fa9\u0fab\5\u0234\u011b",
    "\2\u0faa\u0f98\3\2\2\2\u0faa\u0f9a\3\2\2\2\u0faa\u0f9c\3\2\2\2\u0faa",
    "\u0f9e\3\2\2\2\u0faa\u0fa0\3\2\2\2\u0faa\u0fa2\3\2\2\2\u0faa\u0fa4\3",
    "\2\2\2\u0faa\u0fa6\3\2\2\2\u0faa\u0fa7\3\2\2\2\u0faa\u0fa8\3\2\2\2\u0faa",
    "\u0fa9\3\2\2\2\u0fab\u0227\3\2\2\2\u0fac\u0faf\5\u022e\u0118\2\u0fad",
    "\u0faf\5\u022a\u0116\2\u0fae\u0fac\3\2\2\2\u0fae\u0fad\3\2\2\2\u0faf",
    "\u0229\3\2\2\2\u0fb0\u0fb2\5\u02a4\u0153\2\u0fb1\u0fb0\3\2\2\2\u0fb1",
    "\u0fb2\3\2\2\2\u0fb2\u0fb3\3\2\2\2\u0fb3\u0fb4\7/\2\2\u0fb4\u0fb6\5",
    "\u0234\u011b\2\u0fb5\u0fb7\5\u022c\u0117\2\u0fb6\u0fb5\3\2\2\2\u0fb7",
    "\u0fb8\3\2\2\2\u0fb8\u0fb6\3\2\2\2\u0fb8\u0fb9\3\2\2\2\u0fb9\u0fbb\3",
    "\2\2\2\u0fba\u0fbc\5\u0232\u011a\2\u0fbb\u0fba\3\2\2\2\u0fbb\u0fbc\3",
    "\2\2\2\u0fbc\u0fbd\3\2\2\2\u0fbd\u0fbf\7{\2\2\u0fbe\u0fc0\7/\2\2\u0fbf",
    "\u0fbe\3\2\2\2\u0fbf\u0fc0\3\2\2\2\u0fc0\u0fc2\3\2\2\2\u0fc1\u0fc3\5",
    "\u02a4\u0153\2\u0fc2\u0fc1\3\2\2\2\u0fc2\u0fc3\3\2\2\2\u0fc3\u022b\3",
    "\2\2\2\u0fc4\u0fc5\7\u01a7\2\2\u0fc5\u0fc6\5\u01f6\u00fc\2\u0fc6\u0fc9",
    "\7\u0179\2\2\u0fc7\u0fca\5\u00e0q\2\u0fc8\u0fca\5\u01f6\u00fc\2\u0fc9",
    "\u0fc7\3\2\2\2\u0fc9\u0fc8\3\2\2\2\u0fca\u022d\3\2\2\2\u0fcb\u0fcd\5",
    "\u02a4\u0153\2\u0fcc\u0fcb\3\2\2\2\u0fcc\u0fcd\3\2\2\2\u0fcd\u0fce\3",
    "\2\2\2\u0fce\u0fd0\7/\2\2\u0fcf\u0fd1\5\u0230\u0119\2\u0fd0\u0fcf\3",
    "\2\2\2\u0fd1\u0fd2\3\2\2\2\u0fd2\u0fd0\3\2\2\2\u0fd2\u0fd3\3\2\2\2\u0fd3",
    "\u0fd5\3\2\2\2\u0fd4\u0fd6\5\u0232\u011a\2\u0fd5\u0fd4\3\2\2\2\u0fd5",
    "\u0fd6\3\2\2\2\u0fd6\u0fd7\3\2\2\2\u0fd7\u0fd9\7{\2\2\u0fd8\u0fda\7",
    "/\2\2\u0fd9\u0fd8\3\2\2\2\u0fd9\u0fda\3\2\2\2\u0fda\u0fdc\3\2\2\2\u0fdb",
    "\u0fdd\5\u02a4\u0153\2\u0fdc\u0fdb\3\2\2\2\u0fdc\u0fdd\3\2\2\2\u0fdd",
    "\u022f\3\2\2\2\u0fde\u0fdf\7\u01a7\2\2\u0fdf\u0fe0\5\u01f2\u00fa\2\u0fe0",
    "\u0fe3\7\u0179\2\2\u0fe1\u0fe4\5\u00e0q\2\u0fe2\u0fe4\5\u01f6\u00fc",
    "\2\u0fe3\u0fe1\3\2\2\2\u0fe3\u0fe2\3\2\2\2\u0fe4\u0231\3\2\2\2\u0fe5",
    "\u0fe8\7v\2\2\u0fe6\u0fe9\5\u00e0q\2\u0fe7\u0fe9\5\u01f6\u00fc\2\u0fe8",
    "\u0fe6\3\2\2\2\u0fe8\u0fe7\3\2\2\2\u0fe9\u0233\3\2\2\2\u0fea\u0feb\5",
    "\u02de\u0170\2\u0feb\u0fec\5\u02f2\u017a\2\u0fec\u0fff\3\2\2\2\u0fed",
    "\u0fff\5\u02d8\u016d\2\u0fee\u0fff\5\u02e0\u0171\2\u0fef\u0fff\5\u02da",
    "\u016e\2\u0ff0\u0ffc\7\u01ea\2\2\u0ff1\u0ff2\5\u0140\u00a1\2\u0ff2\u0ff6",
    "\7\u01eb\2\2\u0ff3\u0ff5\5\u0142\u00a2\2\u0ff4\u0ff3\3\2\2\2\u0ff5\u0ff8",
    "\3\2\2\2\u0ff6\u0ff4\3\2\2\2\u0ff6\u0ff7\3\2\2\2\u0ff7\u0ffd\3\2\2\2",
    "\u0ff8\u0ff6\3\2\2\2\u0ff9\u0ffa\5\u0236\u011c\2\u0ffa\u0ffb\7\u01eb",
    "\2\2\u0ffb\u0ffd\3\2\2\2\u0ffc\u0ff1\3\2\2\2\u0ffc\u0ff9\3\2\2\2\u0ffd",
    "\u0fff\3\2\2\2\u0ffe\u0fea\3\2\2\2\u0ffe\u0fed\3\2\2\2\u0ffe\u0fee\3",
    "\2\2\2\u0ffe\u0fef\3\2\2\2\u0ffe\u0ff0\3\2\2\2\u0fff\u0235\3\2\2\2\u1000",
    "\u1002\5\u01f4\u00fb\2\u1001\u1003\5\u0238\u011d\2\u1002\u1001\3\2\2",
    "\2\u1002\u1003\3\2\2\2\u1003\u0237\3\2\2\2\u1004\u1005\7\u01f0\2\2\u1005",
    "\u100a\5\u01f4\u00fb\2\u1006\u1007\7\u01f0\2\2\u1007\u1009\5\u01f4\u00fb",
    "\2\u1008\u1006\3\2\2\2\u1009\u100c\3\2\2\2\u100a\u1008\3\2\2\2\u100a",
    "\u100b\3\2\2\2\u100b\u0239\3\2\2\2\u100c\u100a\3\2\2\2\u100d\u1016\t",
    "\63\2\2\u100e\u100f\7\u01ea\2\2\u100f\u1010\5\u0140\u00a1\2\u1010\u1011",
    "\7\u01eb\2\2\u1011\u1017\3\2\2\2\u1012\u1013\7\u01ea\2\2\u1013\u1014",
    "\5\u01f6\u00fc\2\u1014\u1015\7\u01eb\2\2\u1015\u1017\3\2\2\2\u1016\u100e",
    "\3\2\2\2\u1016\u1012\3\2\2\2\u1017\u023b\3\2\2\2\u1018\u1019\5\u023e",
    "\u0120\2\u1019\u101b\5\u02c8\u0165\2\u101a\u101c\5\u0244\u0123\2\u101b",
    "\u101a\3\2\2\2\u101b\u101c\3\2\2\2\u101c\u1150\3\2\2\2\u101d\u101e\5",
    "\u02f4\u017b\2\u101e\u1020\5\u02ca\u0166\2\u101f\u1021\5\u024c\u0127",
    "\2\u1020\u101f\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u1150\3\2\2\2\u1022",
    "\u1023\7N\2\2\u1023\u1029\7\u01ea\2\2\u1024\u102a\7\u01ed\2\2\u1025",
    "\u1027\t \2\2\u1026\u1025\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u1028\3",
    "\2\2\2\u1028\u102a\5\u0210\u0109\2\u1029\u1024\3\2\2\2\u1029\u1026\3",
    "\2\2\2\u102a\u102b\3\2\2\2\u102b\u102d\7\u01eb\2\2\u102c\u102e\5\u0244",
    "\u0123\2\u102d\u102c\3\2\2\2\u102d\u102e\3\2\2\2\u102e\u1150\3\2\2\2",
    "\u102f\u1030\t\64\2\2\u1030\u1037\7\u01ea\2\2\u1031\u1032\7\u00e4\2",
    "\2\u1032\u1033\7\u01ea\2\2\u1033\u1034\5\u0140\u00a1\2\u1034\u1035\7",
    "\u01eb\2\2\u1035\u1038\3\2\2\2\u1036\u1038\5\u0210\u0109\2\u1037\u1031",
    "\3\2\2\2\u1037\u1036\3\2\2\2\u1038\u1039\3\2\2\2\u1039\u103a\7\17\2",
    "\2\u103a\u103b\5\u02d0\u0169\2\u103b\u103c\7\u01eb\2\2\u103c\u1150\3",
    "\2\2\2\u103d\u103e\7\65\2\2\u103e\u103f\7\u01ea\2\2\u103f\u1040\5\u0210",
    "\u0109\2\u1040\u1041\7\u0199\2\2\u1041\u1042\7\u00eb\2\2\u1042\u1043",
    "\7\u01eb\2\2\u1043\u1150\3\2\2\2\u1044\u1045\79\2\2\u1045\u1047\7\u01ea",
    "\2\2\u1046\u1048\t\65\2\2\u1047\u1046\3\2\2\2\u1047\u1048\3\2\2\2\u1048",
    "\u1049\3\2\2\2\u1049\u104b\5\u0210\u0109\2\u104a\u104c\5\u0250\u0129",
    "\2\u104b\u104a\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u104d\3\2\2\2\u104d",
    "\u104e\7\u01eb\2\2\u104e\u1150\3\2\2\2\u104f\u1050\5\u0240\u0121\2\u1050",
    "\u1052\5\u02c6\u0164\2\u1051\u1053\5\u0252\u012a\2\u1052\u1051\3\2\2",
    "\2\u1053\u1054\3\2\2\2\u1054\u1052\3\2\2\2\u1054\u1055\3\2\2\2\u1055",
    "\u1150\3\2\2\2\u1056\u1057\7b\2\2\u1057\u1058\7\u01ea\2\2\u1058\u105a",
    "\5\u0210\u0109\2\u1059\u105b\t\66\2\2\u105a\u1059\3\2\2\2\u105a\u105b",
    "\3\2\2\2\u105b\u105c\3\2\2\2\u105c\u105d\7\u01eb\2\2\u105d\u1150\3\2",
    "\2\2\u105e\u105f\7\u008a\2\2\u105f\u1060\7\u01ea\2\2\u1060\u1061\5\u02f4",
    "\u017b\2\u1061\u1062\7\u0097\2\2\u1062\u1063\5\u0210\u0109\2\u1063\u1064",
    "\7\u01eb\2\2\u1064\u1150\3\2\2\2\u1065\u1066\t\67\2\2\u1066\u1068\5",
    "\u02c8\u0165\2\u1067\u1069\5\u02cc\u0167\2\u1068\u1067\3\2\2\2\u1068",
    "\u1069\3\2\2\2\u1069\u106a\3\2\2\2\u106a\u106b\5\u0244\u0123\2\u106b",
    "\u1150\3\2\2\2\u106c\u106d\5\u0242\u0122\2\u106d\u106e\7\u01ea\2\2\u106e",
    "\u1073\5\u01f6\u00fc\2\u106f\u1070\7\u01f0\2\2\u1070\u1072\5\u01f6\u00fc",
    "\2\u1071\u106f\3\2\2\2\u1072\u1075\3\2\2\2\u1073\u1071\3\2\2\2\u1073",
    "\u1074\3\2\2\2\u1074\u1077\3\2\2\2\u1075\u1073\3\2\2\2\u1076\u1078\5",
    "\u0254\u012b\2\u1077\u1076\3\2\2\2\u1077\u1078\3\2\2\2\u1078\u107a\3",
    "\2\2\2\u1079\u107b\5\u024c\u0127\2\u107a\u1079\3\2\2\2\u107a\u107b\3",
    "\2\2\2\u107b\u107c\3\2\2\2\u107c\u107d\7\u01eb\2\2\u107d\u1150\3\2\2",
    "\2\u107e\u107f\7\u0186\2\2\u107f\u1080\7\u01ea\2\2\u1080\u1083\5\u01f6",
    "\u00fc\2\u1081\u1082\7\u0199\2\2\u1082\u1084\t8\2\2\u1083\u1081\3\2",
    "\2\2\u1083\u1084\3\2\2\2\u1084\u1089\3\2\2\2\u1085\u1086\7\u01f0\2\2",
    "\u1086\u1088\5\u01f6\u00fc\2\u1087\u1085\3\2\2\2\u1088\u108b\3\2\2\2",
    "\u1089\u1087\3\2\2\2\u1089\u108a\3\2\2\2\u108a\u108c\3\2\2\2\u108b\u1089",
    "\3\2\2\2\u108c\u108d\7\u01eb\2\2\u108d\u1150\3\2\2\2\u108e\u108f\7\u0187",
    "\2\2\u108f\u1090\7\u01ea\2\2\u1090\u1091\5\u01f6\u00fc\2\u1091\u1093",
    "\7\17\2\2\u1092\u1094\7\u012e\2\2\u1093\u1092\3\2\2\2\u1093\u1094\3",
    "\2\2\2\u1094\u1095\3\2\2\2\u1095\u1096\5\u02d0\u0169\2\u1096\u1097\7",
    "\u01eb\2\2\u1097\u1150\3\2\2\2\u1098\u1099\7\u0189\2\2\u1099\u10a1\7",
    "\u01ea\2\2\u109a\u109c\t9\2\2\u109b\u109a\3\2\2\2\u109b\u109c\3\2\2",
    "\2\u109c\u109e\3\2\2\2\u109d\u109f\5\u02e4\u0173\2\u109e\u109d\3\2\2",
    "\2\u109e\u109f\3\2\2\2\u109f\u10a0\3\2\2\2\u10a0\u10a2\7\u0097\2\2\u10a1",
    "\u109b\3\2\2\2\u10a1\u10a2\3\2\2\2\u10a2\u10a3\3\2\2\2\u10a3\u10a4\5",
    "\u0210\u0109\2\u10a4\u10a5\7\u01eb\2\2\u10a5\u1150\3\2\2\2\u10a6\u10a7",
    "\7\u01b0\2\2\u10a7\u10a8\7\u01ea\2\2\u10a8\u10aa\5\u01f6\u00fc\2\u10a9",
    "\u10ab\5\u01a0\u00d1\2\u10aa\u10a9\3\2\2\2\u10aa\u10ab\3\2\2\2\u10ab",
    "\u10ac\3\2\2\2\u10ac\u10af\7\u01eb\2\2\u10ad\u10ae\7\u01e3\2\2\u10ae",
    "\u10b0\5\u02dc\u016f\2\u10af\u10ad\3\2\2\2\u10af\u10b0\3\2\2\2\u10b0",
    "\u1150\3\2\2\2\u10b1\u10b2\t:\2\2\u10b2\u10b3\7\u01ea\2\2\u10b3\u10b8",
    "\5\u0260\u0131\2\u10b4\u10b5\7\u01f0\2\2\u10b5\u10b7\5\u0260\u0131\2",
    "\u10b6\u10b4\3\2\2\2\u10b7\u10ba\3\2\2\2\u10b8\u10b6\3\2\2\2\u10b8\u10b9",
    "\3\2\2\2\u10b9\u10bb\3\2\2\2\u10ba\u10b8\3\2\2\2\u10bb\u10be\7\u01eb",
    "\2\2\u10bc\u10bd\7\u01e3\2\2\u10bd\u10bf\5\u02dc\u016f\2\u10be\u10bc",
    "\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u1150\3\2\2\2\u10c0\u10c1\7\u01b4",
    "\2\2\u10c1\u10c3\7\u01ea\2\2\u10c2\u10c4\t;\2\2\u10c3\u10c2\3\2\2\2",
    "\u10c3\u10c4\3\2\2\2\u10c4\u10c6\3\2\2\2\u10c5\u10c7\t<\2\2\u10c6\u10c5",
    "\3\2\2\2\u10c6\u10c7\3\2\2\2\u10c7\u10c8\3\2\2\2\u10c8\u10cb\5\u01f6",
    "\u00fc\2\u10c9\u10ca\7\u01f0\2\2\u10ca\u10cc\5\u0258\u012d\2\u10cb\u10c9",
    "\3\2\2\2\u10cb\u10cc\3\2\2\2\u10cc\u10d4\3\2\2\2\u10cd\u10ce\7\u01f0",
    "\2\2\u10ce\u10d0\5\u01f6\u00fc\2\u10cf\u10d1\5\u0278\u013d\2\u10d0\u10cf",
    "\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u10d3\3\2\2\2\u10d2\u10cd\3\2\2\2",
    "\u10d3\u10d6\3\2\2\2\u10d4\u10d2\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5\u10d7",
    "\3\2\2\2\u10d6\u10d4\3\2\2\2\u10d7\u10da\7\u01eb\2\2\u10d8\u10d9\7\u01e3",
    "\2\2\u10d9\u10db\5\u02dc\u016f\2\u10da\u10d8\3\2\2\2\u10da\u10db\3\2",
    "\2\2\u10db\u1150\3\2\2\2\u10dc\u10dd\7\u01b5\2\2\u10dd\u10de\7\u01ea",
    "\2\2\u10de\u10e0\5\u01f6\u00fc\2\u10df\u10e1\5\u0256\u012c\2\u10e0\u10df",
    "\3\2\2\2\u10e0\u10e1\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e3\7\u01eb",
    "\2\2\u10e3\u1150\3\2\2\2\u10e4\u10e5\7\u01b8\2\2\u10e5\u10e6\7\u01ea",
    "\2\2\u10e6\u10e7\t=\2\2\u10e7\u10e9\5\u0210\u0109\2\u10e8\u10ea\7\u01a6",
    "\2\2\u10e9\u10e8\3\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u10eb\3\2\2\2\u10eb",
    "\u10ee\7\u01eb\2\2\u10ec\u10ed\7\u01e3\2\2\u10ed\u10ef\5\u02dc\u016f",
    "\2\u10ee\u10ec\3\2\2\2\u10ee\u10ef\3\2\2\2\u10ef\u1150\3\2\2\2\u10f0",
    "\u10f1\7\u01b9\2\2\u10f1\u10f6\7\u01ea\2\2\u10f2\u10f3\7\u00e5\2\2\u10f3",
    "\u10f7\5\u02e6\u0174\2\u10f4\u10f5\7\177\2\2\u10f5\u10f7\5\u0210\u0109",
    "\2\u10f6\u10f2\3\2\2\2\u10f6\u10f4\3\2\2\2\u10f7\u10fa\3\2\2\2\u10f8",
    "\u10f9\7\u01f0\2\2\u10f9\u10fb\5\u0210\u0109\2\u10fa\u10f8\3\2\2\2\u10fa",
    "\u10fb\3\2\2\2\u10fb\u10fc\3\2\2\2\u10fc\u10ff\7\u01eb\2\2\u10fd\u10fe",
    "\7\u01e3\2\2\u10fe\u1100\5\u02dc\u016f\2\u10ff\u10fd\3\2\2\2\u10ff\u1100",
    "\3\2\2\2\u1100\u1150\3\2\2\2\u1101\u1102\7\u01ba\2\2\u1102\u1103\7\u01ea",
    "\2\2\u1103\u1105\5\u0210\u0109\2\u1104\u1106\5\u0256\u012c\2\u1105\u1104",
    "\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u1107\3\2\2\2\u1107\u1108\7\u013a",
    "\2\2\u1108\u110c\7G\2\2\u1109\u110a\7\u00fc\2\2\u110a\u110b\7\u0106",
    "\2\2\u110b\u110d\7x\2\2\u110c\u1109\3\2\2\2\u110c\u110d\3\2\2\2\u110d",
    "\u110e\3\2\2\2\u110e\u1111\7\u01eb\2\2\u110f\u1110\7\u01e3\2\2\u1110",
    "\u1112\5\u02dc\u016f\2\u1111\u110f\3\2\2\2\u1111\u1112\3\2\2\2\u1112",
    "\u1150\3\2\2\2\u1113\u1114\7\u01bb\2\2\u1114\u1115\7\u01ea\2\2\u1115",
    "\u1116\5\u0210\u0109\2\u1116\u1119\5\u0262\u0132\2\u1117\u1118\7\u01f0",
    "\2\2\u1118\u111a\5\u0264\u0133\2\u1119\u1117\3\2\2\2\u1119\u111a\3\2",
    "\2\2\u111a\u111b\3\2\2\2\u111b\u111e\7\u01eb\2\2\u111c\u111d\7\u01e3",
    "\2\2\u111d\u111f\5\u02dc\u016f\2\u111e\u111c\3\2\2\2\u111e\u111f\3\2",
    "\2\2\u111f\u1150\3\2\2\2\u1120\u1121\7\u01bc\2\2\u1121\u1122\7\u01ea",
    "\2\2\u1122\u1123\t=\2\2\u1123\u1126\5\u0210\u0109\2\u1124\u1125\7\17",
    "\2\2\u1125\u1127\5\u02d0\u0169\2\u1126\u1124\3\2\2\2\u1126\u1127\3\2",
    "\2\2\u1127\u1129\3\2\2\2\u1128\u112a\5\u0266\u0134\2\u1129\u1128\3\2",
    "\2\2\u1129\u112a\3\2\2\2\u112a\u112c\3\2\2\2\u112b\u112d\5\u0268\u0135",
    "\2\u112c\u112b\3\2\2\2\u112c\u112d\3\2\2\2\u112d\u112f\3\2\2\2\u112e",
    "\u1130\5\u026a\u0136\2\u112f\u112e\3\2\2\2\u112f\u1130\3\2\2\2\u1130",
    "\u1133\3\2\2\2\u1131\u1132\t>\2\2\u1132\u1134\7e\2\2\u1133\u1131\3\2",
    "\2\2\u1133\u1134\3\2\2\2\u1134\u1135\3\2\2\2\u1135\u1138\7\u01eb\2\2",
    "\u1136\u1137\7\u01e3\2\2\u1137\u1139\5\u02dc\u016f\2\u1138\u1136\3\2",
    "\2\2\u1138\u1139\3\2\2\2\u1139\u1150\3\2\2\2\u113a\u113b\7\u01bd\2\2",
    "\u113b\u113d\7\u01ea\2\2\u113c\u113e\5\u025a\u012e\2\u113d\u113c\3\2",
    "\2\2\u113d\u113e\3\2\2\2\u113e\u113f\3\2\2\2\u113f\u1141\5\u0210\u0109",
    "\2\u1140\u1142\5\u0256\u012c\2\u1141\u1140\3\2\2\2\u1141\u1142\3\2\2",
    "\2\u1142\u1148\3\2\2\2\u1143\u1144\7:\2\2\u1144\u1145\5\u025c\u012f",
    "\2\u1145\u1146\7\u01f0\2\2\u1146\u1147\5\u025c\u012f\2\u1147\u1149\3",
    "\2\2\2\u1148\u1143\3\2\2\2\u1148\u1149\3\2\2\2\u1149\u114a\3\2\2\2\u114a",
    "\u114d\7\u01eb\2\2\u114b\u114c\7\u01e3\2\2\u114c\u114e\5\u02dc\u016f",
    "\2\u114d\u114b\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u1150\3\2\2\2\u114f",
    "\u1018\3\2\2\2\u114f\u101d\3\2\2\2\u114f\u1022\3\2\2\2\u114f\u102f\3",
    "\2\2\2\u114f\u103d\3\2\2\2\u114f\u1044\3\2\2\2\u114f\u104f\3\2\2\2\u114f",
    "\u1056\3\2\2\2\u114f\u105e\3\2\2\2\u114f\u1065\3\2\2\2\u114f\u106c\3",
    "\2\2\2\u114f\u107e\3\2\2\2\u114f\u108e\3\2\2\2\u114f\u1098\3\2\2\2\u114f",
    "\u10a6\3\2\2\2\u114f\u10b1\3\2\2\2\u114f\u10c0\3\2\2\2\u114f\u10dc\3",
    "\2\2\2\u114f\u10e4\3\2\2\2\u114f\u10f0\3\2\2\2\u114f\u1101\3\2\2\2\u114f",
    "\u1113\3\2\2\2\u114f\u1120\3\2\2\2\u114f\u113a\3\2\2\2\u1150\u023d\3",
    "\2\2\2\u1151\u1152\t?\2\2\u1152\u023f\3\2\2\2\u1153\u1154\t@\2\2\u1154",
    "\u0241\3\2\2\2\u1155\u1156\tA\2\2\u1156\u0243\3\2\2\2\u1157\u1158\7",
    "\u0111\2\2\u1158\u115a\7\u01ea\2\2\u1159\u115b\5\u015c\u00af\2\u115a",
    "\u1159\3\2\2\2\u115a\u115b\3\2\2\2\u115b\u1160\3\2\2\2\u115c\u115e\5",
    "\u01a0\u00d1\2\u115d\u115f\5\u0246\u0124\2\u115e\u115d\3\2\2\2\u115e",
    "\u115f\3\2\2\2\u115f\u1161\3\2\2\2\u1160\u115c\3\2\2\2\u1160\u1161\3",
    "\2\2\2\u1161\u1162\3\2\2\2\u1162\u1163\7\u01eb\2\2\u1163\u0245\3\2\2",
    "\2\u1164\u116b\5\u0248\u0125\2\u1165\u1166\7\34\2\2\u1166\u1167\5\u024a",
    "\u0126\2\u1167\u1168\7\f\2\2\u1168\u1169\5\u024a\u0126\2\u1169\u116c",
    "\3\2\2\2\u116a\u116c\5\u024a\u0126\2\u116b\u1165\3\2\2\2\u116b\u116a",
    "\3\2\2\2\u116c\u0247\3\2\2\2\u116d\u116e\tB\2\2\u116e\u0249\3\2\2\2",
    "\u116f\u1170\7\u018d\2\2\u1170\u1177\7\u0123\2\2\u1171\u1172\7R\2\2",
    "\u1172\u1177\7\u0141\2\2\u1173\u1174\5\u0210\u0109\2\u1174\u1175\tC",
    "\2\2\u1175\u1177\3\2\2\2\u1176\u116f\3\2\2\2\u1176\u1171\3\2\2\2\u1176",
    "\u1173\3\2\2\2\u1177\u024b\3\2\2\2\u1178\u1182\7\u0199\2\2\u1179\u1183",
    "\7\u01ed\2\2\u117a\u117f\5\u024e\u0128\2\u117b\u117c\7\u01f0\2\2\u117c",
    "\u117e\5\u024e\u0128\2\u117d\u117b\3\2\2\2\u117e\u1181\3\2\2\2\u117f",
    "\u117d\3\2\2\2\u117f\u1180\3\2\2\2\u1180\u1183\3\2\2\2\u1181\u117f\3",
    "\2\2\2\u1182\u1179\3\2\2\2\u1182\u117a\3\2\2\2\u1183\u024d\3\2\2\2\u1184",
    "\u1186\7\u00a5\2\2\u1185\u1187\7\u010f\2\2\u1186\u1185\3\2\2\2\u1186",
    "\u1187\3\2\2\2\u1187\u118a\3\2\2\2\u1188\u118a\7\u010f\2\2\u1189\u1184",
    "\3\2\2\2\u1189\u1188\3\2\2\2\u1189\u118a\3\2\2\2\u118a\u118b\3\2\2\2",
    "\u118b\u118d\5\u014c\u00a7\2\u118c\u118e\5\u0278\u013d\2\u118d\u118c",
    "\3\2\2\2\u118d\u118e\3\2\2\2\u118e\u024f\3\2\2\2\u118f\u1190\7\u010c",
    "\2\2\u1190\u1191\7(\2\2\u1191\u1192\5\u0210\u0109\2\u1192\u0251\3\2",
    "\2\2\u1193\u1194\7\u01ac\2\2\u1194\u1195\7\u009c\2\2\u1195\u1196\7\u01ea",
    "\2\2\u1196\u1197\5\u01a0\u00d1\2\u1197\u1198\7\u01eb\2\2\u1198\u119b",
    "\3\2\2\2\u1199\u119b\5\u0244\u0123\2\u119a\u1193\3\2\2\2\u119a\u1199",
    "\3\2\2\2\u119b\u0253\3\2\2\2\u119c\u11ae\7M\2\2\u119d\u119f\7\u00e1",
    "\2\2\u119e\u11a0\7\26\2\2\u119f\u119e\3\2\2\2\u119f\u11a0\3\2\2\2\u11a0",
    "\u11af\3\2\2\2\u11a1\u11a2\7\u01ea\2\2\u11a2\u11a7\5\u0286\u0144\2\u11a3",
    "\u11a4\7\u01f0\2\2\u11a4\u11a6\5\u0286\u0144\2\u11a5\u11a3\3\2\2\2\u11a6",
    "\u11a9\3\2\2\2\u11a7\u11a5\3\2\2\2\u11a7\u11a8\3\2\2\2\u11a8\u11aa\3",
    "\2\2\2\u11a9\u11a7\3\2\2\2\u11aa\u11ab\7\u01eb\2\2\u11ab\u11ac\7\u019c",
    "\2\2\u11ac\u11ad\5\u01ee\u00f8\2\u11ad\u11af\3\2\2\2\u11ae\u119d\3\2",
    "\2\2\u11ae\u11a1\3\2\2\2\u11af\u0255\3\2\2\2\u11b0\u11b3\7\u0118\2\2",
    "\u11b1\u11b2\7(\2\2\u11b2\u11b4\7\u019b\2\2\u11b3\u11b1\3\2\2\2\u11b3",
    "\u11b4\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5\u11b7\5\u01f6\u00fc\2\u11b6",
    "\u11b8\5\u0278\u013d\2\u11b7\u11b6\3\2\2\2\u11b7\u11b8\3\2\2\2\u11b8",
    "\u11b9\3\2\2\2\u11b9\u11ba\7\u01f0\2\2\u11ba\u11bc\5\u01f6\u00fc\2\u11bb",
    "\u11bd\5\u0278\u013d\2\u11bc\u11bb\3\2\2\2\u11bc\u11bd\3\2\2\2\u11bd",
    "\u0257\3\2\2\2\u11be\u11bf\7\u01b1\2\2\u11bf\u11c1\7\u01ea\2\2\u11c0",
    "\u11c2\t;\2\2\u11c1\u11c0\3\2\2\2\u11c1\u11c2\3\2\2\2\u11c2\u11c4\3",
    "\2\2\2\u11c3\u11c5\tD\2\2\u11c4\u11c3\3\2\2\2\u11c4\u11c5\3\2\2\2\u11c5",
    "\u11c6\3\2\2\2\u11c6\u11cb\5\u0260\u0131\2\u11c7\u11c8\7\u01f0\2\2\u11c8",
    "\u11ca\5\u0260\u0131\2\u11c9\u11c7\3\2\2\2\u11ca\u11cd\3\2\2\2\u11cb",
    "\u11c9\3\2\2\2\u11cb\u11cc\3\2\2\2\u11cc\u11ce\3\2\2\2\u11cd\u11cb\3",
    "\2\2\2\u11ce\u11cf\7\u01eb\2\2\u11cf\u0259\3\2\2\2\u11d0\u11d1\7\u01b7",
    "\2\2\u11d1\u11d5\7\u01ea\2\2\u11d2\u11d3\5\u0210\u0109\2\u11d3\u11d4",
    "\5\u0278\u013d\2\u11d4\u11d6\3\2\2\2\u11d5\u11d2\3\2\2\2\u11d5\u11d6",
    "\3\2\2\2\u11d6\u11dd\3\2\2\2\u11d7\u11d8\7\u01f0\2\2\u11d8\u11d9\5\u0210",
    "\u0109\2\u11d9\u11da\5\u0278\u013d\2\u11da\u11dc\3\2\2\2\u11db\u11d7",
    "\3\2\2\2\u11dc\u11df\3\2\2\2\u11dd\u11db\3\2\2\2\u11dd\u11de\3\2\2\2",
    "\u11de\u11e1\3\2\2\2\u11df\u11dd\3\2\2\2\u11e0\u11e2\5\u025e\u0130\2",
    "\u11e1\u11e0\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3\u11e4",
    "\7\u01eb\2\2\u11e4\u025b\3\2\2\2\u11e5\u11f0\5\u0284\u0143\2\u11e6\u11e7",
    "\7\u0094\2\2\u11e7\u11f1\7\u010d\2\2\u11e8\u11eb\5\u02d0\u0169\2\u11e9",
    "\u11ea\7\u0119\2\2\u11ea\u11ec\5\u0210\u0109\2\u11eb\u11e9\3\2\2\2\u11eb",
    "\u11ec\3\2\2\2\u11ec\u11ee\3\2\2\2\u11ed\u11ef\5\u025e\u0130\2\u11ee",
    "\u11ed\3\2\2\2\u11ee\u11ef\3\2\2\2\u11ef\u11f1\3\2\2\2\u11f0\u11e6\3",
    "\2\2\2\u11f0\u11e8\3\2\2\2\u11f1\u025d\3\2\2\2\u11f2\u11f3\7d\2\2\u11f3",
    "\u11f4\5\u0210\u0109\2\u11f4\u025f\3\2\2\2\u11f5\u11fc\5\u01f4\u00fb",
    "\2\u11f6\u11fa\7\17\2\2\u11f7\u11fb\5\u02e8\u0175\2\u11f8\u11f9\7\177",
    "\2\2\u11f9\u11fb\5\u020e\u0108\2\u11fa\u11f7\3\2\2\2\u11fa\u11f8\3\2",
    "\2\2\u11fb\u11fd\3\2\2\2\u11fc\u11f6\3\2\2\2\u11fc\u11fd\3\2\2\2\u11fd",
    "\u0261\3\2\2\2\u11fe\u1202\7\u01a2\2\2\u11ff\u1200\7\u00ef\2\2\u1200",
    "\u1203\7\u019b\2\2\u1201\u1203\5\u01f6\u00fc\2\u1202\u11ff\3\2\2\2\u1202",
    "\u1201\3\2\2\2\u1203\u0263\3\2\2\2\u1204\u120a\7\u0169\2\2\u1205\u120b",
    "\7\u01bf\2\2\u1206\u1208\7\u00ef\2\2\u1207\u1209\7\u019b\2\2\u1208\u1207",
    "\3\2\2\2\u1208\u1209\3\2\2\2\u1209\u120b\3\2\2\2\u120a\u1205\3\2\2\2",
    "\u120a\u1206\3\2\2\2\u120b\u0265\3\2\2\2\u120c\u120d\7z\2\2\u120d\u120e",
    "\5\u0210\u0109\2\u120e\u0267\3\2\2\2\u120f\u1210\7\u01a2\2\2\u1210\u1211",
    "\5\u0210\u0109\2\u1211\u0269\3\2\2\2\u1212\u1213\7\u00ef\2\2\u1213\u121b",
    "\7\u00a9\2\2\u1214\u1218\7\u00a9\2\2\u1215\u1216\7\u0161\2\2\u1216\u1217",
    "\7\u0201\2\2\u1217\u1219\5\u0210\u0109\2\u1218\u1215\3\2\2\2\u1218\u1219",
    "\3\2\2\2\u1219\u121b\3\2\2\2\u121a\u1212\3\2\2\2\u121a\u1214\3\2\2\2",
    "\u121b\u026b\3\2\2\2\u121c\u1222\7\u01f1\2\2\u121d\u1222\5\u026e\u0138",
    "\2\u121e\u1222\5\u0272\u013a\2\u121f\u1222\5\u0274\u013b\2\u1220\u1222",
    "\5\u0270\u0139\2\u1221\u121c\3\2\2\2\u1221\u121d\3\2\2\2\u1221\u121e",
    "\3\2\2\2\u1221\u121f\3\2\2\2\u1221\u1220\3\2\2\2\u1222\u1224\3\2\2\2",
    "\u1223\u1225\7\u01f6\2\2\u1224\u1223\3\2\2\2\u1224\u1225\3\2\2\2\u1225",
    "\u026d\3\2\2\2\u1226\u1227\7\u01a8\2\2\u1227\u122d\tE\2\2\u1228\u1229",
    "\7\u0087\2\2\u1229\u122a\tF\2\2\u122a\u122e\tG\2\2\u122b\u122c\7I\2",
    "\2\u122c\u122e\tH\2\2\u122d\u1228\3\2\2\2\u122d\u122b\3\2\2\2\u122e",
    "\u026f\3\2\2\2\u122f\u1230\7\u0157\2\2\u1230\u1236\5\u02f4\u017b\2\u1231",
    "\u1237\7\u01e6\2\2\u1232\u1237\7\u0106\2\2\u1233\u1237\7\u0103\2\2\u1234",
    "\u1237\5\u02e2\u0172\2\u1235\u1237\5\u02f4\u017b\2\u1236\u1231\3\2\2",
    "\2\u1236\u1232\3\2\2\2\u1236\u1233\3\2\2\2\u1236\u1234\3\2\2\2\u1236",
    "\u1235\3\2\2\2\u1237\u0271\3\2\2\2\u1238\u1239\7\u0087\2\2\u1239\u0273",
    "\3\2\2\2\u123a\u123b\7\u0208\2\2\u123b\u0275\3\2\2\2\u123c\u123e\tI",
    "\2\2\u123d\u123f\7\u0094\2\2\u123e\u123d\3\2\2\2\u123e\u123f\3\2\2\2",
    "\u123f\u1240\3\2\2\2\u1240\u1241\5\u01ee\u00f8\2\u1241\u0277\3\2\2\2",
    "\u1242\u1244\7\17\2\2\u1243\u1242\3\2\2\2\u1243\u1244\3\2\2\2\u1244",
    "\u1247\3\2\2\2\u1245\u1248\5\u02e6\u0174\2\u1246\u1248\5\u027c\u013f",
    "\2\u1247\u1245\3\2\2\2\u1247\u1246\3\2\2\2\u1248\u124b\3\2\2\2\u1249",
    "\u124b\7\17\2\2\u124a\u1243\3\2\2\2\u124a\u1249\3\2\2\2\u124b\u0279",
    "\3\2\2\2\u124c\u124f\5\u02e6\u0174\2\u124d\u124f\5\u027c\u013f\2\u124e",
    "\u124c\3\2\2\2\u124e\u124d\3\2\2\2\u124f\u027b\3\2\2\2\u1250\u1251\5",
    "\u02e4\u0173\2\u1251\u027d\3\2\2\2\u1252\u1255\7\u01a9\2\2\u1253\u1256",
    "\5\u0280\u0141\2\u1254\u1256\5\u01f2\u00fa\2\u1255\u1253\3\2\2\2\u1255",
    "\u1254\3\2\2\2\u1256\u027f\3\2\2\2\u1257\u1258\7R\2\2\u1258\u1259\7",
    "\u0102\2\2\u1259\u125a\5\u02b6\u015c\2\u125a\u0281\3\2\2\2\u125b\u125c",
    "\7\u00b9\2\2\u125c\u1261\5\u02b2\u015a\2\u125d\u125e\7\u01f0\2\2\u125e",
    "\u1260\5\u02b2\u015a\2\u125f\u125d\3\2\2\2\u1260\u1263\3\2\2\2\u1261",
    "\u125f\3\2\2\2\u1261\u1262\3\2\2\2\u1262\u1270\3\2\2\2\u1263\u1261\3",
    "\2\2\2\u1264\u1265\7\'\2\2\u1265\u1266\79\2\2\u1266\u1267\7\u00b9\2",
    "\2\u1267\u126c\5\u02b2\u015a\2\u1268\u1269\7\u01f0\2\2\u1269\u126b\5",
    "\u02b2\u015a\2\u126a\u1268\3\2\2\2\u126b\u126e\3\2\2\2\u126c\u126a\3",
    "\2\2\2\u126c\u126d\3\2\2\2\u126d\u1270\3\2\2\2\u126e\u126c\3\2\2\2\u126f",
    "\u125b\3\2\2\2\u126f\u1264\3\2\2\2\u1270\u0283\3\2\2\2\u1271\u1274\5",
    "\u02e6\u0174\2\u1272\u1274\5\u02e4\u0173\2\u1273\u1271\3\2\2\2\u1273",
    "\u1272\3\2\2\2\u1274\u0285\3\2\2\2\u1275\u1276\5\u02e6\u0174\2\u1276",
    "\u0287\3\2\2\2\u1277\u1278\5\u02e6\u0174\2\u1278\u0289\3\2\2\2\u1279",
    "\u127a\5\u02e6\u0174\2\u127a\u028b\3\2\2\2\u127b\u127c\5\u02e6\u0174",
    "\2\u127c\u028d\3\2\2\2\u127d\u127e\5\u02e6\u0174\2\u127e\u028f\3\2\2",
    "\2\u127f\u1280\5\u02e6\u0174\2\u1280\u0291\3\2\2\2\u1281\u1286\5\u02e6",
    "\u0174\2\u1282\u1283\7\u01e3\2\2\u1283\u1285\5\u02e8\u0175\2\u1284\u1282",
    "\3\2\2\2\u1285\u1288\3\2\2\2\u1286\u1284\3\2\2\2\u1286\u1287\3\2\2\2",
    "\u1287\u128b\3\2\2\2\u1288\u1286\3\2\2\2\u1289\u128a\7\u01f2\2\2\u128a",
    "\u128c\5\u02bc\u015f\2\u128b\u1289\3\2\2\2\u128b\u128c\3\2\2\2\u128c",
    "\u0293\3\2\2\2\u128d\u128e\5\u02e6\u0174\2\u128e\u0295\3\2\2\2\u128f",
    "\u1292\5\u02e6\u0174\2\u1290\u1291\7\u01e3\2\2\u1291\u1293\5\u02e8\u0175",
    "\2\u1292\u1290\3\2\2\2\u1292\u1293\3\2\2\2\u1293\u0297\3\2\2\2\u1294",
    "\u1295\5\u02e6\u0174\2\u1295\u0299\3\2\2\2\u1296\u1297\5\u02e6\u0174",
    "\2\u1297\u029b\3\2\2\2\u1298\u1299\5\u02e6\u0174\2\u1299\u029d\3\2\2",
    "\2\u129a\u129f\5\u02e6\u0174\2\u129b\u129c\7\u01e3\2\2\u129c\u129e\5",
    "\u02e8\u0175\2\u129d\u129b\3\2\2\2\u129e\u12a1\3\2\2\2\u129f\u129d\3",
    "\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u029f\3\2\2\2\u12a1\u129f\3\2\2\2\u12a2",
    "\u12a3\5\u02e6\u0174\2\u12a3\u02a1\3\2\2\2\u12a4\u12a9\5\u02e6\u0174",
    "\2\u12a5\u12a6\7\u01e3\2\2\u12a6\u12a8\5\u02e8\u0175\2\u12a7\u12a5\3",
    "\2\2\2\u12a8\u12ab\3\2\2\2\u12a9\u12a7\3\2\2\2\u12a9\u12aa\3\2\2\2\u12aa",
    "\u12ae\3\2\2\2\u12ab\u12a9\3\2\2\2\u12ac\u12ad\7\u01f2\2\2\u12ad\u12af",
    "\5\u02bc\u015f\2\u12ae\u12ac\3\2\2\2\u12ae\u12af\3\2\2\2\u12af\u02a3",
    "\3\2\2\2\u12b0\u12b1\5\u02e8\u0175\2\u12b1\u02a5\3\2\2\2\u12b2\u12b7",
    "\5\u02e8\u0175\2\u12b3\u12b4\7\u01e3\2\2\u12b4\u12b6\5\u02e8\u0175\2",
    "\u12b5\u12b3\3\2\2\2\u12b6\u12b9\3\2\2\2\u12b7\u12b5\3\2\2\2\u12b7\u12b8",
    "\3\2\2\2\u12b8\u02a7\3\2\2\2\u12b9\u12b7\3\2\2\2\u12ba\u12bf\5\u02e8",
    "\u0175\2\u12bb\u12bc\7\u01e3\2\2\u12bc\u12be\5\u02e8\u0175\2\u12bd\u12bb",
    "\3\2\2\2\u12be\u12c1\3\2\2\2\u12bf\u12bd\3\2\2\2\u12bf\u12c0\3\2\2\2",
    "\u12c0\u02a9\3\2\2\2\u12c1\u12bf\3\2\2\2\u12c2\u12c7\5\u02e6\u0174\2",
    "\u12c3\u12c4\7\u01e3\2\2\u12c4\u12c6\5\u02e8\u0175\2\u12c5\u12c3\3\2",
    "\2\2\u12c6\u12c9\3\2\2\2\u12c7\u12c5\3\2\2\2\u12c7\u12c8\3\2\2\2\u12c8",
    "\u02ab\3\2\2\2\u12c9\u12c7\3\2\2\2\u12ca\u12cd\5\u02e6\u0174\2\u12cb",
    "\u12cc\7\u01e3\2\2\u12cc\u12ce\5\u02e8\u0175\2\u12cd\u12cb\3\2\2\2\u12cd",
    "\u12ce\3\2\2\2\u12ce\u02ad\3\2\2\2\u12cf\u12d2\5\u02e6\u0174\2\u12d0",
    "\u12d1\7\u01e3\2\2\u12d1\u12d3\5\u02e8\u0175\2\u12d2\u12d0\3\2\2\2\u12d2",
    "\u12d3\3\2\2\2\u12d3\u02af\3\2\2\2\u12d4\u12d7\5\u02e6\u0174\2\u12d5",
    "\u12d6\7\u01e3\2\2\u12d6\u12d8\5\u02e8\u0175\2\u12d7\u12d5\3\2\2\2\u12d7",
    "\u12d8\3\2\2\2\u12d8\u02b1\3\2\2\2\u12d9\u12da\7\u0204\2\2\u12da\u12dc",
    "\5\u02c2\u0162\2\u12db\u12d9\3\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u12dd",
    "\3\2\2\2\u12dd\u12e0\5\u02e8\u0175\2\u12de\u12df\7\u01e3\2\2\u12df\u12e1",
    "\5\u02e8\u0175\2\u12e0\u12de\3\2\2\2\u12e0\u12e1\3\2\2\2\u12e1\u12e4",
    "\3\2\2\2\u12e2\u12e4\5\u02d8\u016d\2\u12e3\u12db\3\2\2\2\u12e3\u12e2",
    "\3\2\2\2\u12e4\u02b3\3\2\2\2\u12e5\u12e6\5\u02e6\u0174\2\u12e6\u02b5",
    "\3\2\2\2\u12e7\u12ea\5\u02e6\u0174\2\u12e8\u12ea\5\u02d8\u016d\2\u12e9",
    "\u12e7\3\2\2\2\u12e9\u12e8\3\2\2\2\u12ea\u02b7\3\2\2\2\u12eb\u12ee\5",
    "\u02e6\u0174\2\u12ec\u12ee\5\u02d8\u016d\2\u12ed\u12eb\3\2\2\2\u12ed",
    "\u12ec\3\2\2\2\u12ee\u02b9\3\2\2\2\u12ef\u12f2\5\u02e6\u0174\2\u12f0",
    "\u12f1\7\u01e3\2\2\u12f1\u12f3\5\u02e8\u0175\2\u12f2\u12f0\3\2\2\2\u12f2",
    "\u12f3\3\2\2\2\u12f3\u02bb\3\2\2\2\u12f4\u12f5\5\u02e6\u0174\2\u12f5",
    "\u02bd\3\2\2\2\u12f6\u12fb\5\u02e6\u0174\2\u12f7\u12f8\7\u01e3\2\2\u12f8",
    "\u12fa\5\u02e8\u0175\2\u12f9\u12f7\3\2\2\2\u12fa\u12fd\3\2\2\2\u12fb",
    "\u12f9\3\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u02bf\3\2\2\2\u12fd\u12fb\3",
    "\2\2\2\u12fe\u1301\5\u02e6\u0174\2\u12ff\u1300\7\u01e3\2\2\u1300\u1302",
    "\5\u02e8\u0175\2\u1301\u12ff\3\2\2\2\u1301\u1302\3\2\2\2\u1302\u1306",
    "\3\2\2\2\u1303\u1304\7\u01f2\2\2\u1304\u1307\5\u02bc\u015f\2\u1305\u1307",
    "\5\u0276\u013c\2\u1306\u1303\3\2\2\2\u1306\u1305\3\2\2\2\u1306\u1307",
    "\3\2\2\2\u1307\u02c1\3\2\2\2\u1308\u130d\5\u02e8\u0175\2\u1309\u130a",
    "\7\u01e3\2\2\u130a\u130c\5\u02e8\u0175\2\u130b\u1309\3\2\2\2\u130c\u130f",
    "\3\2\2\2\u130d\u130b\3\2\2\2\u130d\u130e\3\2\2\2\u130e\u02c3\3\2\2\2",
    "\u130f\u130d\3\2\2\2\u1310\u1311\7\u00c0\2\2\u1311\u1312\7\u01ea\2\2",
    "\u1312\u1313\7\u01c9\2\2\u1313\u1314\t+\2\2\u1314\u1315\5\u01a0\u00d1",
    "\2\u1315\u1317\7\u01eb\2\2\u1316\u1318\5\u0244\u0123\2\u1317\u1316\3",
    "\2\2\2\u1317\u1318\3\2\2\2\u1318\u02c5\3\2\2\2\u1319\u131b\7\u01ea\2",
    "\2\u131a\u131c\5\u02ce\u0168\2\u131b\u131a\3\2\2\2\u131b\u131c\3\2\2",
    "\2\u131c\u1321\3\2\2\2\u131d\u131e\7\u01f0\2\2\u131e\u1320\5\u02ce\u0168",
    "\2\u131f\u131d\3\2\2\2\u1320\u1323\3\2\2\2\u1321\u131f\3\2\2\2\u1321",
    "\u1322\3\2\2\2\u1322\u1324\3\2\2\2\u1323\u1321\3\2\2\2\u1324\u1326\7",
    "\u01eb\2\2\u1325\u1327\5\u02c4\u0163\2\u1326\u1325\3\2\2\2\u1326\u1327",
    "\3\2\2\2\u1327\u02c7\3\2\2\2\u1328\u132d\7\u01ea\2\2\u1329\u132b\5\u02ce",
    "\u0168\2\u132a\u132c\5\u02cc\u0167\2\u132b\u132a\3\2\2\2\u132b\u132c",
    "\3\2\2\2\u132c\u132e\3\2\2\2\u132d\u1329\3\2\2\2\u132d\u132e\3\2\2\2",
    "\u132e\u1336\3\2\2\2\u132f\u1330\7\u01f0\2\2\u1330\u1332\5\u02ce\u0168",
    "\2\u1331\u1333\5\u02cc\u0167\2\u1332\u1331\3\2\2\2\u1332\u1333\3\2\2",
    "\2\u1333\u1335\3\2\2\2\u1334\u132f\3\2\2\2\u1335\u1338\3\2\2\2\u1336",
    "\u1334\3\2\2\2\u1336\u1337\3\2\2\2\u1337\u1339\3\2\2\2\u1338\u1336\3",
    "\2\2\2\u1339\u133b\7\u01eb\2\2\u133a\u133c\5\u02c4\u0163\2\u133b\u133a",
    "\3\2\2\2\u133b\u133c\3\2\2\2\u133c\u02c9\3\2\2\2\u133d\u133e\7\u01ea",
    "\2\2\u133e\u134b\5\u02be\u0160\2\u133f\u1342\7\u01f0\2\2\u1340\u1343",
    "\5\u02e2\u0172\2\u1341\u1343\7\u00fc\2\2\u1342\u1340\3\2\2\2\u1342\u1341",
    "\3\2\2\2\u1343\u1349\3\2\2\2\u1344\u1347\7\u01f0\2\2\u1345\u1348\5\u02e2",
    "\u0172\2\u1346\u1348\7\u00fc\2\2\u1347\u1345\3\2\2\2\u1347\u1346\3\2",
    "\2\2\u1348\u134a\3\2\2\2\u1349\u1344\3\2\2\2\u1349\u134a\3\2\2\2\u134a",
    "\u134c\3\2\2\2\u134b\u133f\3\2\2\2\u134b\u134c\3\2\2\2\u134c\u134d\3",
    "\2\2\2\u134d\u1361\7\u0199\2\2\u134e\u134f\5\u02c0\u0161\2\u134f\u1350",
    "\7\u01e3\2\2\u1350\u1351\7\u01ed\2\2\u1351\u1362\3\2\2\2\u1352\u1362",
    "\7\u01ed\2\2\u1353\u1355\5\u01f4\u00fb\2\u1354\u1356\5\u0278\u013d\2",
    "\u1355\u1354\3\2\2\2\u1355\u1356\3\2\2\2\u1356\u135e\3\2\2\2\u1357\u1358",
    "\7\u01f0\2\2\u1358\u135a\5\u01f4\u00fb\2\u1359\u135b\5\u0278\u013d\2",
    "\u135a\u1359\3\2\2\2\u135a\u135b\3\2\2\2\u135b\u135d\3\2\2\2\u135c\u1357",
    "\3\2\2\2\u135d\u1360\3\2\2\2\u135e\u135c\3\2\2\2\u135e\u135f\3\2\2\2",
    "\u135f\u1362\3\2\2\2\u1360\u135e\3\2\2\2\u1361\u134e\3\2\2\2\u1361\u1352",
    "\3\2\2\2\u1361\u1353\3\2\2\2\u1362\u1363\3\2\2\2\u1363\u1365\7\u01eb",
    "\2\2\u1364\u1366\5\u02c4\u0163\2\u1365\u1364\3\2\2\2\u1365\u1366\3\2",
    "\2\2\u1366\u02cb\3\2\2\2\u1367\u1368\tJ\2\2\u1368\u1369\7\u00fd\2\2",
    "\u1369\u02cd\3\2\2\2\u136a\u136b\5\u02e6\u0174\2\u136b\u136c\7\u0201",
    "\2\2\u136c\u136d\7\u01fe\2\2\u136d\u136f\3\2\2\2\u136e\u136a\3\2\2\2",
    "\u136e\u136f\3\2\2\2\u136f\u1370\3\2\2\2\u1370\u1371\5\u01f6\u00fc\2",
    "\u1371\u02cf\3\2\2\2\u1372\u137b\5\u02d2\u016a\2\u1373\u1375\7\u012e",
    "\2\2\u1374\u1373\3\2\2\2\u1374\u1375\3\2\2\2\u1375\u1376\3\2\2\2\u1376",
    "\u1378\5\u02a6\u0154\2\u1377\u1379\t\27\2\2\u1378\u1377\3\2\2\2\u1378",
    "\u1379\3\2\2\2\u1379\u137b\3\2\2\2\u137a\u1372\3\2\2\2\u137a\u1374\3",
    "\2\2\2\u137b\u02d1\3\2\2\2\u137c\u137e\5\u02d6\u016c\2\u137d\u137f\5",
    "\u02d4\u016b\2\u137e\u137d\3\2\2\2\u137e\u137f\3\2\2\2\u137f\u1386\3",
    "\2\2\2\u1380\u1382\7\u01ab\2\2\u1381\u1383\7\u00cd\2\2\u1382\u1381\3",
    "\2\2\2\u1382\u1383\3\2\2\2\u1383\u1384\3\2\2\2\u1384\u1385\7\u017a\2",
    "\2\u1385\u1387\7\u01c1\2\2\u1386\u1380\3\2\2\2\u1386\u1387\3\2\2\2\u1387",
    "\u1399\3\2\2\2\u1388\u1389\7\u00b8\2\2\u1389\u138e\tK\2\2\u138a\u138b",
    "\7\u01ea\2\2\u138b\u138c\5\u01f6\u00fc\2\u138c\u138d\7\u01eb\2\2\u138d",
    "\u138f\3\2\2\2\u138e\u138a\3\2\2\2\u138e\u138f\3\2\2\2\u138f\u1390\3",
    "\2\2\2\u1390\u1391\7\u0183\2\2\u1391\u1396\tL\2\2\u1392\u1393\7\u01ea",
    "\2\2\u1393\u1394\5\u01f6\u00fc\2\u1394\u1395\7\u01eb\2\2\u1395\u1397",
    "\3\2\2\2\u1396\u1392\3\2\2\2\u1396\u1397\3\2\2\2\u1397\u1399\3\2\2\2",
    "\u1398\u137c\3\2\2\2\u1398\u1388\3\2\2\2\u1399\u02d3\3\2\2\2\u139a\u139b",
    "\7\u01ea\2\2\u139b\u139e\5\u02e2\u0172\2\u139c\u139d\7\u01f0\2\2\u139d",
    "\u139f\5\u02e2\u0172\2\u139e\u139c\3\2\2\2\u139e\u139f\3\2\2\2\u139f",
    "\u13a1\3\2\2\2\u13a0\u13a2\tM\2\2\u13a1\u13a0\3\2\2\2\u13a1\u13a2\3",
    "\2\2\2\u13a2\u13a3\3\2\2\2\u13a3\u13a4\7\u01eb\2\2\u13a4\u02d5\3\2\2",
    "\2\u13a5\u13e2\7 \2\2\u13a6\u13e2\7\u011f\2\2\u13a7\u13e2\7\u00e7\2",
    "\2\u13a8\u13e2\7\37\2\2\u13a9\u13e2\7\36\2\2\u13aa\u13e2\7\u00e8\2\2",
    "\u13ab\u13e2\7\u0120\2\2\u13ac\u13e2\7\u0121\2\2\u13ad\u13e2\7\u015e",
    "\2\2\u13ae\u13e2\7\u015f\2\2\u13af\u13e2\7\u0100\2\2\u13b0\u13e2\7_",
    "\2\2\u13b1\u13e2\7\u00b6\2\2\u13b2\u13e2\7\u00b5\2\2\u13b3\u13e2\7\u00ff",
    "\2\2\u13b4\u13e2\7\u0163\2\2\u13b5\u13e2\7\u00fe\2\2\u13b6\u13e2\7`",
    "\2\2\u13b7\u13b9\7q\2\2\u13b8\u13ba\7\u0124\2\2\u13b9\u13b8\3\2\2\2",
    "\u13b9\u13ba\3\2\2\2\u13ba\u13e2\3\2\2\2\u13bb\u13e2\7\u0091\2\2\u13bc",
    "\u13e2\7\u012c\2\2\u13bd\u13e2\7\u00ea\2\2\u13be\u13c0\7\u00d3\2\2\u13bf",
    "\u13c1\7\u012a\2\2\u13c0\u13bf\3\2\2\2\u13c0\u13c1\3\2\2\2\u13c1\u13e2",
    "\3\2\2\2\u13c2\u13e2\7\61\2\2\u13c3\u13e2\7\63\2\2\u13c4\u13e2\7\u019e",
    "\2\2\u13c5\u13e2\7\u019d\2\2\u13c6\u13e2\7\u0170\2\2\u13c7\u13e2\7\u012a",
    "\2\2\u13c8\u13e2\7$\2\2\u13c9\u13e2\7Y\2\2\u13ca\u13e2\7\u0142\2\2\u13cb",
    "\u13e2\7\u0197\2\2\u13cc\u13e2\7\u01be\2\2\u13cd\u13e2\7\u00e3\2\2\u13ce",
    "\u13e2\7Z\2\2\u13cf\u13e2\7\u00a1\2\2\u13d0\u13e2\7\u00dd\2\2\u13d1",
    "\u13e2\7\u014c\2\2\u13d2\u13e2\7\u0180\2\2\u13d3\u13e2\7\u0181\2\2\u13d4",
    "\u13e2\7\u0182\2\2\u13d5\u13e2\7\u017f\2\2\u13d6\u13e2\7\u017b\2\2\u13d7",
    "\u13e2\7\u017e\2\2\u13d8\u13e2\7\u017d\2\2\u13d9\u13e2\7\u017c\2\2\u13da",
    "\u13e2\7\u01c0\2\2\u13db\u13e2\7s\2\2\u13dc\u13e2\7\35\2\2\u13dd\u13e2",
    "\7!\2\2\u13de\u13e2\7\66\2\2\u13df\u13e2\7\u00ec\2\2\u13e0\u13e2\7\u00df",
    "\2\2\u13e1\u13a5\3\2\2\2\u13e1\u13a6\3\2\2\2\u13e1\u13a7\3\2\2\2\u13e1",
    "\u13a8\3\2\2\2\u13e1\u13a9\3\2\2\2\u13e1\u13aa\3\2\2\2\u13e1\u13ab\3",
    "\2\2\2\u13e1\u13ac\3\2\2\2\u13e1\u13ad\3\2\2\2\u13e1\u13ae\3\2\2\2\u13e1",
    "\u13af\3\2\2\2\u13e1\u13b0\3\2\2\2\u13e1\u13b1\3\2\2\2\u13e1\u13b2\3",
    "\2\2\2\u13e1\u13b3\3\2\2\2\u13e1\u13b4\3\2\2\2\u13e1\u13b5\3\2\2\2\u13e1",
    "\u13b6\3\2\2\2\u13e1\u13b7\3\2\2\2\u13e1\u13bb\3\2\2\2\u13e1\u13bc\3",
    "\2\2\2\u13e1\u13bd\3\2\2\2\u13e1\u13be\3\2\2\2\u13e1\u13c2\3\2\2\2\u13e1",
    "\u13c3\3\2\2\2\u13e1\u13c4\3\2\2\2\u13e1\u13c5\3\2\2\2\u13e1\u13c6\3",
    "\2\2\2\u13e1\u13c7\3\2\2\2\u13e1\u13c8\3\2\2\2\u13e1\u13c9\3\2\2\2\u13e1",
    "\u13ca\3\2\2\2\u13e1\u13cb\3\2\2\2\u13e1\u13cc\3\2\2\2\u13e1\u13cd\3",
    "\2\2\2\u13e1\u13ce\3\2\2\2\u13e1\u13cf\3\2\2\2\u13e1\u13d0\3\2\2\2\u13e1",
    "\u13d1\3\2\2\2\u13e1\u13d2\3\2\2\2\u13e1\u13d3\3\2\2\2\u13e1\u13d4\3",
    "\2\2\2\u13e1\u13d5\3\2\2\2\u13e1\u13d6\3\2\2\2\u13e1\u13d7\3\2\2\2\u13e1",
    "\u13d8\3\2\2\2\u13e1\u13d9\3\2\2\2\u13e1\u13da\3\2\2\2\u13e1\u13db\3",
    "\2\2\2\u13e1\u13dc\3\2\2\2\u13e1\u13dd\3\2\2\2\u13e1\u13de\3\2\2\2\u13e1",
    "\u13df\3\2\2\2\u13e1\u13e0\3\2\2\2\u13e2\u02d7\3\2\2\2\u13e3\u13e7\7",
    "\u01f4\2\2\u13e4\u13e5\7\u01f5\2\2\u13e5\u13e7\7\u01e4\2\2\u13e6\u13e3",
    "\3\2\2\2\u13e6\u13e4\3\2\2\2\u13e7\u13f0\3\2\2\2\u13e8\u13ea\7\u00ac",
    "\2\2\u13e9\u13e8\3\2\2\2\u13e9\u13ea\3\2\2\2\u13ea\u13ee\3\2\2\2\u13eb",
    "\u13ef\7\u01f4\2\2\u13ec\u13ed\7\u01f5\2\2\u13ed\u13ef\7\u01e4\2\2\u13ee",
    "\u13eb\3\2\2\2\u13ee\u13ec\3\2\2\2\u13ef\u13f1\3\2\2\2\u13f0\u13e9\3",
    "\2\2\2\u13f0\u13f1\3\2\2\2\u13f1\u13f6\3\2\2\2\u13f2\u13f3\7\u01e3\2",
    "\2\u13f3\u13f5\5\u02dc\u016f\2\u13f4\u13f2\3\2\2\2\u13f5\u13f8\3\2\2",
    "\2\u13f6\u13f4\3\2\2\2\u13f6\u13f7\3\2\2\2\u13f7\u02d9\3\2\2\2\u13f8",
    "\u13f6\3\2\2\2\u13f9\u13fe\5\u02dc\u016f\2\u13fa\u13fb\7\u01e3\2\2\u13fb",
    "\u13fd\5\u02dc\u016f\2\u13fc\u13fa\3\2\2\2\u13fd\u1400\3\2\2\2\u13fe",
    "\u13fc\3\2\2\2\u13fe\u13ff\3\2\2\2\u13ff\u02db\3\2\2\2\u1400\u13fe\3",
    "\2\2\2\u1401\u1402\7\u0204\2\2\u1402\u1404\5\u02c2\u0162\2\u1403\u1401",
    "\3\2\2\2\u1403\u1404\3\2\2\2\u1404\u1405\3\2\2\2\u1405\u140a\5\u02e8",
    "\u0175\2\u1406\u1407\7\u01e3\2\2\u1407\u1409\5\u02e8\u0175\2\u1408\u1406",
    "\3\2\2\2\u1409\u140c\3\2\2\2\u140a\u1408\3\2\2\2\u140a\u140b\3\2\2\2",
    "\u140b\u140e\3\2\2\2\u140c\u140a\3\2\2\2\u140d\u140f\5\u02c6\u0164\2",
    "\u140e\u140d\3\2\2\2\u140e\u140f\3\2\2\2\u140f\u02dd\3\2\2\2\u1410\u1411",
    "\7\u0204\2\2\u1411\u1413\5\u02c2\u0162\2\u1412\u1410\3\2\2\2\u1412\u1413",
    "\3\2\2\2\u1413\u1414\3\2\2\2\u1414\u1419\5\u02e8\u0175\2\u1415\u1416",
    "\7\u01e3\2\2\u1416\u1418\5\u02e8\u0175\2\u1417\u1415\3\2\2\2\u1418\u141b",
    "\3\2\2\2\u1419\u1417\3\2\2\2\u1419\u141a\3\2\2\2\u141a\u02df\3\2\2\2",
    "\u141b\u1419\3\2\2\2\u141c\u141f\7\u017b\2\2\u141d\u1420\5\u02e4\u0173",
    "\2\u141e\u1420\5\u02d8\u016d\2\u141f\u141d\3\2\2\2\u141f\u141e\3\2\2",
    "\2\u1420\u1425\3\2\2\2\u1421\u1422\7\22\2\2\u1422\u1423\7\u017a\2\2",
    "\u1423\u1424\7\u01c1\2\2\u1424\u1426\5\u02e4\u0173\2\u1425\u1421\3\2",
    "\2\2\u1425\u1426\3\2\2\2\u1426\u145b\3\2\2\2\u1427\u142b\7\u00b8\2\2",
    "\u1428\u142c\5\u02e4\u0173\2\u1429\u142c\5\u02d8\u016d\2\u142a\u142c",
    "\5\u02dc\u016f\2\u142b\u1428\3\2\2\2\u142b\u1429\3\2\2\2\u142b\u142a",
    "\3\2\2\2\u142c\u142d\3\2\2\2\u142d\u143b\tN\2\2\u142e\u1431\7\u01ea",
    "\2\2\u142f\u1432\7\u01e4\2\2\u1430\u1432\5\u02d8\u016d\2\u1431\u142f",
    "\3\2\2\2\u1431\u1430\3\2\2\2\u1432\u1438\3\2\2\2\u1433\u1436\7\u01f0",
    "\2\2\u1434\u1437\7\u01e4\2\2\u1435\u1437\5\u02d8\u016d\2\u1436\u1434",
    "\3\2\2\2\u1436\u1435\3\2\2\2\u1437\u1439\3\2\2\2\u1438\u1433\3\2\2\2",
    "\u1438\u1439\3\2\2\2\u1439\u143a\3\2\2\2\u143a\u143c\7\u01eb\2\2\u143b",
    "\u142e\3\2\2\2\u143b\u143c\3\2\2\2\u143c\u144c\3\2\2\2\u143d\u144a\7",
    "\u0183\2\2\u143e\u144b\7Z\2\2\u143f\u144b\7\u00a1\2\2\u1440\u144b\7",
    "\u00dd\2\2\u1441\u1448\7\u014c\2\2\u1442\u1445\7\u01ea\2\2\u1443\u1446",
    "\7\u01e4\2\2\u1444\u1446\5\u02d8\u016d\2\u1445\u1443\3\2\2\2\u1445\u1444",
    "\3\2\2\2\u1446\u1447\3\2\2\2\u1447\u1449\7\u01eb\2\2\u1448\u1442\3\2",
    "\2\2\u1448\u1449\3\2\2\2\u1449\u144b\3\2\2\2\u144a\u143e\3\2\2\2\u144a",
    "\u143f\3\2\2\2\u144a\u1440\3\2\2\2\u144a\u1441\3\2\2\2\u144b\u144d\3",
    "\2\2\2\u144c\u143d\3\2\2\2\u144c\u144d\3\2\2\2\u144d\u145b\3\2\2\2\u144e",
    "\u145b\5\u02e2\u0172\2\u144f\u1450\7Y\2\2\u1450\u145b\5\u02e4\u0173",
    "\2\u1451\u145b\5\u02e4\u0173\2\u1452\u145b\7\u00fc\2\2\u1453\u145b\7",
    "\u018a\2\2\u1454\u145b\7\u008c\2\2\u1455\u145b\7\\\2\2\u1456\u145b\7",
    "\u0156\2\2\u1457\u145b\7\u00de\2\2\u1458\u145b\7\u00d8\2\2\u1459\u145b",
    "\7d\2\2\u145a\u141c\3\2\2\2\u145a\u1427\3\2\2\2\u145a\u144e\3\2\2\2",
    "\u145a\u144f\3\2\2\2\u145a\u1451\3\2\2\2\u145a\u1452\3\2\2\2\u145a\u1453",
    "\3\2\2\2\u145a\u1454\3\2\2\2\u145a\u1455\3\2\2\2\u145a\u1456\3\2\2\2",
    "\u145a\u1457\3\2\2\2\u145a\u1458\3\2\2\2\u145a\u1459\3\2\2\2\u145b\u02e1",
    "\3\2\2\2\u145c\u145d\tO\2\2\u145d\u02e3\3\2\2\2\u145e\u145f\tP\2\2\u145f",
    "\u02e5\3\2\2\2\u1460\u1461\7\u0204\2\2\u1461\u1463\5\u02c2\u0162\2\u1462",
    "\u1460\3\2\2\2\u1462\u1463\3\2\2\2\u1463\u1464\3\2\2\2\u1464\u1465\5",
    "\u02e8\u0175\2\u1465\u02e7\3\2\2\2\u1466\u1469\5\u02f4\u017b\2\u1467",
    "\u1469\7\u01e7\2\2\u1468\u1466\3\2\2\2\u1468\u1467\3\2\2\2\u1469\u02e9",
    "\3\2\2\2\u146a\u1472\7\u01fa\2\2\u146b\u146c\7\u01f8\2\2\u146c\u1472",
    "\7\u01fe\2\2\u146d\u146e\7\u01fd\2\2\u146e\u1472\7\u0201\2\2\u146f\u1470",
    "\7\u01fb\2\2\u1470\u1472\7\u0201\2\2\u1471\u146a\3\2\2\2\u1471\u146b",
    "\3\2\2\2\u1471\u146d\3\2\2\2\u1471\u146f\3\2\2\2\u1472\u02eb\3\2\2\2",
    "\u1473\u1477\7\u01f9\2\2\u1474\u1475\7\u01fe\2\2\u1475\u1477\7\u0201",
    "\2\2\u1476\u1473\3\2\2\2\u1476\u1474\3\2\2\2\u1477\u02ed\3\2\2\2\u1478",
    "\u147c\7\u01f7\2\2\u1479\u147a\7\u01f8\2\2\u147a\u147c\7\u0201\2\2\u147b",
    "\u1478\3\2\2\2\u147b\u1479\3\2\2\2\u147c\u02ef\3\2\2\2\u147d\u1481\7",
    "\u01ff\2\2\u147e\u147f\7\u0200\2\2\u147f\u1481\7\u0200\2\2\u1480\u147d",
    "\3\2\2\2\u1480\u147e\3\2\2\2\u1481\u02f1\3\2\2\2\u1482\u1483\7\u01ea",
    "\2\2\u1483\u1484\7\u01ee\2\2\u1484\u1485\7\u01eb\2\2\u1485\u02f3\3\2",
    "\2\2\u1486\u1487\tQ\2\2\u1487\u02f5\3\2\2\2\u02b4\u02f9\u02fe\u0305",
    "\u0307\u031f\u032b\u0330\u0335\u033c\u033e\u0348\u034d\u0355\u0357\u035b",
    "\u035f\u0364\u0369\u036e\u0374\u0382\u0387\u038a\u0390\u0399\u03a7\u03af",
    "\u03b9\u03bc\u03c1\u03c6\u03cd\u03d2\u03dc\u03e3\u03e5\u03e9\u03ef\u03f4",
    "\u03fe\u0408\u040d\u0419\u041e\u042c\u0438\u043d\u0442\u0449\u044b\u0455",
    "\u045a\u045d\u0461\u0466\u046c\u047e\u0483\u0488\u048a\u0491\u0498\u049b",
    "\u049e\u04a1\u04ac\u04b8\u04bc\u04bf\u04c8\u04d0\u04d8\u04db\u04e2\u04e6",
    "\u04ed\u04f3\u051c\u0538\u053f\u0544\u054f\u0552\u055d\u0565\u0569\u0575",
    "\u0578\u057e\u0581\u0586\u058b\u058f\u0599\u05a3\u05a9\u05b4\u05b9\u05bd",
    "\u05c5\u05cd\u05d2\u05d5\u05d7\u05da\u05e3\u05e8\u05ef\u05f2\u05f5\u05f9",
    "\u05fc\u0604\u0609\u060e\u0615\u061f\u0631\u0638\u0642\u064c\u0653\u0658",
    "\u065e\u0668\u066d\u0674\u0679\u067f\u0682\u0685\u0696\u069b\u06a4\u06a9",
    "\u06af\u06b2\u06b9\u06bc\u06c3\u06c8\u06cc\u06d1\u06d6\u06e0\u06e6\u06f0",
    "\u06f5\u06fc\u0702\u0706\u0709\u070c\u071d\u0722\u072a\u0738\u073f\u074f",
    "\u0758\u075a\u076f\u077f\u0788\u078d\u0791\u0794\u079e\u07aa\u07b0\u07b8",
    "\u07bc\u07bf\u07cd\u07d1\u07d6\u07d9\u07e6\u07ea\u07f6\u07fb\u07ff\u0803",
    "\u0809\u080c\u080f\u082a\u0830\u0834\u083a\u0846\u084f\u0851\u0857\u085b",
    "\u085e\u0867\u0872\u0876\u0879\u087d\u0885\u088e\u0897\u0899\u08b8\u08bc",
    "\u08c3\u08c7\u08cb\u08cf\u08db\u08df\u08ed\u08f3\u08fa\u08ff\u0909\u090f",
    "\u0911\u091a\u0924\u0929\u0938\u093c\u093f\u0943\u0948\u094c\u0952\u095a",
    "\u0961\u0966\u0968\u096d\u0972\u097a\u0981\u0985\u0988\u0994\u099a\u09a2",
    "\u09ac\u09b7\u09ba\u09c1\u09c4\u09cb\u09d6\u09dc\u09e0\u09ea\u09ed\u09f3",
    "\u09fe\u0a00\u0a02\u0a05\u0a09\u0a0c\u0a10\u0a14\u0a19\u0a24\u0a28\u0a30",
    "\u0a33\u0a38\u0a3a\u0a43\u0a4d\u0a52\u0a58\u0a5c\u0a5f\u0a67\u0a6a\u0a6e",
    "\u0a72\u0a77\u0a7a\u0a7e\u0a82\u0a86\u0a92\u0aa0\u0aa5\u0aa9\u0ab2\u0ab6",
    "\u0abe\u0ac1\u0ac4\u0ac8\u0acb\u0ace\u0ad1\u0ad5\u0adf\u0ae6\u0aed\u0af2",
    "\u0af7\u0afe\u0b04\u0b0e\u0b10\u0b15\u0b19\u0b1c\u0b1f\u0b23\u0b28\u0b2c",
    "\u0b2e\u0b3b\u0b42\u0b50\u0b53\u0b5d\u0b61\u0b69\u0b75\u0b7f\u0b84\u0b8e",
    "\u0b96\u0b99\u0b9f\u0ba3\u0ba8\u0bb2\u0bb7\u0bc4\u0bd0\u0bd5\u0bdf\u0be4",
    "\u0be6\u0beb\u0bef\u0bf5\u0bf9\u0c06\u0c0a\u0c14\u0c17\u0c19\u0c1e\u0c27",
    "\u0c34\u0c3c\u0c45\u0c49\u0c4e\u0c59\u0c5b\u0c6b\u0c70\u0c76\u0c7c\u0c8e",
    "\u0c95\u0c98\u0ca0\u0ca9\u0cab\u0caf\u0cb2\u0cb7\u0cb9\u0cbd\u0cc9\u0cd2",
    "\u0cda\u0cdf\u0ce3\u0ce8\u0ceb\u0cf3\u0cfb\u0d01\u0d04\u0d07\u0d0f\u0d19",
    "\u0d25\u0d2c\u0d30\u0d34\u0d37\u0d3a\u0d3f\u0d44\u0d47\u0d4a\u0d50\u0d53",
    "\u0d59\u0d5c\u0d5f\u0d64\u0d67\u0d6f\u0d75\u0d7f\u0d84\u0d8d\u0d97\u0d9b",
    "\u0d9d\u0da0\u0dac\u0db0\u0db3\u0dc7\u0dcc\u0dd1\u0dd8\u0ddb\u0de4\u0deb",
    "\u0df0\u0df4\u0dfc\u0e02\u0e0a\u0e0d\u0e15\u0e1d\u0e20\u0e23\u0e2c\u0e32",
    "\u0e38\u0e3a\u0e47\u0e49\u0e52\u0e54\u0e58\u0e5e\u0e62\u0e70\u0e76\u0e85",
    "\u0e88\u0e91\u0e97\u0e9c\u0ea7\u0eab\u0eb2\u0eb7\u0ebb\u0ec1\u0ec5\u0ed0",
    "\u0ed5\u0eda\u0ee3\u0ee5\u0ee7\u0ef8\u0f00\u0f0c\u0f16\u0f1e\u0f27\u0f2a",
    "\u0f31\u0f39\u0f40\u0f44\u0f4b\u0f4f\u0f54\u0f58\u0f60\u0f64\u0f6b\u0f74",
    "\u0f82\u0f8f\u0f94\u0faa\u0fae\u0fb1\u0fb8\u0fbb\u0fbf\u0fc2\u0fc9\u0fcc",
    "\u0fd2\u0fd5\u0fd9\u0fdc\u0fe3\u0fe8\u0ff6\u0ffc\u0ffe\u1002\u100a\u1016",
    "\u101b\u1020\u1026\u1029\u102d\u1037\u1047\u104b\u1054\u105a\u1068\u1073",
    "\u1077\u107a\u1083\u1089\u1093\u109b\u109e\u10a1\u10aa\u10af\u10b8\u10be",
    "\u10c3\u10c6\u10cb\u10d0\u10d4\u10da\u10e0\u10e9\u10ee\u10f6\u10fa\u10ff",
    "\u1105\u110c\u1111\u1119\u111e\u1126\u1129\u112c\u112f\u1133\u1138\u113d",
    "\u1141\u1148\u114d\u114f\u115a\u115e\u1160\u116b\u1176\u117f\u1182\u1186",
    "\u1189\u118d\u119a\u119f\u11a7\u11ae\u11b3\u11b7\u11bc\u11c1\u11c4\u11cb",
    "\u11d5\u11dd\u11e1\u11eb\u11ee\u11f0\u11fa\u11fc\u1202\u1208\u120a\u1218",
    "\u121a\u1221\u1224\u122d\u1236\u123e\u1243\u1247\u124a\u124e\u1255\u1261",
    "\u126c\u126f\u1273\u1286\u128b\u1292\u129f\u12a9\u12ae\u12b7\u12bf\u12c7",
    "\u12cd\u12d2\u12d7\u12db\u12e0\u12e3\u12e9\u12ed\u12f2\u12fb\u1301\u1306",
    "\u130d\u1317\u131b\u1321\u1326\u132b\u132d\u1332\u1336\u133b\u1342\u1347",
    "\u1349\u134b\u1355\u135a\u135e\u1361\u1365\u136e\u1374\u1378\u137a\u137e",
    "\u1382\u1386\u138e\u1396\u1398\u139e\u13a1\u13b9\u13c0\u13e1\u13e6\u13e9",
    "\u13ee\u13f0\u13f6\u13fe\u1403\u140a\u140e\u1412\u1419\u141f\u1425\u142b",
    "\u1431\u1436\u1438\u143b\u1445\u1448\u144a\u144c\u145a\u1462\u1468\u1471",
    "\u1476\u147b\u1480"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', "'..'", 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', "'.'", 'null', 
                     'null', 'null', 'null', "'%'", "'&'", "'('", "')'", 
                     "'**'", "'*'", "'+'", "'-'", "','", "'/'", "'@'", "':='", 
                     'null', "':'", "';'", "'<='", "'<'", "'>='", 'null', 
                     "'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", 
                     "']'", "'_'", 'null', 'null', 'null', 'null', "'all'", 
                     "'alter'", "'and'", "'any'", "'as'", "'asc'", "'begin'", 
                     "'between'", "'by'", "'case'", "'check'", "'clusters'", 
                     "'colauth'", "'compress'", "'connect'", "'connect_by_root'", 
                     "'crash'", "'create'", "'current'", "'cursor'", "'date'", 
                     "'declare'", "'default'", "'delete'", "'desc'", "'distinct'", 
                     "'drop'", "'else'", "'end'", "'exception'", "'exclusive'", 
                     "'exists'", "'false'", "'fetch'", "'for'", "'from'", 
                     "'goto'", "'grant'", "'group'", "'having'", "'identified'", 
                     "'if'", "'in'", "'index'", "'indexes'", "'insert'", 
                     "'intersect'", "'into'", "'is'", "'like'", "'lock'", 
                     "'minus'", "'mode'", "'nocompress'", "'not'", "'nowait'", 
                     "'null'", "'of'", "'on'", "'option'", "'or'", "'order'", 
                     "'overlaps'", "'prior'", "'procedure'", "'public'", 
                     "'resource'", "'revoke'", "'select'", "'share'", "'size'", 
                     "'start'", "'tabauth'", "'table'", "'the'", "'then'", 
                     "'to'", "'true'", "'union'", "'unique'", "'update'", 
                     "'values'", "'view'", "'views'", "'when'", "'where'", 
                     "'with'", "'using'", "'model'", "'elsif'", "'pivot'", 
                     "'unpivot'", 'null', "'@!'" ];

var symbolicNames = [ 'null', 'null', "A_LETTER", "ADD", "AFTER", "AGENT", 
                      "AGGREGATE", "ALL", "ALTER", "ANALYZE", "AND", "ANY", 
                      "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", 
                      "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
                      "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", 
                      "BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", 
                      "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", "BY", 
                      "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", 
                      "CASCADE", "CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", 
                      "CHECK", "CHR", "CLOB", "CLOSE", "CLUSTER", "COLLECT", 
                      "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
                      "COMPILE", "COMPOUND", "CONNECT", "CONNECT_BY_ROOT", 
                      "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", 
                      "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", 
                      "CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
                      "CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", 
                      "DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", 
                      "DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", 
                      "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
                      "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
                      "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
                      "EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
                      "ENCODING", "END", "ENTITYESCAPING", "ERRORS", "ESCAPE", 
                      "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", 
                      "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", 
                      "EXPLAIN", "EXTERNAL", "EXTRACT", "FAILURE", "FALSE", 
                      "FETCH", "FINAL", "FIRST", "FIRST_VALUE", "FLOAT", 
                      "FOLLOWING", "FOLLOWS", "FOR", "FORALL", "FORCE", 
                      "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
                      "GROUPING", "HASH", "HAVING", "HIDE", "HOUR", "IF", 
                      "IGNORE", "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", 
                      "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", 
                      "INDICES", "INFINITE", "INLINE", "INNER", "INOUT", 
                      "INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", 
                      "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", 
                      "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "LANGUAGE", 
                      "LAST", "LAST_VALUE", "LEADING", "LEFT", "LEVEL", 
                      "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", 
                      "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", "LOGON", 
                      "LONG", "LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", 
                      "MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE", 
                      "MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", 
                      "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", 
                      "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEW", 
                      "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
                      "NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK", 
                      "NOT", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", 
                      "NVARCHAR2", "OBJECT", "OF", "OFF", "OID", "OLD", 
                      "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", "ORDER", 
                      "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
                      "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", 
                      "PARTITION", "PASSING", "PATH", "PERCENT_ROWTYPE", 
                      "PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", "PLS_INTEGER", 
                      "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", 
                      "PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", 
                      "RAW", "READ", "REAL", "RECORD", "REF", "REFERENCE", 
                      "REFERENCING", "REJECT", "RELIES_ON", "RENAME", "REPLACE", 
                      "RESPECT", "RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", 
                      "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", 
                      "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", 
                      "RULES", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", 
                      "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED", 
                      "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
                      "SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", 
                      "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
                      "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
                      "SINGLE", "SIZE", "SKIP", "SMALLINT", "SNAPSHOT", 
                      "SOME", "SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", 
                      "START", "STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", 
                      "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", 
                      "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUSPEND", 
                      "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
                      "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
                      "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", 
                      "TRANSLATE", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
                      "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", 
                      "UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", 
                      "VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", "VARYING", 
                      "VERSION", "VERSIONS", "WAIT", "WARNING", "WELLFORMED", 
                      "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", 
                      "WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", 
                      "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
                      "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", 
                      "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", 
                      "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
                      "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
                      "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", 
                      "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", 
                      "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", 
                      "REGR_", "STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", 
                      "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
                      "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
                      "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", 
                      "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", 
                      "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
                      "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", 
                      "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", 
                      "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", 
                      "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", 
                      "PLSQL_RESERVED_CLUSTERS", "PLSQL_RESERVED_COLAUTH", 
                      "PLSQL_RESERVED_COMPRESS", "SQL92_RESERVED_CONNECT", 
                      "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_RESERVED_CRASH", 
                      "SQL92_RESERVED_CREATE", "SQL92_RESERVED_CURRENT", 
                      "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", "SQL92_RESERVED_DECLARE", 
                      "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
                      "SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", 
                      "SQL92_RESERVED_DROP", "SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", 
                      "SQL92_RESERVED_EXCEPTION", "PLSQL_RESERVED_EXCLUSIVE", 
                      "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
                      "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", 
                      "SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", 
                      "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", 
                      "SQL92_RESERVED_IN", "PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", 
                      "SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", 
                      "SQL92_RESERVED_INTO", "SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", 
                      "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", "PLSQL_RESERVED_MODE", 
                      "PLSQL_RESERVED_NOCOMPRESS", "SQL92_RESERVED_NOT", 
                      "PLSQL_RESERVED_NOWAIT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", 
                      "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", 
                      "SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", 
                      "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE", 
                      "SQL92_RESERVED_PUBLIC", "PLSQL_RESERVED_RESOURCE", 
                      "SQL92_RESERVED_REVOKE", "SQL92_RESERVED_SELECT", 
                      "PLSQL_RESERVED_SHARE", "SQL92_RESERVED_SIZE", "PLSQL_RESERVED_START", 
                      "PLSQL_RESERVED_TABAUTH", "SQL92_RESERVED_TABLE", 
                      "SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", 
                      "SQL92_RESERVED_TRUE", "SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", 
                      "SQL92_RESERVED_UPDATE", "SQL92_RESERVED_VALUES", 
                      "SQL92_RESERVED_VIEW", "PLSQL_RESERVED_VIEWS", "SQL92_RESERVED_WHEN", 
                      "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "PLSQL_NON_RESERVED_USING", 
                      "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_ELSIF", 
                      "PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", 
                      "REGULAR_ID", "ZV" ];

var ruleNames =  [ "swallow_to_semi", "compilation_unit", "sql_script", 
                   "unit_statement", "drop_function", "alter_function", 
                   "create_function_body", "parallel_enable_clause", "partition_by_clause", 
                   "result_cache_clause", "relies_on_part", "streaming_clause", 
                   "drop_package", "alter_package", "create_package", "package_body", 
                   "package_spec", "package_obj_spec", "procedure_spec", 
                   "function_spec", "package_obj_body", "drop_procedure", 
                   "alter_procedure", "create_procedure_body", "drop_trigger", 
                   "alter_trigger", "create_trigger", "trigger_follows_clause", 
                   "trigger_when_clause", "simple_dml_trigger", "for_each_row", 
                   "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
                   "routine_clause", "compound_trigger_block", "timing_point_section", 
                   "non_dml_event", "dml_event_clause", "dml_event_element", 
                   "dml_event_nested_clause", "referencing_clause", "referencing_element", 
                   "drop_type", "alter_type", "compile_type_clause", "replace_type_clause", 
                   "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
                   "attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
                   "dependent_exceptions_part", "create_type", "type_definition", 
                   "object_type_def", "object_as_part", "object_under_part", 
                   "nested_table_type_def", "sqlj_object_type", "type_body", 
                   "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "modifier_clause", "object_member_spec", "sqlj_object_type_attr", 
                   "element_spec", "element_spec_options", "subprogram_spec", 
                   "type_procedure_spec", "type_function_spec", "constructor_spec", 
                   "map_order_function_spec", "pragma_clause", "pragma_elements", 
                   "type_elements_parameter", "drop_sequence", "alter_sequence", 
                   "create_sequence", "sequence_spec", "sequence_start_clause", 
                   "invoker_rights_clause", "compiler_parameters_clause", 
                   "call_spec", "java_spec", "c_spec", "c_agent_in_clause", 
                   "c_parameters_clause", "parameter", "default_value_part", 
                   "declare_spec", "variable_declaration", "subtype_declaration", 
                   "cursor_declaration", "parameter_spec", "exception_declaration", 
                   "pragma_declaration", "record_declaration", "record_type_dec", 
                   "field_spec", "record_var_dec", "table_declaration", 
                   "table_type_dec", "table_indexed_by_part", "varray_type_def", 
                   "table_var_dec", "seq_of_statements", "label_declaration", 
                   "statement", "assignment_statement", "continue_statement", 
                   "exit_statement", "goto_statement", "if_statement", "elsif_part", 
                   "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "body", "exception_clause", "exception_handler", 
                   "trigger_block", "block", "sql_statement", "execute_immediate", 
                   "dynamic_returning_clause", "data_manipulation_language_statements", 
                   "cursor_manipulation_statements", "close_statement", 
                   "open_statement", "fetch_statement", "open_for_statement", 
                   "transaction_control_statements", "set_transaction_command", 
                   "set_constraint_command", "commit_statement", "write_clause", 
                   "rollback_statement", "savepoint_statement", "explain_statement", 
                   "select_statement", "subquery_factoring_clause", "factoring_element", 
                   "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
                   "subquery_basic_elements", "query_block", "selected_element", 
                   "from_clause", "select_list_elements", "table_ref_list", 
                   "table_ref", "table_ref_aux", "join_clause", "join_on_part", 
                   "join_using_part", "outer_join_type", "query_partition_clause", 
                   "flashback_query_clause", "pivot_clause", "pivot_element", 
                   "pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", 
                   "pivot_in_clause_elements", "unpivot_clause", "unpivot_in_clause", 
                   "unpivot_in_elements", "hierarchical_query_clause", "start_part", 
                   "group_by_clause", "group_by_elements", "rollup_cube_clause", 
                   "grouping_sets_clause", "grouping_sets_elements", "having_clause", 
                   "model_clause", "cell_reference_options", "return_rows_clause", 
                   "reference_model", "main_model", "model_column_clauses", 
                   "model_column_partition_part", "model_column_list", "model_column", 
                   "model_rules_clause", "model_rules_part", "model_rules_element", 
                   "cell_assignment", "model_iterate_clause", "until_part", 
                   "order_by_clause", "order_by_elements", "for_update_clause", 
                   "for_update_of_part", "for_update_options", "update_statement", 
                   "update_set_clause", "column_based_update_set_clause", 
                   "delete_statement", "insert_statement", "single_table_insert", 
                   "multi_table_insert", "multi_table_element", "conditional_insert_clause", 
                   "conditional_insert_when_part", "conditional_insert_else_part", 
                   "insert_into_clause", "values_clause", "merge_statement", 
                   "merge_update_clause", "merge_element", "merge_update_delete_part", 
                   "merge_insert_clause", "selected_tableview", "lock_table_statement", 
                   "wait_nowait_part", "lock_table_element", "lock_mode", 
                   "general_table_ref", "static_returning_clause", "error_logging_clause", 
                   "error_logging_into_part", "error_logging_reject_part", 
                   "dml_table_expression_clause", "table_collection_expression", 
                   "subquery_restriction_clause", "sample_clause", "seed_part", 
                   "cursor_expression", "expression_list", "condition", 
                   "condition_wrapper", "expression", "expression_wrapper", 
                   "logical_and_expression", "negated_expression", "equality_expression", 
                   "multiset_expression", "multiset_type", "relational_expression", 
                   "compound_expression", "like_type", "like_escape_part", 
                   "in_elements", "between_elements", "concatenation", "concatenation_wrapper", 
                   "additive_expression", "multiply_expression", "datetime_expression", 
                   "interval_expression", "model_expression", "model_expression_element", 
                   "single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
                   "multi_column_for_loop", "unary_expression", "case_statement", 
                   "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
                   "searched_case_when_part", "case_else_part", "atom", 
                   "expression_or_vector", "vector_expr", "quantified_expression", 
                   "standard_function", "over_clause_keyword", "within_or_over_clause_keyword", 
                   "standard_prediction_function_keyword", "over_clause", 
                   "windowing_clause", "windowing_type", "windowing_elements", 
                   "using_clause", "using_element", "collect_order_by_part", 
                   "within_or_over_part", "cost_matrix_clause", "xml_passing_clause", 
                   "xml_attributes_clause", "xml_namespaces_clause", "xml_table_column", 
                   "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "exit_command", "prompt_command", 
                   "partition_extension_clause", "column_alias", "table_alias", 
                   "alias_quoted_string", "where_clause", "current_of_clause", 
                   "into_clause", "xml_column_name", "cost_class_name", 
                   "attribute_name", "savepoint_name", "rollback_segment_name", 
                   "table_var_name", "schema_name", "routine_name", "package_name", 
                   "implementation_type_name", "parameter_name", "reference_model_name", 
                   "main_model_name", "aggregate_function_name", "query_name", 
                   "constraint_name", "label_name", "type_name", "sequence_name", 
                   "exception_name", "function_name", "procedure_name", 
                   "trigger_name", "variable_name", "index_name", "cursor_name", 
                   "record_name", "collection_name", "link_name", "column_name", 
                   "tableview_name", "char_set_name", "keep_clause", "function_argument", 
                   "function_argument_analytic", "function_argument_modeling", 
                   "respect_or_ignore_nulls", "argument", "type_spec", "datatype", 
                   "precision_part", "native_datatype_element", "bind_variable", 
                   "general_element", "general_element_part", "table_element", 
                   "constant", "numeric", "quoted_string", "id", "id_expression", 
                   "not_equal_op", "greater_than_or_equals_op", "less_than_or_equals_op", 
                   "concatenation_op", "outer_join_sign", "regular_id" ];

function PLSQLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

PLSQLParser.prototype = Object.create(antlr4.Parser.prototype);
PLSQLParser.prototype.constructor = PLSQLParser;

Object.defineProperty(PLSQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PLSQLParser.EOF = antlr4.Token.EOF;
PLSQLParser.T__0 = 1;
PLSQLParser.A_LETTER = 2;
PLSQLParser.ADD = 3;
PLSQLParser.AFTER = 4;
PLSQLParser.AGENT = 5;
PLSQLParser.AGGREGATE = 6;
PLSQLParser.ALL = 7;
PLSQLParser.ALTER = 8;
PLSQLParser.ANALYZE = 9;
PLSQLParser.AND = 10;
PLSQLParser.ANY = 11;
PLSQLParser.ARRAY = 12;
PLSQLParser.AS = 13;
PLSQLParser.ASC = 14;
PLSQLParser.ASSOCIATE = 15;
PLSQLParser.AT = 16;
PLSQLParser.ATTRIBUTE = 17;
PLSQLParser.AUDIT = 18;
PLSQLParser.AUTHID = 19;
PLSQLParser.AUTO = 20;
PLSQLParser.AUTOMATIC = 21;
PLSQLParser.AUTONOMOUS_TRANSACTION = 22;
PLSQLParser.BATCH = 23;
PLSQLParser.BEFORE = 24;
PLSQLParser.BEGIN = 25;
PLSQLParser.BETWEEN = 26;
PLSQLParser.BFILE = 27;
PLSQLParser.BINARY_DOUBLE = 28;
PLSQLParser.BINARY_FLOAT = 29;
PLSQLParser.BINARY_INTEGER = 30;
PLSQLParser.BLOB = 31;
PLSQLParser.BLOCK = 32;
PLSQLParser.BODY = 33;
PLSQLParser.BOOLEAN = 34;
PLSQLParser.BOTH = 35;
PLSQLParser.BREADTH = 36;
PLSQLParser.BULK = 37;
PLSQLParser.BY = 38;
PLSQLParser.BYTE = 39;
PLSQLParser.C_LETTER = 40;
PLSQLParser.CACHE = 41;
PLSQLParser.CALL = 42;
PLSQLParser.CANONICAL = 43;
PLSQLParser.CASCADE = 44;
PLSQLParser.CASE = 45;
PLSQLParser.CAST = 46;
PLSQLParser.CHAR = 47;
PLSQLParser.CHAR_CS = 48;
PLSQLParser.CHARACTER = 49;
PLSQLParser.CHECK = 50;
PLSQLParser.CHR = 51;
PLSQLParser.CLOB = 52;
PLSQLParser.CLOSE = 53;
PLSQLParser.CLUSTER = 54;
PLSQLParser.COLLECT = 55;
PLSQLParser.COLUMNS = 56;
PLSQLParser.COMMENT = 57;
PLSQLParser.COMMIT = 58;
PLSQLParser.COMMITTED = 59;
PLSQLParser.COMPATIBILITY = 60;
PLSQLParser.COMPILE = 61;
PLSQLParser.COMPOUND = 62;
PLSQLParser.CONNECT = 63;
PLSQLParser.CONNECT_BY_ROOT = 64;
PLSQLParser.CONSTANT = 65;
PLSQLParser.CONSTRAINT = 66;
PLSQLParser.CONSTRAINTS = 67;
PLSQLParser.CONSTRUCTOR = 68;
PLSQLParser.CONTENT = 69;
PLSQLParser.CONTEXT = 70;
PLSQLParser.CONTINUE = 71;
PLSQLParser.CONVERT = 72;
PLSQLParser.CORRUPT_XID = 73;
PLSQLParser.CORRUPT_XID_ALL = 74;
PLSQLParser.COST = 75;
PLSQLParser.COUNT = 76;
PLSQLParser.CREATE = 77;
PLSQLParser.CROSS = 78;
PLSQLParser.CUBE = 79;
PLSQLParser.CURRENT = 80;
PLSQLParser.CURRENT_USER = 81;
PLSQLParser.CURSOR = 82;
PLSQLParser.CUSTOMDATUM = 83;
PLSQLParser.CYCLE = 84;
PLSQLParser.DATA = 85;
PLSQLParser.DATABASE = 86;
PLSQLParser.DATE = 87;
PLSQLParser.DAY = 88;
PLSQLParser.DB_ROLE_CHANGE = 89;
PLSQLParser.DBTIMEZONE = 90;
PLSQLParser.DDL = 91;
PLSQLParser.DEBUG = 92;
PLSQLParser.DEC = 93;
PLSQLParser.DECIMAL = 94;
PLSQLParser.DECLARE = 95;
PLSQLParser.DECOMPOSE = 96;
PLSQLParser.DECREMENT = 97;
PLSQLParser.DEFAULT = 98;
PLSQLParser.DEFAULTS = 99;
PLSQLParser.DEFERRED = 100;
PLSQLParser.DEFINER = 101;
PLSQLParser.DELETE = 102;
PLSQLParser.DEPTH = 103;
PLSQLParser.DESC = 104;
PLSQLParser.DETERMINISTIC = 105;
PLSQLParser.DIMENSION = 106;
PLSQLParser.DISABLE = 107;
PLSQLParser.DISASSOCIATE = 108;
PLSQLParser.DISTINCT = 109;
PLSQLParser.DOCUMENT = 110;
PLSQLParser.DOUBLE = 111;
PLSQLParser.DROP = 112;
PLSQLParser.DSINTERVAL_UNCONSTRAINED = 113;
PLSQLParser.EACH = 114;
PLSQLParser.ELEMENT = 115;
PLSQLParser.ELSE = 116;
PLSQLParser.ELSIF = 117;
PLSQLParser.EMPTY = 118;
PLSQLParser.ENABLE = 119;
PLSQLParser.ENCODING = 120;
PLSQLParser.END = 121;
PLSQLParser.ENTITYESCAPING = 122;
PLSQLParser.ERRORS = 123;
PLSQLParser.ESCAPE = 124;
PLSQLParser.EVALNAME = 125;
PLSQLParser.EXCEPTION = 126;
PLSQLParser.EXCEPTION_INIT = 127;
PLSQLParser.EXCEPTIONS = 128;
PLSQLParser.EXCLUDE = 129;
PLSQLParser.EXCLUSIVE = 130;
PLSQLParser.EXECUTE = 131;
PLSQLParser.EXISTS = 132;
PLSQLParser.EXIT = 133;
PLSQLParser.EXPLAIN = 134;
PLSQLParser.EXTERNAL = 135;
PLSQLParser.EXTRACT = 136;
PLSQLParser.FAILURE = 137;
PLSQLParser.FALSE = 138;
PLSQLParser.FETCH = 139;
PLSQLParser.FINAL = 140;
PLSQLParser.FIRST = 141;
PLSQLParser.FIRST_VALUE = 142;
PLSQLParser.FLOAT = 143;
PLSQLParser.FOLLOWING = 144;
PLSQLParser.FOLLOWS = 145;
PLSQLParser.FOR = 146;
PLSQLParser.FORALL = 147;
PLSQLParser.FORCE = 148;
PLSQLParser.FROM = 149;
PLSQLParser.FULL = 150;
PLSQLParser.FUNCTION = 151;
PLSQLParser.GOTO = 152;
PLSQLParser.GRANT = 153;
PLSQLParser.GROUP = 154;
PLSQLParser.GROUPING = 155;
PLSQLParser.HASH = 156;
PLSQLParser.HAVING = 157;
PLSQLParser.HIDE = 158;
PLSQLParser.HOUR = 159;
PLSQLParser.IF = 160;
PLSQLParser.IGNORE = 161;
PLSQLParser.IMMEDIATE = 162;
PLSQLParser.IN = 163;
PLSQLParser.INCLUDE = 164;
PLSQLParser.INCLUDING = 165;
PLSQLParser.INCREMENT = 166;
PLSQLParser.INDENT = 167;
PLSQLParser.INDEX = 168;
PLSQLParser.INDEXED = 169;
PLSQLParser.INDICATOR = 170;
PLSQLParser.INDICES = 171;
PLSQLParser.INFINITE = 172;
PLSQLParser.INLINE = 173;
PLSQLParser.INNER = 174;
PLSQLParser.INOUT = 175;
PLSQLParser.INSERT = 176;
PLSQLParser.INSTANTIABLE = 177;
PLSQLParser.INSTEAD = 178;
PLSQLParser.INT = 179;
PLSQLParser.INTEGER = 180;
PLSQLParser.INTERSECT = 181;
PLSQLParser.INTERVAL = 182;
PLSQLParser.INTO = 183;
PLSQLParser.INVALIDATE = 184;
PLSQLParser.IS = 185;
PLSQLParser.ISOLATION = 186;
PLSQLParser.ITERATE = 187;
PLSQLParser.JAVA = 188;
PLSQLParser.JOIN = 189;
PLSQLParser.KEEP = 190;
PLSQLParser.LANGUAGE = 191;
PLSQLParser.LAST = 192;
PLSQLParser.LAST_VALUE = 193;
PLSQLParser.LEADING = 194;
PLSQLParser.LEFT = 195;
PLSQLParser.LEVEL = 196;
PLSQLParser.LIBRARY = 197;
PLSQLParser.LIKE = 198;
PLSQLParser.LIKE2 = 199;
PLSQLParser.LIKE4 = 200;
PLSQLParser.LIKEC = 201;
PLSQLParser.LIMIT = 202;
PLSQLParser.LOCAL = 203;
PLSQLParser.LOCK = 204;
PLSQLParser.LOCKED = 205;
PLSQLParser.LOG = 206;
PLSQLParser.LOGOFF = 207;
PLSQLParser.LOGON = 208;
PLSQLParser.LONG = 209;
PLSQLParser.LOOP = 210;
PLSQLParser.MAIN = 211;
PLSQLParser.MAP = 212;
PLSQLParser.MATCHED = 213;
PLSQLParser.MAXVALUE = 214;
PLSQLParser.MEASURES = 215;
PLSQLParser.MEMBER = 216;
PLSQLParser.MERGE = 217;
PLSQLParser.MINUS = 218;
PLSQLParser.MINUTE = 219;
PLSQLParser.MINVALUE = 220;
PLSQLParser.MLSLABEL = 221;
PLSQLParser.MODE = 222;
PLSQLParser.MODEL = 223;
PLSQLParser.MODIFY = 224;
PLSQLParser.MONTH = 225;
PLSQLParser.MULTISET = 226;
PLSQLParser.NAME = 227;
PLSQLParser.NAN = 228;
PLSQLParser.NATURAL = 229;
PLSQLParser.NATURALN = 230;
PLSQLParser.NAV = 231;
PLSQLParser.NCHAR = 232;
PLSQLParser.NCHAR_CS = 233;
PLSQLParser.NCLOB = 234;
PLSQLParser.NESTED = 235;
PLSQLParser.NEW = 236;
PLSQLParser.NO = 237;
PLSQLParser.NOAUDIT = 238;
PLSQLParser.NOCACHE = 239;
PLSQLParser.NOCOPY = 240;
PLSQLParser.NOCYCLE = 241;
PLSQLParser.NOENTITYESCAPING = 242;
PLSQLParser.NOMAXVALUE = 243;
PLSQLParser.NOMINVALUE = 244;
PLSQLParser.NONE = 245;
PLSQLParser.NOORDER = 246;
PLSQLParser.NOSCHEMACHECK = 247;
PLSQLParser.NOT = 248;
PLSQLParser.NOWAIT = 249;
PLSQLParser.NULL = 250;
PLSQLParser.NULLS = 251;
PLSQLParser.NUMBER = 252;
PLSQLParser.NUMERIC = 253;
PLSQLParser.NVARCHAR2 = 254;
PLSQLParser.OBJECT = 255;
PLSQLParser.OF = 256;
PLSQLParser.OFF = 257;
PLSQLParser.OID = 258;
PLSQLParser.OLD = 259;
PLSQLParser.ON = 260;
PLSQLParser.ONLY = 261;
PLSQLParser.OPEN = 262;
PLSQLParser.OPTION = 263;
PLSQLParser.OR = 264;
PLSQLParser.ORADATA = 265;
PLSQLParser.ORDER = 266;
PLSQLParser.ORDINALITY = 267;
PLSQLParser.OSERROR = 268;
PLSQLParser.OUT = 269;
PLSQLParser.OUTER = 270;
PLSQLParser.OVER = 271;
PLSQLParser.OVERRIDING = 272;
PLSQLParser.PACKAGE = 273;
PLSQLParser.PARALLEL_ENABLE = 274;
PLSQLParser.PARAMETERS = 275;
PLSQLParser.PARENT = 276;
PLSQLParser.PARTITION = 277;
PLSQLParser.PASSING = 278;
PLSQLParser.PATH = 279;
PLSQLParser.PERCENT_ROWTYPE = 280;
PLSQLParser.PERCENT_TYPE = 281;
PLSQLParser.PIPELINED = 282;
PLSQLParser.PIVOT = 283;
PLSQLParser.PLAN = 284;
PLSQLParser.PLS_INTEGER = 285;
PLSQLParser.POSITIVE = 286;
PLSQLParser.POSITIVEN = 287;
PLSQLParser.PRAGMA = 288;
PLSQLParser.PRECEDING = 289;
PLSQLParser.PRECISION = 290;
PLSQLParser.PRESENT = 291;
PLSQLParser.PRIOR = 292;
PLSQLParser.PROCEDURE = 293;
PLSQLParser.RAISE = 294;
PLSQLParser.RANGE = 295;
PLSQLParser.RAW = 296;
PLSQLParser.READ = 297;
PLSQLParser.REAL = 298;
PLSQLParser.RECORD = 299;
PLSQLParser.REF = 300;
PLSQLParser.REFERENCE = 301;
PLSQLParser.REFERENCING = 302;
PLSQLParser.REJECT = 303;
PLSQLParser.RELIES_ON = 304;
PLSQLParser.RENAME = 305;
PLSQLParser.REPLACE = 306;
PLSQLParser.RESPECT = 307;
PLSQLParser.RESTRICT_REFERENCES = 308;
PLSQLParser.RESULT = 309;
PLSQLParser.RESULT_CACHE = 310;
PLSQLParser.RETURN = 311;
PLSQLParser.RETURNING = 312;
PLSQLParser.REUSE = 313;
PLSQLParser.REVERSE = 314;
PLSQLParser.REVOKE = 315;
PLSQLParser.RIGHT = 316;
PLSQLParser.ROLLBACK = 317;
PLSQLParser.ROLLUP = 318;
PLSQLParser.ROW = 319;
PLSQLParser.ROWID = 320;
PLSQLParser.ROWS = 321;
PLSQLParser.RULES = 322;
PLSQLParser.SAMPLE = 323;
PLSQLParser.SAVE = 324;
PLSQLParser.SAVEPOINT = 325;
PLSQLParser.SCHEMA = 326;
PLSQLParser.SCHEMACHECK = 327;
PLSQLParser.SCN = 328;
PLSQLParser.SEARCH = 329;
PLSQLParser.SECOND = 330;
PLSQLParser.SEED = 331;
PLSQLParser.SEGMENT = 332;
PLSQLParser.SELECT = 333;
PLSQLParser.SELF = 334;
PLSQLParser.SEQUENCE = 335;
PLSQLParser.SEQUENTIAL = 336;
PLSQLParser.SERIALIZABLE = 337;
PLSQLParser.SERIALLY_REUSABLE = 338;
PLSQLParser.SERVERERROR = 339;
PLSQLParser.SESSIONTIMEZONE = 340;
PLSQLParser.SET = 341;
PLSQLParser.SETS = 342;
PLSQLParser.SETTINGS = 343;
PLSQLParser.SHARE = 344;
PLSQLParser.SHOW = 345;
PLSQLParser.SHUTDOWN = 346;
PLSQLParser.SIBLINGS = 347;
PLSQLParser.SIGNTYPE = 348;
PLSQLParser.SIMPLE_INTEGER = 349;
PLSQLParser.SINGLE = 350;
PLSQLParser.SIZE = 351;
PLSQLParser.SKIP = 352;
PLSQLParser.SMALLINT = 353;
PLSQLParser.SNAPSHOT = 354;
PLSQLParser.SOME = 355;
PLSQLParser.SPECIFICATION = 356;
PLSQLParser.SQLDATA = 357;
PLSQLParser.SQLERROR = 358;
PLSQLParser.STANDALONE = 359;
PLSQLParser.START = 360;
PLSQLParser.STARTUP = 361;
PLSQLParser.STATEMENT = 362;
PLSQLParser.STATEMENT_ID = 363;
PLSQLParser.STATIC = 364;
PLSQLParser.STATISTICS = 365;
PLSQLParser.STRING = 366;
PLSQLParser.SUBMULTISET = 367;
PLSQLParser.SUBPARTITION = 368;
PLSQLParser.SUBSTITUTABLE = 369;
PLSQLParser.SUBTYPE = 370;
PLSQLParser.SUCCESS = 371;
PLSQLParser.SUSPEND = 372;
PLSQLParser.TABLE = 373;
PLSQLParser.THE = 374;
PLSQLParser.THEN = 375;
PLSQLParser.TIME = 376;
PLSQLParser.TIMESTAMP = 377;
PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED = 378;
PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED = 379;
PLSQLParser.TIMESTAMP_UNCONSTRAINED = 380;
PLSQLParser.TIMEZONE_ABBR = 381;
PLSQLParser.TIMEZONE_HOUR = 382;
PLSQLParser.TIMEZONE_MINUTE = 383;
PLSQLParser.TIMEZONE_REGION = 384;
PLSQLParser.TO = 385;
PLSQLParser.TRAILING = 386;
PLSQLParser.TRANSACTION = 387;
PLSQLParser.TRANSLATE = 388;
PLSQLParser.TREAT = 389;
PLSQLParser.TRIGGER = 390;
PLSQLParser.TRIM = 391;
PLSQLParser.TRUE = 392;
PLSQLParser.TRUNCATE = 393;
PLSQLParser.TYPE = 394;
PLSQLParser.UNBOUNDED = 395;
PLSQLParser.UNDER = 396;
PLSQLParser.UNION = 397;
PLSQLParser.UNIQUE = 398;
PLSQLParser.UNLIMITED = 399;
PLSQLParser.UNPIVOT = 400;
PLSQLParser.UNTIL = 401;
PLSQLParser.UPDATE = 402;
PLSQLParser.UPDATED = 403;
PLSQLParser.UPSERT = 404;
PLSQLParser.UROWID = 405;
PLSQLParser.USE = 406;
PLSQLParser.USING = 407;
PLSQLParser.VALIDATE = 408;
PLSQLParser.VALUE = 409;
PLSQLParser.VALUES = 410;
PLSQLParser.VARCHAR = 411;
PLSQLParser.VARCHAR2 = 412;
PLSQLParser.VARIABLE = 413;
PLSQLParser.VARRAY = 414;
PLSQLParser.VARYING = 415;
PLSQLParser.VERSION = 416;
PLSQLParser.VERSIONS = 417;
PLSQLParser.WAIT = 418;
PLSQLParser.WARNING = 419;
PLSQLParser.WELLFORMED = 420;
PLSQLParser.WHEN = 421;
PLSQLParser.WHENEVER = 422;
PLSQLParser.WHERE = 423;
PLSQLParser.WHILE = 424;
PLSQLParser.WITH = 425;
PLSQLParser.WITHIN = 426;
PLSQLParser.WORK = 427;
PLSQLParser.WRITE = 428;
PLSQLParser.XML = 429;
PLSQLParser.XMLAGG = 430;
PLSQLParser.XMLATTRIBUTES = 431;
PLSQLParser.XMLCAST = 432;
PLSQLParser.XMLCOLATTVAL = 433;
PLSQLParser.XMLELEMENT = 434;
PLSQLParser.XMLEXISTS = 435;
PLSQLParser.XMLFOREST = 436;
PLSQLParser.XMLNAMESPACES = 437;
PLSQLParser.XMLPARSE = 438;
PLSQLParser.XMLPI = 439;
PLSQLParser.XMLQUERY = 440;
PLSQLParser.XMLROOT = 441;
PLSQLParser.XMLSERIALIZE = 442;
PLSQLParser.XMLTABLE = 443;
PLSQLParser.YEAR = 444;
PLSQLParser.YES = 445;
PLSQLParser.YMINTERVAL_UNCONSTRAINED = 446;
PLSQLParser.ZONE = 447;
PLSQLParser.PREDICTION = 448;
PLSQLParser.PREDICTION_BOUNDS = 449;
PLSQLParser.PREDICTION_COST = 450;
PLSQLParser.PREDICTION_DETAILS = 451;
PLSQLParser.PREDICTION_PROBABILITY = 452;
PLSQLParser.PREDICTION_SET = 453;
PLSQLParser.CUME_DIST = 454;
PLSQLParser.DENSE_RANK = 455;
PLSQLParser.LISTAGG = 456;
PLSQLParser.PERCENT_RANK = 457;
PLSQLParser.PERCENTILE_CONT = 458;
PLSQLParser.PERCENTILE_DISC = 459;
PLSQLParser.RANK = 460;
PLSQLParser.AVG = 461;
PLSQLParser.CORR = 462;
PLSQLParser.LAG = 463;
PLSQLParser.LEAD = 464;
PLSQLParser.MAX = 465;
PLSQLParser.MEDIAN = 466;
PLSQLParser.MIN = 467;
PLSQLParser.NTILE = 468;
PLSQLParser.RATIO_TO_REPORT = 469;
PLSQLParser.ROW_NUMBER = 470;
PLSQLParser.SUM = 471;
PLSQLParser.VARIANCE = 472;
PLSQLParser.REGR_ = 473;
PLSQLParser.STDDEV = 474;
PLSQLParser.VAR_ = 475;
PLSQLParser.COVAR_ = 476;
PLSQLParser.NATIONAL_CHAR_STRING_LIT = 477;
PLSQLParser.BIT_STRING_LIT = 478;
PLSQLParser.HEX_STRING_LIT = 479;
PLSQLParser.DOUBLE_PERIOD = 480;
PLSQLParser.PERIOD = 481;
PLSQLParser.UNSIGNED_INTEGER = 482;
PLSQLParser.APPROXIMATE_NUM_LIT = 483;
PLSQLParser.CHAR_STRING = 484;
PLSQLParser.DELIMITED_ID = 485;
PLSQLParser.PERCENT = 486;
PLSQLParser.AMPERSAND = 487;
PLSQLParser.LEFT_PAREN = 488;
PLSQLParser.RIGHT_PAREN = 489;
PLSQLParser.DOUBLE_ASTERISK = 490;
PLSQLParser.ASTERISK = 491;
PLSQLParser.PLUS_SIGN = 492;
PLSQLParser.MINUS_SIGN = 493;
PLSQLParser.COMMA = 494;
PLSQLParser.SOLIDUS = 495;
PLSQLParser.AT_SIGN = 496;
PLSQLParser.ASSIGN_OP = 497;
PLSQLParser.BINDVAR = 498;
PLSQLParser.COLON = 499;
PLSQLParser.SEMICOLON = 500;
PLSQLParser.LESS_THAN_OR_EQUALS_OP = 501;
PLSQLParser.LESS_THAN_OP = 502;
PLSQLParser.GREATER_THAN_OR_EQUALS_OP = 503;
PLSQLParser.NOT_EQUAL_OP = 504;
PLSQLParser.CARRET_OPERATOR_PART = 505;
PLSQLParser.TILDE_OPERATOR_PART = 506;
PLSQLParser.EXCLAMATION_OPERATOR_PART = 507;
PLSQLParser.GREATER_THAN_OP = 508;
PLSQLParser.CONCATENATION_OP = 509;
PLSQLParser.VERTICAL_BAR = 510;
PLSQLParser.EQUALS_OP = 511;
PLSQLParser.LEFT_BRACKET = 512;
PLSQLParser.RIGHT_BRACKET = 513;
PLSQLParser.INTRODUCER = 514;
PLSQLParser.SPACES = 515;
PLSQLParser.SINGLE_LINE_COMMENT = 516;
PLSQLParser.MULTI_LINE_COMMENT = 517;
PLSQLParser.PROMPT = 518;
PLSQLParser.SQL92_RESERVED_ALL = 519;
PLSQLParser.SQL92_RESERVED_ALTER = 520;
PLSQLParser.SQL92_RESERVED_AND = 521;
PLSQLParser.SQL92_RESERVED_ANY = 522;
PLSQLParser.SQL92_RESERVED_AS = 523;
PLSQLParser.SQL92_RESERVED_ASC = 524;
PLSQLParser.SQL92_RESERVED_BEGIN = 525;
PLSQLParser.SQL92_RESERVED_BETWEEN = 526;
PLSQLParser.SQL92_RESERVED_BY = 527;
PLSQLParser.SQL92_RESERVED_CASE = 528;
PLSQLParser.SQL92_RESERVED_CHECK = 529;
PLSQLParser.PLSQL_RESERVED_CLUSTERS = 530;
PLSQLParser.PLSQL_RESERVED_COLAUTH = 531;
PLSQLParser.PLSQL_RESERVED_COMPRESS = 532;
PLSQLParser.SQL92_RESERVED_CONNECT = 533;
PLSQLParser.PLSQL_NON_RESERVED_CONNECT_BY_ROOT = 534;
PLSQLParser.PLSQL_RESERVED_CRASH = 535;
PLSQLParser.SQL92_RESERVED_CREATE = 536;
PLSQLParser.SQL92_RESERVED_CURRENT = 537;
PLSQLParser.SQL92_RESERVED_CURSOR = 538;
PLSQLParser.SQL92_RESERVED_DATE = 539;
PLSQLParser.SQL92_RESERVED_DECLARE = 540;
PLSQLParser.SQL92_RESERVED_DEFAULT = 541;
PLSQLParser.SQL92_RESERVED_DELETE = 542;
PLSQLParser.SQL92_RESERVED_DESC = 543;
PLSQLParser.SQL92_RESERVED_DISTINCT = 544;
PLSQLParser.SQL92_RESERVED_DROP = 545;
PLSQLParser.SQL92_RESERVED_ELSE = 546;
PLSQLParser.SQL92_RESERVED_END = 547;
PLSQLParser.SQL92_RESERVED_EXCEPTION = 548;
PLSQLParser.PLSQL_RESERVED_EXCLUSIVE = 549;
PLSQLParser.SQL92_RESERVED_EXISTS = 550;
PLSQLParser.SQL92_RESERVED_FALSE = 551;
PLSQLParser.SQL92_RESERVED_FETCH = 552;
PLSQLParser.SQL92_RESERVED_FOR = 553;
PLSQLParser.SQL92_RESERVED_FROM = 554;
PLSQLParser.SQL92_RESERVED_GOTO = 555;
PLSQLParser.SQL92_RESERVED_GRANT = 556;
PLSQLParser.SQL92_RESERVED_GROUP = 557;
PLSQLParser.SQL92_RESERVED_HAVING = 558;
PLSQLParser.PLSQL_RESERVED_IDENTIFIED = 559;
PLSQLParser.PLSQL_RESERVED_IF = 560;
PLSQLParser.SQL92_RESERVED_IN = 561;
PLSQLParser.PLSQL_RESERVED_INDEX = 562;
PLSQLParser.PLSQL_RESERVED_INDEXES = 563;
PLSQLParser.SQL92_RESERVED_INSERT = 564;
PLSQLParser.SQL92_RESERVED_INTERSECT = 565;
PLSQLParser.SQL92_RESERVED_INTO = 566;
PLSQLParser.SQL92_RESERVED_IS = 567;
PLSQLParser.SQL92_RESERVED_LIKE = 568;
PLSQLParser.PLSQL_RESERVED_LOCK = 569;
PLSQLParser.PLSQL_RESERVED_MINUS = 570;
PLSQLParser.PLSQL_RESERVED_MODE = 571;
PLSQLParser.PLSQL_RESERVED_NOCOMPRESS = 572;
PLSQLParser.SQL92_RESERVED_NOT = 573;
PLSQLParser.PLSQL_RESERVED_NOWAIT = 574;
PLSQLParser.SQL92_RESERVED_NULL = 575;
PLSQLParser.SQL92_RESERVED_OF = 576;
PLSQLParser.SQL92_RESERVED_ON = 577;
PLSQLParser.SQL92_RESERVED_OPTION = 578;
PLSQLParser.SQL92_RESERVED_OR = 579;
PLSQLParser.SQL92_RESERVED_ORDER = 580;
PLSQLParser.SQL92_RESERVED_OVERLAPS = 581;
PLSQLParser.SQL92_RESERVED_PRIOR = 582;
PLSQLParser.SQL92_RESERVED_PROCEDURE = 583;
PLSQLParser.SQL92_RESERVED_PUBLIC = 584;
PLSQLParser.PLSQL_RESERVED_RESOURCE = 585;
PLSQLParser.SQL92_RESERVED_REVOKE = 586;
PLSQLParser.SQL92_RESERVED_SELECT = 587;
PLSQLParser.PLSQL_RESERVED_SHARE = 588;
PLSQLParser.SQL92_RESERVED_SIZE = 589;
PLSQLParser.PLSQL_RESERVED_START = 590;
PLSQLParser.PLSQL_RESERVED_TABAUTH = 591;
PLSQLParser.SQL92_RESERVED_TABLE = 592;
PLSQLParser.SQL92_RESERVED_THE = 593;
PLSQLParser.SQL92_RESERVED_THEN = 594;
PLSQLParser.SQL92_RESERVED_TO = 595;
PLSQLParser.SQL92_RESERVED_TRUE = 596;
PLSQLParser.SQL92_RESERVED_UNION = 597;
PLSQLParser.SQL92_RESERVED_UNIQUE = 598;
PLSQLParser.SQL92_RESERVED_UPDATE = 599;
PLSQLParser.SQL92_RESERVED_VALUES = 600;
PLSQLParser.SQL92_RESERVED_VIEW = 601;
PLSQLParser.PLSQL_RESERVED_VIEWS = 602;
PLSQLParser.SQL92_RESERVED_WHEN = 603;
PLSQLParser.SQL92_RESERVED_WHERE = 604;
PLSQLParser.SQL92_RESERVED_WITH = 605;
PLSQLParser.PLSQL_NON_RESERVED_USING = 606;
PLSQLParser.PLSQL_NON_RESERVED_MODEL = 607;
PLSQLParser.PLSQL_NON_RESERVED_ELSIF = 608;
PLSQLParser.PLSQL_NON_RESERVED_PIVOT = 609;
PLSQLParser.PLSQL_NON_RESERVED_UNPIVOT = 610;
PLSQLParser.REGULAR_ID = 611;
PLSQLParser.ZV = 612;

PLSQLParser.RULE_swallow_to_semi = 0;
PLSQLParser.RULE_compilation_unit = 1;
PLSQLParser.RULE_sql_script = 2;
PLSQLParser.RULE_unit_statement = 3;
PLSQLParser.RULE_drop_function = 4;
PLSQLParser.RULE_alter_function = 5;
PLSQLParser.RULE_create_function_body = 6;
PLSQLParser.RULE_parallel_enable_clause = 7;
PLSQLParser.RULE_partition_by_clause = 8;
PLSQLParser.RULE_result_cache_clause = 9;
PLSQLParser.RULE_relies_on_part = 10;
PLSQLParser.RULE_streaming_clause = 11;
PLSQLParser.RULE_drop_package = 12;
PLSQLParser.RULE_alter_package = 13;
PLSQLParser.RULE_create_package = 14;
PLSQLParser.RULE_package_body = 15;
PLSQLParser.RULE_package_spec = 16;
PLSQLParser.RULE_package_obj_spec = 17;
PLSQLParser.RULE_procedure_spec = 18;
PLSQLParser.RULE_function_spec = 19;
PLSQLParser.RULE_package_obj_body = 20;
PLSQLParser.RULE_drop_procedure = 21;
PLSQLParser.RULE_alter_procedure = 22;
PLSQLParser.RULE_create_procedure_body = 23;
PLSQLParser.RULE_drop_trigger = 24;
PLSQLParser.RULE_alter_trigger = 25;
PLSQLParser.RULE_create_trigger = 26;
PLSQLParser.RULE_trigger_follows_clause = 27;
PLSQLParser.RULE_trigger_when_clause = 28;
PLSQLParser.RULE_simple_dml_trigger = 29;
PLSQLParser.RULE_for_each_row = 30;
PLSQLParser.RULE_compound_dml_trigger = 31;
PLSQLParser.RULE_non_dml_trigger = 32;
PLSQLParser.RULE_trigger_body = 33;
PLSQLParser.RULE_routine_clause = 34;
PLSQLParser.RULE_compound_trigger_block = 35;
PLSQLParser.RULE_timing_point_section = 36;
PLSQLParser.RULE_non_dml_event = 37;
PLSQLParser.RULE_dml_event_clause = 38;
PLSQLParser.RULE_dml_event_element = 39;
PLSQLParser.RULE_dml_event_nested_clause = 40;
PLSQLParser.RULE_referencing_clause = 41;
PLSQLParser.RULE_referencing_element = 42;
PLSQLParser.RULE_drop_type = 43;
PLSQLParser.RULE_alter_type = 44;
PLSQLParser.RULE_compile_type_clause = 45;
PLSQLParser.RULE_replace_type_clause = 46;
PLSQLParser.RULE_alter_method_spec = 47;
PLSQLParser.RULE_alter_method_element = 48;
PLSQLParser.RULE_alter_attribute_definition = 49;
PLSQLParser.RULE_attribute_definition = 50;
PLSQLParser.RULE_alter_collection_clauses = 51;
PLSQLParser.RULE_dependent_handling_clause = 52;
PLSQLParser.RULE_dependent_exceptions_part = 53;
PLSQLParser.RULE_create_type = 54;
PLSQLParser.RULE_type_definition = 55;
PLSQLParser.RULE_object_type_def = 56;
PLSQLParser.RULE_object_as_part = 57;
PLSQLParser.RULE_object_under_part = 58;
PLSQLParser.RULE_nested_table_type_def = 59;
PLSQLParser.RULE_sqlj_object_type = 60;
PLSQLParser.RULE_type_body = 61;
PLSQLParser.RULE_type_body_elements = 62;
PLSQLParser.RULE_map_order_func_declaration = 63;
PLSQLParser.RULE_subprog_decl_in_type = 64;
PLSQLParser.RULE_proc_decl_in_type = 65;
PLSQLParser.RULE_func_decl_in_type = 66;
PLSQLParser.RULE_constructor_declaration = 67;
PLSQLParser.RULE_modifier_clause = 68;
PLSQLParser.RULE_object_member_spec = 69;
PLSQLParser.RULE_sqlj_object_type_attr = 70;
PLSQLParser.RULE_element_spec = 71;
PLSQLParser.RULE_element_spec_options = 72;
PLSQLParser.RULE_subprogram_spec = 73;
PLSQLParser.RULE_type_procedure_spec = 74;
PLSQLParser.RULE_type_function_spec = 75;
PLSQLParser.RULE_constructor_spec = 76;
PLSQLParser.RULE_map_order_function_spec = 77;
PLSQLParser.RULE_pragma_clause = 78;
PLSQLParser.RULE_pragma_elements = 79;
PLSQLParser.RULE_type_elements_parameter = 80;
PLSQLParser.RULE_drop_sequence = 81;
PLSQLParser.RULE_alter_sequence = 82;
PLSQLParser.RULE_create_sequence = 83;
PLSQLParser.RULE_sequence_spec = 84;
PLSQLParser.RULE_sequence_start_clause = 85;
PLSQLParser.RULE_invoker_rights_clause = 86;
PLSQLParser.RULE_compiler_parameters_clause = 87;
PLSQLParser.RULE_call_spec = 88;
PLSQLParser.RULE_java_spec = 89;
PLSQLParser.RULE_c_spec = 90;
PLSQLParser.RULE_c_agent_in_clause = 91;
PLSQLParser.RULE_c_parameters_clause = 92;
PLSQLParser.RULE_parameter = 93;
PLSQLParser.RULE_default_value_part = 94;
PLSQLParser.RULE_declare_spec = 95;
PLSQLParser.RULE_variable_declaration = 96;
PLSQLParser.RULE_subtype_declaration = 97;
PLSQLParser.RULE_cursor_declaration = 98;
PLSQLParser.RULE_parameter_spec = 99;
PLSQLParser.RULE_exception_declaration = 100;
PLSQLParser.RULE_pragma_declaration = 101;
PLSQLParser.RULE_record_declaration = 102;
PLSQLParser.RULE_record_type_dec = 103;
PLSQLParser.RULE_field_spec = 104;
PLSQLParser.RULE_record_var_dec = 105;
PLSQLParser.RULE_table_declaration = 106;
PLSQLParser.RULE_table_type_dec = 107;
PLSQLParser.RULE_table_indexed_by_part = 108;
PLSQLParser.RULE_varray_type_def = 109;
PLSQLParser.RULE_table_var_dec = 110;
PLSQLParser.RULE_seq_of_statements = 111;
PLSQLParser.RULE_label_declaration = 112;
PLSQLParser.RULE_statement = 113;
PLSQLParser.RULE_assignment_statement = 114;
PLSQLParser.RULE_continue_statement = 115;
PLSQLParser.RULE_exit_statement = 116;
PLSQLParser.RULE_goto_statement = 117;
PLSQLParser.RULE_if_statement = 118;
PLSQLParser.RULE_elsif_part = 119;
PLSQLParser.RULE_else_part = 120;
PLSQLParser.RULE_loop_statement = 121;
PLSQLParser.RULE_cursor_loop_param = 122;
PLSQLParser.RULE_forall_statement = 123;
PLSQLParser.RULE_bounds_clause = 124;
PLSQLParser.RULE_between_bound = 125;
PLSQLParser.RULE_lower_bound = 126;
PLSQLParser.RULE_upper_bound = 127;
PLSQLParser.RULE_null_statement = 128;
PLSQLParser.RULE_raise_statement = 129;
PLSQLParser.RULE_return_statement = 130;
PLSQLParser.RULE_function_call = 131;
PLSQLParser.RULE_body = 132;
PLSQLParser.RULE_exception_clause = 133;
PLSQLParser.RULE_exception_handler = 134;
PLSQLParser.RULE_trigger_block = 135;
PLSQLParser.RULE_block = 136;
PLSQLParser.RULE_sql_statement = 137;
PLSQLParser.RULE_execute_immediate = 138;
PLSQLParser.RULE_dynamic_returning_clause = 139;
PLSQLParser.RULE_data_manipulation_language_statements = 140;
PLSQLParser.RULE_cursor_manipulation_statements = 141;
PLSQLParser.RULE_close_statement = 142;
PLSQLParser.RULE_open_statement = 143;
PLSQLParser.RULE_fetch_statement = 144;
PLSQLParser.RULE_open_for_statement = 145;
PLSQLParser.RULE_transaction_control_statements = 146;
PLSQLParser.RULE_set_transaction_command = 147;
PLSQLParser.RULE_set_constraint_command = 148;
PLSQLParser.RULE_commit_statement = 149;
PLSQLParser.RULE_write_clause = 150;
PLSQLParser.RULE_rollback_statement = 151;
PLSQLParser.RULE_savepoint_statement = 152;
PLSQLParser.RULE_explain_statement = 153;
PLSQLParser.RULE_select_statement = 154;
PLSQLParser.RULE_subquery_factoring_clause = 155;
PLSQLParser.RULE_factoring_element = 156;
PLSQLParser.RULE_search_clause = 157;
PLSQLParser.RULE_cycle_clause = 158;
PLSQLParser.RULE_subquery = 159;
PLSQLParser.RULE_subquery_operation_part = 160;
PLSQLParser.RULE_subquery_basic_elements = 161;
PLSQLParser.RULE_query_block = 162;
PLSQLParser.RULE_selected_element = 163;
PLSQLParser.RULE_from_clause = 164;
PLSQLParser.RULE_select_list_elements = 165;
PLSQLParser.RULE_table_ref_list = 166;
PLSQLParser.RULE_table_ref = 167;
PLSQLParser.RULE_table_ref_aux = 168;
PLSQLParser.RULE_join_clause = 169;
PLSQLParser.RULE_join_on_part = 170;
PLSQLParser.RULE_join_using_part = 171;
PLSQLParser.RULE_outer_join_type = 172;
PLSQLParser.RULE_query_partition_clause = 173;
PLSQLParser.RULE_flashback_query_clause = 174;
PLSQLParser.RULE_pivot_clause = 175;
PLSQLParser.RULE_pivot_element = 176;
PLSQLParser.RULE_pivot_for_clause = 177;
PLSQLParser.RULE_pivot_in_clause = 178;
PLSQLParser.RULE_pivot_in_clause_element = 179;
PLSQLParser.RULE_pivot_in_clause_elements = 180;
PLSQLParser.RULE_unpivot_clause = 181;
PLSQLParser.RULE_unpivot_in_clause = 182;
PLSQLParser.RULE_unpivot_in_elements = 183;
PLSQLParser.RULE_hierarchical_query_clause = 184;
PLSQLParser.RULE_start_part = 185;
PLSQLParser.RULE_group_by_clause = 186;
PLSQLParser.RULE_group_by_elements = 187;
PLSQLParser.RULE_rollup_cube_clause = 188;
PLSQLParser.RULE_grouping_sets_clause = 189;
PLSQLParser.RULE_grouping_sets_elements = 190;
PLSQLParser.RULE_having_clause = 191;
PLSQLParser.RULE_model_clause = 192;
PLSQLParser.RULE_cell_reference_options = 193;
PLSQLParser.RULE_return_rows_clause = 194;
PLSQLParser.RULE_reference_model = 195;
PLSQLParser.RULE_main_model = 196;
PLSQLParser.RULE_model_column_clauses = 197;
PLSQLParser.RULE_model_column_partition_part = 198;
PLSQLParser.RULE_model_column_list = 199;
PLSQLParser.RULE_model_column = 200;
PLSQLParser.RULE_model_rules_clause = 201;
PLSQLParser.RULE_model_rules_part = 202;
PLSQLParser.RULE_model_rules_element = 203;
PLSQLParser.RULE_cell_assignment = 204;
PLSQLParser.RULE_model_iterate_clause = 205;
PLSQLParser.RULE_until_part = 206;
PLSQLParser.RULE_order_by_clause = 207;
PLSQLParser.RULE_order_by_elements = 208;
PLSQLParser.RULE_for_update_clause = 209;
PLSQLParser.RULE_for_update_of_part = 210;
PLSQLParser.RULE_for_update_options = 211;
PLSQLParser.RULE_update_statement = 212;
PLSQLParser.RULE_update_set_clause = 213;
PLSQLParser.RULE_column_based_update_set_clause = 214;
PLSQLParser.RULE_delete_statement = 215;
PLSQLParser.RULE_insert_statement = 216;
PLSQLParser.RULE_single_table_insert = 217;
PLSQLParser.RULE_multi_table_insert = 218;
PLSQLParser.RULE_multi_table_element = 219;
PLSQLParser.RULE_conditional_insert_clause = 220;
PLSQLParser.RULE_conditional_insert_when_part = 221;
PLSQLParser.RULE_conditional_insert_else_part = 222;
PLSQLParser.RULE_insert_into_clause = 223;
PLSQLParser.RULE_values_clause = 224;
PLSQLParser.RULE_merge_statement = 225;
PLSQLParser.RULE_merge_update_clause = 226;
PLSQLParser.RULE_merge_element = 227;
PLSQLParser.RULE_merge_update_delete_part = 228;
PLSQLParser.RULE_merge_insert_clause = 229;
PLSQLParser.RULE_selected_tableview = 230;
PLSQLParser.RULE_lock_table_statement = 231;
PLSQLParser.RULE_wait_nowait_part = 232;
PLSQLParser.RULE_lock_table_element = 233;
PLSQLParser.RULE_lock_mode = 234;
PLSQLParser.RULE_general_table_ref = 235;
PLSQLParser.RULE_static_returning_clause = 236;
PLSQLParser.RULE_error_logging_clause = 237;
PLSQLParser.RULE_error_logging_into_part = 238;
PLSQLParser.RULE_error_logging_reject_part = 239;
PLSQLParser.RULE_dml_table_expression_clause = 240;
PLSQLParser.RULE_table_collection_expression = 241;
PLSQLParser.RULE_subquery_restriction_clause = 242;
PLSQLParser.RULE_sample_clause = 243;
PLSQLParser.RULE_seed_part = 244;
PLSQLParser.RULE_cursor_expression = 245;
PLSQLParser.RULE_expression_list = 246;
PLSQLParser.RULE_condition = 247;
PLSQLParser.RULE_condition_wrapper = 248;
PLSQLParser.RULE_expression = 249;
PLSQLParser.RULE_expression_wrapper = 250;
PLSQLParser.RULE_logical_and_expression = 251;
PLSQLParser.RULE_negated_expression = 252;
PLSQLParser.RULE_equality_expression = 253;
PLSQLParser.RULE_multiset_expression = 254;
PLSQLParser.RULE_multiset_type = 255;
PLSQLParser.RULE_relational_expression = 256;
PLSQLParser.RULE_compound_expression = 257;
PLSQLParser.RULE_like_type = 258;
PLSQLParser.RULE_like_escape_part = 259;
PLSQLParser.RULE_in_elements = 260;
PLSQLParser.RULE_between_elements = 261;
PLSQLParser.RULE_concatenation = 262;
PLSQLParser.RULE_concatenation_wrapper = 263;
PLSQLParser.RULE_additive_expression = 264;
PLSQLParser.RULE_multiply_expression = 265;
PLSQLParser.RULE_datetime_expression = 266;
PLSQLParser.RULE_interval_expression = 267;
PLSQLParser.RULE_model_expression = 268;
PLSQLParser.RULE_model_expression_element = 269;
PLSQLParser.RULE_single_column_for_loop = 270;
PLSQLParser.RULE_for_like_part = 271;
PLSQLParser.RULE_for_increment_decrement_type = 272;
PLSQLParser.RULE_multi_column_for_loop = 273;
PLSQLParser.RULE_unary_expression = 274;
PLSQLParser.RULE_case_statement = 275;
PLSQLParser.RULE_simple_case_statement = 276;
PLSQLParser.RULE_simple_case_when_part = 277;
PLSQLParser.RULE_searched_case_statement = 278;
PLSQLParser.RULE_searched_case_when_part = 279;
PLSQLParser.RULE_case_else_part = 280;
PLSQLParser.RULE_atom = 281;
PLSQLParser.RULE_expression_or_vector = 282;
PLSQLParser.RULE_vector_expr = 283;
PLSQLParser.RULE_quantified_expression = 284;
PLSQLParser.RULE_standard_function = 285;
PLSQLParser.RULE_over_clause_keyword = 286;
PLSQLParser.RULE_within_or_over_clause_keyword = 287;
PLSQLParser.RULE_standard_prediction_function_keyword = 288;
PLSQLParser.RULE_over_clause = 289;
PLSQLParser.RULE_windowing_clause = 290;
PLSQLParser.RULE_windowing_type = 291;
PLSQLParser.RULE_windowing_elements = 292;
PLSQLParser.RULE_using_clause = 293;
PLSQLParser.RULE_using_element = 294;
PLSQLParser.RULE_collect_order_by_part = 295;
PLSQLParser.RULE_within_or_over_part = 296;
PLSQLParser.RULE_cost_matrix_clause = 297;
PLSQLParser.RULE_xml_passing_clause = 298;
PLSQLParser.RULE_xml_attributes_clause = 299;
PLSQLParser.RULE_xml_namespaces_clause = 300;
PLSQLParser.RULE_xml_table_column = 301;
PLSQLParser.RULE_xml_general_default_part = 302;
PLSQLParser.RULE_xml_multiuse_expression_element = 303;
PLSQLParser.RULE_xmlroot_param_version_part = 304;
PLSQLParser.RULE_xmlroot_param_standalone_part = 305;
PLSQLParser.RULE_xmlserialize_param_enconding_part = 306;
PLSQLParser.RULE_xmlserialize_param_version_part = 307;
PLSQLParser.RULE_xmlserialize_param_ident_part = 308;
PLSQLParser.RULE_sql_plus_command = 309;
PLSQLParser.RULE_whenever_command = 310;
PLSQLParser.RULE_set_command = 311;
PLSQLParser.RULE_exit_command = 312;
PLSQLParser.RULE_prompt_command = 313;
PLSQLParser.RULE_partition_extension_clause = 314;
PLSQLParser.RULE_column_alias = 315;
PLSQLParser.RULE_table_alias = 316;
PLSQLParser.RULE_alias_quoted_string = 317;
PLSQLParser.RULE_where_clause = 318;
PLSQLParser.RULE_current_of_clause = 319;
PLSQLParser.RULE_into_clause = 320;
PLSQLParser.RULE_xml_column_name = 321;
PLSQLParser.RULE_cost_class_name = 322;
PLSQLParser.RULE_attribute_name = 323;
PLSQLParser.RULE_savepoint_name = 324;
PLSQLParser.RULE_rollback_segment_name = 325;
PLSQLParser.RULE_table_var_name = 326;
PLSQLParser.RULE_schema_name = 327;
PLSQLParser.RULE_routine_name = 328;
PLSQLParser.RULE_package_name = 329;
PLSQLParser.RULE_implementation_type_name = 330;
PLSQLParser.RULE_parameter_name = 331;
PLSQLParser.RULE_reference_model_name = 332;
PLSQLParser.RULE_main_model_name = 333;
PLSQLParser.RULE_aggregate_function_name = 334;
PLSQLParser.RULE_query_name = 335;
PLSQLParser.RULE_constraint_name = 336;
PLSQLParser.RULE_label_name = 337;
PLSQLParser.RULE_type_name = 338;
PLSQLParser.RULE_sequence_name = 339;
PLSQLParser.RULE_exception_name = 340;
PLSQLParser.RULE_function_name = 341;
PLSQLParser.RULE_procedure_name = 342;
PLSQLParser.RULE_trigger_name = 343;
PLSQLParser.RULE_variable_name = 344;
PLSQLParser.RULE_index_name = 345;
PLSQLParser.RULE_cursor_name = 346;
PLSQLParser.RULE_record_name = 347;
PLSQLParser.RULE_collection_name = 348;
PLSQLParser.RULE_link_name = 349;
PLSQLParser.RULE_column_name = 350;
PLSQLParser.RULE_tableview_name = 351;
PLSQLParser.RULE_char_set_name = 352;
PLSQLParser.RULE_keep_clause = 353;
PLSQLParser.RULE_function_argument = 354;
PLSQLParser.RULE_function_argument_analytic = 355;
PLSQLParser.RULE_function_argument_modeling = 356;
PLSQLParser.RULE_respect_or_ignore_nulls = 357;
PLSQLParser.RULE_argument = 358;
PLSQLParser.RULE_type_spec = 359;
PLSQLParser.RULE_datatype = 360;
PLSQLParser.RULE_precision_part = 361;
PLSQLParser.RULE_native_datatype_element = 362;
PLSQLParser.RULE_bind_variable = 363;
PLSQLParser.RULE_general_element = 364;
PLSQLParser.RULE_general_element_part = 365;
PLSQLParser.RULE_table_element = 366;
PLSQLParser.RULE_constant = 367;
PLSQLParser.RULE_numeric = 368;
PLSQLParser.RULE_quoted_string = 369;
PLSQLParser.RULE_id = 370;
PLSQLParser.RULE_id_expression = 371;
PLSQLParser.RULE_not_equal_op = 372;
PLSQLParser.RULE_greater_than_or_equals_op = 373;
PLSQLParser.RULE_less_than_or_equals_op = 374;
PLSQLParser.RULE_concatenation_op = 375;
PLSQLParser.RULE_outer_join_sign = 376;
PLSQLParser.RULE_regular_id = 377;

function Swallow_to_semiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_swallow_to_semi;
    return this;
}

Swallow_to_semiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Swallow_to_semiContext.prototype.constructor = Swallow_to_semiContext;


Swallow_to_semiContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSwallow_to_semi(this);
	}
};

Swallow_to_semiContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSwallow_to_semi(this);
	}
};




PLSQLParser.Swallow_to_semiContext = Swallow_to_semiContext;

PLSQLParser.prototype.swallow_to_semi = function() {

    var localctx = new Swallow_to_semiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PLSQLParser.RULE_swallow_to_semi);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 757; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 756;
            _la = this._input.LA(1);
            if(_la<=0 || _la===PLSQLParser.SEMICOLON) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 759; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.T__0) | (1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ALL) | (1 << PLSQLParser.ALTER) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.AND) | (1 << PLSQLParser.ANY) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.AS) | (1 << PLSQLParser.ASC) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BEGIN) | (1 << PLSQLParser.BETWEEN) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BREADTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BY - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CACHE - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CASE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHECK - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)) | (1 << (PLSQLParser.CONNECT - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PLSQLParser.CONNECT_BY_ROOT - 64)) | (1 << (PLSQLParser.CONSTANT - 64)) | (1 << (PLSQLParser.CONSTRAINT - 64)) | (1 << (PLSQLParser.CONSTRAINTS - 64)) | (1 << (PLSQLParser.CONSTRUCTOR - 64)) | (1 << (PLSQLParser.CONTENT - 64)) | (1 << (PLSQLParser.CONTEXT - 64)) | (1 << (PLSQLParser.CONTINUE - 64)) | (1 << (PLSQLParser.CONVERT - 64)) | (1 << (PLSQLParser.CORRUPT_XID - 64)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 64)) | (1 << (PLSQLParser.COST - 64)) | (1 << (PLSQLParser.COUNT - 64)) | (1 << (PLSQLParser.CREATE - 64)) | (1 << (PLSQLParser.CROSS - 64)) | (1 << (PLSQLParser.CUBE - 64)) | (1 << (PLSQLParser.CURRENT - 64)) | (1 << (PLSQLParser.CURRENT_USER - 64)) | (1 << (PLSQLParser.CURSOR - 64)) | (1 << (PLSQLParser.CUSTOMDATUM - 64)) | (1 << (PLSQLParser.CYCLE - 64)) | (1 << (PLSQLParser.DATA - 64)) | (1 << (PLSQLParser.DATABASE - 64)) | (1 << (PLSQLParser.DATE - 64)) | (1 << (PLSQLParser.DAY - 64)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 64)) | (1 << (PLSQLParser.DBTIMEZONE - 64)) | (1 << (PLSQLParser.DDL - 64)) | (1 << (PLSQLParser.DEBUG - 64)) | (1 << (PLSQLParser.DEC - 64)) | (1 << (PLSQLParser.DECIMAL - 64)) | (1 << (PLSQLParser.DECLARE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PLSQLParser.DECOMPOSE - 96)) | (1 << (PLSQLParser.DECREMENT - 96)) | (1 << (PLSQLParser.DEFAULT - 96)) | (1 << (PLSQLParser.DEFAULTS - 96)) | (1 << (PLSQLParser.DEFERRED - 96)) | (1 << (PLSQLParser.DEFINER - 96)) | (1 << (PLSQLParser.DELETE - 96)) | (1 << (PLSQLParser.DEPTH - 96)) | (1 << (PLSQLParser.DESC - 96)) | (1 << (PLSQLParser.DETERMINISTIC - 96)) | (1 << (PLSQLParser.DIMENSION - 96)) | (1 << (PLSQLParser.DISABLE - 96)) | (1 << (PLSQLParser.DISASSOCIATE - 96)) | (1 << (PLSQLParser.DISTINCT - 96)) | (1 << (PLSQLParser.DOCUMENT - 96)) | (1 << (PLSQLParser.DOUBLE - 96)) | (1 << (PLSQLParser.DROP - 96)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PLSQLParser.EACH - 96)) | (1 << (PLSQLParser.ELEMENT - 96)) | (1 << (PLSQLParser.ELSE - 96)) | (1 << (PLSQLParser.ELSIF - 96)) | (1 << (PLSQLParser.EMPTY - 96)) | (1 << (PLSQLParser.ENABLE - 96)) | (1 << (PLSQLParser.ENCODING - 96)) | (1 << (PLSQLParser.END - 96)) | (1 << (PLSQLParser.ENTITYESCAPING - 96)) | (1 << (PLSQLParser.ERRORS - 96)) | (1 << (PLSQLParser.ESCAPE - 96)) | (1 << (PLSQLParser.EVALNAME - 96)) | (1 << (PLSQLParser.EXCEPTION - 96)) | (1 << (PLSQLParser.EXCEPTION_INIT - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (PLSQLParser.EXCEPTIONS - 128)) | (1 << (PLSQLParser.EXCLUDE - 128)) | (1 << (PLSQLParser.EXCLUSIVE - 128)) | (1 << (PLSQLParser.EXECUTE - 128)) | (1 << (PLSQLParser.EXISTS - 128)) | (1 << (PLSQLParser.EXIT - 128)) | (1 << (PLSQLParser.EXPLAIN - 128)) | (1 << (PLSQLParser.EXTERNAL - 128)) | (1 << (PLSQLParser.EXTRACT - 128)) | (1 << (PLSQLParser.FAILURE - 128)) | (1 << (PLSQLParser.FALSE - 128)) | (1 << (PLSQLParser.FETCH - 128)) | (1 << (PLSQLParser.FINAL - 128)) | (1 << (PLSQLParser.FIRST - 128)) | (1 << (PLSQLParser.FIRST_VALUE - 128)) | (1 << (PLSQLParser.FLOAT - 128)) | (1 << (PLSQLParser.FOLLOWING - 128)) | (1 << (PLSQLParser.FOLLOWS - 128)) | (1 << (PLSQLParser.FOR - 128)) | (1 << (PLSQLParser.FORALL - 128)) | (1 << (PLSQLParser.FORCE - 128)) | (1 << (PLSQLParser.FROM - 128)) | (1 << (PLSQLParser.FULL - 128)) | (1 << (PLSQLParser.FUNCTION - 128)) | (1 << (PLSQLParser.GOTO - 128)) | (1 << (PLSQLParser.GRANT - 128)) | (1 << (PLSQLParser.GROUP - 128)) | (1 << (PLSQLParser.GROUPING - 128)) | (1 << (PLSQLParser.HASH - 128)) | (1 << (PLSQLParser.HAVING - 128)) | (1 << (PLSQLParser.HIDE - 128)) | (1 << (PLSQLParser.HOUR - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (PLSQLParser.IF - 160)) | (1 << (PLSQLParser.IGNORE - 160)) | (1 << (PLSQLParser.IMMEDIATE - 160)) | (1 << (PLSQLParser.IN - 160)) | (1 << (PLSQLParser.INCLUDE - 160)) | (1 << (PLSQLParser.INCLUDING - 160)) | (1 << (PLSQLParser.INCREMENT - 160)) | (1 << (PLSQLParser.INDENT - 160)) | (1 << (PLSQLParser.INDEX - 160)) | (1 << (PLSQLParser.INDEXED - 160)) | (1 << (PLSQLParser.INDICATOR - 160)) | (1 << (PLSQLParser.INDICES - 160)) | (1 << (PLSQLParser.INFINITE - 160)) | (1 << (PLSQLParser.INLINE - 160)) | (1 << (PLSQLParser.INNER - 160)) | (1 << (PLSQLParser.INOUT - 160)) | (1 << (PLSQLParser.INSERT - 160)) | (1 << (PLSQLParser.INSTANTIABLE - 160)) | (1 << (PLSQLParser.INSTEAD - 160)) | (1 << (PLSQLParser.INT - 160)) | (1 << (PLSQLParser.INTEGER - 160)) | (1 << (PLSQLParser.INTERSECT - 160)) | (1 << (PLSQLParser.INTERVAL - 160)) | (1 << (PLSQLParser.INTO - 160)) | (1 << (PLSQLParser.INVALIDATE - 160)) | (1 << (PLSQLParser.IS - 160)) | (1 << (PLSQLParser.ISOLATION - 160)) | (1 << (PLSQLParser.ITERATE - 160)) | (1 << (PLSQLParser.JAVA - 160)) | (1 << (PLSQLParser.JOIN - 160)) | (1 << (PLSQLParser.KEEP - 160)) | (1 << (PLSQLParser.LANGUAGE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (PLSQLParser.LAST - 192)) | (1 << (PLSQLParser.LAST_VALUE - 192)) | (1 << (PLSQLParser.LEADING - 192)) | (1 << (PLSQLParser.LEFT - 192)) | (1 << (PLSQLParser.LEVEL - 192)) | (1 << (PLSQLParser.LIBRARY - 192)) | (1 << (PLSQLParser.LIKE - 192)) | (1 << (PLSQLParser.LIKE2 - 192)) | (1 << (PLSQLParser.LIKE4 - 192)) | (1 << (PLSQLParser.LIKEC - 192)) | (1 << (PLSQLParser.LIMIT - 192)) | (1 << (PLSQLParser.LOCAL - 192)) | (1 << (PLSQLParser.LOCK - 192)) | (1 << (PLSQLParser.LOCKED - 192)) | (1 << (PLSQLParser.LOG - 192)) | (1 << (PLSQLParser.LOGOFF - 192)) | (1 << (PLSQLParser.LOGON - 192)) | (1 << (PLSQLParser.LONG - 192)) | (1 << (PLSQLParser.LOOP - 192)) | (1 << (PLSQLParser.MAIN - 192)) | (1 << (PLSQLParser.MAP - 192)) | (1 << (PLSQLParser.MATCHED - 192)) | (1 << (PLSQLParser.MAXVALUE - 192)) | (1 << (PLSQLParser.MEASURES - 192)) | (1 << (PLSQLParser.MEMBER - 192)) | (1 << (PLSQLParser.MERGE - 192)) | (1 << (PLSQLParser.MINUS - 192)) | (1 << (PLSQLParser.MINUTE - 192)) | (1 << (PLSQLParser.MINVALUE - 192)) | (1 << (PLSQLParser.MLSLABEL - 192)) | (1 << (PLSQLParser.MODE - 192)) | (1 << (PLSQLParser.MODEL - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (PLSQLParser.MODIFY - 224)) | (1 << (PLSQLParser.MONTH - 224)) | (1 << (PLSQLParser.MULTISET - 224)) | (1 << (PLSQLParser.NAME - 224)) | (1 << (PLSQLParser.NAN - 224)) | (1 << (PLSQLParser.NATURAL - 224)) | (1 << (PLSQLParser.NATURALN - 224)) | (1 << (PLSQLParser.NAV - 224)) | (1 << (PLSQLParser.NCHAR - 224)) | (1 << (PLSQLParser.NCHAR_CS - 224)) | (1 << (PLSQLParser.NCLOB - 224)) | (1 << (PLSQLParser.NESTED - 224)) | (1 << (PLSQLParser.NEW - 224)) | (1 << (PLSQLParser.NO - 224)) | (1 << (PLSQLParser.NOAUDIT - 224)) | (1 << (PLSQLParser.NOCACHE - 224)) | (1 << (PLSQLParser.NOCOPY - 224)) | (1 << (PLSQLParser.NOCYCLE - 224)) | (1 << (PLSQLParser.NOENTITYESCAPING - 224)) | (1 << (PLSQLParser.NOMAXVALUE - 224)) | (1 << (PLSQLParser.NOMINVALUE - 224)) | (1 << (PLSQLParser.NONE - 224)) | (1 << (PLSQLParser.NOORDER - 224)) | (1 << (PLSQLParser.NOSCHEMACHECK - 224)) | (1 << (PLSQLParser.NOT - 224)) | (1 << (PLSQLParser.NOWAIT - 224)) | (1 << (PLSQLParser.NULL - 224)) | (1 << (PLSQLParser.NULLS - 224)) | (1 << (PLSQLParser.NUMBER - 224)) | (1 << (PLSQLParser.NUMERIC - 224)) | (1 << (PLSQLParser.NVARCHAR2 - 224)) | (1 << (PLSQLParser.OBJECT - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (PLSQLParser.OF - 256)) | (1 << (PLSQLParser.OFF - 256)) | (1 << (PLSQLParser.OID - 256)) | (1 << (PLSQLParser.OLD - 256)) | (1 << (PLSQLParser.ON - 256)) | (1 << (PLSQLParser.ONLY - 256)) | (1 << (PLSQLParser.OPEN - 256)) | (1 << (PLSQLParser.OPTION - 256)) | (1 << (PLSQLParser.OR - 256)) | (1 << (PLSQLParser.ORADATA - 256)) | (1 << (PLSQLParser.ORDER - 256)) | (1 << (PLSQLParser.ORDINALITY - 256)) | (1 << (PLSQLParser.OSERROR - 256)) | (1 << (PLSQLParser.OUT - 256)) | (1 << (PLSQLParser.OUTER - 256)) | (1 << (PLSQLParser.OVER - 256)) | (1 << (PLSQLParser.OVERRIDING - 256)) | (1 << (PLSQLParser.PACKAGE - 256)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 256)) | (1 << (PLSQLParser.PARAMETERS - 256)) | (1 << (PLSQLParser.PARENT - 256)) | (1 << (PLSQLParser.PARTITION - 256)) | (1 << (PLSQLParser.PASSING - 256)) | (1 << (PLSQLParser.PATH - 256)) | (1 << (PLSQLParser.PERCENT_ROWTYPE - 256)) | (1 << (PLSQLParser.PERCENT_TYPE - 256)) | (1 << (PLSQLParser.PIPELINED - 256)) | (1 << (PLSQLParser.PIVOT - 256)) | (1 << (PLSQLParser.PLAN - 256)) | (1 << (PLSQLParser.PLS_INTEGER - 256)) | (1 << (PLSQLParser.POSITIVE - 256)) | (1 << (PLSQLParser.POSITIVEN - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (PLSQLParser.PRAGMA - 288)) | (1 << (PLSQLParser.PRECEDING - 288)) | (1 << (PLSQLParser.PRECISION - 288)) | (1 << (PLSQLParser.PRESENT - 288)) | (1 << (PLSQLParser.PRIOR - 288)) | (1 << (PLSQLParser.PROCEDURE - 288)) | (1 << (PLSQLParser.RAISE - 288)) | (1 << (PLSQLParser.RANGE - 288)) | (1 << (PLSQLParser.RAW - 288)) | (1 << (PLSQLParser.READ - 288)) | (1 << (PLSQLParser.REAL - 288)) | (1 << (PLSQLParser.RECORD - 288)) | (1 << (PLSQLParser.REF - 288)) | (1 << (PLSQLParser.REFERENCE - 288)) | (1 << (PLSQLParser.REFERENCING - 288)) | (1 << (PLSQLParser.REJECT - 288)) | (1 << (PLSQLParser.RELIES_ON - 288)) | (1 << (PLSQLParser.RENAME - 288)) | (1 << (PLSQLParser.REPLACE - 288)) | (1 << (PLSQLParser.RESPECT - 288)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 288)) | (1 << (PLSQLParser.RESULT - 288)) | (1 << (PLSQLParser.RESULT_CACHE - 288)) | (1 << (PLSQLParser.RETURN - 288)) | (1 << (PLSQLParser.RETURNING - 288)) | (1 << (PLSQLParser.REUSE - 288)) | (1 << (PLSQLParser.REVERSE - 288)) | (1 << (PLSQLParser.REVOKE - 288)) | (1 << (PLSQLParser.RIGHT - 288)) | (1 << (PLSQLParser.ROLLBACK - 288)) | (1 << (PLSQLParser.ROLLUP - 288)) | (1 << (PLSQLParser.ROW - 288)))) !== 0) || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (PLSQLParser.ROWID - 320)) | (1 << (PLSQLParser.ROWS - 320)) | (1 << (PLSQLParser.RULES - 320)) | (1 << (PLSQLParser.SAMPLE - 320)) | (1 << (PLSQLParser.SAVE - 320)) | (1 << (PLSQLParser.SAVEPOINT - 320)) | (1 << (PLSQLParser.SCHEMA - 320)) | (1 << (PLSQLParser.SCHEMACHECK - 320)) | (1 << (PLSQLParser.SCN - 320)) | (1 << (PLSQLParser.SEARCH - 320)) | (1 << (PLSQLParser.SECOND - 320)) | (1 << (PLSQLParser.SEED - 320)) | (1 << (PLSQLParser.SEGMENT - 320)) | (1 << (PLSQLParser.SELECT - 320)) | (1 << (PLSQLParser.SELF - 320)) | (1 << (PLSQLParser.SEQUENCE - 320)) | (1 << (PLSQLParser.SEQUENTIAL - 320)) | (1 << (PLSQLParser.SERIALIZABLE - 320)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 320)) | (1 << (PLSQLParser.SERVERERROR - 320)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 320)) | (1 << (PLSQLParser.SET - 320)) | (1 << (PLSQLParser.SETS - 320)) | (1 << (PLSQLParser.SETTINGS - 320)) | (1 << (PLSQLParser.SHARE - 320)) | (1 << (PLSQLParser.SHOW - 320)) | (1 << (PLSQLParser.SHUTDOWN - 320)) | (1 << (PLSQLParser.SIBLINGS - 320)) | (1 << (PLSQLParser.SIGNTYPE - 320)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 320)) | (1 << (PLSQLParser.SINGLE - 320)) | (1 << (PLSQLParser.SIZE - 320)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (PLSQLParser.SKIP - 352)) | (1 << (PLSQLParser.SMALLINT - 352)) | (1 << (PLSQLParser.SNAPSHOT - 352)) | (1 << (PLSQLParser.SOME - 352)) | (1 << (PLSQLParser.SPECIFICATION - 352)) | (1 << (PLSQLParser.SQLDATA - 352)) | (1 << (PLSQLParser.SQLERROR - 352)) | (1 << (PLSQLParser.STANDALONE - 352)) | (1 << (PLSQLParser.START - 352)) | (1 << (PLSQLParser.STARTUP - 352)) | (1 << (PLSQLParser.STATEMENT - 352)) | (1 << (PLSQLParser.STATEMENT_ID - 352)) | (1 << (PLSQLParser.STATIC - 352)) | (1 << (PLSQLParser.STATISTICS - 352)) | (1 << (PLSQLParser.STRING - 352)) | (1 << (PLSQLParser.SUBMULTISET - 352)) | (1 << (PLSQLParser.SUBPARTITION - 352)) | (1 << (PLSQLParser.SUBSTITUTABLE - 352)) | (1 << (PLSQLParser.SUBTYPE - 352)) | (1 << (PLSQLParser.SUCCESS - 352)) | (1 << (PLSQLParser.SUSPEND - 352)) | (1 << (PLSQLParser.TABLE - 352)) | (1 << (PLSQLParser.THE - 352)) | (1 << (PLSQLParser.THEN - 352)) | (1 << (PLSQLParser.TIME - 352)) | (1 << (PLSQLParser.TIMESTAMP - 352)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 352)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 352)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 352)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 352)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 352)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 352)))) !== 0) || ((((_la - 384)) & ~0x1f) == 0 && ((1 << (_la - 384)) & ((1 << (PLSQLParser.TIMEZONE_REGION - 384)) | (1 << (PLSQLParser.TO - 384)) | (1 << (PLSQLParser.TRAILING - 384)) | (1 << (PLSQLParser.TRANSACTION - 384)) | (1 << (PLSQLParser.TRANSLATE - 384)) | (1 << (PLSQLParser.TREAT - 384)) | (1 << (PLSQLParser.TRIGGER - 384)) | (1 << (PLSQLParser.TRIM - 384)) | (1 << (PLSQLParser.TRUE - 384)) | (1 << (PLSQLParser.TRUNCATE - 384)) | (1 << (PLSQLParser.TYPE - 384)) | (1 << (PLSQLParser.UNBOUNDED - 384)) | (1 << (PLSQLParser.UNDER - 384)) | (1 << (PLSQLParser.UNION - 384)) | (1 << (PLSQLParser.UNIQUE - 384)) | (1 << (PLSQLParser.UNLIMITED - 384)) | (1 << (PLSQLParser.UNPIVOT - 384)) | (1 << (PLSQLParser.UNTIL - 384)) | (1 << (PLSQLParser.UPDATE - 384)) | (1 << (PLSQLParser.UPDATED - 384)) | (1 << (PLSQLParser.UPSERT - 384)) | (1 << (PLSQLParser.UROWID - 384)) | (1 << (PLSQLParser.USE - 384)) | (1 << (PLSQLParser.USING - 384)) | (1 << (PLSQLParser.VALIDATE - 384)) | (1 << (PLSQLParser.VALUE - 384)) | (1 << (PLSQLParser.VALUES - 384)) | (1 << (PLSQLParser.VARCHAR - 384)) | (1 << (PLSQLParser.VARCHAR2 - 384)) | (1 << (PLSQLParser.VARIABLE - 384)) | (1 << (PLSQLParser.VARRAY - 384)) | (1 << (PLSQLParser.VARYING - 384)))) !== 0) || ((((_la - 416)) & ~0x1f) == 0 && ((1 << (_la - 416)) & ((1 << (PLSQLParser.VERSION - 416)) | (1 << (PLSQLParser.VERSIONS - 416)) | (1 << (PLSQLParser.WAIT - 416)) | (1 << (PLSQLParser.WARNING - 416)) | (1 << (PLSQLParser.WELLFORMED - 416)) | (1 << (PLSQLParser.WHEN - 416)) | (1 << (PLSQLParser.WHENEVER - 416)) | (1 << (PLSQLParser.WHERE - 416)) | (1 << (PLSQLParser.WHILE - 416)) | (1 << (PLSQLParser.WITH - 416)) | (1 << (PLSQLParser.WITHIN - 416)) | (1 << (PLSQLParser.WORK - 416)) | (1 << (PLSQLParser.WRITE - 416)) | (1 << (PLSQLParser.XML - 416)) | (1 << (PLSQLParser.XMLAGG - 416)) | (1 << (PLSQLParser.XMLATTRIBUTES - 416)) | (1 << (PLSQLParser.XMLCAST - 416)) | (1 << (PLSQLParser.XMLCOLATTVAL - 416)) | (1 << (PLSQLParser.XMLELEMENT - 416)) | (1 << (PLSQLParser.XMLEXISTS - 416)) | (1 << (PLSQLParser.XMLFOREST - 416)) | (1 << (PLSQLParser.XMLNAMESPACES - 416)) | (1 << (PLSQLParser.XMLPARSE - 416)) | (1 << (PLSQLParser.XMLPI - 416)) | (1 << (PLSQLParser.XMLQUERY - 416)) | (1 << (PLSQLParser.XMLROOT - 416)) | (1 << (PLSQLParser.XMLSERIALIZE - 416)) | (1 << (PLSQLParser.XMLTABLE - 416)) | (1 << (PLSQLParser.YEAR - 416)) | (1 << (PLSQLParser.YES - 416)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 416)) | (1 << (PLSQLParser.ZONE - 416)))) !== 0) || ((((_la - 448)) & ~0x1f) == 0 && ((1 << (_la - 448)) & ((1 << (PLSQLParser.PREDICTION - 448)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 448)) | (1 << (PLSQLParser.PREDICTION_COST - 448)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 448)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 448)) | (1 << (PLSQLParser.PREDICTION_SET - 448)) | (1 << (PLSQLParser.CUME_DIST - 448)) | (1 << (PLSQLParser.DENSE_RANK - 448)) | (1 << (PLSQLParser.LISTAGG - 448)) | (1 << (PLSQLParser.PERCENT_RANK - 448)) | (1 << (PLSQLParser.PERCENTILE_CONT - 448)) | (1 << (PLSQLParser.PERCENTILE_DISC - 448)) | (1 << (PLSQLParser.RANK - 448)) | (1 << (PLSQLParser.AVG - 448)) | (1 << (PLSQLParser.CORR - 448)) | (1 << (PLSQLParser.LAG - 448)) | (1 << (PLSQLParser.LEAD - 448)) | (1 << (PLSQLParser.MAX - 448)) | (1 << (PLSQLParser.MEDIAN - 448)) | (1 << (PLSQLParser.MIN - 448)) | (1 << (PLSQLParser.NTILE - 448)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 448)) | (1 << (PLSQLParser.ROW_NUMBER - 448)) | (1 << (PLSQLParser.SUM - 448)) | (1 << (PLSQLParser.VARIANCE - 448)) | (1 << (PLSQLParser.REGR_ - 448)) | (1 << (PLSQLParser.STDDEV - 448)) | (1 << (PLSQLParser.VAR_ - 448)) | (1 << (PLSQLParser.COVAR_ - 448)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 448)) | (1 << (PLSQLParser.BIT_STRING_LIT - 448)) | (1 << (PLSQLParser.HEX_STRING_LIT - 448)))) !== 0) || ((((_la - 480)) & ~0x1f) == 0 && ((1 << (_la - 480)) & ((1 << (PLSQLParser.DOUBLE_PERIOD - 480)) | (1 << (PLSQLParser.PERIOD - 480)) | (1 << (PLSQLParser.UNSIGNED_INTEGER - 480)) | (1 << (PLSQLParser.APPROXIMATE_NUM_LIT - 480)) | (1 << (PLSQLParser.CHAR_STRING - 480)) | (1 << (PLSQLParser.DELIMITED_ID - 480)) | (1 << (PLSQLParser.PERCENT - 480)) | (1 << (PLSQLParser.AMPERSAND - 480)) | (1 << (PLSQLParser.LEFT_PAREN - 480)) | (1 << (PLSQLParser.RIGHT_PAREN - 480)) | (1 << (PLSQLParser.DOUBLE_ASTERISK - 480)) | (1 << (PLSQLParser.ASTERISK - 480)) | (1 << (PLSQLParser.PLUS_SIGN - 480)) | (1 << (PLSQLParser.MINUS_SIGN - 480)) | (1 << (PLSQLParser.COMMA - 480)) | (1 << (PLSQLParser.SOLIDUS - 480)) | (1 << (PLSQLParser.AT_SIGN - 480)) | (1 << (PLSQLParser.ASSIGN_OP - 480)) | (1 << (PLSQLParser.BINDVAR - 480)) | (1 << (PLSQLParser.COLON - 480)) | (1 << (PLSQLParser.LESS_THAN_OR_EQUALS_OP - 480)) | (1 << (PLSQLParser.LESS_THAN_OP - 480)) | (1 << (PLSQLParser.GREATER_THAN_OR_EQUALS_OP - 480)) | (1 << (PLSQLParser.NOT_EQUAL_OP - 480)) | (1 << (PLSQLParser.CARRET_OPERATOR_PART - 480)) | (1 << (PLSQLParser.TILDE_OPERATOR_PART - 480)) | (1 << (PLSQLParser.EXCLAMATION_OPERATOR_PART - 480)) | (1 << (PLSQLParser.GREATER_THAN_OP - 480)) | (1 << (PLSQLParser.CONCATENATION_OP - 480)) | (1 << (PLSQLParser.VERTICAL_BAR - 480)) | (1 << (PLSQLParser.EQUALS_OP - 480)))) !== 0) || ((((_la - 512)) & ~0x1f) == 0 && ((1 << (_la - 512)) & ((1 << (PLSQLParser.LEFT_BRACKET - 512)) | (1 << (PLSQLParser.RIGHT_BRACKET - 512)) | (1 << (PLSQLParser.INTRODUCER - 512)) | (1 << (PLSQLParser.SPACES - 512)) | (1 << (PLSQLParser.SINGLE_LINE_COMMENT - 512)) | (1 << (PLSQLParser.MULTI_LINE_COMMENT - 512)) | (1 << (PLSQLParser.PROMPT - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_ALL - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_ALTER - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_AND - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_ANY - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_AS - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_ASC - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_BEGIN - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_BETWEEN - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_BY - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_CASE - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_CHECK - 512)) | (1 << (PLSQLParser.PLSQL_RESERVED_CLUSTERS - 512)) | (1 << (PLSQLParser.PLSQL_RESERVED_COLAUTH - 512)) | (1 << (PLSQLParser.PLSQL_RESERVED_COMPRESS - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_CONNECT - 512)) | (1 << (PLSQLParser.PLSQL_NON_RESERVED_CONNECT_BY_ROOT - 512)) | (1 << (PLSQLParser.PLSQL_RESERVED_CRASH - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_CREATE - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_CURRENT - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_CURSOR - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_DATE - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_DECLARE - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_DEFAULT - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_DELETE - 512)) | (1 << (PLSQLParser.SQL92_RESERVED_DESC - 512)))) !== 0) || ((((_la - 544)) & ~0x1f) == 0 && ((1 << (_la - 544)) & ((1 << (PLSQLParser.SQL92_RESERVED_DISTINCT - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_DROP - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_ELSE - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_END - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_EXCEPTION - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_EXCLUSIVE - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_EXISTS - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_FALSE - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_FETCH - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_FOR - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_FROM - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_GOTO - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_GRANT - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_GROUP - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_HAVING - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_IDENTIFIED - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_IF - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_IN - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_INDEX - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_INDEXES - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_INSERT - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_INTERSECT - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_INTO - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_IS - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_LIKE - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_LOCK - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_MINUS - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_MODE - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_NOCOMPRESS - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_NOT - 544)) | (1 << (PLSQLParser.PLSQL_RESERVED_NOWAIT - 544)) | (1 << (PLSQLParser.SQL92_RESERVED_NULL - 544)))) !== 0) || ((((_la - 576)) & ~0x1f) == 0 && ((1 << (_la - 576)) & ((1 << (PLSQLParser.SQL92_RESERVED_OF - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_ON - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_OPTION - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_OR - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_ORDER - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_OVERLAPS - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_PRIOR - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_PROCEDURE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_PUBLIC - 576)) | (1 << (PLSQLParser.PLSQL_RESERVED_RESOURCE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_REVOKE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_SELECT - 576)) | (1 << (PLSQLParser.PLSQL_RESERVED_SHARE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_SIZE - 576)) | (1 << (PLSQLParser.PLSQL_RESERVED_START - 576)) | (1 << (PLSQLParser.PLSQL_RESERVED_TABAUTH - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_TABLE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_THE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_THEN - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_TO - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_TRUE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_UNION - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_UNIQUE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_UPDATE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_VALUES - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_VIEW - 576)) | (1 << (PLSQLParser.PLSQL_RESERVED_VIEWS - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_WHEN - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_WHERE - 576)) | (1 << (PLSQLParser.SQL92_RESERVED_WITH - 576)) | (1 << (PLSQLParser.PLSQL_NON_RESERVED_USING - 576)) | (1 << (PLSQLParser.PLSQL_NON_RESERVED_MODEL - 576)))) !== 0) || ((((_la - 608)) & ~0x1f) == 0 && ((1 << (_la - 608)) & ((1 << (PLSQLParser.PLSQL_NON_RESERVED_ELSIF - 608)) | (1 << (PLSQLParser.PLSQL_NON_RESERVED_PIVOT - 608)) | (1 << (PLSQLParser.PLSQL_NON_RESERVED_UNPIVOT - 608)) | (1 << (PLSQLParser.REGULAR_ID - 608)) | (1 << (PLSQLParser.ZV - 608)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compilation_unitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_compilation_unit;
    return this;
}

Compilation_unitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_unitContext.prototype.constructor = Compilation_unitContext;

Compilation_unitContext.prototype.EOF = function() {
    return this.getToken(PLSQLParser.EOF, 0);
};

Compilation_unitContext.prototype.unit_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unit_statementContext);
    } else {
        return this.getTypedRuleContext(Unit_statementContext,i);
    }
};

Compilation_unitContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCompilation_unit(this);
	}
};

Compilation_unitContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCompilation_unit(this);
	}
};




PLSQLParser.Compilation_unitContext = Compilation_unitContext;

PLSQLParser.prototype.compilation_unit = function() {

    var localctx = new Compilation_unitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PLSQLParser.RULE_compilation_unit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 764;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.ALTER || _la===PLSQLParser.CREATE || _la===PLSQLParser.DELETE || _la===PLSQLParser.DROP || _la===PLSQLParser.EXPLAIN || _la===PLSQLParser.FUNCTION || _la===PLSQLParser.INSERT || _la===PLSQLParser.LOCK || _la===PLSQLParser.MERGE || _la===PLSQLParser.PROCEDURE || _la===PLSQLParser.SELECT || _la===PLSQLParser.UPDATE || _la===PLSQLParser.WITH || _la===PLSQLParser.LEFT_PAREN) {
            this.state = 761;
            this.unit_statement();
            this.state = 766;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 767;
        this.match(PLSQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_scriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_sql_script;
    return this;
}

Sql_scriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_scriptContext.prototype.constructor = Sql_scriptContext;

Sql_scriptContext.prototype.EOF = function() {
    return this.getToken(PLSQLParser.EOF, 0);
};

Sql_scriptContext.prototype.unit_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unit_statementContext);
    } else {
        return this.getTypedRuleContext(Unit_statementContext,i);
    }
};

Sql_scriptContext.prototype.sql_plus_command = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_plus_commandContext);
    } else {
        return this.getTypedRuleContext(Sql_plus_commandContext,i);
    }
};

Sql_scriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSql_script(this);
	}
};

Sql_scriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSql_script(this);
	}
};




PLSQLParser.Sql_scriptContext = Sql_scriptContext;

PLSQLParser.prototype.sql_script = function() {

    var localctx = new Sql_scriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PLSQLParser.RULE_sql_script);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 773;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.ALTER || _la===PLSQLParser.CREATE || _la===PLSQLParser.DELETE || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (PLSQLParser.DROP - 112)) | (1 << (PLSQLParser.EXIT - 112)) | (1 << (PLSQLParser.EXPLAIN - 112)))) !== 0) || _la===PLSQLParser.FUNCTION || _la===PLSQLParser.INSERT || _la===PLSQLParser.LOCK || _la===PLSQLParser.MERGE || _la===PLSQLParser.PROCEDURE || _la===PLSQLParser.SELECT || _la===PLSQLParser.SET || ((((_la - 402)) & ~0x1f) == 0 && ((1 << (_la - 402)) & ((1 << (PLSQLParser.UPDATE - 402)) | (1 << (PLSQLParser.WHENEVER - 402)) | (1 << (PLSQLParser.WITH - 402)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PLSQLParser.LEFT_PAREN - 488)) | (1 << (PLSQLParser.SOLIDUS - 488)) | (1 << (PLSQLParser.PROMPT - 488)))) !== 0)) {
            this.state = 771;
            switch(this._input.LA(1)) {
            case PLSQLParser.ALTER:
            case PLSQLParser.CREATE:
            case PLSQLParser.DELETE:
            case PLSQLParser.DROP:
            case PLSQLParser.EXPLAIN:
            case PLSQLParser.FUNCTION:
            case PLSQLParser.INSERT:
            case PLSQLParser.LOCK:
            case PLSQLParser.MERGE:
            case PLSQLParser.PROCEDURE:
            case PLSQLParser.SELECT:
            case PLSQLParser.UPDATE:
            case PLSQLParser.WITH:
            case PLSQLParser.LEFT_PAREN:
                this.state = 769;
                this.unit_statement();
                break;
            case PLSQLParser.EXIT:
            case PLSQLParser.SET:
            case PLSQLParser.WHENEVER:
            case PLSQLParser.SOLIDUS:
            case PLSQLParser.PROMPT:
                this.state = 770;
                this.sql_plus_command();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 775;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 776;
        this.match(PLSQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_unit_statement;
    return this;
}

Unit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unit_statementContext.prototype.constructor = Unit_statementContext;

Unit_statementContext.prototype.alter_function = function() {
    return this.getTypedRuleContext(Alter_functionContext,0);
};

Unit_statementContext.prototype.alter_package = function() {
    return this.getTypedRuleContext(Alter_packageContext,0);
};

Unit_statementContext.prototype.alter_procedure = function() {
    return this.getTypedRuleContext(Alter_procedureContext,0);
};

Unit_statementContext.prototype.alter_sequence = function() {
    return this.getTypedRuleContext(Alter_sequenceContext,0);
};

Unit_statementContext.prototype.alter_trigger = function() {
    return this.getTypedRuleContext(Alter_triggerContext,0);
};

Unit_statementContext.prototype.alter_type = function() {
    return this.getTypedRuleContext(Alter_typeContext,0);
};

Unit_statementContext.prototype.create_function_body = function() {
    return this.getTypedRuleContext(Create_function_bodyContext,0);
};

Unit_statementContext.prototype.create_procedure_body = function() {
    return this.getTypedRuleContext(Create_procedure_bodyContext,0);
};

Unit_statementContext.prototype.create_package = function() {
    return this.getTypedRuleContext(Create_packageContext,0);
};

Unit_statementContext.prototype.create_sequence = function() {
    return this.getTypedRuleContext(Create_sequenceContext,0);
};

Unit_statementContext.prototype.create_trigger = function() {
    return this.getTypedRuleContext(Create_triggerContext,0);
};

Unit_statementContext.prototype.create_type = function() {
    return this.getTypedRuleContext(Create_typeContext,0);
};

Unit_statementContext.prototype.drop_function = function() {
    return this.getTypedRuleContext(Drop_functionContext,0);
};

Unit_statementContext.prototype.drop_package = function() {
    return this.getTypedRuleContext(Drop_packageContext,0);
};

Unit_statementContext.prototype.drop_procedure = function() {
    return this.getTypedRuleContext(Drop_procedureContext,0);
};

Unit_statementContext.prototype.drop_sequence = function() {
    return this.getTypedRuleContext(Drop_sequenceContext,0);
};

Unit_statementContext.prototype.drop_trigger = function() {
    return this.getTypedRuleContext(Drop_triggerContext,0);
};

Unit_statementContext.prototype.drop_type = function() {
    return this.getTypedRuleContext(Drop_typeContext,0);
};

Unit_statementContext.prototype.data_manipulation_language_statements = function() {
    return this.getTypedRuleContext(Data_manipulation_language_statementsContext,0);
};

Unit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUnit_statement(this);
	}
};

Unit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUnit_statement(this);
	}
};




PLSQLParser.Unit_statementContext = Unit_statementContext;

PLSQLParser.prototype.unit_statement = function() {

    var localctx = new Unit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PLSQLParser.RULE_unit_statement);
    try {
        this.state = 797;
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 778;
            this.alter_function();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 779;
            this.alter_package();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 780;
            this.alter_procedure();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 781;
            this.alter_sequence();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 782;
            this.alter_trigger();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 783;
            this.alter_type();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 784;
            this.create_function_body();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 785;
            this.create_procedure_body();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 786;
            this.create_package();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 787;
            this.create_sequence();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 788;
            this.create_trigger();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 789;
            this.create_type();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 790;
            this.drop_function();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 791;
            this.drop_package();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 792;
            this.drop_procedure();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 793;
            this.drop_sequence();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 794;
            this.drop_trigger();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 795;
            this.drop_type();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 796;
            this.data_manipulation_language_statements();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_drop_function;
    return this;
}

Drop_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_functionContext.prototype.constructor = Drop_functionContext;

Drop_functionContext.prototype.DROP = function() {
    return this.getToken(PLSQLParser.DROP, 0);
};

Drop_functionContext.prototype.FUNCTION = function() {
    return this.getToken(PLSQLParser.FUNCTION, 0);
};

Drop_functionContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Drop_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDrop_function(this);
	}
};

Drop_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDrop_function(this);
	}
};




PLSQLParser.Drop_functionContext = Drop_functionContext;

PLSQLParser.prototype.drop_function = function() {

    var localctx = new Drop_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PLSQLParser.RULE_drop_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 799;
        this.match(PLSQLParser.DROP);
        this.state = 800;
        this.match(PLSQLParser.FUNCTION);
        this.state = 801;
        this.function_name();
        this.state = 802;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_function;
    return this;
}

Alter_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_functionContext.prototype.constructor = Alter_functionContext;

Alter_functionContext.prototype.ALTER = function() {
    return this.getToken(PLSQLParser.ALTER, 0);
};

Alter_functionContext.prototype.FUNCTION = function() {
    return this.getToken(PLSQLParser.FUNCTION, 0);
};

Alter_functionContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Alter_functionContext.prototype.COMPILE = function() {
    return this.getToken(PLSQLParser.COMPILE, 0);
};

Alter_functionContext.prototype.DEBUG = function() {
    return this.getToken(PLSQLParser.DEBUG, 0);
};

Alter_functionContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_functionContext.prototype.REUSE = function() {
    return this.getToken(PLSQLParser.REUSE, 0);
};

Alter_functionContext.prototype.SETTINGS = function() {
    return this.getToken(PLSQLParser.SETTINGS, 0);
};

Alter_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_function(this);
	}
};

Alter_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_function(this);
	}
};




PLSQLParser.Alter_functionContext = Alter_functionContext;

PLSQLParser.prototype.alter_function = function() {

    var localctx = new Alter_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PLSQLParser.RULE_alter_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        this.match(PLSQLParser.ALTER);
        this.state = 805;
        this.match(PLSQLParser.FUNCTION);
        this.state = 806;
        this.function_name();
        this.state = 807;
        this.match(PLSQLParser.COMPILE);
        this.state = 809;
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        if(la_===1) {
            this.state = 808;
            this.match(PLSQLParser.DEBUG);

        }
        this.state = 814;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 811;
                this.compiler_parameters_clause(); 
            }
            this.state = 816;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
        }

        this.state = 819;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.REUSE) {
            this.state = 817;
            this.match(PLSQLParser.REUSE);
            this.state = 818;
            this.match(PLSQLParser.SETTINGS);
        }

        this.state = 821;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_function_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_create_function_body;
    return this;
}

Create_function_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_function_bodyContext.prototype.constructor = Create_function_bodyContext;

Create_function_bodyContext.prototype.FUNCTION = function() {
    return this.getToken(PLSQLParser.FUNCTION, 0);
};

Create_function_bodyContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Create_function_bodyContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Create_function_bodyContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Create_function_bodyContext.prototype.USING = function() {
    return this.getToken(PLSQLParser.USING, 0);
};

Create_function_bodyContext.prototype.implementation_type_name = function() {
    return this.getTypedRuleContext(Implementation_type_nameContext,0);
};

Create_function_bodyContext.prototype.CREATE = function() {
    return this.getToken(PLSQLParser.CREATE, 0);
};

Create_function_bodyContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Create_function_bodyContext.prototype.invoker_rights_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Invoker_rights_clauseContext);
    } else {
        return this.getTypedRuleContext(Invoker_rights_clauseContext,i);
    }
};

Create_function_bodyContext.prototype.parallel_enable_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Parallel_enable_clauseContext);
    } else {
        return this.getTypedRuleContext(Parallel_enable_clauseContext,i);
    }
};

Create_function_bodyContext.prototype.result_cache_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Result_cache_clauseContext);
    } else {
        return this.getTypedRuleContext(Result_cache_clauseContext,i);
    }
};

Create_function_bodyContext.prototype.DETERMINISTIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.DETERMINISTIC);
    } else {
        return this.getToken(PLSQLParser.DETERMINISTIC, i);
    }
};


Create_function_bodyContext.prototype.PIPELINED = function() {
    return this.getToken(PLSQLParser.PIPELINED, 0);
};

Create_function_bodyContext.prototype.AGGREGATE = function() {
    return this.getToken(PLSQLParser.AGGREGATE, 0);
};

Create_function_bodyContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Create_function_bodyContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Create_function_bodyContext.prototype.OR = function() {
    return this.getToken(PLSQLParser.OR, 0);
};

Create_function_bodyContext.prototype.REPLACE = function() {
    return this.getToken(PLSQLParser.REPLACE, 0);
};

Create_function_bodyContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Create_function_bodyContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Create_function_bodyContext.prototype.DECLARE = function() {
    return this.getToken(PLSQLParser.DECLARE, 0);
};

Create_function_bodyContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Create_function_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCreate_function_body(this);
	}
};

Create_function_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCreate_function_body(this);
	}
};




PLSQLParser.Create_function_bodyContext = Create_function_bodyContext;

PLSQLParser.prototype.create_function_body = function() {

    var localctx = new Create_function_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PLSQLParser.RULE_create_function_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.CREATE) {
            this.state = 823;
            this.match(PLSQLParser.CREATE);
            this.state = 826;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.OR) {
                this.state = 824;
                this.match(PLSQLParser.OR);
                this.state = 825;
                this.match(PLSQLParser.REPLACE);
            }

        }

        this.state = 830;
        this.match(PLSQLParser.FUNCTION);
        this.state = 831;
        this.function_name();
        this.state = 843;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 832;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 833;
            this.parameter();
            this.state = 838;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 834;
                this.match(PLSQLParser.COMMA);
                this.state = 835;
                this.parameter();
                this.state = 840;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 841;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 845;
        this.match(PLSQLParser.RETURN);
        this.state = 846;
        this.type_spec();
        this.state = 853;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.AUTHID || _la===PLSQLParser.DETERMINISTIC || _la===PLSQLParser.PARALLEL_ENABLE || _la===PLSQLParser.RESULT_CACHE) {
            this.state = 851;
            switch(this._input.LA(1)) {
            case PLSQLParser.AUTHID:
                this.state = 847;
                this.invoker_rights_clause();
                break;
            case PLSQLParser.PARALLEL_ENABLE:
                this.state = 848;
                this.parallel_enable_clause();
                break;
            case PLSQLParser.RESULT_CACHE:
                this.state = 849;
                this.result_cache_clause();
                break;
            case PLSQLParser.DETERMINISTIC:
                this.state = 850;
                this.match(PLSQLParser.DETERMINISTIC);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 855;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 876;
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.state = 857;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PIPELINED) {
                this.state = 856;
                this.match(PLSQLParser.PIPELINED);
            }

            this.state = 859;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 871;
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            switch(la_) {
            case 1:
                this.state = 861;
                _la = this._input.LA(1);
                if(_la===PLSQLParser.DECLARE) {
                    this.state = 860;
                    this.match(PLSQLParser.DECLARE);
                }

                this.state = 866;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CREATE - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
                    this.state = 863;
                    this.declare_spec();
                    this.state = 868;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 869;
                this.body();
                break;

            case 2:
                this.state = 870;
                this.call_spec();
                break;

            }
            break;

        case 2:
            this.state = 873;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.AGGREGATE || _la===PLSQLParser.PIPELINED)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 874;
            this.match(PLSQLParser.USING);
            this.state = 875;
            this.implementation_type_name();
            break;

        }
        this.state = 878;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parallel_enable_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_parallel_enable_clause;
    return this;
}

Parallel_enable_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parallel_enable_clauseContext.prototype.constructor = Parallel_enable_clauseContext;

Parallel_enable_clauseContext.prototype.PARALLEL_ENABLE = function() {
    return this.getToken(PLSQLParser.PARALLEL_ENABLE, 0);
};

Parallel_enable_clauseContext.prototype.partition_by_clause = function() {
    return this.getTypedRuleContext(Partition_by_clauseContext,0);
};

Parallel_enable_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterParallel_enable_clause(this);
	}
};

Parallel_enable_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitParallel_enable_clause(this);
	}
};




PLSQLParser.Parallel_enable_clauseContext = Parallel_enable_clauseContext;

PLSQLParser.prototype.parallel_enable_clause = function() {

    var localctx = new Parallel_enable_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PLSQLParser.RULE_parallel_enable_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 880;
        this.match(PLSQLParser.PARALLEL_ENABLE);
        this.state = 882;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 881;
            this.partition_by_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partition_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_partition_by_clause;
    return this;
}

Partition_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partition_by_clauseContext.prototype.constructor = Partition_by_clauseContext;

Partition_by_clauseContext.prototype.PARTITION = function() {
    return this.getToken(PLSQLParser.PARTITION, 0);
};

Partition_by_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Partition_by_clauseContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Partition_by_clauseContext.prototype.ANY = function() {
    return this.getToken(PLSQLParser.ANY, 0);
};

Partition_by_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Partition_by_clauseContext.prototype.HASH = function() {
    return this.getToken(PLSQLParser.HASH, 0);
};

Partition_by_clauseContext.prototype.RANGE = function() {
    return this.getToken(PLSQLParser.RANGE, 0);
};

Partition_by_clauseContext.prototype.streaming_clause = function() {
    return this.getTypedRuleContext(Streaming_clauseContext,0);
};

Partition_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPartition_by_clause(this);
	}
};

Partition_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPartition_by_clause(this);
	}
};




PLSQLParser.Partition_by_clauseContext = Partition_by_clauseContext;

PLSQLParser.prototype.partition_by_clause = function() {

    var localctx = new Partition_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PLSQLParser.RULE_partition_by_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 884;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 885;
        this.match(PLSQLParser.PARTITION);
        this.state = 886;
        this.expression();
        this.state = 887;
        this.match(PLSQLParser.BY);
        this.state = 901;
        switch(this._input.LA(1)) {
        case PLSQLParser.ANY:
            this.state = 888;
            this.match(PLSQLParser.ANY);
            break;
        case PLSQLParser.HASH:
        case PLSQLParser.RANGE:
            this.state = 889;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.HASH || _la===PLSQLParser.RANGE)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 890;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 891;
            this.column_name();
            this.state = 896;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 892;
                this.match(PLSQLParser.COMMA);
                this.state = 893;
                this.column_name();
                this.state = 898;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 899;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 904;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.CLUSTER || _la===PLSQLParser.ORDER) {
            this.state = 903;
            this.streaming_clause();
        }

        this.state = 906;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Result_cache_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_result_cache_clause;
    return this;
}

Result_cache_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Result_cache_clauseContext.prototype.constructor = Result_cache_clauseContext;

Result_cache_clauseContext.prototype.RESULT_CACHE = function() {
    return this.getToken(PLSQLParser.RESULT_CACHE, 0);
};

Result_cache_clauseContext.prototype.relies_on_part = function() {
    return this.getTypedRuleContext(Relies_on_partContext,0);
};

Result_cache_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterResult_cache_clause(this);
	}
};

Result_cache_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitResult_cache_clause(this);
	}
};




PLSQLParser.Result_cache_clauseContext = Result_cache_clauseContext;

PLSQLParser.prototype.result_cache_clause = function() {

    var localctx = new Result_cache_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PLSQLParser.RULE_result_cache_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 908;
        this.match(PLSQLParser.RESULT_CACHE);
        this.state = 910;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.RELIES_ON) {
            this.state = 909;
            this.relies_on_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relies_on_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_relies_on_part;
    return this;
}

Relies_on_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relies_on_partContext.prototype.constructor = Relies_on_partContext;

Relies_on_partContext.prototype.RELIES_ON = function() {
    return this.getToken(PLSQLParser.RELIES_ON, 0);
};

Relies_on_partContext.prototype.tableview_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tableview_nameContext);
    } else {
        return this.getTypedRuleContext(Tableview_nameContext,i);
    }
};

Relies_on_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRelies_on_part(this);
	}
};

Relies_on_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRelies_on_part(this);
	}
};




PLSQLParser.Relies_on_partContext = Relies_on_partContext;

PLSQLParser.prototype.relies_on_part = function() {

    var localctx = new Relies_on_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PLSQLParser.RULE_relies_on_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 912;
        this.match(PLSQLParser.RELIES_ON);
        this.state = 913;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 914;
        this.tableview_name();
        this.state = 919;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 915;
            this.match(PLSQLParser.COMMA);
            this.state = 916;
            this.tableview_name();
            this.state = 921;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 922;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Streaming_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_streaming_clause;
    return this;
}

Streaming_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Streaming_clauseContext.prototype.constructor = Streaming_clauseContext;

Streaming_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Streaming_clauseContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Streaming_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Streaming_clauseContext.prototype.ORDER = function() {
    return this.getToken(PLSQLParser.ORDER, 0);
};

Streaming_clauseContext.prototype.CLUSTER = function() {
    return this.getToken(PLSQLParser.CLUSTER, 0);
};

Streaming_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterStreaming_clause(this);
	}
};

Streaming_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitStreaming_clause(this);
	}
};




PLSQLParser.Streaming_clauseContext = Streaming_clauseContext;

PLSQLParser.prototype.streaming_clause = function() {

    var localctx = new Streaming_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PLSQLParser.RULE_streaming_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 924;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.CLUSTER || _la===PLSQLParser.ORDER)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 925;
        this.expression();
        this.state = 926;
        this.match(PLSQLParser.BY);
        this.state = 927;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 928;
        this.column_name();
        this.state = 933;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 929;
            this.match(PLSQLParser.COMMA);
            this.state = 930;
            this.column_name();
            this.state = 935;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 936;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_drop_package;
    return this;
}

Drop_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_packageContext.prototype.constructor = Drop_packageContext;

Drop_packageContext.prototype.DROP = function() {
    return this.getToken(PLSQLParser.DROP, 0);
};

Drop_packageContext.prototype.PACKAGE = function() {
    return this.getToken(PLSQLParser.PACKAGE, 0);
};

Drop_packageContext.prototype.package_name = function() {
    return this.getTypedRuleContext(Package_nameContext,0);
};

Drop_packageContext.prototype.BODY = function() {
    return this.getToken(PLSQLParser.BODY, 0);
};

Drop_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDrop_package(this);
	}
};

Drop_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDrop_package(this);
	}
};




PLSQLParser.Drop_packageContext = Drop_packageContext;

PLSQLParser.prototype.drop_package = function() {

    var localctx = new Drop_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PLSQLParser.RULE_drop_package);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 938;
        this.match(PLSQLParser.DROP);
        this.state = 939;
        this.match(PLSQLParser.PACKAGE);
        this.state = 941;
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 940;
            this.match(PLSQLParser.BODY);

        }
        this.state = 943;
        this.package_name();
        this.state = 944;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_package;
    return this;
}

Alter_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_packageContext.prototype.constructor = Alter_packageContext;

Alter_packageContext.prototype.ALTER = function() {
    return this.getToken(PLSQLParser.ALTER, 0);
};

Alter_packageContext.prototype.PACKAGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.PACKAGE);
    } else {
        return this.getToken(PLSQLParser.PACKAGE, i);
    }
};


Alter_packageContext.prototype.package_name = function() {
    return this.getTypedRuleContext(Package_nameContext,0);
};

Alter_packageContext.prototype.COMPILE = function() {
    return this.getToken(PLSQLParser.COMPILE, 0);
};

Alter_packageContext.prototype.DEBUG = function() {
    return this.getToken(PLSQLParser.DEBUG, 0);
};

Alter_packageContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_packageContext.prototype.REUSE = function() {
    return this.getToken(PLSQLParser.REUSE, 0);
};

Alter_packageContext.prototype.SETTINGS = function() {
    return this.getToken(PLSQLParser.SETTINGS, 0);
};

Alter_packageContext.prototype.BODY = function() {
    return this.getToken(PLSQLParser.BODY, 0);
};

Alter_packageContext.prototype.SPECIFICATION = function() {
    return this.getToken(PLSQLParser.SPECIFICATION, 0);
};

Alter_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_package(this);
	}
};

Alter_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_package(this);
	}
};




PLSQLParser.Alter_packageContext = Alter_packageContext;

PLSQLParser.prototype.alter_package = function() {

    var localctx = new Alter_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PLSQLParser.RULE_alter_package);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        this.match(PLSQLParser.ALTER);
        this.state = 947;
        this.match(PLSQLParser.PACKAGE);
        this.state = 948;
        this.package_name();
        this.state = 949;
        this.match(PLSQLParser.COMPILE);
        this.state = 951;
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 950;
            this.match(PLSQLParser.DEBUG);

        }
        this.state = 954;
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 953;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.BODY || _la===PLSQLParser.PACKAGE || _la===PLSQLParser.SPECIFICATION)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }

        }
        this.state = 959;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 956;
                this.compiler_parameters_clause(); 
            }
            this.state = 961;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
        }

        this.state = 964;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.REUSE) {
            this.state = 962;
            this.match(PLSQLParser.REUSE);
            this.state = 963;
            this.match(PLSQLParser.SETTINGS);
        }

        this.state = 966;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_create_package;
    return this;
}

Create_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_packageContext.prototype.constructor = Create_packageContext;

Create_packageContext.prototype.CREATE = function() {
    return this.getToken(PLSQLParser.CREATE, 0);
};

Create_packageContext.prototype.PACKAGE = function() {
    return this.getToken(PLSQLParser.PACKAGE, 0);
};

Create_packageContext.prototype.OR = function() {
    return this.getToken(PLSQLParser.OR, 0);
};

Create_packageContext.prototype.REPLACE = function() {
    return this.getToken(PLSQLParser.REPLACE, 0);
};

Create_packageContext.prototype.package_spec = function() {
    return this.getTypedRuleContext(Package_specContext,0);
};

Create_packageContext.prototype.package_body = function() {
    return this.getTypedRuleContext(Package_bodyContext,0);
};

Create_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCreate_package(this);
	}
};

Create_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCreate_package(this);
	}
};




PLSQLParser.Create_packageContext = Create_packageContext;

PLSQLParser.prototype.create_package = function() {

    var localctx = new Create_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PLSQLParser.RULE_create_package);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 968;
        this.match(PLSQLParser.CREATE);
        this.state = 971;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.OR) {
            this.state = 969;
            this.match(PLSQLParser.OR);
            this.state = 970;
            this.match(PLSQLParser.REPLACE);
        }

        this.state = 973;
        this.match(PLSQLParser.PACKAGE);
        this.state = 976;
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 974;
            this.package_spec();

        } else if(la_===2) {
            this.state = 975;
            this.package_body();

        }
        this.state = 978;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_package_body;
    return this;
}

Package_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_bodyContext.prototype.constructor = Package_bodyContext;

Package_bodyContext.prototype.BODY = function() {
    return this.getToken(PLSQLParser.BODY, 0);
};

Package_bodyContext.prototype.package_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_nameContext);
    } else {
        return this.getTypedRuleContext(Package_nameContext,i);
    }
};

Package_bodyContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Package_bodyContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Package_bodyContext.prototype.BEGIN = function() {
    return this.getToken(PLSQLParser.BEGIN, 0);
};

Package_bodyContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Package_bodyContext.prototype.END = function() {
    return this.getToken(PLSQLParser.END, 0);
};

Package_bodyContext.prototype.package_obj_body = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_obj_bodyContext);
    } else {
        return this.getTypedRuleContext(Package_obj_bodyContext,i);
    }
};

Package_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPackage_body(this);
	}
};

Package_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPackage_body(this);
	}
};




PLSQLParser.Package_bodyContext = Package_bodyContext;

PLSQLParser.prototype.package_body = function() {

    var localctx = new Package_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PLSQLParser.RULE_package_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 980;
        this.match(PLSQLParser.BODY);
        this.state = 981;
        this.package_name();
        this.state = 982;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 986;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CREATE - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 983;
            this.package_obj_body();
            this.state = 988;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 995;
        switch(this._input.LA(1)) {
        case PLSQLParser.BEGIN:
            this.state = 989;
            this.match(PLSQLParser.BEGIN);
            this.state = 990;
            this.seq_of_statements();
            break;
        case PLSQLParser.END:
            this.state = 991;
            this.match(PLSQLParser.END);
            this.state = 993;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || _la===PLSQLParser.DELIMITED_ID || _la===PLSQLParser.INTRODUCER || _la===PLSQLParser.REGULAR_ID) {
                this.state = 992;
                this.package_name();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_package_spec;
    return this;
}

Package_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_specContext.prototype.constructor = Package_specContext;

Package_specContext.prototype.package_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_nameContext);
    } else {
        return this.getTypedRuleContext(Package_nameContext,i);
    }
};

Package_specContext.prototype.END = function() {
    return this.getToken(PLSQLParser.END, 0);
};

Package_specContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Package_specContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Package_specContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Package_specContext.prototype.package_obj_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_obj_specContext);
    } else {
        return this.getTypedRuleContext(Package_obj_specContext,i);
    }
};

Package_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPackage_spec(this);
	}
};

Package_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPackage_spec(this);
	}
};




PLSQLParser.Package_specContext = Package_specContext;

PLSQLParser.prototype.package_spec = function() {

    var localctx = new Package_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PLSQLParser.RULE_package_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.package_name();
        this.state = 999;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AUTHID) {
            this.state = 998;
            this.invoker_rights_clause();
        }

        this.state = 1001;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1005;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 1002;
            this.package_obj_spec();
            this.state = 1007;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1008;
        this.match(PLSQLParser.END);
        this.state = 1010;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || _la===PLSQLParser.DELIMITED_ID || _la===PLSQLParser.INTRODUCER || _la===PLSQLParser.REGULAR_ID) {
            this.state = 1009;
            this.package_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_obj_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_package_obj_spec;
    return this;
}

Package_obj_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_obj_specContext.prototype.constructor = Package_obj_specContext;

Package_obj_specContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Package_obj_specContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Package_obj_specContext.prototype.cursor_declaration = function() {
    return this.getTypedRuleContext(Cursor_declarationContext,0);
};

Package_obj_specContext.prototype.exception_declaration = function() {
    return this.getTypedRuleContext(Exception_declarationContext,0);
};

Package_obj_specContext.prototype.record_declaration = function() {
    return this.getTypedRuleContext(Record_declarationContext,0);
};

Package_obj_specContext.prototype.table_declaration = function() {
    return this.getTypedRuleContext(Table_declarationContext,0);
};

Package_obj_specContext.prototype.procedure_spec = function() {
    return this.getTypedRuleContext(Procedure_specContext,0);
};

Package_obj_specContext.prototype.function_spec = function() {
    return this.getTypedRuleContext(Function_specContext,0);
};

Package_obj_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPackage_obj_spec(this);
	}
};

Package_obj_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPackage_obj_spec(this);
	}
};




PLSQLParser.Package_obj_specContext = Package_obj_specContext;

PLSQLParser.prototype.package_obj_spec = function() {

    var localctx = new Package_obj_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PLSQLParser.RULE_package_obj_spec);
    try {
        this.state = 1020;
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1012;
            this.variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1013;
            this.subtype_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1014;
            this.cursor_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1015;
            this.exception_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1016;
            this.record_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1017;
            this.table_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1018;
            this.procedure_spec();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1019;
            this.function_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_procedure_spec;
    return this;
}

Procedure_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_specContext.prototype.constructor = Procedure_specContext;

Procedure_specContext.prototype.PROCEDURE = function() {
    return this.getToken(PLSQLParser.PROCEDURE, 0);
};

Procedure_specContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Procedure_specContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Procedure_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterProcedure_spec(this);
	}
};

Procedure_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitProcedure_spec(this);
	}
};




PLSQLParser.Procedure_specContext = Procedure_specContext;

PLSQLParser.prototype.procedure_spec = function() {

    var localctx = new Procedure_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PLSQLParser.RULE_procedure_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1022;
        this.match(PLSQLParser.PROCEDURE);
        this.state = 1023;
        this.procedure_name();
        this.state = 1035;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 1024;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 1025;
            this.parameter();
            this.state = 1030;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1026;
                this.match(PLSQLParser.COMMA);
                this.state = 1027;
                this.parameter();
                this.state = 1032;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1033;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 1037;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_function_spec;
    return this;
}

Function_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_specContext.prototype.constructor = Function_specContext;

Function_specContext.prototype.FUNCTION = function() {
    return this.getToken(PLSQLParser.FUNCTION, 0);
};

Function_specContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Function_specContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Function_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Function_specContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Function_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFunction_spec(this);
	}
};

Function_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFunction_spec(this);
	}
};




PLSQLParser.Function_specContext = Function_specContext;

PLSQLParser.prototype.function_spec = function() {

    var localctx = new Function_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PLSQLParser.RULE_function_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1039;
        this.match(PLSQLParser.FUNCTION);
        this.state = 1040;
        this.function_name();
        this.state = 1052;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 1041;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 1042;
            this.parameter();
            this.state = 1047;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1043;
                this.match(PLSQLParser.COMMA);
                this.state = 1044;
                this.parameter();
                this.state = 1049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1050;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 1054;
        this.match(PLSQLParser.RETURN);
        this.state = 1055;
        this.type_spec();
        this.state = 1056;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_obj_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_package_obj_body;
    return this;
}

Package_obj_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_obj_bodyContext.prototype.constructor = Package_obj_bodyContext;

Package_obj_bodyContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Package_obj_bodyContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Package_obj_bodyContext.prototype.cursor_declaration = function() {
    return this.getTypedRuleContext(Cursor_declarationContext,0);
};

Package_obj_bodyContext.prototype.exception_declaration = function() {
    return this.getTypedRuleContext(Exception_declarationContext,0);
};

Package_obj_bodyContext.prototype.record_declaration = function() {
    return this.getTypedRuleContext(Record_declarationContext,0);
};

Package_obj_bodyContext.prototype.table_declaration = function() {
    return this.getTypedRuleContext(Table_declarationContext,0);
};

Package_obj_bodyContext.prototype.create_procedure_body = function() {
    return this.getTypedRuleContext(Create_procedure_bodyContext,0);
};

Package_obj_bodyContext.prototype.create_function_body = function() {
    return this.getTypedRuleContext(Create_function_bodyContext,0);
};

Package_obj_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPackage_obj_body(this);
	}
};

Package_obj_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPackage_obj_body(this);
	}
};




PLSQLParser.Package_obj_bodyContext = Package_obj_bodyContext;

PLSQLParser.prototype.package_obj_body = function() {

    var localctx = new Package_obj_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PLSQLParser.RULE_package_obj_body);
    try {
        this.state = 1066;
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1058;
            this.variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1059;
            this.subtype_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1060;
            this.cursor_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1061;
            this.exception_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1062;
            this.record_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1063;
            this.table_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1064;
            this.create_procedure_body();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1065;
            this.create_function_body();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_procedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_drop_procedure;
    return this;
}

Drop_procedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_procedureContext.prototype.constructor = Drop_procedureContext;

Drop_procedureContext.prototype.DROP = function() {
    return this.getToken(PLSQLParser.DROP, 0);
};

Drop_procedureContext.prototype.PROCEDURE = function() {
    return this.getToken(PLSQLParser.PROCEDURE, 0);
};

Drop_procedureContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Drop_procedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDrop_procedure(this);
	}
};

Drop_procedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDrop_procedure(this);
	}
};




PLSQLParser.Drop_procedureContext = Drop_procedureContext;

PLSQLParser.prototype.drop_procedure = function() {

    var localctx = new Drop_procedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, PLSQLParser.RULE_drop_procedure);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1068;
        this.match(PLSQLParser.DROP);
        this.state = 1069;
        this.match(PLSQLParser.PROCEDURE);
        this.state = 1070;
        this.procedure_name();
        this.state = 1071;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_procedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_procedure;
    return this;
}

Alter_procedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_procedureContext.prototype.constructor = Alter_procedureContext;

Alter_procedureContext.prototype.ALTER = function() {
    return this.getToken(PLSQLParser.ALTER, 0);
};

Alter_procedureContext.prototype.PROCEDURE = function() {
    return this.getToken(PLSQLParser.PROCEDURE, 0);
};

Alter_procedureContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Alter_procedureContext.prototype.COMPILE = function() {
    return this.getToken(PLSQLParser.COMPILE, 0);
};

Alter_procedureContext.prototype.DEBUG = function() {
    return this.getToken(PLSQLParser.DEBUG, 0);
};

Alter_procedureContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_procedureContext.prototype.REUSE = function() {
    return this.getToken(PLSQLParser.REUSE, 0);
};

Alter_procedureContext.prototype.SETTINGS = function() {
    return this.getToken(PLSQLParser.SETTINGS, 0);
};

Alter_procedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_procedure(this);
	}
};

Alter_procedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_procedure(this);
	}
};




PLSQLParser.Alter_procedureContext = Alter_procedureContext;

PLSQLParser.prototype.alter_procedure = function() {

    var localctx = new Alter_procedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PLSQLParser.RULE_alter_procedure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1073;
        this.match(PLSQLParser.ALTER);
        this.state = 1074;
        this.match(PLSQLParser.PROCEDURE);
        this.state = 1075;
        this.procedure_name();
        this.state = 1076;
        this.match(PLSQLParser.COMPILE);
        this.state = 1078;
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 1077;
            this.match(PLSQLParser.DEBUG);

        }
        this.state = 1083;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1080;
                this.compiler_parameters_clause(); 
            }
            this.state = 1085;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
        }

        this.state = 1088;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.REUSE) {
            this.state = 1086;
            this.match(PLSQLParser.REUSE);
            this.state = 1087;
            this.match(PLSQLParser.SETTINGS);
        }

        this.state = 1090;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_procedure_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_create_procedure_body;
    return this;
}

Create_procedure_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_procedure_bodyContext.prototype.constructor = Create_procedure_bodyContext;

Create_procedure_bodyContext.prototype.PROCEDURE = function() {
    return this.getToken(PLSQLParser.PROCEDURE, 0);
};

Create_procedure_bodyContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Create_procedure_bodyContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Create_procedure_bodyContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Create_procedure_bodyContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Create_procedure_bodyContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Create_procedure_bodyContext.prototype.EXTERNAL = function() {
    return this.getToken(PLSQLParser.EXTERNAL, 0);
};

Create_procedure_bodyContext.prototype.CREATE = function() {
    return this.getToken(PLSQLParser.CREATE, 0);
};

Create_procedure_bodyContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Create_procedure_bodyContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Create_procedure_bodyContext.prototype.DECLARE = function() {
    return this.getToken(PLSQLParser.DECLARE, 0);
};

Create_procedure_bodyContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Create_procedure_bodyContext.prototype.OR = function() {
    return this.getToken(PLSQLParser.OR, 0);
};

Create_procedure_bodyContext.prototype.REPLACE = function() {
    return this.getToken(PLSQLParser.REPLACE, 0);
};

Create_procedure_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCreate_procedure_body(this);
	}
};

Create_procedure_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCreate_procedure_body(this);
	}
};




PLSQLParser.Create_procedure_bodyContext = Create_procedure_bodyContext;

PLSQLParser.prototype.create_procedure_body = function() {

    var localctx = new Create_procedure_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PLSQLParser.RULE_create_procedure_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1097;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.CREATE) {
            this.state = 1092;
            this.match(PLSQLParser.CREATE);
            this.state = 1095;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.OR) {
                this.state = 1093;
                this.match(PLSQLParser.OR);
                this.state = 1094;
                this.match(PLSQLParser.REPLACE);
            }

        }

        this.state = 1099;
        this.match(PLSQLParser.PROCEDURE);
        this.state = 1100;
        this.procedure_name();
        this.state = 1112;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 1101;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 1102;
            this.parameter();
            this.state = 1107;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1103;
                this.match(PLSQLParser.COMMA);
                this.state = 1104;
                this.parameter();
                this.state = 1109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1110;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 1115;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AUTHID) {
            this.state = 1114;
            this.invoker_rights_clause();
        }

        this.state = 1117;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1130;
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1119;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.DECLARE) {
                this.state = 1118;
                this.match(PLSQLParser.DECLARE);
            }

            this.state = 1124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CREATE - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
                this.state = 1121;
                this.declare_spec();
                this.state = 1126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1127;
            this.body();
            break;

        case 2:
            this.state = 1128;
            this.call_spec();
            break;

        case 3:
            this.state = 1129;
            this.match(PLSQLParser.EXTERNAL);
            break;

        }
        this.state = 1132;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_drop_trigger;
    return this;
}

Drop_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_triggerContext.prototype.constructor = Drop_triggerContext;

Drop_triggerContext.prototype.DROP = function() {
    return this.getToken(PLSQLParser.DROP, 0);
};

Drop_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(PLSQLParser.TRIGGER, 0);
};

Drop_triggerContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Drop_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDrop_trigger(this);
	}
};

Drop_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDrop_trigger(this);
	}
};




PLSQLParser.Drop_triggerContext = Drop_triggerContext;

PLSQLParser.prototype.drop_trigger = function() {

    var localctx = new Drop_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PLSQLParser.RULE_drop_trigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1134;
        this.match(PLSQLParser.DROP);
        this.state = 1135;
        this.match(PLSQLParser.TRIGGER);
        this.state = 1136;
        this.trigger_name();
        this.state = 1137;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_trigger;
    this.tn1 = null; // Trigger_nameContext
    this.tn2 = null; // Trigger_nameContext
    return this;
}

Alter_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_triggerContext.prototype.constructor = Alter_triggerContext;

Alter_triggerContext.prototype.ALTER = function() {
    return this.getToken(PLSQLParser.ALTER, 0);
};

Alter_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(PLSQLParser.TRIGGER, 0);
};

Alter_triggerContext.prototype.trigger_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Trigger_nameContext);
    } else {
        return this.getTypedRuleContext(Trigger_nameContext,i);
    }
};

Alter_triggerContext.prototype.RENAME = function() {
    return this.getToken(PLSQLParser.RENAME, 0);
};

Alter_triggerContext.prototype.TO = function() {
    return this.getToken(PLSQLParser.TO, 0);
};

Alter_triggerContext.prototype.COMPILE = function() {
    return this.getToken(PLSQLParser.COMPILE, 0);
};

Alter_triggerContext.prototype.ENABLE = function() {
    return this.getToken(PLSQLParser.ENABLE, 0);
};

Alter_triggerContext.prototype.DISABLE = function() {
    return this.getToken(PLSQLParser.DISABLE, 0);
};

Alter_triggerContext.prototype.DEBUG = function() {
    return this.getToken(PLSQLParser.DEBUG, 0);
};

Alter_triggerContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_triggerContext.prototype.REUSE = function() {
    return this.getToken(PLSQLParser.REUSE, 0);
};

Alter_triggerContext.prototype.SETTINGS = function() {
    return this.getToken(PLSQLParser.SETTINGS, 0);
};

Alter_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_trigger(this);
	}
};

Alter_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_trigger(this);
	}
};




PLSQLParser.Alter_triggerContext = Alter_triggerContext;

PLSQLParser.prototype.alter_trigger = function() {

    var localctx = new Alter_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PLSQLParser.RULE_alter_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1139;
        this.match(PLSQLParser.ALTER);
        this.state = 1140;
        this.match(PLSQLParser.TRIGGER);
        this.state = 1141;
        localctx.tn1 = this.trigger_name();
        this.state = 1160;
        switch(this._input.LA(1)) {
        case PLSQLParser.DISABLE:
        case PLSQLParser.ENABLE:
            this.state = 1142;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.DISABLE || _la===PLSQLParser.ENABLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;
        case PLSQLParser.RENAME:
            this.state = 1143;
            this.match(PLSQLParser.RENAME);
            this.state = 1144;
            this.match(PLSQLParser.TO);
            this.state = 1145;
            localctx.tn2 = this.trigger_name();
            break;
        case PLSQLParser.COMPILE:
            this.state = 1146;
            this.match(PLSQLParser.COMPILE);
            this.state = 1148;
            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
            if(la_===1) {
                this.state = 1147;
                this.match(PLSQLParser.DEBUG);

            }
            this.state = 1153;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1150;
                    this.compiler_parameters_clause(); 
                }
                this.state = 1155;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
            }

            this.state = 1158;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.REUSE) {
                this.state = 1156;
                this.match(PLSQLParser.REUSE);
                this.state = 1157;
                this.match(PLSQLParser.SETTINGS);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1162;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_create_trigger;
    return this;
}

Create_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_triggerContext.prototype.constructor = Create_triggerContext;

Create_triggerContext.prototype.CREATE = function() {
    return this.getToken(PLSQLParser.CREATE, 0);
};

Create_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(PLSQLParser.TRIGGER, 0);
};

Create_triggerContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Create_triggerContext.prototype.trigger_body = function() {
    return this.getTypedRuleContext(Trigger_bodyContext,0);
};

Create_triggerContext.prototype.simple_dml_trigger = function() {
    return this.getTypedRuleContext(Simple_dml_triggerContext,0);
};

Create_triggerContext.prototype.compound_dml_trigger = function() {
    return this.getTypedRuleContext(Compound_dml_triggerContext,0);
};

Create_triggerContext.prototype.non_dml_trigger = function() {
    return this.getTypedRuleContext(Non_dml_triggerContext,0);
};

Create_triggerContext.prototype.OR = function() {
    return this.getToken(PLSQLParser.OR, 0);
};

Create_triggerContext.prototype.REPLACE = function() {
    return this.getToken(PLSQLParser.REPLACE, 0);
};

Create_triggerContext.prototype.trigger_follows_clause = function() {
    return this.getTypedRuleContext(Trigger_follows_clauseContext,0);
};

Create_triggerContext.prototype.trigger_when_clause = function() {
    return this.getTypedRuleContext(Trigger_when_clauseContext,0);
};

Create_triggerContext.prototype.ENABLE = function() {
    return this.getToken(PLSQLParser.ENABLE, 0);
};

Create_triggerContext.prototype.DISABLE = function() {
    return this.getToken(PLSQLParser.DISABLE, 0);
};

Create_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCreate_trigger(this);
	}
};

Create_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCreate_trigger(this);
	}
};




PLSQLParser.Create_triggerContext = Create_triggerContext;

PLSQLParser.prototype.create_trigger = function() {

    var localctx = new Create_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PLSQLParser.RULE_create_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1164;
        this.match(PLSQLParser.CREATE);
        this.state = 1167;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.OR) {
            this.state = 1165;
            this.match(PLSQLParser.OR);
            this.state = 1166;
            this.match(PLSQLParser.REPLACE);
        }

        this.state = 1169;
        this.match(PLSQLParser.TRIGGER);
        this.state = 1170;
        this.trigger_name();
        this.state = 1174;
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1171;
            this.simple_dml_trigger();
            break;

        case 2:
            this.state = 1172;
            this.compound_dml_trigger();
            break;

        case 3:
            this.state = 1173;
            this.non_dml_trigger();
            break;

        }
        this.state = 1177;
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        if(la_===1) {
            this.state = 1176;
            this.trigger_follows_clause();

        }
        this.state = 1180;
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        if(la_===1) {
            this.state = 1179;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.DISABLE || _la===PLSQLParser.ENABLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }

        }
        this.state = 1183;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WHEN) {
            this.state = 1182;
            this.trigger_when_clause();
        }

        this.state = 1185;
        this.trigger_body();
        this.state = 1186;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_follows_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_trigger_follows_clause;
    return this;
}

Trigger_follows_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_follows_clauseContext.prototype.constructor = Trigger_follows_clauseContext;

Trigger_follows_clauseContext.prototype.FOLLOWS = function() {
    return this.getToken(PLSQLParser.FOLLOWS, 0);
};

Trigger_follows_clauseContext.prototype.trigger_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Trigger_nameContext);
    } else {
        return this.getTypedRuleContext(Trigger_nameContext,i);
    }
};

Trigger_follows_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTrigger_follows_clause(this);
	}
};

Trigger_follows_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTrigger_follows_clause(this);
	}
};




PLSQLParser.Trigger_follows_clauseContext = Trigger_follows_clauseContext;

PLSQLParser.prototype.trigger_follows_clause = function() {

    var localctx = new Trigger_follows_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PLSQLParser.RULE_trigger_follows_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1188;
        this.match(PLSQLParser.FOLLOWS);
        this.state = 1189;
        this.trigger_name();
        this.state = 1194;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 1190;
            this.match(PLSQLParser.COMMA);
            this.state = 1191;
            this.trigger_name();
            this.state = 1196;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_when_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_trigger_when_clause;
    return this;
}

Trigger_when_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_when_clauseContext.prototype.constructor = Trigger_when_clauseContext;

Trigger_when_clauseContext.prototype.WHEN = function() {
    return this.getToken(PLSQLParser.WHEN, 0);
};

Trigger_when_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Trigger_when_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTrigger_when_clause(this);
	}
};

Trigger_when_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTrigger_when_clause(this);
	}
};




PLSQLParser.Trigger_when_clauseContext = Trigger_when_clauseContext;

PLSQLParser.prototype.trigger_when_clause = function() {

    var localctx = new Trigger_when_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, PLSQLParser.RULE_trigger_when_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1197;
        this.match(PLSQLParser.WHEN);
        this.state = 1198;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 1199;
        this.condition();
        this.state = 1200;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_simple_dml_trigger;
    return this;
}

Simple_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_dml_triggerContext.prototype.constructor = Simple_dml_triggerContext;

Simple_dml_triggerContext.prototype.dml_event_clause = function() {
    return this.getTypedRuleContext(Dml_event_clauseContext,0);
};

Simple_dml_triggerContext.prototype.BEFORE = function() {
    return this.getToken(PLSQLParser.BEFORE, 0);
};

Simple_dml_triggerContext.prototype.AFTER = function() {
    return this.getToken(PLSQLParser.AFTER, 0);
};

Simple_dml_triggerContext.prototype.INSTEAD = function() {
    return this.getToken(PLSQLParser.INSTEAD, 0);
};

Simple_dml_triggerContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Simple_dml_triggerContext.prototype.referencing_clause = function() {
    return this.getTypedRuleContext(Referencing_clauseContext,0);
};

Simple_dml_triggerContext.prototype.for_each_row = function() {
    return this.getTypedRuleContext(For_each_rowContext,0);
};

Simple_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSimple_dml_trigger(this);
	}
};

Simple_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSimple_dml_trigger(this);
	}
};




PLSQLParser.Simple_dml_triggerContext = Simple_dml_triggerContext;

PLSQLParser.prototype.simple_dml_trigger = function() {

    var localctx = new Simple_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PLSQLParser.RULE_simple_dml_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1206;
        switch(this._input.LA(1)) {
        case PLSQLParser.BEFORE:
            this.state = 1202;
            this.match(PLSQLParser.BEFORE);
            break;
        case PLSQLParser.AFTER:
            this.state = 1203;
            this.match(PLSQLParser.AFTER);
            break;
        case PLSQLParser.INSTEAD:
            this.state = 1204;
            this.match(PLSQLParser.INSTEAD);
            this.state = 1205;
            this.match(PLSQLParser.OF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1208;
        this.dml_event_clause();
        this.state = 1210;
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 1209;
            this.referencing_clause();

        }
        this.state = 1213;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.FOR) {
            this.state = 1212;
            this.for_each_row();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_each_rowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_for_each_row;
    return this;
}

For_each_rowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_rowContext.prototype.constructor = For_each_rowContext;

For_each_rowContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

For_each_rowContext.prototype.EACH = function() {
    return this.getToken(PLSQLParser.EACH, 0);
};

For_each_rowContext.prototype.ROW = function() {
    return this.getToken(PLSQLParser.ROW, 0);
};

For_each_rowContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFor_each_row(this);
	}
};

For_each_rowContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFor_each_row(this);
	}
};




PLSQLParser.For_each_rowContext = For_each_rowContext;

PLSQLParser.prototype.for_each_row = function() {

    var localctx = new For_each_rowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PLSQLParser.RULE_for_each_row);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1215;
        this.match(PLSQLParser.FOR);
        this.state = 1216;
        this.match(PLSQLParser.EACH);
        this.state = 1217;
        this.match(PLSQLParser.ROW);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_compound_dml_trigger;
    return this;
}

Compound_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_dml_triggerContext.prototype.constructor = Compound_dml_triggerContext;

Compound_dml_triggerContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

Compound_dml_triggerContext.prototype.dml_event_clause = function() {
    return this.getTypedRuleContext(Dml_event_clauseContext,0);
};

Compound_dml_triggerContext.prototype.referencing_clause = function() {
    return this.getTypedRuleContext(Referencing_clauseContext,0);
};

Compound_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCompound_dml_trigger(this);
	}
};

Compound_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCompound_dml_trigger(this);
	}
};




PLSQLParser.Compound_dml_triggerContext = Compound_dml_triggerContext;

PLSQLParser.prototype.compound_dml_trigger = function() {

    var localctx = new Compound_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PLSQLParser.RULE_compound_dml_trigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1219;
        this.match(PLSQLParser.FOR);
        this.state = 1220;
        this.dml_event_clause();
        this.state = 1222;
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 1221;
            this.referencing_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_non_dml_trigger;
    return this;
}

Non_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_dml_triggerContext.prototype.constructor = Non_dml_triggerContext;

Non_dml_triggerContext.prototype.non_dml_event = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Non_dml_eventContext);
    } else {
        return this.getTypedRuleContext(Non_dml_eventContext,i);
    }
};

Non_dml_triggerContext.prototype.ON = function() {
    return this.getToken(PLSQLParser.ON, 0);
};

Non_dml_triggerContext.prototype.BEFORE = function() {
    return this.getToken(PLSQLParser.BEFORE, 0);
};

Non_dml_triggerContext.prototype.AFTER = function() {
    return this.getToken(PLSQLParser.AFTER, 0);
};

Non_dml_triggerContext.prototype.DATABASE = function() {
    return this.getToken(PLSQLParser.DATABASE, 0);
};

Non_dml_triggerContext.prototype.SCHEMA = function() {
    return this.getToken(PLSQLParser.SCHEMA, 0);
};

Non_dml_triggerContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.OR);
    } else {
        return this.getToken(PLSQLParser.OR, i);
    }
};


Non_dml_triggerContext.prototype.schema_name = function() {
    return this.getTypedRuleContext(Schema_nameContext,0);
};

Non_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterNon_dml_trigger(this);
	}
};

Non_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitNon_dml_trigger(this);
	}
};




PLSQLParser.Non_dml_triggerContext = Non_dml_triggerContext;

PLSQLParser.prototype.non_dml_trigger = function() {

    var localctx = new Non_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PLSQLParser.RULE_non_dml_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1224;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.AFTER || _la===PLSQLParser.BEFORE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1225;
        this.non_dml_event();
        this.state = 1230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.OR) {
            this.state = 1226;
            this.match(PLSQLParser.OR);
            this.state = 1227;
            this.non_dml_event();
            this.state = 1232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1233;
        this.match(PLSQLParser.ON);
        this.state = 1241;
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1234;
            this.match(PLSQLParser.DATABASE);
            break;

        case 2:
            this.state = 1238;
            var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
            if(la_===1) {
                this.state = 1235;
                this.schema_name();
                this.state = 1236;
                this.match(PLSQLParser.PERIOD);

            }
            this.state = 1240;
            this.match(PLSQLParser.SCHEMA);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_trigger_body;
    return this;
}

Trigger_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_bodyContext.prototype.constructor = Trigger_bodyContext;

Trigger_bodyContext.prototype.COMPOUND = function() {
    return this.getToken(PLSQLParser.COMPOUND, 0);
};

Trigger_bodyContext.prototype.TRIGGER = function() {
    return this.getToken(PLSQLParser.TRIGGER, 0);
};

Trigger_bodyContext.prototype.CALL = function() {
    return this.getToken(PLSQLParser.CALL, 0);
};

Trigger_bodyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Trigger_bodyContext.prototype.trigger_block = function() {
    return this.getTypedRuleContext(Trigger_blockContext,0);
};

Trigger_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTrigger_body(this);
	}
};

Trigger_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTrigger_body(this);
	}
};




PLSQLParser.Trigger_bodyContext = Trigger_bodyContext;

PLSQLParser.prototype.trigger_body = function() {

    var localctx = new Trigger_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PLSQLParser.RULE_trigger_body);
    try {
        this.state = 1248;
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1243;
            this.match(PLSQLParser.COMPOUND);
            this.state = 1244;
            this.match(PLSQLParser.TRIGGER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1245;
            this.match(PLSQLParser.CALL);
            this.state = 1246;
            this.id();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1247;
            this.trigger_block();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Routine_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_routine_clause;
    return this;
}

Routine_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Routine_clauseContext.prototype.constructor = Routine_clauseContext;

Routine_clauseContext.prototype.routine_name = function() {
    return this.getTypedRuleContext(Routine_nameContext,0);
};

Routine_clauseContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

Routine_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRoutine_clause(this);
	}
};

Routine_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRoutine_clause(this);
	}
};




PLSQLParser.Routine_clauseContext = Routine_clauseContext;

PLSQLParser.prototype.routine_clause = function() {

    var localctx = new Routine_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PLSQLParser.RULE_routine_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1250;
        this.routine_name();
        this.state = 1252;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 1251;
            this.function_argument();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_trigger_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_compound_trigger_block;
    return this;
}

Compound_trigger_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_trigger_blockContext.prototype.constructor = Compound_trigger_blockContext;

Compound_trigger_blockContext.prototype.COMPOUND = function() {
    return this.getToken(PLSQLParser.COMPOUND, 0);
};

Compound_trigger_blockContext.prototype.TRIGGER = function() {
    return this.getToken(PLSQLParser.TRIGGER, 0);
};

Compound_trigger_blockContext.prototype.END = function() {
    return this.getToken(PLSQLParser.END, 0);
};

Compound_trigger_blockContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Compound_trigger_blockContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Compound_trigger_blockContext.prototype.timing_point_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Timing_point_sectionContext);
    } else {
        return this.getTypedRuleContext(Timing_point_sectionContext,i);
    }
};

Compound_trigger_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCompound_trigger_block(this);
	}
};

Compound_trigger_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCompound_trigger_block(this);
	}
};




PLSQLParser.Compound_trigger_blockContext = Compound_trigger_blockContext;

PLSQLParser.prototype.compound_trigger_block = function() {

    var localctx = new Compound_trigger_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PLSQLParser.RULE_compound_trigger_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1254;
        this.match(PLSQLParser.COMPOUND);
        this.state = 1255;
        this.match(PLSQLParser.TRIGGER);
        this.state = 1259;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1256;
                this.declare_spec(); 
            }
            this.state = 1261;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
        }

        this.state = 1263; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1262;
            this.timing_point_section();
            this.state = 1265; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLSQLParser.AFTER || _la===PLSQLParser.BEFORE);
        this.state = 1267;
        this.match(PLSQLParser.END);
        this.state = 1268;
        this.trigger_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Timing_point_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_timing_point_section;
    this.bk = null; // Token
    this.ak = null; // Token
    return this;
}

Timing_point_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timing_point_sectionContext.prototype.constructor = Timing_point_sectionContext;

Timing_point_sectionContext.prototype.STATEMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.STATEMENT);
    } else {
        return this.getToken(PLSQLParser.STATEMENT, i);
    }
};


Timing_point_sectionContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Timing_point_sectionContext.prototype.trigger_block = function() {
    return this.getTypedRuleContext(Trigger_blockContext,0);
};

Timing_point_sectionContext.prototype.BEFORE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.BEFORE);
    } else {
        return this.getToken(PLSQLParser.BEFORE, i);
    }
};


Timing_point_sectionContext.prototype.EACH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.EACH);
    } else {
        return this.getToken(PLSQLParser.EACH, i);
    }
};


Timing_point_sectionContext.prototype.ROW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.ROW);
    } else {
        return this.getToken(PLSQLParser.ROW, i);
    }
};


Timing_point_sectionContext.prototype.AFTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.AFTER);
    } else {
        return this.getToken(PLSQLParser.AFTER, i);
    }
};


Timing_point_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTiming_point_section(this);
	}
};

Timing_point_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTiming_point_section(this);
	}
};




PLSQLParser.Timing_point_sectionContext = Timing_point_sectionContext;

PLSQLParser.prototype.timing_point_section = function() {

    var localctx = new Timing_point_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PLSQLParser.RULE_timing_point_section);
    try {
        this.state = 1306;
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1270;
            localctx.bk = this.match(PLSQLParser.BEFORE);
            this.state = 1271;
            this.match(PLSQLParser.STATEMENT);
            this.state = 1272;
            this.match(PLSQLParser.IS);
            this.state = 1273;
            this.trigger_block();
            this.state = 1274;
            this.match(PLSQLParser.BEFORE);
            this.state = 1275;
            this.match(PLSQLParser.STATEMENT);
            this.state = 1276;
            this.match(PLSQLParser.SEMICOLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1278;
            localctx.bk = this.match(PLSQLParser.BEFORE);
            this.state = 1279;
            this.match(PLSQLParser.EACH);
            this.state = 1280;
            this.match(PLSQLParser.ROW);
            this.state = 1281;
            this.match(PLSQLParser.IS);
            this.state = 1282;
            this.trigger_block();
            this.state = 1283;
            this.match(PLSQLParser.BEFORE);
            this.state = 1284;
            this.match(PLSQLParser.EACH);
            this.state = 1285;
            this.match(PLSQLParser.ROW);
            this.state = 1286;
            this.match(PLSQLParser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1288;
            localctx.ak = this.match(PLSQLParser.AFTER);
            this.state = 1289;
            this.match(PLSQLParser.STATEMENT);
            this.state = 1290;
            this.match(PLSQLParser.IS);
            this.state = 1291;
            this.trigger_block();
            this.state = 1292;
            this.match(PLSQLParser.AFTER);
            this.state = 1293;
            this.match(PLSQLParser.STATEMENT);
            this.state = 1294;
            this.match(PLSQLParser.SEMICOLON);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1296;
            localctx.ak = this.match(PLSQLParser.AFTER);
            this.state = 1297;
            this.match(PLSQLParser.EACH);
            this.state = 1298;
            this.match(PLSQLParser.ROW);
            this.state = 1299;
            this.match(PLSQLParser.IS);
            this.state = 1300;
            this.trigger_block();
            this.state = 1301;
            this.match(PLSQLParser.AFTER);
            this.state = 1302;
            this.match(PLSQLParser.EACH);
            this.state = 1303;
            this.match(PLSQLParser.ROW);
            this.state = 1304;
            this.match(PLSQLParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_dml_eventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_non_dml_event;
    return this;
}

Non_dml_eventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_dml_eventContext.prototype.constructor = Non_dml_eventContext;

Non_dml_eventContext.prototype.ALTER = function() {
    return this.getToken(PLSQLParser.ALTER, 0);
};

Non_dml_eventContext.prototype.ANALYZE = function() {
    return this.getToken(PLSQLParser.ANALYZE, 0);
};

Non_dml_eventContext.prototype.ASSOCIATE = function() {
    return this.getToken(PLSQLParser.ASSOCIATE, 0);
};

Non_dml_eventContext.prototype.STATISTICS = function() {
    return this.getToken(PLSQLParser.STATISTICS, 0);
};

Non_dml_eventContext.prototype.AUDIT = function() {
    return this.getToken(PLSQLParser.AUDIT, 0);
};

Non_dml_eventContext.prototype.COMMENT = function() {
    return this.getToken(PLSQLParser.COMMENT, 0);
};

Non_dml_eventContext.prototype.CREATE = function() {
    return this.getToken(PLSQLParser.CREATE, 0);
};

Non_dml_eventContext.prototype.DISASSOCIATE = function() {
    return this.getToken(PLSQLParser.DISASSOCIATE, 0);
};

Non_dml_eventContext.prototype.DROP = function() {
    return this.getToken(PLSQLParser.DROP, 0);
};

Non_dml_eventContext.prototype.GRANT = function() {
    return this.getToken(PLSQLParser.GRANT, 0);
};

Non_dml_eventContext.prototype.NOAUDIT = function() {
    return this.getToken(PLSQLParser.NOAUDIT, 0);
};

Non_dml_eventContext.prototype.RENAME = function() {
    return this.getToken(PLSQLParser.RENAME, 0);
};

Non_dml_eventContext.prototype.REVOKE = function() {
    return this.getToken(PLSQLParser.REVOKE, 0);
};

Non_dml_eventContext.prototype.TRUNCATE = function() {
    return this.getToken(PLSQLParser.TRUNCATE, 0);
};

Non_dml_eventContext.prototype.DDL = function() {
    return this.getToken(PLSQLParser.DDL, 0);
};

Non_dml_eventContext.prototype.STARTUP = function() {
    return this.getToken(PLSQLParser.STARTUP, 0);
};

Non_dml_eventContext.prototype.SHUTDOWN = function() {
    return this.getToken(PLSQLParser.SHUTDOWN, 0);
};

Non_dml_eventContext.prototype.DB_ROLE_CHANGE = function() {
    return this.getToken(PLSQLParser.DB_ROLE_CHANGE, 0);
};

Non_dml_eventContext.prototype.LOGON = function() {
    return this.getToken(PLSQLParser.LOGON, 0);
};

Non_dml_eventContext.prototype.LOGOFF = function() {
    return this.getToken(PLSQLParser.LOGOFF, 0);
};

Non_dml_eventContext.prototype.SERVERERROR = function() {
    return this.getToken(PLSQLParser.SERVERERROR, 0);
};

Non_dml_eventContext.prototype.SUSPEND = function() {
    return this.getToken(PLSQLParser.SUSPEND, 0);
};

Non_dml_eventContext.prototype.DATABASE = function() {
    return this.getToken(PLSQLParser.DATABASE, 0);
};

Non_dml_eventContext.prototype.SCHEMA = function() {
    return this.getToken(PLSQLParser.SCHEMA, 0);
};

Non_dml_eventContext.prototype.FOLLOWS = function() {
    return this.getToken(PLSQLParser.FOLLOWS, 0);
};

Non_dml_eventContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterNon_dml_event(this);
	}
};

Non_dml_eventContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitNon_dml_event(this);
	}
};




PLSQLParser.Non_dml_eventContext = Non_dml_eventContext;

PLSQLParser.prototype.non_dml_event = function() {

    var localctx = new Non_dml_eventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, PLSQLParser.RULE_non_dml_event);
    try {
        this.state = 1334;
        switch(this._input.LA(1)) {
        case PLSQLParser.ALTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1308;
            this.match(PLSQLParser.ALTER);
            break;
        case PLSQLParser.ANALYZE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1309;
            this.match(PLSQLParser.ANALYZE);
            break;
        case PLSQLParser.ASSOCIATE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1310;
            this.match(PLSQLParser.ASSOCIATE);
            this.state = 1311;
            this.match(PLSQLParser.STATISTICS);
            break;
        case PLSQLParser.AUDIT:
            this.enterOuterAlt(localctx, 4);
            this.state = 1312;
            this.match(PLSQLParser.AUDIT);
            break;
        case PLSQLParser.COMMENT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1313;
            this.match(PLSQLParser.COMMENT);
            break;
        case PLSQLParser.CREATE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1314;
            this.match(PLSQLParser.CREATE);
            break;
        case PLSQLParser.DISASSOCIATE:
            this.enterOuterAlt(localctx, 7);
            this.state = 1315;
            this.match(PLSQLParser.DISASSOCIATE);
            this.state = 1316;
            this.match(PLSQLParser.STATISTICS);
            break;
        case PLSQLParser.DROP:
            this.enterOuterAlt(localctx, 8);
            this.state = 1317;
            this.match(PLSQLParser.DROP);
            break;
        case PLSQLParser.GRANT:
            this.enterOuterAlt(localctx, 9);
            this.state = 1318;
            this.match(PLSQLParser.GRANT);
            break;
        case PLSQLParser.NOAUDIT:
            this.enterOuterAlt(localctx, 10);
            this.state = 1319;
            this.match(PLSQLParser.NOAUDIT);
            break;
        case PLSQLParser.RENAME:
            this.enterOuterAlt(localctx, 11);
            this.state = 1320;
            this.match(PLSQLParser.RENAME);
            break;
        case PLSQLParser.REVOKE:
            this.enterOuterAlt(localctx, 12);
            this.state = 1321;
            this.match(PLSQLParser.REVOKE);
            break;
        case PLSQLParser.TRUNCATE:
            this.enterOuterAlt(localctx, 13);
            this.state = 1322;
            this.match(PLSQLParser.TRUNCATE);
            break;
        case PLSQLParser.DDL:
            this.enterOuterAlt(localctx, 14);
            this.state = 1323;
            this.match(PLSQLParser.DDL);
            break;
        case PLSQLParser.STARTUP:
            this.enterOuterAlt(localctx, 15);
            this.state = 1324;
            this.match(PLSQLParser.STARTUP);
            break;
        case PLSQLParser.SHUTDOWN:
            this.enterOuterAlt(localctx, 16);
            this.state = 1325;
            this.match(PLSQLParser.SHUTDOWN);
            break;
        case PLSQLParser.DB_ROLE_CHANGE:
            this.enterOuterAlt(localctx, 17);
            this.state = 1326;
            this.match(PLSQLParser.DB_ROLE_CHANGE);
            break;
        case PLSQLParser.LOGON:
            this.enterOuterAlt(localctx, 18);
            this.state = 1327;
            this.match(PLSQLParser.LOGON);
            break;
        case PLSQLParser.LOGOFF:
            this.enterOuterAlt(localctx, 19);
            this.state = 1328;
            this.match(PLSQLParser.LOGOFF);
            break;
        case PLSQLParser.SERVERERROR:
            this.enterOuterAlt(localctx, 20);
            this.state = 1329;
            this.match(PLSQLParser.SERVERERROR);
            break;
        case PLSQLParser.SUSPEND:
            this.enterOuterAlt(localctx, 21);
            this.state = 1330;
            this.match(PLSQLParser.SUSPEND);
            break;
        case PLSQLParser.DATABASE:
            this.enterOuterAlt(localctx, 22);
            this.state = 1331;
            this.match(PLSQLParser.DATABASE);
            break;
        case PLSQLParser.SCHEMA:
            this.enterOuterAlt(localctx, 23);
            this.state = 1332;
            this.match(PLSQLParser.SCHEMA);
            break;
        case PLSQLParser.FOLLOWS:
            this.enterOuterAlt(localctx, 24);
            this.state = 1333;
            this.match(PLSQLParser.FOLLOWS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_event_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_dml_event_clause;
    return this;
}

Dml_event_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_event_clauseContext.prototype.constructor = Dml_event_clauseContext;

Dml_event_clauseContext.prototype.dml_event_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dml_event_elementContext);
    } else {
        return this.getTypedRuleContext(Dml_event_elementContext,i);
    }
};

Dml_event_clauseContext.prototype.ON = function() {
    return this.getToken(PLSQLParser.ON, 0);
};

Dml_event_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dml_event_clauseContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.OR);
    } else {
        return this.getToken(PLSQLParser.OR, i);
    }
};


Dml_event_clauseContext.prototype.dml_event_nested_clause = function() {
    return this.getTypedRuleContext(Dml_event_nested_clauseContext,0);
};

Dml_event_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDml_event_clause(this);
	}
};

Dml_event_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDml_event_clause(this);
	}
};




PLSQLParser.Dml_event_clauseContext = Dml_event_clauseContext;

PLSQLParser.prototype.dml_event_clause = function() {

    var localctx = new Dml_event_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, PLSQLParser.RULE_dml_event_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1336;
        this.dml_event_element();
        this.state = 1341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.OR) {
            this.state = 1337;
            this.match(PLSQLParser.OR);
            this.state = 1338;
            this.dml_event_element();
            this.state = 1343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1344;
        this.match(PLSQLParser.ON);
        this.state = 1346;
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        if(la_===1) {
            this.state = 1345;
            this.dml_event_nested_clause();

        }
        this.state = 1348;
        this.tableview_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_event_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_dml_event_element;
    return this;
}

Dml_event_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_event_elementContext.prototype.constructor = Dml_event_elementContext;

Dml_event_elementContext.prototype.DELETE = function() {
    return this.getToken(PLSQLParser.DELETE, 0);
};

Dml_event_elementContext.prototype.INSERT = function() {
    return this.getToken(PLSQLParser.INSERT, 0);
};

Dml_event_elementContext.prototype.UPDATE = function() {
    return this.getToken(PLSQLParser.UPDATE, 0);
};

Dml_event_elementContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Dml_event_elementContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Dml_event_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDml_event_element(this);
	}
};

Dml_event_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDml_event_element(this);
	}
};




PLSQLParser.Dml_event_elementContext = Dml_event_elementContext;

PLSQLParser.prototype.dml_event_element = function() {

    var localctx = new Dml_event_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, PLSQLParser.RULE_dml_event_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1350;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.DELETE || _la===PLSQLParser.INSERT || _la===PLSQLParser.UPDATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1360;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.OF) {
            this.state = 1351;
            this.match(PLSQLParser.OF);
            this.state = 1352;
            this.column_name();
            this.state = 1357;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1353;
                this.match(PLSQLParser.COMMA);
                this.state = 1354;
                this.column_name();
                this.state = 1359;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_event_nested_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_dml_event_nested_clause;
    return this;
}

Dml_event_nested_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_event_nested_clauseContext.prototype.constructor = Dml_event_nested_clauseContext;

Dml_event_nested_clauseContext.prototype.NESTED = function() {
    return this.getToken(PLSQLParser.NESTED, 0);
};

Dml_event_nested_clauseContext.prototype.TABLE = function() {
    return this.getToken(PLSQLParser.TABLE, 0);
};

Dml_event_nested_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dml_event_nested_clauseContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Dml_event_nested_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDml_event_nested_clause(this);
	}
};

Dml_event_nested_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDml_event_nested_clause(this);
	}
};




PLSQLParser.Dml_event_nested_clauseContext = Dml_event_nested_clauseContext;

PLSQLParser.prototype.dml_event_nested_clause = function() {

    var localctx = new Dml_event_nested_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, PLSQLParser.RULE_dml_event_nested_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1362;
        this.match(PLSQLParser.NESTED);
        this.state = 1363;
        this.match(PLSQLParser.TABLE);
        this.state = 1364;
        this.tableview_name();
        this.state = 1365;
        this.match(PLSQLParser.OF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Referencing_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_referencing_clause;
    return this;
}

Referencing_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Referencing_clauseContext.prototype.constructor = Referencing_clauseContext;

Referencing_clauseContext.prototype.REFERENCING = function() {
    return this.getToken(PLSQLParser.REFERENCING, 0);
};

Referencing_clauseContext.prototype.referencing_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Referencing_elementContext);
    } else {
        return this.getTypedRuleContext(Referencing_elementContext,i);
    }
};

Referencing_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterReferencing_clause(this);
	}
};

Referencing_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitReferencing_clause(this);
	}
};




PLSQLParser.Referencing_clauseContext = Referencing_clauseContext;

PLSQLParser.prototype.referencing_clause = function() {

    var localctx = new Referencing_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, PLSQLParser.RULE_referencing_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1367;
        this.match(PLSQLParser.REFERENCING);
        this.state = 1369; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1368;
        		this.referencing_element();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1371; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,83, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Referencing_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_referencing_element;
    return this;
}

Referencing_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Referencing_elementContext.prototype.constructor = Referencing_elementContext;

Referencing_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Referencing_elementContext.prototype.NEW = function() {
    return this.getToken(PLSQLParser.NEW, 0);
};

Referencing_elementContext.prototype.OLD = function() {
    return this.getToken(PLSQLParser.OLD, 0);
};

Referencing_elementContext.prototype.PARENT = function() {
    return this.getToken(PLSQLParser.PARENT, 0);
};

Referencing_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterReferencing_element(this);
	}
};

Referencing_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitReferencing_element(this);
	}
};




PLSQLParser.Referencing_elementContext = Referencing_elementContext;

PLSQLParser.prototype.referencing_element = function() {

    var localctx = new Referencing_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, PLSQLParser.RULE_referencing_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1373;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.NEW || _la===PLSQLParser.OLD || _la===PLSQLParser.PARENT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1374;
        this.column_alias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_drop_type;
    return this;
}

Drop_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_typeContext.prototype.constructor = Drop_typeContext;

Drop_typeContext.prototype.DROP = function() {
    return this.getToken(PLSQLParser.DROP, 0);
};

Drop_typeContext.prototype.TYPE = function() {
    return this.getToken(PLSQLParser.TYPE, 0);
};

Drop_typeContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Drop_typeContext.prototype.BODY = function() {
    return this.getToken(PLSQLParser.BODY, 0);
};

Drop_typeContext.prototype.FORCE = function() {
    return this.getToken(PLSQLParser.FORCE, 0);
};

Drop_typeContext.prototype.VALIDATE = function() {
    return this.getToken(PLSQLParser.VALIDATE, 0);
};

Drop_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDrop_type(this);
	}
};

Drop_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDrop_type(this);
	}
};




PLSQLParser.Drop_typeContext = Drop_typeContext;

PLSQLParser.prototype.drop_type = function() {

    var localctx = new Drop_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, PLSQLParser.RULE_drop_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1376;
        this.match(PLSQLParser.DROP);
        this.state = 1377;
        this.match(PLSQLParser.TYPE);
        this.state = 1379;
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 1378;
            this.match(PLSQLParser.BODY);

        }
        this.state = 1381;
        this.type_name();
        this.state = 1383;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.FORCE || _la===PLSQLParser.VALIDATE) {
            this.state = 1382;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.FORCE || _la===PLSQLParser.VALIDATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 1385;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_type;
    return this;
}

Alter_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_typeContext.prototype.constructor = Alter_typeContext;

Alter_typeContext.prototype.ALTER = function() {
    return this.getToken(PLSQLParser.ALTER, 0);
};

Alter_typeContext.prototype.TYPE = function() {
    return this.getToken(PLSQLParser.TYPE, 0);
};

Alter_typeContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Alter_typeContext.prototype.compile_type_clause = function() {
    return this.getTypedRuleContext(Compile_type_clauseContext,0);
};

Alter_typeContext.prototype.replace_type_clause = function() {
    return this.getTypedRuleContext(Replace_type_clauseContext,0);
};

Alter_typeContext.prototype.alter_method_spec = function() {
    return this.getTypedRuleContext(Alter_method_specContext,0);
};

Alter_typeContext.prototype.alter_collection_clauses = function() {
    return this.getTypedRuleContext(Alter_collection_clausesContext,0);
};

Alter_typeContext.prototype.modifier_clause = function() {
    return this.getTypedRuleContext(Modifier_clauseContext,0);
};

Alter_typeContext.prototype.dependent_handling_clause = function() {
    return this.getTypedRuleContext(Dependent_handling_clauseContext,0);
};

Alter_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_type(this);
	}
};

Alter_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_type(this);
	}
};




PLSQLParser.Alter_typeContext = Alter_typeContext;

PLSQLParser.prototype.alter_type = function() {

    var localctx = new Alter_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, PLSQLParser.RULE_alter_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1387;
        this.match(PLSQLParser.ALTER);
        this.state = 1388;
        this.match(PLSQLParser.TYPE);
        this.state = 1389;
        this.type_name();
        this.state = 1395;
        switch(this._input.LA(1)) {
        case PLSQLParser.COMPILE:
            this.state = 1390;
            this.compile_type_clause();
            break;
        case PLSQLParser.REPLACE:
            this.state = 1391;
            this.replace_type_clause();
            break;
        case PLSQLParser.ADD:
        case PLSQLParser.DROP:
            this.state = 1392;
            this.alter_method_spec();
            break;
        case PLSQLParser.MODIFY:
            this.state = 1393;
            this.alter_collection_clauses();
            break;
        case PLSQLParser.FINAL:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.NOT:
        case PLSQLParser.OVERRIDING:
            this.state = 1394;
            this.modifier_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1398;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.CASCADE || _la===PLSQLParser.INVALIDATE) {
            this.state = 1397;
            this.dependent_handling_clause();
        }

        this.state = 1400;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compile_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_compile_type_clause;
    return this;
}

Compile_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compile_type_clauseContext.prototype.constructor = Compile_type_clauseContext;

Compile_type_clauseContext.prototype.COMPILE = function() {
    return this.getToken(PLSQLParser.COMPILE, 0);
};

Compile_type_clauseContext.prototype.DEBUG = function() {
    return this.getToken(PLSQLParser.DEBUG, 0);
};

Compile_type_clauseContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Compile_type_clauseContext.prototype.REUSE = function() {
    return this.getToken(PLSQLParser.REUSE, 0);
};

Compile_type_clauseContext.prototype.SETTINGS = function() {
    return this.getToken(PLSQLParser.SETTINGS, 0);
};

Compile_type_clauseContext.prototype.SPECIFICATION = function() {
    return this.getToken(PLSQLParser.SPECIFICATION, 0);
};

Compile_type_clauseContext.prototype.BODY = function() {
    return this.getToken(PLSQLParser.BODY, 0);
};

Compile_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCompile_type_clause(this);
	}
};

Compile_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCompile_type_clause(this);
	}
};




PLSQLParser.Compile_type_clauseContext = Compile_type_clauseContext;

PLSQLParser.prototype.compile_type_clause = function() {

    var localctx = new Compile_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, PLSQLParser.RULE_compile_type_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1402;
        this.match(PLSQLParser.COMPILE);
        this.state = 1404;
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        if(la_===1) {
            this.state = 1403;
            this.match(PLSQLParser.DEBUG);

        }
        this.state = 1407;
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        if(la_===1) {
            this.state = 1406;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.BODY || _la===PLSQLParser.SPECIFICATION)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }

        }
        this.state = 1412;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1409;
                this.compiler_parameters_clause(); 
            }
            this.state = 1414;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

        this.state = 1417;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.REUSE) {
            this.state = 1415;
            this.match(PLSQLParser.REUSE);
            this.state = 1416;
            this.match(PLSQLParser.SETTINGS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Replace_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_replace_type_clause;
    return this;
}

Replace_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Replace_type_clauseContext.prototype.constructor = Replace_type_clauseContext;

Replace_type_clauseContext.prototype.REPLACE = function() {
    return this.getToken(PLSQLParser.REPLACE, 0);
};

Replace_type_clauseContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Replace_type_clauseContext.prototype.OBJECT = function() {
    return this.getToken(PLSQLParser.OBJECT, 0);
};

Replace_type_clauseContext.prototype.object_member_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Object_member_specContext);
    } else {
        return this.getTypedRuleContext(Object_member_specContext,i);
    }
};

Replace_type_clauseContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Replace_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterReplace_type_clause(this);
	}
};

Replace_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitReplace_type_clause(this);
	}
};




PLSQLParser.Replace_type_clauseContext = Replace_type_clauseContext;

PLSQLParser.prototype.replace_type_clause = function() {

    var localctx = new Replace_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, PLSQLParser.RULE_replace_type_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1419;
        this.match(PLSQLParser.REPLACE);
        this.state = 1421;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AUTHID) {
            this.state = 1420;
            this.invoker_rights_clause();
        }

        this.state = 1423;
        this.match(PLSQLParser.AS);
        this.state = 1424;
        this.match(PLSQLParser.OBJECT);
        this.state = 1425;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 1426;
        this.object_member_spec();
        this.state = 1431;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 1427;
            this.match(PLSQLParser.COMMA);
            this.state = 1428;
            this.object_member_spec();
            this.state = 1433;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1434;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_method_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_method_spec;
    return this;
}

Alter_method_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_method_specContext.prototype.constructor = Alter_method_specContext;

Alter_method_specContext.prototype.alter_method_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Alter_method_elementContext);
    } else {
        return this.getTypedRuleContext(Alter_method_elementContext,i);
    }
};

Alter_method_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_method_spec(this);
	}
};

Alter_method_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_method_spec(this);
	}
};




PLSQLParser.Alter_method_specContext = Alter_method_specContext;

PLSQLParser.prototype.alter_method_spec = function() {

    var localctx = new Alter_method_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, PLSQLParser.RULE_alter_method_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1436;
        this.alter_method_element();
        this.state = 1441;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 1437;
            this.match(PLSQLParser.COMMA);
            this.state = 1438;
            this.alter_method_element();
            this.state = 1443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_method_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_method_element;
    return this;
}

Alter_method_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_method_elementContext.prototype.constructor = Alter_method_elementContext;

Alter_method_elementContext.prototype.ADD = function() {
    return this.getToken(PLSQLParser.ADD, 0);
};

Alter_method_elementContext.prototype.DROP = function() {
    return this.getToken(PLSQLParser.DROP, 0);
};

Alter_method_elementContext.prototype.map_order_function_spec = function() {
    return this.getTypedRuleContext(Map_order_function_specContext,0);
};

Alter_method_elementContext.prototype.subprogram_spec = function() {
    return this.getTypedRuleContext(Subprogram_specContext,0);
};

Alter_method_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_method_element(this);
	}
};

Alter_method_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_method_element(this);
	}
};




PLSQLParser.Alter_method_elementContext = Alter_method_elementContext;

PLSQLParser.prototype.alter_method_element = function() {

    var localctx = new Alter_method_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, PLSQLParser.RULE_alter_method_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1444;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.ADD || _la===PLSQLParser.DROP)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1447;
        switch(this._input.LA(1)) {
        case PLSQLParser.MAP:
        case PLSQLParser.ORDER:
            this.state = 1445;
            this.map_order_function_spec();
            break;
        case PLSQLParser.MEMBER:
        case PLSQLParser.STATIC:
            this.state = 1446;
            this.subprogram_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_attribute_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_attribute_definition;
    return this;
}

Alter_attribute_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_attribute_definitionContext.prototype.constructor = Alter_attribute_definitionContext;

Alter_attribute_definitionContext.prototype.ATTRIBUTE = function() {
    return this.getToken(PLSQLParser.ATTRIBUTE, 0);
};

Alter_attribute_definitionContext.prototype.ADD = function() {
    return this.getToken(PLSQLParser.ADD, 0);
};

Alter_attribute_definitionContext.prototype.MODIFY = function() {
    return this.getToken(PLSQLParser.MODIFY, 0);
};

Alter_attribute_definitionContext.prototype.DROP = function() {
    return this.getToken(PLSQLParser.DROP, 0);
};

Alter_attribute_definitionContext.prototype.attribute_definition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_definitionContext);
    } else {
        return this.getTypedRuleContext(Attribute_definitionContext,i);
    }
};

Alter_attribute_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_attribute_definition(this);
	}
};

Alter_attribute_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_attribute_definition(this);
	}
};




PLSQLParser.Alter_attribute_definitionContext = Alter_attribute_definitionContext;

PLSQLParser.prototype.alter_attribute_definition = function() {

    var localctx = new Alter_attribute_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, PLSQLParser.RULE_alter_attribute_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1449;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.ADD || _la===PLSQLParser.DROP || _la===PLSQLParser.MODIFY)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1450;
        this.match(PLSQLParser.ATTRIBUTE);
        this.state = 1463;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 1451;
            this.attribute_definition();
            break;
        case PLSQLParser.LEFT_PAREN:
            this.state = 1452;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 1453;
            this.attribute_definition();
            this.state = 1458;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1454;
                this.match(PLSQLParser.COMMA);
                this.state = 1455;
                this.attribute_definition();
                this.state = 1460;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1461;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_attribute_definition;
    return this;
}

Attribute_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_definitionContext.prototype.constructor = Attribute_definitionContext;

Attribute_definitionContext.prototype.attribute_name = function() {
    return this.getTypedRuleContext(Attribute_nameContext,0);
};

Attribute_definitionContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Attribute_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAttribute_definition(this);
	}
};

Attribute_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAttribute_definition(this);
	}
};




PLSQLParser.Attribute_definitionContext = Attribute_definitionContext;

PLSQLParser.prototype.attribute_definition = function() {

    var localctx = new Attribute_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, PLSQLParser.RULE_attribute_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1465;
        this.attribute_name();
        this.state = 1467;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DATE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (PLSQLParser.DEFAULTS - 99)) | (1 << (PLSQLParser.DEFERRED - 99)) | (1 << (PLSQLParser.DEFINER - 99)) | (1 << (PLSQLParser.DETERMINISTIC - 99)) | (1 << (PLSQLParser.DIMENSION - 99)) | (1 << (PLSQLParser.DISABLE - 99)) | (1 << (PLSQLParser.DISASSOCIATE - 99)) | (1 << (PLSQLParser.DOCUMENT - 99)) | (1 << (PLSQLParser.DOUBLE - 99)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (PLSQLParser.EACH - 99)) | (1 << (PLSQLParser.ELEMENT - 99)) | (1 << (PLSQLParser.EMPTY - 99)) | (1 << (PLSQLParser.ENABLE - 99)) | (1 << (PLSQLParser.ENCODING - 99)) | (1 << (PLSQLParser.ENTITYESCAPING - 99)) | (1 << (PLSQLParser.ERRORS - 99)) | (1 << (PLSQLParser.ESCAPE - 99)) | (1 << (PLSQLParser.EVALNAME - 99)) | (1 << (PLSQLParser.EXCEPTION - 99)) | (1 << (PLSQLParser.EXCEPTION_INIT - 99)) | (1 << (PLSQLParser.EXCEPTIONS - 99)) | (1 << (PLSQLParser.EXCLUDE - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 1466;
            this.type_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_collection_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_collection_clauses;
    return this;
}

Alter_collection_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_collection_clausesContext.prototype.constructor = Alter_collection_clausesContext;

Alter_collection_clausesContext.prototype.MODIFY = function() {
    return this.getToken(PLSQLParser.MODIFY, 0);
};

Alter_collection_clausesContext.prototype.LIMIT = function() {
    return this.getToken(PLSQLParser.LIMIT, 0);
};

Alter_collection_clausesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Alter_collection_clausesContext.prototype.ELEMENT = function() {
    return this.getToken(PLSQLParser.ELEMENT, 0);
};

Alter_collection_clausesContext.prototype.TYPE = function() {
    return this.getToken(PLSQLParser.TYPE, 0);
};

Alter_collection_clausesContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Alter_collection_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_collection_clauses(this);
	}
};

Alter_collection_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_collection_clauses(this);
	}
};




PLSQLParser.Alter_collection_clausesContext = Alter_collection_clausesContext;

PLSQLParser.prototype.alter_collection_clauses = function() {

    var localctx = new Alter_collection_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, PLSQLParser.RULE_alter_collection_clauses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1469;
        this.match(PLSQLParser.MODIFY);
        this.state = 1475;
        switch(this._input.LA(1)) {
        case PLSQLParser.LIMIT:
            this.state = 1470;
            this.match(PLSQLParser.LIMIT);
            this.state = 1471;
            this.expression();
            break;
        case PLSQLParser.ELEMENT:
            this.state = 1472;
            this.match(PLSQLParser.ELEMENT);
            this.state = 1473;
            this.match(PLSQLParser.TYPE);
            this.state = 1474;
            this.type_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dependent_handling_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_dependent_handling_clause;
    return this;
}

Dependent_handling_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dependent_handling_clauseContext.prototype.constructor = Dependent_handling_clauseContext;

Dependent_handling_clauseContext.prototype.INVALIDATE = function() {
    return this.getToken(PLSQLParser.INVALIDATE, 0);
};

Dependent_handling_clauseContext.prototype.CASCADE = function() {
    return this.getToken(PLSQLParser.CASCADE, 0);
};

Dependent_handling_clauseContext.prototype.CONVERT = function() {
    return this.getToken(PLSQLParser.CONVERT, 0);
};

Dependent_handling_clauseContext.prototype.TO = function() {
    return this.getToken(PLSQLParser.TO, 0);
};

Dependent_handling_clauseContext.prototype.SUBSTITUTABLE = function() {
    return this.getToken(PLSQLParser.SUBSTITUTABLE, 0);
};

Dependent_handling_clauseContext.prototype.INCLUDING = function() {
    return this.getToken(PLSQLParser.INCLUDING, 0);
};

Dependent_handling_clauseContext.prototype.TABLE = function() {
    return this.getToken(PLSQLParser.TABLE, 0);
};

Dependent_handling_clauseContext.prototype.DATA = function() {
    return this.getToken(PLSQLParser.DATA, 0);
};

Dependent_handling_clauseContext.prototype.dependent_exceptions_part = function() {
    return this.getTypedRuleContext(Dependent_exceptions_partContext,0);
};

Dependent_handling_clauseContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Dependent_handling_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDependent_handling_clause(this);
	}
};

Dependent_handling_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDependent_handling_clause(this);
	}
};




PLSQLParser.Dependent_handling_clauseContext = Dependent_handling_clauseContext;

PLSQLParser.prototype.dependent_handling_clause = function() {

    var localctx = new Dependent_handling_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, PLSQLParser.RULE_dependent_handling_clause);
    var _la = 0; // Token type
    try {
        this.state = 1493;
        switch(this._input.LA(1)) {
        case PLSQLParser.INVALIDATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1477;
            this.match(PLSQLParser.INVALIDATE);
            break;
        case PLSQLParser.CASCADE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1478;
            this.match(PLSQLParser.CASCADE);
            this.state = 1488;
            switch (this._input.LA(1)) {
            case PLSQLParser.CONVERT:
            	this.state = 1479;
            	this.match(PLSQLParser.CONVERT);
            	this.state = 1480;
            	this.match(PLSQLParser.TO);
            	this.state = 1481;
            	this.match(PLSQLParser.SUBSTITUTABLE);
            	break;
            case PLSQLParser.INCLUDING:
            case PLSQLParser.NOT:
            	this.state = 1483;
            	_la = this._input.LA(1);
            	if(_la===PLSQLParser.NOT) {
            	    this.state = 1482;
            	    this.match(PLSQLParser.NOT);
            	}

            	this.state = 1485;
            	this.match(PLSQLParser.INCLUDING);
            	this.state = 1486;
            	this.match(PLSQLParser.TABLE);
            	this.state = 1487;
            	this.match(PLSQLParser.DATA);
            	break;
            case PLSQLParser.EXCEPTIONS:
            case PLSQLParser.FORCE:
            case PLSQLParser.SEMICOLON:
            	break;
            default:
            	throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1491;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.EXCEPTIONS || _la===PLSQLParser.FORCE) {
                this.state = 1490;
                this.dependent_exceptions_part();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dependent_exceptions_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_dependent_exceptions_part;
    return this;
}

Dependent_exceptions_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dependent_exceptions_partContext.prototype.constructor = Dependent_exceptions_partContext;

Dependent_exceptions_partContext.prototype.EXCEPTIONS = function() {
    return this.getToken(PLSQLParser.EXCEPTIONS, 0);
};

Dependent_exceptions_partContext.prototype.INTO = function() {
    return this.getToken(PLSQLParser.INTO, 0);
};

Dependent_exceptions_partContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dependent_exceptions_partContext.prototype.FORCE = function() {
    return this.getToken(PLSQLParser.FORCE, 0);
};

Dependent_exceptions_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDependent_exceptions_part(this);
	}
};

Dependent_exceptions_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDependent_exceptions_part(this);
	}
};




PLSQLParser.Dependent_exceptions_partContext = Dependent_exceptions_partContext;

PLSQLParser.prototype.dependent_exceptions_part = function() {

    var localctx = new Dependent_exceptions_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, PLSQLParser.RULE_dependent_exceptions_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1496;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.FORCE) {
            this.state = 1495;
            this.match(PLSQLParser.FORCE);
        }

        this.state = 1498;
        this.match(PLSQLParser.EXCEPTIONS);
        this.state = 1499;
        this.match(PLSQLParser.INTO);
        this.state = 1500;
        this.tableview_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_create_type;
    return this;
}

Create_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_typeContext.prototype.constructor = Create_typeContext;

Create_typeContext.prototype.CREATE = function() {
    return this.getToken(PLSQLParser.CREATE, 0);
};

Create_typeContext.prototype.TYPE = function() {
    return this.getToken(PLSQLParser.TYPE, 0);
};

Create_typeContext.prototype.type_definition = function() {
    return this.getTypedRuleContext(Type_definitionContext,0);
};

Create_typeContext.prototype.type_body = function() {
    return this.getTypedRuleContext(Type_bodyContext,0);
};

Create_typeContext.prototype.OR = function() {
    return this.getToken(PLSQLParser.OR, 0);
};

Create_typeContext.prototype.REPLACE = function() {
    return this.getToken(PLSQLParser.REPLACE, 0);
};

Create_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCreate_type(this);
	}
};

Create_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCreate_type(this);
	}
};




PLSQLParser.Create_typeContext = Create_typeContext;

PLSQLParser.prototype.create_type = function() {

    var localctx = new Create_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, PLSQLParser.RULE_create_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1502;
        this.match(PLSQLParser.CREATE);
        this.state = 1505;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.OR) {
            this.state = 1503;
            this.match(PLSQLParser.OR);
            this.state = 1504;
            this.match(PLSQLParser.REPLACE);
        }

        this.state = 1507;
        this.match(PLSQLParser.TYPE);
        this.state = 1510;
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1508;
            this.type_definition();
            break;

        case 2:
            this.state = 1509;
            this.type_body();
            break;

        }
        this.state = 1512;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_type_definition;
    return this;
}

Type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_definitionContext.prototype.constructor = Type_definitionContext;

Type_definitionContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_definitionContext.prototype.OID = function() {
    return this.getToken(PLSQLParser.OID, 0);
};

Type_definitionContext.prototype.CHAR_STRING = function() {
    return this.getToken(PLSQLParser.CHAR_STRING, 0);
};

Type_definitionContext.prototype.object_type_def = function() {
    return this.getTypedRuleContext(Object_type_defContext,0);
};

Type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterType_definition(this);
	}
};

Type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitType_definition(this);
	}
};




PLSQLParser.Type_definitionContext = Type_definitionContext;

PLSQLParser.prototype.type_definition = function() {

    var localctx = new Type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, PLSQLParser.RULE_type_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1514;
        this.type_name();
        this.state = 1517;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.OID) {
            this.state = 1515;
            this.match(PLSQLParser.OID);
            this.state = 1516;
            this.match(PLSQLParser.CHAR_STRING);
        }

        this.state = 1520;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AS || _la===PLSQLParser.AUTHID || _la===PLSQLParser.IS || _la===PLSQLParser.UNDER) {
            this.state = 1519;
            this.object_type_def();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_object_type_def;
    return this;
}

Object_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_type_defContext.prototype.constructor = Object_type_defContext;

Object_type_defContext.prototype.object_as_part = function() {
    return this.getTypedRuleContext(Object_as_partContext,0);
};

Object_type_defContext.prototype.object_under_part = function() {
    return this.getTypedRuleContext(Object_under_partContext,0);
};

Object_type_defContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Object_type_defContext.prototype.sqlj_object_type = function() {
    return this.getTypedRuleContext(Sqlj_object_typeContext,0);
};

Object_type_defContext.prototype.object_member_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Object_member_specContext);
    } else {
        return this.getTypedRuleContext(Object_member_specContext,i);
    }
};

Object_type_defContext.prototype.modifier_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Modifier_clauseContext);
    } else {
        return this.getTypedRuleContext(Modifier_clauseContext,i);
    }
};

Object_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterObject_type_def(this);
	}
};

Object_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitObject_type_def(this);
	}
};




PLSQLParser.Object_type_defContext = Object_type_defContext;

PLSQLParser.prototype.object_type_def = function() {

    var localctx = new Object_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, PLSQLParser.RULE_object_type_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1523;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AUTHID) {
            this.state = 1522;
            this.invoker_rights_clause();
        }

        this.state = 1527;
        switch(this._input.LA(1)) {
        case PLSQLParser.AS:
        case PLSQLParser.IS:
            this.state = 1525;
            this.object_as_part();
            break;
        case PLSQLParser.UNDER:
            this.state = 1526;
            this.object_under_part();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1530;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.EXTERNAL) {
            this.state = 1529;
            this.sqlj_object_type();
        }

        this.state = 1543;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 1532;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 1533;
            this.object_member_spec();
            this.state = 1538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1534;
                this.match(PLSQLParser.COMMA);
                this.state = 1535;
                this.object_member_spec();
                this.state = 1540;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1541;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 1548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.FINAL || _la===PLSQLParser.INSTANTIABLE || _la===PLSQLParser.NOT || _la===PLSQLParser.OVERRIDING) {
            this.state = 1545;
            this.modifier_clause();
            this.state = 1550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_as_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_object_as_part;
    return this;
}

Object_as_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_as_partContext.prototype.constructor = Object_as_partContext;

Object_as_partContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Object_as_partContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Object_as_partContext.prototype.OBJECT = function() {
    return this.getToken(PLSQLParser.OBJECT, 0);
};

Object_as_partContext.prototype.varray_type_def = function() {
    return this.getTypedRuleContext(Varray_type_defContext,0);
};

Object_as_partContext.prototype.nested_table_type_def = function() {
    return this.getTypedRuleContext(Nested_table_type_defContext,0);
};

Object_as_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterObject_as_part(this);
	}
};

Object_as_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitObject_as_part(this);
	}
};




PLSQLParser.Object_as_partContext = Object_as_partContext;

PLSQLParser.prototype.object_as_part = function() {

    var localctx = new Object_as_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, PLSQLParser.RULE_object_as_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1551;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1555;
        switch(this._input.LA(1)) {
        case PLSQLParser.OBJECT:
            this.state = 1552;
            this.match(PLSQLParser.OBJECT);
            break;
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
            this.state = 1553;
            this.varray_type_def();
            break;
        case PLSQLParser.TABLE:
            this.state = 1554;
            this.nested_table_type_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_under_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_object_under_part;
    return this;
}

Object_under_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_under_partContext.prototype.constructor = Object_under_partContext;

Object_under_partContext.prototype.UNDER = function() {
    return this.getToken(PLSQLParser.UNDER, 0);
};

Object_under_partContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Object_under_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterObject_under_part(this);
	}
};

Object_under_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitObject_under_part(this);
	}
};




PLSQLParser.Object_under_partContext = Object_under_partContext;

PLSQLParser.prototype.object_under_part = function() {

    var localctx = new Object_under_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, PLSQLParser.RULE_object_under_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1557;
        this.match(PLSQLParser.UNDER);
        this.state = 1558;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nested_table_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_nested_table_type_def;
    return this;
}

Nested_table_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nested_table_type_defContext.prototype.constructor = Nested_table_type_defContext;

Nested_table_type_defContext.prototype.TABLE = function() {
    return this.getToken(PLSQLParser.TABLE, 0);
};

Nested_table_type_defContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Nested_table_type_defContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Nested_table_type_defContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Nested_table_type_defContext.prototype.NULL = function() {
    return this.getToken(PLSQLParser.NULL, 0);
};

Nested_table_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterNested_table_type_def(this);
	}
};

Nested_table_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitNested_table_type_def(this);
	}
};




PLSQLParser.Nested_table_type_defContext = Nested_table_type_defContext;

PLSQLParser.prototype.nested_table_type_def = function() {

    var localctx = new Nested_table_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, PLSQLParser.RULE_nested_table_type_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1560;
        this.match(PLSQLParser.TABLE);
        this.state = 1561;
        this.match(PLSQLParser.OF);
        this.state = 1562;
        this.type_spec();
        this.state = 1565;
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        if(la_===1) {
            this.state = 1563;
            this.match(PLSQLParser.NOT);
            this.state = 1564;
            this.match(PLSQLParser.NULL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sqlj_object_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_sqlj_object_type;
    return this;
}

Sqlj_object_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sqlj_object_typeContext.prototype.constructor = Sqlj_object_typeContext;

Sqlj_object_typeContext.prototype.EXTERNAL = function() {
    return this.getToken(PLSQLParser.EXTERNAL, 0);
};

Sqlj_object_typeContext.prototype.NAME = function() {
    return this.getToken(PLSQLParser.NAME, 0);
};

Sqlj_object_typeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Sqlj_object_typeContext.prototype.LANGUAGE = function() {
    return this.getToken(PLSQLParser.LANGUAGE, 0);
};

Sqlj_object_typeContext.prototype.JAVA = function() {
    return this.getToken(PLSQLParser.JAVA, 0);
};

Sqlj_object_typeContext.prototype.USING = function() {
    return this.getToken(PLSQLParser.USING, 0);
};

Sqlj_object_typeContext.prototype.SQLDATA = function() {
    return this.getToken(PLSQLParser.SQLDATA, 0);
};

Sqlj_object_typeContext.prototype.CUSTOMDATUM = function() {
    return this.getToken(PLSQLParser.CUSTOMDATUM, 0);
};

Sqlj_object_typeContext.prototype.ORADATA = function() {
    return this.getToken(PLSQLParser.ORADATA, 0);
};

Sqlj_object_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSqlj_object_type(this);
	}
};

Sqlj_object_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSqlj_object_type(this);
	}
};




PLSQLParser.Sqlj_object_typeContext = Sqlj_object_typeContext;

PLSQLParser.prototype.sqlj_object_type = function() {

    var localctx = new Sqlj_object_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, PLSQLParser.RULE_sqlj_object_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1567;
        this.match(PLSQLParser.EXTERNAL);
        this.state = 1568;
        this.match(PLSQLParser.NAME);
        this.state = 1569;
        this.expression();
        this.state = 1570;
        this.match(PLSQLParser.LANGUAGE);
        this.state = 1571;
        this.match(PLSQLParser.JAVA);
        this.state = 1572;
        this.match(PLSQLParser.USING);
        this.state = 1573;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.CUSTOMDATUM || _la===PLSQLParser.ORADATA || _la===PLSQLParser.SQLDATA)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_type_body;
    return this;
}

Type_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_bodyContext.prototype.constructor = Type_bodyContext;

Type_bodyContext.prototype.BODY = function() {
    return this.getToken(PLSQLParser.BODY, 0);
};

Type_bodyContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_bodyContext.prototype.type_body_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_body_elementsContext);
    } else {
        return this.getTypedRuleContext(Type_body_elementsContext,i);
    }
};

Type_bodyContext.prototype.END = function() {
    return this.getToken(PLSQLParser.END, 0);
};

Type_bodyContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Type_bodyContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Type_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterType_body(this);
	}
};

Type_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitType_body(this);
	}
};




PLSQLParser.Type_bodyContext = Type_bodyContext;

PLSQLParser.prototype.type_body = function() {

    var localctx = new Type_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, PLSQLParser.RULE_type_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1575;
        this.match(PLSQLParser.BODY);
        this.state = 1576;
        this.type_name();
        this.state = 1577;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1578;
        this.type_body_elements();
        this.state = 1583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 1579;
            this.match(PLSQLParser.COMMA);
            this.state = 1580;
            this.type_body_elements();
            this.state = 1585;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1586;
        this.match(PLSQLParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_body_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_type_body_elements;
    return this;
}

Type_body_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_body_elementsContext.prototype.constructor = Type_body_elementsContext;

Type_body_elementsContext.prototype.map_order_func_declaration = function() {
    return this.getTypedRuleContext(Map_order_func_declarationContext,0);
};

Type_body_elementsContext.prototype.subprog_decl_in_type = function() {
    return this.getTypedRuleContext(Subprog_decl_in_typeContext,0);
};

Type_body_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterType_body_elements(this);
	}
};

Type_body_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitType_body_elements(this);
	}
};




PLSQLParser.Type_body_elementsContext = Type_body_elementsContext;

PLSQLParser.prototype.type_body_elements = function() {

    var localctx = new Type_body_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, PLSQLParser.RULE_type_body_elements);
    try {
        this.state = 1590;
        switch(this._input.LA(1)) {
        case PLSQLParser.MAP:
        case PLSQLParser.ORDER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1588;
            this.map_order_func_declaration();
            break;
        case PLSQLParser.MEMBER:
        case PLSQLParser.STATIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1589;
            this.subprog_decl_in_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Map_order_func_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_map_order_func_declaration;
    return this;
}

Map_order_func_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Map_order_func_declarationContext.prototype.constructor = Map_order_func_declarationContext;

Map_order_func_declarationContext.prototype.MEMBER = function() {
    return this.getToken(PLSQLParser.MEMBER, 0);
};

Map_order_func_declarationContext.prototype.func_decl_in_type = function() {
    return this.getTypedRuleContext(Func_decl_in_typeContext,0);
};

Map_order_func_declarationContext.prototype.MAP = function() {
    return this.getToken(PLSQLParser.MAP, 0);
};

Map_order_func_declarationContext.prototype.ORDER = function() {
    return this.getToken(PLSQLParser.ORDER, 0);
};

Map_order_func_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMap_order_func_declaration(this);
	}
};

Map_order_func_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMap_order_func_declaration(this);
	}
};




PLSQLParser.Map_order_func_declarationContext = Map_order_func_declarationContext;

PLSQLParser.prototype.map_order_func_declaration = function() {

    var localctx = new Map_order_func_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, PLSQLParser.RULE_map_order_func_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1592;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.MAP || _la===PLSQLParser.ORDER)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1593;
        this.match(PLSQLParser.MEMBER);
        this.state = 1594;
        this.func_decl_in_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subprog_decl_in_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_subprog_decl_in_type;
    return this;
}

Subprog_decl_in_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprog_decl_in_typeContext.prototype.constructor = Subprog_decl_in_typeContext;

Subprog_decl_in_typeContext.prototype.MEMBER = function() {
    return this.getToken(PLSQLParser.MEMBER, 0);
};

Subprog_decl_in_typeContext.prototype.STATIC = function() {
    return this.getToken(PLSQLParser.STATIC, 0);
};

Subprog_decl_in_typeContext.prototype.proc_decl_in_type = function() {
    return this.getTypedRuleContext(Proc_decl_in_typeContext,0);
};

Subprog_decl_in_typeContext.prototype.func_decl_in_type = function() {
    return this.getTypedRuleContext(Func_decl_in_typeContext,0);
};

Subprog_decl_in_typeContext.prototype.constructor_declaration = function() {
    return this.getTypedRuleContext(Constructor_declarationContext,0);
};

Subprog_decl_in_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSubprog_decl_in_type(this);
	}
};

Subprog_decl_in_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSubprog_decl_in_type(this);
	}
};




PLSQLParser.Subprog_decl_in_typeContext = Subprog_decl_in_typeContext;

PLSQLParser.prototype.subprog_decl_in_type = function() {

    var localctx = new Subprog_decl_in_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, PLSQLParser.RULE_subprog_decl_in_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1596;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.MEMBER || _la===PLSQLParser.STATIC)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1600;
        switch(this._input.LA(1)) {
        case PLSQLParser.PROCEDURE:
            this.state = 1597;
            this.proc_decl_in_type();
            break;
        case PLSQLParser.FUNCTION:
            this.state = 1598;
            this.func_decl_in_type();
            break;
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.FINAL:
        case PLSQLParser.INSTANTIABLE:
            this.state = 1599;
            this.constructor_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Proc_decl_in_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_proc_decl_in_type;
    return this;
}

Proc_decl_in_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Proc_decl_in_typeContext.prototype.constructor = Proc_decl_in_typeContext;

Proc_decl_in_typeContext.prototype.PROCEDURE = function() {
    return this.getToken(PLSQLParser.PROCEDURE, 0);
};

Proc_decl_in_typeContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Proc_decl_in_typeContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Proc_decl_in_typeContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Proc_decl_in_typeContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Proc_decl_in_typeContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Proc_decl_in_typeContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Proc_decl_in_typeContext.prototype.DECLARE = function() {
    return this.getToken(PLSQLParser.DECLARE, 0);
};

Proc_decl_in_typeContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Proc_decl_in_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterProc_decl_in_type(this);
	}
};

Proc_decl_in_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitProc_decl_in_type(this);
	}
};




PLSQLParser.Proc_decl_in_typeContext = Proc_decl_in_typeContext;

PLSQLParser.prototype.proc_decl_in_type = function() {

    var localctx = new Proc_decl_in_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, PLSQLParser.RULE_proc_decl_in_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1602;
        this.match(PLSQLParser.PROCEDURE);
        this.state = 1603;
        this.procedure_name();
        this.state = 1604;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 1605;
        this.type_elements_parameter();
        this.state = 1610;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 1606;
            this.match(PLSQLParser.COMMA);
            this.state = 1607;
            this.type_elements_parameter();
            this.state = 1612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1613;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 1614;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1628;
        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1615;
            this.call_spec();
            break;

        case 2:
            this.state = 1617;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.DECLARE) {
                this.state = 1616;
                this.match(PLSQLParser.DECLARE);
            }

            this.state = 1622;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CREATE - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
                this.state = 1619;
                this.declare_spec();
                this.state = 1624;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1625;
            this.body();
            this.state = 1626;
            this.match(PLSQLParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_decl_in_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_func_decl_in_type;
    return this;
}

Func_decl_in_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_decl_in_typeContext.prototype.constructor = Func_decl_in_typeContext;

Func_decl_in_typeContext.prototype.FUNCTION = function() {
    return this.getToken(PLSQLParser.FUNCTION, 0);
};

Func_decl_in_typeContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Func_decl_in_typeContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Func_decl_in_typeContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Func_decl_in_typeContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Func_decl_in_typeContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Func_decl_in_typeContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Func_decl_in_typeContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Func_decl_in_typeContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Func_decl_in_typeContext.prototype.DECLARE = function() {
    return this.getToken(PLSQLParser.DECLARE, 0);
};

Func_decl_in_typeContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Func_decl_in_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFunc_decl_in_type(this);
	}
};

Func_decl_in_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFunc_decl_in_type(this);
	}
};




PLSQLParser.Func_decl_in_typeContext = Func_decl_in_typeContext;

PLSQLParser.prototype.func_decl_in_type = function() {

    var localctx = new Func_decl_in_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, PLSQLParser.RULE_func_decl_in_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1630;
        this.match(PLSQLParser.FUNCTION);
        this.state = 1631;
        this.function_name();
        this.state = 1643;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 1632;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 1633;
            this.type_elements_parameter();
            this.state = 1638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1634;
                this.match(PLSQLParser.COMMA);
                this.state = 1635;
                this.type_elements_parameter();
                this.state = 1640;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1641;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 1645;
        this.match(PLSQLParser.RETURN);
        this.state = 1646;
        this.type_spec();
        this.state = 1647;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1661;
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1648;
            this.call_spec();
            break;

        case 2:
            this.state = 1650;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.DECLARE) {
                this.state = 1649;
                this.match(PLSQLParser.DECLARE);
            }

            this.state = 1655;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CREATE - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
                this.state = 1652;
                this.declare_spec();
                this.state = 1657;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1658;
            this.body();
            this.state = 1659;
            this.match(PLSQLParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_constructor_declaration;
    return this;
}

Constructor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_declarationContext.prototype.constructor = Constructor_declarationContext;

Constructor_declarationContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(PLSQLParser.CONSTRUCTOR, 0);
};

Constructor_declarationContext.prototype.FUNCTION = function() {
    return this.getToken(PLSQLParser.FUNCTION, 0);
};

Constructor_declarationContext.prototype.type_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_specContext);
    } else {
        return this.getTypedRuleContext(Type_specContext,i);
    }
};

Constructor_declarationContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Constructor_declarationContext.prototype.SELF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.SELF);
    } else {
        return this.getToken(PLSQLParser.SELF, i);
    }
};


Constructor_declarationContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.AS);
    } else {
        return this.getToken(PLSQLParser.AS, i);
    }
};


Constructor_declarationContext.prototype.RESULT = function() {
    return this.getToken(PLSQLParser.RESULT, 0);
};

Constructor_declarationContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Constructor_declarationContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Constructor_declarationContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Constructor_declarationContext.prototype.FINAL = function() {
    return this.getToken(PLSQLParser.FINAL, 0);
};

Constructor_declarationContext.prototype.INSTANTIABLE = function() {
    return this.getToken(PLSQLParser.INSTANTIABLE, 0);
};

Constructor_declarationContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Constructor_declarationContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Constructor_declarationContext.prototype.OUT = function() {
    return this.getToken(PLSQLParser.OUT, 0);
};

Constructor_declarationContext.prototype.DECLARE = function() {
    return this.getToken(PLSQLParser.DECLARE, 0);
};

Constructor_declarationContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Constructor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConstructor_declaration(this);
	}
};

Constructor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConstructor_declaration(this);
	}
};




PLSQLParser.Constructor_declarationContext = Constructor_declarationContext;

PLSQLParser.prototype.constructor_declaration = function() {

    var localctx = new Constructor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, PLSQLParser.RULE_constructor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1664;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.FINAL) {
            this.state = 1663;
            this.match(PLSQLParser.FINAL);
        }

        this.state = 1667;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.INSTANTIABLE) {
            this.state = 1666;
            this.match(PLSQLParser.INSTANTIABLE);
        }

        this.state = 1669;
        this.match(PLSQLParser.CONSTRUCTOR);
        this.state = 1670;
        this.match(PLSQLParser.FUNCTION);
        this.state = 1671;
        this.type_spec();
        this.state = 1689;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 1672;
            this.match(PLSQLParser.LEFT_PAREN);

            this.state = 1673;
            this.match(PLSQLParser.SELF);
            this.state = 1674;
            this.match(PLSQLParser.IN);
            this.state = 1675;
            this.match(PLSQLParser.OUT);
            this.state = 1676;
            this.type_spec();
            this.state = 1677;
            this.match(PLSQLParser.COMMA);
            this.state = 1679;
            this.type_elements_parameter();
            this.state = 1684;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1680;
                this.match(PLSQLParser.COMMA);
                this.state = 1681;
                this.type_elements_parameter();
                this.state = 1686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1687;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 1691;
        this.match(PLSQLParser.RETURN);
        this.state = 1692;
        this.match(PLSQLParser.SELF);
        this.state = 1693;
        this.match(PLSQLParser.AS);
        this.state = 1694;
        this.match(PLSQLParser.RESULT);
        this.state = 1695;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1709;
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1696;
            this.call_spec();
            break;

        case 2:
            this.state = 1698;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.DECLARE) {
                this.state = 1697;
                this.match(PLSQLParser.DECLARE);
            }

            this.state = 1703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CREATE - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
                this.state = 1700;
                this.declare_spec();
                this.state = 1705;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1706;
            this.body();
            this.state = 1707;
            this.match(PLSQLParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Modifier_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_modifier_clause;
    return this;
}

Modifier_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Modifier_clauseContext.prototype.constructor = Modifier_clauseContext;

Modifier_clauseContext.prototype.INSTANTIABLE = function() {
    return this.getToken(PLSQLParser.INSTANTIABLE, 0);
};

Modifier_clauseContext.prototype.FINAL = function() {
    return this.getToken(PLSQLParser.FINAL, 0);
};

Modifier_clauseContext.prototype.OVERRIDING = function() {
    return this.getToken(PLSQLParser.OVERRIDING, 0);
};

Modifier_clauseContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Modifier_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModifier_clause(this);
	}
};

Modifier_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModifier_clause(this);
	}
};




PLSQLParser.Modifier_clauseContext = Modifier_clauseContext;

PLSQLParser.prototype.modifier_clause = function() {

    var localctx = new Modifier_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, PLSQLParser.RULE_modifier_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1712;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NOT) {
            this.state = 1711;
            this.match(PLSQLParser.NOT);
        }

        this.state = 1714;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.FINAL || _la===PLSQLParser.INSTANTIABLE || _la===PLSQLParser.OVERRIDING)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_member_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_object_member_spec;
    return this;
}

Object_member_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_member_specContext.prototype.constructor = Object_member_specContext;

Object_member_specContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Object_member_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Object_member_specContext.prototype.sqlj_object_type_attr = function() {
    return this.getTypedRuleContext(Sqlj_object_type_attrContext,0);
};

Object_member_specContext.prototype.element_spec = function() {
    return this.getTypedRuleContext(Element_specContext,0);
};

Object_member_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterObject_member_spec(this);
	}
};

Object_member_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitObject_member_spec(this);
	}
};




PLSQLParser.Object_member_specContext = Object_member_specContext;

PLSQLParser.prototype.object_member_spec = function() {

    var localctx = new Object_member_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, PLSQLParser.RULE_object_member_spec);
    var _la = 0; // Token type
    try {
        this.state = 1722;
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1716;
            this.id();
            this.state = 1717;
            this.type_spec();
            this.state = 1719;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.EXTERNAL) {
                this.state = 1718;
                this.sqlj_object_type_attr();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1721;
            this.element_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sqlj_object_type_attrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_sqlj_object_type_attr;
    return this;
}

Sqlj_object_type_attrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sqlj_object_type_attrContext.prototype.constructor = Sqlj_object_type_attrContext;

Sqlj_object_type_attrContext.prototype.EXTERNAL = function() {
    return this.getToken(PLSQLParser.EXTERNAL, 0);
};

Sqlj_object_type_attrContext.prototype.NAME = function() {
    return this.getToken(PLSQLParser.NAME, 0);
};

Sqlj_object_type_attrContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Sqlj_object_type_attrContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSqlj_object_type_attr(this);
	}
};

Sqlj_object_type_attrContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSqlj_object_type_attr(this);
	}
};




PLSQLParser.Sqlj_object_type_attrContext = Sqlj_object_type_attrContext;

PLSQLParser.prototype.sqlj_object_type_attr = function() {

    var localctx = new Sqlj_object_type_attrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, PLSQLParser.RULE_sqlj_object_type_attr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1724;
        this.match(PLSQLParser.EXTERNAL);
        this.state = 1725;
        this.match(PLSQLParser.NAME);
        this.state = 1726;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Element_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_element_spec;
    return this;
}

Element_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_specContext.prototype.constructor = Element_specContext;

Element_specContext.prototype.modifier_clause = function() {
    return this.getTypedRuleContext(Modifier_clauseContext,0);
};

Element_specContext.prototype.element_spec_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Element_spec_optionsContext);
    } else {
        return this.getTypedRuleContext(Element_spec_optionsContext,i);
    }
};

Element_specContext.prototype.pragma_clause = function() {
    return this.getTypedRuleContext(Pragma_clauseContext,0);
};

Element_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterElement_spec(this);
	}
};

Element_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitElement_spec(this);
	}
};




PLSQLParser.Element_specContext = Element_specContext;

PLSQLParser.prototype.element_spec = function() {

    var localctx = new Element_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, PLSQLParser.RULE_element_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1729;
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        if(la_===1) {
            this.state = 1728;
            this.modifier_clause();

        }
        this.state = 1732; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1731;
            this.element_spec_options();
            this.state = 1734; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLSQLParser.CONSTRUCTOR || _la===PLSQLParser.FINAL || _la===PLSQLParser.INSTANTIABLE || _la===PLSQLParser.MAP || _la===PLSQLParser.MEMBER || _la===PLSQLParser.ORDER || _la===PLSQLParser.STATIC);
        this.state = 1738;
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        if(la_===1) {
            this.state = 1736;
            this.match(PLSQLParser.COMMA);
            this.state = 1737;
            this.pragma_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Element_spec_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_element_spec_options;
    return this;
}

Element_spec_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_spec_optionsContext.prototype.constructor = Element_spec_optionsContext;

Element_spec_optionsContext.prototype.subprogram_spec = function() {
    return this.getTypedRuleContext(Subprogram_specContext,0);
};

Element_spec_optionsContext.prototype.constructor_spec = function() {
    return this.getTypedRuleContext(Constructor_specContext,0);
};

Element_spec_optionsContext.prototype.map_order_function_spec = function() {
    return this.getTypedRuleContext(Map_order_function_specContext,0);
};

Element_spec_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterElement_spec_options(this);
	}
};

Element_spec_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitElement_spec_options(this);
	}
};




PLSQLParser.Element_spec_optionsContext = Element_spec_optionsContext;

PLSQLParser.prototype.element_spec_options = function() {

    var localctx = new Element_spec_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, PLSQLParser.RULE_element_spec_options);
    try {
        this.state = 1743;
        switch(this._input.LA(1)) {
        case PLSQLParser.MEMBER:
        case PLSQLParser.STATIC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1740;
            this.subprogram_spec();
            break;
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.FINAL:
        case PLSQLParser.INSTANTIABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1741;
            this.constructor_spec();
            break;
        case PLSQLParser.MAP:
        case PLSQLParser.ORDER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1742;
            this.map_order_function_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subprogram_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_subprogram_spec;
    return this;
}

Subprogram_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_specContext.prototype.constructor = Subprogram_specContext;

Subprogram_specContext.prototype.MEMBER = function() {
    return this.getToken(PLSQLParser.MEMBER, 0);
};

Subprogram_specContext.prototype.STATIC = function() {
    return this.getToken(PLSQLParser.STATIC, 0);
};

Subprogram_specContext.prototype.type_procedure_spec = function() {
    return this.getTypedRuleContext(Type_procedure_specContext,0);
};

Subprogram_specContext.prototype.type_function_spec = function() {
    return this.getTypedRuleContext(Type_function_specContext,0);
};

Subprogram_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSubprogram_spec(this);
	}
};

Subprogram_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSubprogram_spec(this);
	}
};




PLSQLParser.Subprogram_specContext = Subprogram_specContext;

PLSQLParser.prototype.subprogram_spec = function() {

    var localctx = new Subprogram_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, PLSQLParser.RULE_subprogram_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1745;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.MEMBER || _la===PLSQLParser.STATIC)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1748;
        switch(this._input.LA(1)) {
        case PLSQLParser.PROCEDURE:
            this.state = 1746;
            this.type_procedure_spec();
            break;
        case PLSQLParser.FUNCTION:
            this.state = 1747;
            this.type_function_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_procedure_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_type_procedure_spec;
    return this;
}

Type_procedure_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_procedure_specContext.prototype.constructor = Type_procedure_specContext;

Type_procedure_specContext.prototype.PROCEDURE = function() {
    return this.getToken(PLSQLParser.PROCEDURE, 0);
};

Type_procedure_specContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Type_procedure_specContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Type_procedure_specContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Type_procedure_specContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Type_procedure_specContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Type_procedure_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterType_procedure_spec(this);
	}
};

Type_procedure_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitType_procedure_spec(this);
	}
};




PLSQLParser.Type_procedure_specContext = Type_procedure_specContext;

PLSQLParser.prototype.type_procedure_spec = function() {

    var localctx = new Type_procedure_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, PLSQLParser.RULE_type_procedure_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1750;
        this.match(PLSQLParser.PROCEDURE);
        this.state = 1751;
        this.procedure_name();
        this.state = 1752;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 1753;
        this.type_elements_parameter();
        this.state = 1758;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 1754;
            this.match(PLSQLParser.COMMA);
            this.state = 1755;
            this.type_elements_parameter();
            this.state = 1760;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1761;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 1764;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AS || _la===PLSQLParser.IS) {
            this.state = 1762;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1763;
            this.call_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_function_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_type_function_spec;
    return this;
}

Type_function_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_function_specContext.prototype.constructor = Type_function_specContext;

Type_function_specContext.prototype.FUNCTION = function() {
    return this.getToken(PLSQLParser.FUNCTION, 0);
};

Type_function_specContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Type_function_specContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Type_function_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Type_function_specContext.prototype.SELF = function() {
    return this.getToken(PLSQLParser.SELF, 0);
};

Type_function_specContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.AS);
    } else {
        return this.getToken(PLSQLParser.AS, i);
    }
};


Type_function_specContext.prototype.RESULT = function() {
    return this.getToken(PLSQLParser.RESULT, 0);
};

Type_function_specContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Type_function_specContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Type_function_specContext.prototype.EXTERNAL = function() {
    return this.getToken(PLSQLParser.EXTERNAL, 0);
};

Type_function_specContext.prototype.NAME = function() {
    return this.getToken(PLSQLParser.NAME, 0);
};

Type_function_specContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Type_function_specContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Type_function_specContext.prototype.VARIABLE = function() {
    return this.getToken(PLSQLParser.VARIABLE, 0);
};

Type_function_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterType_function_spec(this);
	}
};

Type_function_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitType_function_spec(this);
	}
};




PLSQLParser.Type_function_specContext = Type_function_specContext;

PLSQLParser.prototype.type_function_spec = function() {

    var localctx = new Type_function_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, PLSQLParser.RULE_type_function_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1766;
        this.match(PLSQLParser.FUNCTION);
        this.state = 1767;
        this.function_name();
        this.state = 1779;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 1768;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 1769;
            this.type_elements_parameter();
            this.state = 1774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1770;
                this.match(PLSQLParser.COMMA);
                this.state = 1771;
                this.type_elements_parameter();
                this.state = 1776;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1777;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 1781;
        this.match(PLSQLParser.RETURN);
        this.state = 1786;
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1782;
            this.type_spec();
            break;

        case 2:
            this.state = 1783;
            this.match(PLSQLParser.SELF);
            this.state = 1784;
            this.match(PLSQLParser.AS);
            this.state = 1785;
            this.match(PLSQLParser.RESULT);
            break;

        }
        this.state = 1796;
        switch (this._input.LA(1)) {
        case PLSQLParser.AS:
        case PLSQLParser.IS:
        	this.state = 1788;
        	_la = this._input.LA(1);
        	if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        	    this.consume();
        	}
        	this.state = 1789;
        	this.call_spec();
        	break;
        case PLSQLParser.EXTERNAL:
        	this.state = 1790;
        	this.match(PLSQLParser.EXTERNAL);
        	this.state = 1792;
        	_la = this._input.LA(1);
        	if(_la===PLSQLParser.VARIABLE) {
        	    this.state = 1791;
        	    this.match(PLSQLParser.VARIABLE);
        	}

        	this.state = 1794;
        	this.match(PLSQLParser.NAME);
        	this.state = 1795;
        	this.expression();
        	break;
        case PLSQLParser.CASCADE:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.FINAL:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.MAP:
        case PLSQLParser.MEMBER:
        case PLSQLParser.ORDER:
        case PLSQLParser.STATIC:
        case PLSQLParser.RIGHT_PAREN:
        case PLSQLParser.COMMA:
        case PLSQLParser.SEMICOLON:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_constructor_spec;
    return this;
}

Constructor_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_specContext.prototype.constructor = Constructor_specContext;

Constructor_specContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(PLSQLParser.CONSTRUCTOR, 0);
};

Constructor_specContext.prototype.FUNCTION = function() {
    return this.getToken(PLSQLParser.FUNCTION, 0);
};

Constructor_specContext.prototype.type_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_specContext);
    } else {
        return this.getTypedRuleContext(Type_specContext,i);
    }
};

Constructor_specContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Constructor_specContext.prototype.SELF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.SELF);
    } else {
        return this.getToken(PLSQLParser.SELF, i);
    }
};


Constructor_specContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.AS);
    } else {
        return this.getToken(PLSQLParser.AS, i);
    }
};


Constructor_specContext.prototype.RESULT = function() {
    return this.getToken(PLSQLParser.RESULT, 0);
};

Constructor_specContext.prototype.FINAL = function() {
    return this.getToken(PLSQLParser.FINAL, 0);
};

Constructor_specContext.prototype.INSTANTIABLE = function() {
    return this.getToken(PLSQLParser.INSTANTIABLE, 0);
};

Constructor_specContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Constructor_specContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Constructor_specContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Constructor_specContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Constructor_specContext.prototype.OUT = function() {
    return this.getToken(PLSQLParser.OUT, 0);
};

Constructor_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConstructor_spec(this);
	}
};

Constructor_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConstructor_spec(this);
	}
};




PLSQLParser.Constructor_specContext = Constructor_specContext;

PLSQLParser.prototype.constructor_spec = function() {

    var localctx = new Constructor_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, PLSQLParser.RULE_constructor_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1799;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.FINAL) {
            this.state = 1798;
            this.match(PLSQLParser.FINAL);
        }

        this.state = 1802;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.INSTANTIABLE) {
            this.state = 1801;
            this.match(PLSQLParser.INSTANTIABLE);
        }

        this.state = 1804;
        this.match(PLSQLParser.CONSTRUCTOR);
        this.state = 1805;
        this.match(PLSQLParser.FUNCTION);
        this.state = 1806;
        this.type_spec();
        this.state = 1824;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 1807;
            this.match(PLSQLParser.LEFT_PAREN);

            this.state = 1808;
            this.match(PLSQLParser.SELF);
            this.state = 1809;
            this.match(PLSQLParser.IN);
            this.state = 1810;
            this.match(PLSQLParser.OUT);
            this.state = 1811;
            this.type_spec();
            this.state = 1812;
            this.match(PLSQLParser.COMMA);
            this.state = 1814;
            this.type_elements_parameter();
            this.state = 1819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1815;
                this.match(PLSQLParser.COMMA);
                this.state = 1816;
                this.type_elements_parameter();
                this.state = 1821;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1822;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 1826;
        this.match(PLSQLParser.RETURN);
        this.state = 1827;
        this.match(PLSQLParser.SELF);
        this.state = 1828;
        this.match(PLSQLParser.AS);
        this.state = 1829;
        this.match(PLSQLParser.RESULT);
        this.state = 1832;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AS || _la===PLSQLParser.IS) {
            this.state = 1830;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.AS || _la===PLSQLParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1831;
            this.call_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Map_order_function_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_map_order_function_spec;
    return this;
}

Map_order_function_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Map_order_function_specContext.prototype.constructor = Map_order_function_specContext;

Map_order_function_specContext.prototype.MEMBER = function() {
    return this.getToken(PLSQLParser.MEMBER, 0);
};

Map_order_function_specContext.prototype.type_function_spec = function() {
    return this.getTypedRuleContext(Type_function_specContext,0);
};

Map_order_function_specContext.prototype.MAP = function() {
    return this.getToken(PLSQLParser.MAP, 0);
};

Map_order_function_specContext.prototype.ORDER = function() {
    return this.getToken(PLSQLParser.ORDER, 0);
};

Map_order_function_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMap_order_function_spec(this);
	}
};

Map_order_function_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMap_order_function_spec(this);
	}
};




PLSQLParser.Map_order_function_specContext = Map_order_function_specContext;

PLSQLParser.prototype.map_order_function_spec = function() {

    var localctx = new Map_order_function_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, PLSQLParser.RULE_map_order_function_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1834;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.MAP || _la===PLSQLParser.ORDER)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1835;
        this.match(PLSQLParser.MEMBER);
        this.state = 1836;
        this.type_function_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_pragma_clause;
    return this;
}

Pragma_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_clauseContext.prototype.constructor = Pragma_clauseContext;

Pragma_clauseContext.prototype.PRAGMA = function() {
    return this.getToken(PLSQLParser.PRAGMA, 0);
};

Pragma_clauseContext.prototype.RESTRICT_REFERENCES = function() {
    return this.getToken(PLSQLParser.RESTRICT_REFERENCES, 0);
};

Pragma_clauseContext.prototype.pragma_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pragma_elementsContext);
    } else {
        return this.getTypedRuleContext(Pragma_elementsContext,i);
    }
};

Pragma_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPragma_clause(this);
	}
};

Pragma_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPragma_clause(this);
	}
};




PLSQLParser.Pragma_clauseContext = Pragma_clauseContext;

PLSQLParser.prototype.pragma_clause = function() {

    var localctx = new Pragma_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, PLSQLParser.RULE_pragma_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1838;
        this.match(PLSQLParser.PRAGMA);
        this.state = 1839;
        this.match(PLSQLParser.RESTRICT_REFERENCES);
        this.state = 1840;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 1841;
        this.pragma_elements();
        this.state = 1846;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 1842;
            this.match(PLSQLParser.COMMA);
            this.state = 1843;
            this.pragma_elements();
            this.state = 1848;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1849;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_pragma_elements;
    return this;
}

Pragma_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_elementsContext.prototype.constructor = Pragma_elementsContext;

Pragma_elementsContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Pragma_elementsContext.prototype.DEFAULT = function() {
    return this.getToken(PLSQLParser.DEFAULT, 0);
};

Pragma_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPragma_elements(this);
	}
};

Pragma_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPragma_elements(this);
	}
};




PLSQLParser.Pragma_elementsContext = Pragma_elementsContext;

PLSQLParser.prototype.pragma_elements = function() {

    var localctx = new Pragma_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, PLSQLParser.RULE_pragma_elements);
    try {
        this.state = 1853;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 1851;
            this.id();
            break;
        case PLSQLParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1852;
            this.match(PLSQLParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_elements_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_type_elements_parameter;
    return this;
}

Type_elements_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_elements_parameterContext.prototype.constructor = Type_elements_parameterContext;

Type_elements_parameterContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

Type_elements_parameterContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Type_elements_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterType_elements_parameter(this);
	}
};

Type_elements_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitType_elements_parameter(this);
	}
};




PLSQLParser.Type_elements_parameterContext = Type_elements_parameterContext;

PLSQLParser.prototype.type_elements_parameter = function() {

    var localctx = new Type_elements_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, PLSQLParser.RULE_type_elements_parameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1855;
        this.parameter_name();
        this.state = 1856;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_drop_sequence;
    return this;
}

Drop_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_sequenceContext.prototype.constructor = Drop_sequenceContext;

Drop_sequenceContext.prototype.DROP = function() {
    return this.getToken(PLSQLParser.DROP, 0);
};

Drop_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(PLSQLParser.SEQUENCE, 0);
};

Drop_sequenceContext.prototype.sequence_name = function() {
    return this.getTypedRuleContext(Sequence_nameContext,0);
};

Drop_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDrop_sequence(this);
	}
};

Drop_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDrop_sequence(this);
	}
};




PLSQLParser.Drop_sequenceContext = Drop_sequenceContext;

PLSQLParser.prototype.drop_sequence = function() {

    var localctx = new Drop_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, PLSQLParser.RULE_drop_sequence);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1858;
        this.match(PLSQLParser.DROP);
        this.state = 1859;
        this.match(PLSQLParser.SEQUENCE);
        this.state = 1860;
        this.sequence_name();
        this.state = 1861;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alter_sequence;
    return this;
}

Alter_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_sequenceContext.prototype.constructor = Alter_sequenceContext;

Alter_sequenceContext.prototype.ALTER = function() {
    return this.getToken(PLSQLParser.ALTER, 0);
};

Alter_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(PLSQLParser.SEQUENCE, 0);
};

Alter_sequenceContext.prototype.sequence_name = function() {
    return this.getTypedRuleContext(Sequence_nameContext,0);
};

Alter_sequenceContext.prototype.sequence_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_specContext);
    } else {
        return this.getTypedRuleContext(Sequence_specContext,i);
    }
};

Alter_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlter_sequence(this);
	}
};

Alter_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlter_sequence(this);
	}
};




PLSQLParser.Alter_sequenceContext = Alter_sequenceContext;

PLSQLParser.prototype.alter_sequence = function() {

    var localctx = new Alter_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, PLSQLParser.RULE_alter_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1863;
        this.match(PLSQLParser.ALTER);
        this.state = 1864;
        this.match(PLSQLParser.SEQUENCE);
        this.state = 1865;
        this.sequence_name();
        this.state = 1867; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1866;
            this.sequence_spec();
            this.state = 1869; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLSQLParser.CACHE || _la===PLSQLParser.CYCLE || _la===PLSQLParser.INCREMENT || ((((_la - 214)) & ~0x1f) == 0 && ((1 << (_la - 214)) & ((1 << (PLSQLParser.MAXVALUE - 214)) | (1 << (PLSQLParser.MINVALUE - 214)) | (1 << (PLSQLParser.NOCACHE - 214)) | (1 << (PLSQLParser.NOCYCLE - 214)) | (1 << (PLSQLParser.NOMAXVALUE - 214)) | (1 << (PLSQLParser.NOMINVALUE - 214)))) !== 0) || _la===PLSQLParser.NOORDER || _la===PLSQLParser.ORDER);
        this.state = 1871;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_create_sequence;
    return this;
}

Create_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_sequenceContext.prototype.constructor = Create_sequenceContext;

Create_sequenceContext.prototype.CREATE = function() {
    return this.getToken(PLSQLParser.CREATE, 0);
};

Create_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(PLSQLParser.SEQUENCE, 0);
};

Create_sequenceContext.prototype.sequence_name = function() {
    return this.getTypedRuleContext(Sequence_nameContext,0);
};

Create_sequenceContext.prototype.sequence_start_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_start_clauseContext);
    } else {
        return this.getTypedRuleContext(Sequence_start_clauseContext,i);
    }
};

Create_sequenceContext.prototype.sequence_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_specContext);
    } else {
        return this.getTypedRuleContext(Sequence_specContext,i);
    }
};

Create_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCreate_sequence(this);
	}
};

Create_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCreate_sequence(this);
	}
};




PLSQLParser.Create_sequenceContext = Create_sequenceContext;

PLSQLParser.prototype.create_sequence = function() {

    var localctx = new Create_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, PLSQLParser.RULE_create_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1873;
        this.match(PLSQLParser.CREATE);
        this.state = 1874;
        this.match(PLSQLParser.SEQUENCE);
        this.state = 1875;
        this.sequence_name();
        this.state = 1880;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.CACHE || _la===PLSQLParser.CYCLE || _la===PLSQLParser.INCREMENT || ((((_la - 214)) & ~0x1f) == 0 && ((1 << (_la - 214)) & ((1 << (PLSQLParser.MAXVALUE - 214)) | (1 << (PLSQLParser.MINVALUE - 214)) | (1 << (PLSQLParser.NOCACHE - 214)) | (1 << (PLSQLParser.NOCYCLE - 214)) | (1 << (PLSQLParser.NOMAXVALUE - 214)) | (1 << (PLSQLParser.NOMINVALUE - 214)))) !== 0) || _la===PLSQLParser.NOORDER || _la===PLSQLParser.ORDER || _la===PLSQLParser.START) {
            this.state = 1878;
            switch(this._input.LA(1)) {
            case PLSQLParser.START:
                this.state = 1876;
                this.sequence_start_clause();
                break;
            case PLSQLParser.CACHE:
            case PLSQLParser.CYCLE:
            case PLSQLParser.INCREMENT:
            case PLSQLParser.MAXVALUE:
            case PLSQLParser.MINVALUE:
            case PLSQLParser.NOCACHE:
            case PLSQLParser.NOCYCLE:
            case PLSQLParser.NOMAXVALUE:
            case PLSQLParser.NOMINVALUE:
            case PLSQLParser.NOORDER:
            case PLSQLParser.ORDER:
                this.state = 1877;
                this.sequence_spec();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1882;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1883;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sequence_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_sequence_spec;
    return this;
}

Sequence_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_specContext.prototype.constructor = Sequence_specContext;

Sequence_specContext.prototype.INCREMENT = function() {
    return this.getToken(PLSQLParser.INCREMENT, 0);
};

Sequence_specContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Sequence_specContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(PLSQLParser.UNSIGNED_INTEGER, 0);
};

Sequence_specContext.prototype.MAXVALUE = function() {
    return this.getToken(PLSQLParser.MAXVALUE, 0);
};

Sequence_specContext.prototype.NOMAXVALUE = function() {
    return this.getToken(PLSQLParser.NOMAXVALUE, 0);
};

Sequence_specContext.prototype.MINVALUE = function() {
    return this.getToken(PLSQLParser.MINVALUE, 0);
};

Sequence_specContext.prototype.NOMINVALUE = function() {
    return this.getToken(PLSQLParser.NOMINVALUE, 0);
};

Sequence_specContext.prototype.CYCLE = function() {
    return this.getToken(PLSQLParser.CYCLE, 0);
};

Sequence_specContext.prototype.NOCYCLE = function() {
    return this.getToken(PLSQLParser.NOCYCLE, 0);
};

Sequence_specContext.prototype.CACHE = function() {
    return this.getToken(PLSQLParser.CACHE, 0);
};

Sequence_specContext.prototype.NOCACHE = function() {
    return this.getToken(PLSQLParser.NOCACHE, 0);
};

Sequence_specContext.prototype.ORDER = function() {
    return this.getToken(PLSQLParser.ORDER, 0);
};

Sequence_specContext.prototype.NOORDER = function() {
    return this.getToken(PLSQLParser.NOORDER, 0);
};

Sequence_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSequence_spec(this);
	}
};

Sequence_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSequence_spec(this);
	}
};




PLSQLParser.Sequence_specContext = Sequence_specContext;

PLSQLParser.prototype.sequence_spec = function() {

    var localctx = new Sequence_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, PLSQLParser.RULE_sequence_spec);
    try {
        this.state = 1901;
        switch(this._input.LA(1)) {
        case PLSQLParser.INCREMENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1885;
            this.match(PLSQLParser.INCREMENT);
            this.state = 1886;
            this.match(PLSQLParser.BY);
            this.state = 1887;
            this.match(PLSQLParser.UNSIGNED_INTEGER);
            break;
        case PLSQLParser.MAXVALUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1888;
            this.match(PLSQLParser.MAXVALUE);
            this.state = 1889;
            this.match(PLSQLParser.UNSIGNED_INTEGER);
            break;
        case PLSQLParser.NOMAXVALUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1890;
            this.match(PLSQLParser.NOMAXVALUE);
            break;
        case PLSQLParser.MINVALUE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1891;
            this.match(PLSQLParser.MINVALUE);
            this.state = 1892;
            this.match(PLSQLParser.UNSIGNED_INTEGER);
            break;
        case PLSQLParser.NOMINVALUE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1893;
            this.match(PLSQLParser.NOMINVALUE);
            break;
        case PLSQLParser.CYCLE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1894;
            this.match(PLSQLParser.CYCLE);
            break;
        case PLSQLParser.NOCYCLE:
            this.enterOuterAlt(localctx, 7);
            this.state = 1895;
            this.match(PLSQLParser.NOCYCLE);
            break;
        case PLSQLParser.CACHE:
            this.enterOuterAlt(localctx, 8);
            this.state = 1896;
            this.match(PLSQLParser.CACHE);
            this.state = 1897;
            this.match(PLSQLParser.UNSIGNED_INTEGER);
            break;
        case PLSQLParser.NOCACHE:
            this.enterOuterAlt(localctx, 9);
            this.state = 1898;
            this.match(PLSQLParser.NOCACHE);
            break;
        case PLSQLParser.ORDER:
            this.enterOuterAlt(localctx, 10);
            this.state = 1899;
            this.match(PLSQLParser.ORDER);
            break;
        case PLSQLParser.NOORDER:
            this.enterOuterAlt(localctx, 11);
            this.state = 1900;
            this.match(PLSQLParser.NOORDER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sequence_start_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_sequence_start_clause;
    return this;
}

Sequence_start_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_start_clauseContext.prototype.constructor = Sequence_start_clauseContext;

Sequence_start_clauseContext.prototype.START = function() {
    return this.getToken(PLSQLParser.START, 0);
};

Sequence_start_clauseContext.prototype.WITH = function() {
    return this.getToken(PLSQLParser.WITH, 0);
};

Sequence_start_clauseContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(PLSQLParser.UNSIGNED_INTEGER, 0);
};

Sequence_start_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSequence_start_clause(this);
	}
};

Sequence_start_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSequence_start_clause(this);
	}
};




PLSQLParser.Sequence_start_clauseContext = Sequence_start_clauseContext;

PLSQLParser.prototype.sequence_start_clause = function() {

    var localctx = new Sequence_start_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, PLSQLParser.RULE_sequence_start_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1903;
        this.match(PLSQLParser.START);
        this.state = 1904;
        this.match(PLSQLParser.WITH);
        this.state = 1905;
        this.match(PLSQLParser.UNSIGNED_INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Invoker_rights_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_invoker_rights_clause;
    return this;
}

Invoker_rights_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Invoker_rights_clauseContext.prototype.constructor = Invoker_rights_clauseContext;

Invoker_rights_clauseContext.prototype.AUTHID = function() {
    return this.getToken(PLSQLParser.AUTHID, 0);
};

Invoker_rights_clauseContext.prototype.CURRENT_USER = function() {
    return this.getToken(PLSQLParser.CURRENT_USER, 0);
};

Invoker_rights_clauseContext.prototype.DEFINER = function() {
    return this.getToken(PLSQLParser.DEFINER, 0);
};

Invoker_rights_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterInvoker_rights_clause(this);
	}
};

Invoker_rights_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitInvoker_rights_clause(this);
	}
};




PLSQLParser.Invoker_rights_clauseContext = Invoker_rights_clauseContext;

PLSQLParser.prototype.invoker_rights_clause = function() {

    var localctx = new Invoker_rights_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, PLSQLParser.RULE_invoker_rights_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1907;
        this.match(PLSQLParser.AUTHID);
        this.state = 1908;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.CURRENT_USER || _la===PLSQLParser.DEFINER)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compiler_parameters_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_compiler_parameters_clause;
    return this;
}

Compiler_parameters_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compiler_parameters_clauseContext.prototype.constructor = Compiler_parameters_clauseContext;

Compiler_parameters_clauseContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Compiler_parameters_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Compiler_parameters_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCompiler_parameters_clause(this);
	}
};

Compiler_parameters_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCompiler_parameters_clause(this);
	}
};




PLSQLParser.Compiler_parameters_clauseContext = Compiler_parameters_clauseContext;

PLSQLParser.prototype.compiler_parameters_clause = function() {

    var localctx = new Compiler_parameters_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, PLSQLParser.RULE_compiler_parameters_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1910;
        this.id();
        this.state = 1911;
        this.match(PLSQLParser.EQUALS_OP);
        this.state = 1912;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Call_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_call_spec;
    return this;
}

Call_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_specContext.prototype.constructor = Call_specContext;

Call_specContext.prototype.LANGUAGE = function() {
    return this.getToken(PLSQLParser.LANGUAGE, 0);
};

Call_specContext.prototype.java_spec = function() {
    return this.getTypedRuleContext(Java_specContext,0);
};

Call_specContext.prototype.c_spec = function() {
    return this.getTypedRuleContext(C_specContext,0);
};

Call_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCall_spec(this);
	}
};

Call_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCall_spec(this);
	}
};




PLSQLParser.Call_specContext = Call_specContext;

PLSQLParser.prototype.call_spec = function() {

    var localctx = new Call_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, PLSQLParser.RULE_call_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1914;
        this.match(PLSQLParser.LANGUAGE);
        this.state = 1917;
        switch(this._input.LA(1)) {
        case PLSQLParser.JAVA:
            this.state = 1915;
            this.java_spec();
            break;
        case PLSQLParser.C_LETTER:
            this.state = 1916;
            this.c_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_java_spec;
    return this;
}

Java_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_specContext.prototype.constructor = Java_specContext;

Java_specContext.prototype.JAVA = function() {
    return this.getToken(PLSQLParser.JAVA, 0);
};

Java_specContext.prototype.NAME = function() {
    return this.getToken(PLSQLParser.NAME, 0);
};

Java_specContext.prototype.CHAR_STRING = function() {
    return this.getToken(PLSQLParser.CHAR_STRING, 0);
};

Java_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterJava_spec(this);
	}
};

Java_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitJava_spec(this);
	}
};




PLSQLParser.Java_specContext = Java_specContext;

PLSQLParser.prototype.java_spec = function() {

    var localctx = new Java_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, PLSQLParser.RULE_java_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1919;
        this.match(PLSQLParser.JAVA);
        this.state = 1920;
        this.match(PLSQLParser.NAME);
        this.state = 1921;
        this.match(PLSQLParser.CHAR_STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function C_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_c_spec;
    return this;
}

C_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
C_specContext.prototype.constructor = C_specContext;

C_specContext.prototype.C_LETTER = function() {
    return this.getToken(PLSQLParser.C_LETTER, 0);
};

C_specContext.prototype.LIBRARY = function() {
    return this.getToken(PLSQLParser.LIBRARY, 0);
};

C_specContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

C_specContext.prototype.NAME = function() {
    return this.getToken(PLSQLParser.NAME, 0);
};

C_specContext.prototype.CHAR_STRING = function() {
    return this.getToken(PLSQLParser.CHAR_STRING, 0);
};

C_specContext.prototype.c_agent_in_clause = function() {
    return this.getTypedRuleContext(C_agent_in_clauseContext,0);
};

C_specContext.prototype.WITH = function() {
    return this.getToken(PLSQLParser.WITH, 0);
};

C_specContext.prototype.CONTEXT = function() {
    return this.getToken(PLSQLParser.CONTEXT, 0);
};

C_specContext.prototype.c_parameters_clause = function() {
    return this.getTypedRuleContext(C_parameters_clauseContext,0);
};

C_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterC_spec(this);
	}
};

C_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitC_spec(this);
	}
};




PLSQLParser.C_specContext = C_specContext;

PLSQLParser.prototype.c_spec = function() {

    var localctx = new C_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, PLSQLParser.RULE_c_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1923;
        this.match(PLSQLParser.C_LETTER);
        this.state = 1926;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NAME) {
            this.state = 1924;
            this.match(PLSQLParser.NAME);
            this.state = 1925;
            this.match(PLSQLParser.CHAR_STRING);
        }

        this.state = 1928;
        this.match(PLSQLParser.LIBRARY);
        this.state = 1929;
        this.id();
        this.state = 1931;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AGENT) {
            this.state = 1930;
            this.c_agent_in_clause();
        }

        this.state = 1935;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WITH) {
            this.state = 1933;
            this.match(PLSQLParser.WITH);
            this.state = 1934;
            this.match(PLSQLParser.CONTEXT);
        }

        this.state = 1938;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PARAMETERS) {
            this.state = 1937;
            this.c_parameters_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function C_agent_in_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_c_agent_in_clause;
    return this;
}

C_agent_in_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
C_agent_in_clauseContext.prototype.constructor = C_agent_in_clauseContext;

C_agent_in_clauseContext.prototype.AGENT = function() {
    return this.getToken(PLSQLParser.AGENT, 0);
};

C_agent_in_clauseContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

C_agent_in_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

C_agent_in_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterC_agent_in_clause(this);
	}
};

C_agent_in_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitC_agent_in_clause(this);
	}
};




PLSQLParser.C_agent_in_clauseContext = C_agent_in_clauseContext;

PLSQLParser.prototype.c_agent_in_clause = function() {

    var localctx = new C_agent_in_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, PLSQLParser.RULE_c_agent_in_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1940;
        this.match(PLSQLParser.AGENT);
        this.state = 1941;
        this.match(PLSQLParser.IN);
        this.state = 1942;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 1943;
        this.expression();
        this.state = 1948;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 1944;
            this.match(PLSQLParser.COMMA);
            this.state = 1945;
            this.expression();
            this.state = 1950;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1951;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function C_parameters_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_c_parameters_clause;
    return this;
}

C_parameters_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
C_parameters_clauseContext.prototype.constructor = C_parameters_clauseContext;

C_parameters_clauseContext.prototype.PARAMETERS = function() {
    return this.getToken(PLSQLParser.PARAMETERS, 0);
};

C_parameters_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

C_parameters_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterC_parameters_clause(this);
	}
};

C_parameters_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitC_parameters_clause(this);
	}
};




PLSQLParser.C_parameters_clauseContext = C_parameters_clauseContext;

PLSQLParser.prototype.c_parameters_clause = function() {

    var localctx = new C_parameters_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, PLSQLParser.RULE_c_parameters_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1953;
        this.match(PLSQLParser.PARAMETERS);
        this.state = 1954;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 1966;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ALL:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ANY:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CASE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONNECT_BY_ROOT:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DATE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DISTINCT:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXISTS:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FALSE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NOT:
        case PLSQLParser.NULL:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.PRIOR:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUE:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
        case PLSQLParser.UNSIGNED_INTEGER:
        case PLSQLParser.APPROXIMATE_NUM_LIT:
        case PLSQLParser.CHAR_STRING:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.LEFT_PAREN:
        case PLSQLParser.PLUS_SIGN:
        case PLSQLParser.MINUS_SIGN:
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 1955;
            this.expression();
            this.state = 1960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 1956;
                this.match(PLSQLParser.COMMA);
                this.state = 1957;
                this.expression();
                this.state = 1962;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case PLSQLParser.PERIOD:
            this.state = 1963;
            this.match(PLSQLParser.PERIOD);
            this.state = 1964;
            this.match(PLSQLParser.PERIOD);
            this.state = 1965;
            this.match(PLSQLParser.PERIOD);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1968;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

ParameterContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

ParameterContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

ParameterContext.prototype.IN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.IN);
    } else {
        return this.getToken(PLSQLParser.IN, i);
    }
};


ParameterContext.prototype.OUT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.OUT);
    } else {
        return this.getToken(PLSQLParser.OUT, i);
    }
};


ParameterContext.prototype.INOUT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.INOUT);
    } else {
        return this.getToken(PLSQLParser.INOUT, i);
    }
};


ParameterContext.prototype.NOCOPY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.NOCOPY);
    } else {
        return this.getToken(PLSQLParser.NOCOPY, i);
    }
};


ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitParameter(this);
	}
};




PLSQLParser.ParameterContext = ParameterContext;

PLSQLParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, PLSQLParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1970;
        this.parameter_name();
        this.state = 1974;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1971;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.IN || _la===PLSQLParser.INOUT || _la===PLSQLParser.NOCOPY || _la===PLSQLParser.OUT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                } 
            }
            this.state = 1976;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
        }

        this.state = 1978;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DATE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (PLSQLParser.DEFAULTS - 99)) | (1 << (PLSQLParser.DEFERRED - 99)) | (1 << (PLSQLParser.DEFINER - 99)) | (1 << (PLSQLParser.DETERMINISTIC - 99)) | (1 << (PLSQLParser.DIMENSION - 99)) | (1 << (PLSQLParser.DISABLE - 99)) | (1 << (PLSQLParser.DISASSOCIATE - 99)) | (1 << (PLSQLParser.DOCUMENT - 99)) | (1 << (PLSQLParser.DOUBLE - 99)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (PLSQLParser.EACH - 99)) | (1 << (PLSQLParser.ELEMENT - 99)) | (1 << (PLSQLParser.EMPTY - 99)) | (1 << (PLSQLParser.ENABLE - 99)) | (1 << (PLSQLParser.ENCODING - 99)) | (1 << (PLSQLParser.ENTITYESCAPING - 99)) | (1 << (PLSQLParser.ERRORS - 99)) | (1 << (PLSQLParser.ESCAPE - 99)) | (1 << (PLSQLParser.EVALNAME - 99)) | (1 << (PLSQLParser.EXCEPTION - 99)) | (1 << (PLSQLParser.EXCEPTION_INIT - 99)) | (1 << (PLSQLParser.EXCEPTIONS - 99)) | (1 << (PLSQLParser.EXCLUDE - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 1977;
            this.type_spec();
        }

        this.state = 1981;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.DEFAULT || _la===PLSQLParser.ASSIGN_OP) {
            this.state = 1980;
            this.default_value_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Default_value_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_default_value_part;
    return this;
}

Default_value_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Default_value_partContext.prototype.constructor = Default_value_partContext;

Default_value_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Default_value_partContext.prototype.ASSIGN_OP = function() {
    return this.getToken(PLSQLParser.ASSIGN_OP, 0);
};

Default_value_partContext.prototype.DEFAULT = function() {
    return this.getToken(PLSQLParser.DEFAULT, 0);
};

Default_value_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDefault_value_part(this);
	}
};

Default_value_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDefault_value_part(this);
	}
};




PLSQLParser.Default_value_partContext = Default_value_partContext;

PLSQLParser.prototype.default_value_part = function() {

    var localctx = new Default_value_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, PLSQLParser.RULE_default_value_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1983;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.DEFAULT || _la===PLSQLParser.ASSIGN_OP)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1984;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declare_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_declare_spec;
    return this;
}

Declare_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declare_specContext.prototype.constructor = Declare_specContext;

Declare_specContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Declare_specContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Declare_specContext.prototype.cursor_declaration = function() {
    return this.getTypedRuleContext(Cursor_declarationContext,0);
};

Declare_specContext.prototype.exception_declaration = function() {
    return this.getTypedRuleContext(Exception_declarationContext,0);
};

Declare_specContext.prototype.pragma_declaration = function() {
    return this.getTypedRuleContext(Pragma_declarationContext,0);
};

Declare_specContext.prototype.record_declaration = function() {
    return this.getTypedRuleContext(Record_declarationContext,0);
};

Declare_specContext.prototype.table_declaration = function() {
    return this.getTypedRuleContext(Table_declarationContext,0);
};

Declare_specContext.prototype.create_procedure_body = function() {
    return this.getTypedRuleContext(Create_procedure_bodyContext,0);
};

Declare_specContext.prototype.create_function_body = function() {
    return this.getTypedRuleContext(Create_function_bodyContext,0);
};

Declare_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDeclare_spec(this);
	}
};

Declare_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDeclare_spec(this);
	}
};




PLSQLParser.Declare_specContext = Declare_specContext;

PLSQLParser.prototype.declare_spec = function() {

    var localctx = new Declare_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, PLSQLParser.RULE_declare_spec);
    try {
        this.state = 1995;
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1986;
            this.variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1987;
            this.subtype_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1988;
            this.cursor_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1989;
            this.exception_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1990;
            this.pragma_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1991;
            this.record_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1992;
            this.table_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1993;
            this.create_procedure_body();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1994;
            this.create_function_body();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_variable_declaration;
    return this;
}

Variable_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declarationContext.prototype.constructor = Variable_declarationContext;

Variable_declarationContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Variable_declarationContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Variable_declarationContext.prototype.CONSTANT = function() {
    return this.getToken(PLSQLParser.CONSTANT, 0);
};

Variable_declarationContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Variable_declarationContext.prototype.NULL = function() {
    return this.getToken(PLSQLParser.NULL, 0);
};

Variable_declarationContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

Variable_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterVariable_declaration(this);
	}
};

Variable_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitVariable_declaration(this);
	}
};




PLSQLParser.Variable_declarationContext = Variable_declarationContext;

PLSQLParser.prototype.variable_declaration = function() {

    var localctx = new Variable_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, PLSQLParser.RULE_variable_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1997;
        this.variable_name();
        this.state = 1999;
        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
        if(la_===1) {
            this.state = 1998;
            this.match(PLSQLParser.CONSTANT);

        }
        this.state = 2001;
        this.type_spec();
        this.state = 2004;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NOT) {
            this.state = 2002;
            this.match(PLSQLParser.NOT);
            this.state = 2003;
            this.match(PLSQLParser.NULL);
        }

        this.state = 2007;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.DEFAULT || _la===PLSQLParser.ASSIGN_OP) {
            this.state = 2006;
            this.default_value_part();
        }

        this.state = 2009;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subtype_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_subtype_declaration;
    return this;
}

Subtype_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subtype_declarationContext.prototype.constructor = Subtype_declarationContext;

Subtype_declarationContext.prototype.SUBTYPE = function() {
    return this.getToken(PLSQLParser.SUBTYPE, 0);
};

Subtype_declarationContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Subtype_declarationContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Subtype_declarationContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Subtype_declarationContext.prototype.RANGE = function() {
    return this.getToken(PLSQLParser.RANGE, 0);
};

Subtype_declarationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Subtype_declarationContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Subtype_declarationContext.prototype.NULL = function() {
    return this.getToken(PLSQLParser.NULL, 0);
};

Subtype_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSubtype_declaration(this);
	}
};

Subtype_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSubtype_declaration(this);
	}
};




PLSQLParser.Subtype_declarationContext = Subtype_declarationContext;

PLSQLParser.prototype.subtype_declaration = function() {

    var localctx = new Subtype_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, PLSQLParser.RULE_subtype_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2011;
        this.match(PLSQLParser.SUBTYPE);
        this.state = 2012;
        this.type_name();
        this.state = 2013;
        this.match(PLSQLParser.IS);
        this.state = 2014;
        this.type_spec();
        this.state = 2020;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.RANGE) {
            this.state = 2015;
            this.match(PLSQLParser.RANGE);
            this.state = 2016;
            this.expression();
            this.state = 2017;
            this.match(PLSQLParser.T__0);
            this.state = 2018;
            this.expression();
        }

        this.state = 2024;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NOT) {
            this.state = 2022;
            this.match(PLSQLParser.NOT);
            this.state = 2023;
            this.match(PLSQLParser.NULL);
        }

        this.state = 2026;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cursor_declaration;
    return this;
}

Cursor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_declarationContext.prototype.constructor = Cursor_declarationContext;

Cursor_declarationContext.prototype.CURSOR = function() {
    return this.getToken(PLSQLParser.CURSOR, 0);
};

Cursor_declarationContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Cursor_declarationContext.prototype.parameter_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Parameter_specContext);
    } else {
        return this.getTypedRuleContext(Parameter_specContext,i);
    }
};

Cursor_declarationContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Cursor_declarationContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Cursor_declarationContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Cursor_declarationContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Cursor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCursor_declaration(this);
	}
};

Cursor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCursor_declaration(this);
	}
};




PLSQLParser.Cursor_declarationContext = Cursor_declarationContext;

PLSQLParser.prototype.cursor_declaration = function() {

    var localctx = new Cursor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, PLSQLParser.RULE_cursor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2028;
        this.match(PLSQLParser.CURSOR);
        this.state = 2029;
        this.cursor_name();
        this.state = 2041;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 2030;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2031;
            this.parameter_spec();
            this.state = 2036;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2032;
                this.match(PLSQLParser.COMMA);
                this.state = 2033;
                this.parameter_spec();
                this.state = 2038;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2039;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 2045;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.RETURN) {
            this.state = 2043;
            this.match(PLSQLParser.RETURN);
            this.state = 2044;
            this.type_spec();
        }

        this.state = 2049;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.IS) {
            this.state = 2047;
            this.match(PLSQLParser.IS);
            this.state = 2048;
            this.select_statement();
        }

        this.state = 2051;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_parameter_spec;
    return this;
}

Parameter_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_specContext.prototype.constructor = Parameter_specContext;

Parameter_specContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

Parameter_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Parameter_specContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

Parameter_specContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Parameter_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterParameter_spec(this);
	}
};

Parameter_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitParameter_spec(this);
	}
};




PLSQLParser.Parameter_specContext = Parameter_specContext;

PLSQLParser.prototype.parameter_spec = function() {

    var localctx = new Parameter_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, PLSQLParser.RULE_parameter_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2053;
        this.parameter_name();
        this.state = 2058;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DATE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.IN - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || _la===PLSQLParser.DELIMITED_ID || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2055;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.IN) {
                this.state = 2054;
                this.match(PLSQLParser.IN);
            }

            this.state = 2057;
            this.type_spec();
        }

        this.state = 2061;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.DEFAULT || _la===PLSQLParser.ASSIGN_OP) {
            this.state = 2060;
            this.default_value_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_exception_declaration;
    return this;
}

Exception_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_declarationContext.prototype.constructor = Exception_declarationContext;

Exception_declarationContext.prototype.exception_name = function() {
    return this.getTypedRuleContext(Exception_nameContext,0);
};

Exception_declarationContext.prototype.EXCEPTION = function() {
    return this.getToken(PLSQLParser.EXCEPTION, 0);
};

Exception_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterException_declaration(this);
	}
};

Exception_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitException_declaration(this);
	}
};




PLSQLParser.Exception_declarationContext = Exception_declarationContext;

PLSQLParser.prototype.exception_declaration = function() {

    var localctx = new Exception_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, PLSQLParser.RULE_exception_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2063;
        this.exception_name();
        this.state = 2064;
        this.match(PLSQLParser.EXCEPTION);
        this.state = 2065;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_pragma_declaration;
    this.id1 = null; // IdContext
    return this;
}

Pragma_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_declarationContext.prototype.constructor = Pragma_declarationContext;

Pragma_declarationContext.prototype.PRAGMA = function() {
    return this.getToken(PLSQLParser.PRAGMA, 0);
};

Pragma_declarationContext.prototype.SERIALLY_REUSABLE = function() {
    return this.getToken(PLSQLParser.SERIALLY_REUSABLE, 0);
};

Pragma_declarationContext.prototype.AUTONOMOUS_TRANSACTION = function() {
    return this.getToken(PLSQLParser.AUTONOMOUS_TRANSACTION, 0);
};

Pragma_declarationContext.prototype.EXCEPTION_INIT = function() {
    return this.getToken(PLSQLParser.EXCEPTION_INIT, 0);
};

Pragma_declarationContext.prototype.exception_name = function() {
    return this.getTypedRuleContext(Exception_nameContext,0);
};

Pragma_declarationContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

Pragma_declarationContext.prototype.INLINE = function() {
    return this.getToken(PLSQLParser.INLINE, 0);
};

Pragma_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pragma_declarationContext.prototype.RESTRICT_REFERENCES = function() {
    return this.getToken(PLSQLParser.RESTRICT_REFERENCES, 0);
};

Pragma_declarationContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Pragma_declarationContext.prototype.DEFAULT = function() {
    return this.getToken(PLSQLParser.DEFAULT, 0);
};

Pragma_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPragma_declaration(this);
	}
};

Pragma_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPragma_declaration(this);
	}
};




PLSQLParser.Pragma_declarationContext = Pragma_declarationContext;

PLSQLParser.prototype.pragma_declaration = function() {

    var localctx = new Pragma_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, PLSQLParser.RULE_pragma_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2067;
        this.match(PLSQLParser.PRAGMA);
        this.state = 2098;
        switch(this._input.LA(1)) {
        case PLSQLParser.SERIALLY_REUSABLE:
            this.state = 2068;
            this.match(PLSQLParser.SERIALLY_REUSABLE);
            break;
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
            this.state = 2069;
            this.match(PLSQLParser.AUTONOMOUS_TRANSACTION);
            break;
        case PLSQLParser.EXCEPTION_INIT:
            this.state = 2070;
            this.match(PLSQLParser.EXCEPTION_INIT);
            this.state = 2071;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2072;
            this.exception_name();
            this.state = 2073;
            this.match(PLSQLParser.COMMA);
            this.state = 2074;
            this.numeric();
            this.state = 2075;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        case PLSQLParser.INLINE:
            this.state = 2077;
            this.match(PLSQLParser.INLINE);
            this.state = 2078;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2079;
            localctx.id1 = this.id();
            this.state = 2080;
            this.match(PLSQLParser.COMMA);
            this.state = 2081;
            this.expression();
            this.state = 2082;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        case PLSQLParser.RESTRICT_REFERENCES:
            this.state = 2084;
            this.match(PLSQLParser.RESTRICT_REFERENCES);
            this.state = 2085;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2088;
            switch(this._input.LA(1)) {
            case PLSQLParser.A_LETTER:
            case PLSQLParser.ADD:
            case PLSQLParser.AFTER:
            case PLSQLParser.AGENT:
            case PLSQLParser.AGGREGATE:
            case PLSQLParser.ANALYZE:
            case PLSQLParser.ARRAY:
            case PLSQLParser.ASSOCIATE:
            case PLSQLParser.AT:
            case PLSQLParser.ATTRIBUTE:
            case PLSQLParser.AUDIT:
            case PLSQLParser.AUTHID:
            case PLSQLParser.AUTO:
            case PLSQLParser.AUTOMATIC:
            case PLSQLParser.AUTONOMOUS_TRANSACTION:
            case PLSQLParser.BATCH:
            case PLSQLParser.BEFORE:
            case PLSQLParser.BFILE:
            case PLSQLParser.BINARY_DOUBLE:
            case PLSQLParser.BINARY_FLOAT:
            case PLSQLParser.BINARY_INTEGER:
            case PLSQLParser.BLOB:
            case PLSQLParser.BLOCK:
            case PLSQLParser.BODY:
            case PLSQLParser.BOOLEAN:
            case PLSQLParser.BOTH:
            case PLSQLParser.BULK:
            case PLSQLParser.BYTE:
            case PLSQLParser.C_LETTER:
            case PLSQLParser.CALL:
            case PLSQLParser.CANONICAL:
            case PLSQLParser.CASCADE:
            case PLSQLParser.CAST:
            case PLSQLParser.CHAR:
            case PLSQLParser.CHAR_CS:
            case PLSQLParser.CHARACTER:
            case PLSQLParser.CHR:
            case PLSQLParser.CLOB:
            case PLSQLParser.CLOSE:
            case PLSQLParser.CLUSTER:
            case PLSQLParser.COLLECT:
            case PLSQLParser.COLUMNS:
            case PLSQLParser.COMMENT:
            case PLSQLParser.COMMIT:
            case PLSQLParser.COMMITTED:
            case PLSQLParser.COMPATIBILITY:
            case PLSQLParser.COMPILE:
            case PLSQLParser.COMPOUND:
            case PLSQLParser.CONSTANT:
            case PLSQLParser.CONSTRAINT:
            case PLSQLParser.CONSTRAINTS:
            case PLSQLParser.CONSTRUCTOR:
            case PLSQLParser.CONTENT:
            case PLSQLParser.CONTEXT:
            case PLSQLParser.CONTINUE:
            case PLSQLParser.CONVERT:
            case PLSQLParser.CORRUPT_XID:
            case PLSQLParser.CORRUPT_XID_ALL:
            case PLSQLParser.COST:
            case PLSQLParser.COUNT:
            case PLSQLParser.CROSS:
            case PLSQLParser.CUBE:
            case PLSQLParser.CURRENT_USER:
            case PLSQLParser.CURSOR:
            case PLSQLParser.CUSTOMDATUM:
            case PLSQLParser.CYCLE:
            case PLSQLParser.DATA:
            case PLSQLParser.DATABASE:
            case PLSQLParser.DAY:
            case PLSQLParser.DB_ROLE_CHANGE:
            case PLSQLParser.DBTIMEZONE:
            case PLSQLParser.DDL:
            case PLSQLParser.DEBUG:
            case PLSQLParser.DEC:
            case PLSQLParser.DECIMAL:
            case PLSQLParser.DECOMPOSE:
            case PLSQLParser.DECREMENT:
            case PLSQLParser.DEFAULTS:
            case PLSQLParser.DEFERRED:
            case PLSQLParser.DEFINER:
            case PLSQLParser.DETERMINISTIC:
            case PLSQLParser.DIMENSION:
            case PLSQLParser.DISABLE:
            case PLSQLParser.DISASSOCIATE:
            case PLSQLParser.DOCUMENT:
            case PLSQLParser.DOUBLE:
            case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
            case PLSQLParser.EACH:
            case PLSQLParser.ELEMENT:
            case PLSQLParser.EMPTY:
            case PLSQLParser.ENABLE:
            case PLSQLParser.ENCODING:
            case PLSQLParser.ENTITYESCAPING:
            case PLSQLParser.ERRORS:
            case PLSQLParser.ESCAPE:
            case PLSQLParser.EVALNAME:
            case PLSQLParser.EXCEPTION:
            case PLSQLParser.EXCEPTION_INIT:
            case PLSQLParser.EXCEPTIONS:
            case PLSQLParser.EXCLUDE:
            case PLSQLParser.EXECUTE:
            case PLSQLParser.EXIT:
            case PLSQLParser.EXPLAIN:
            case PLSQLParser.EXTERNAL:
            case PLSQLParser.EXTRACT:
            case PLSQLParser.FAILURE:
            case PLSQLParser.FINAL:
            case PLSQLParser.FIRST:
            case PLSQLParser.FIRST_VALUE:
            case PLSQLParser.FLOAT:
            case PLSQLParser.FOLLOWING:
            case PLSQLParser.FOLLOWS:
            case PLSQLParser.FORALL:
            case PLSQLParser.FORCE:
            case PLSQLParser.FULL:
            case PLSQLParser.FUNCTION:
            case PLSQLParser.GROUPING:
            case PLSQLParser.HASH:
            case PLSQLParser.HIDE:
            case PLSQLParser.HOUR:
            case PLSQLParser.IGNORE:
            case PLSQLParser.IMMEDIATE:
            case PLSQLParser.INCLUDE:
            case PLSQLParser.INCLUDING:
            case PLSQLParser.INCREMENT:
            case PLSQLParser.INDENT:
            case PLSQLParser.INDEXED:
            case PLSQLParser.INDICATOR:
            case PLSQLParser.INDICES:
            case PLSQLParser.INFINITE:
            case PLSQLParser.INLINE:
            case PLSQLParser.INNER:
            case PLSQLParser.INOUT:
            case PLSQLParser.INSTANTIABLE:
            case PLSQLParser.INSTEAD:
            case PLSQLParser.INT:
            case PLSQLParser.INTEGER:
            case PLSQLParser.INTERVAL:
            case PLSQLParser.INVALIDATE:
            case PLSQLParser.ISOLATION:
            case PLSQLParser.ITERATE:
            case PLSQLParser.JAVA:
            case PLSQLParser.JOIN:
            case PLSQLParser.KEEP:
            case PLSQLParser.LANGUAGE:
            case PLSQLParser.LAST:
            case PLSQLParser.LAST_VALUE:
            case PLSQLParser.LEADING:
            case PLSQLParser.LEFT:
            case PLSQLParser.LEVEL:
            case PLSQLParser.LIBRARY:
            case PLSQLParser.LIKE2:
            case PLSQLParser.LIKE4:
            case PLSQLParser.LIKEC:
            case PLSQLParser.LIMIT:
            case PLSQLParser.LOCAL:
            case PLSQLParser.LOCKED:
            case PLSQLParser.LOG:
            case PLSQLParser.LOGOFF:
            case PLSQLParser.LOGON:
            case PLSQLParser.LONG:
            case PLSQLParser.LOOP:
            case PLSQLParser.MAIN:
            case PLSQLParser.MAP:
            case PLSQLParser.MATCHED:
            case PLSQLParser.MAXVALUE:
            case PLSQLParser.MEASURES:
            case PLSQLParser.MEMBER:
            case PLSQLParser.MERGE:
            case PLSQLParser.MINUTE:
            case PLSQLParser.MINVALUE:
            case PLSQLParser.MLSLABEL:
            case PLSQLParser.MODEL:
            case PLSQLParser.MODIFY:
            case PLSQLParser.MONTH:
            case PLSQLParser.MULTISET:
            case PLSQLParser.NAME:
            case PLSQLParser.NAN:
            case PLSQLParser.NATURAL:
            case PLSQLParser.NATURALN:
            case PLSQLParser.NAV:
            case PLSQLParser.NCHAR:
            case PLSQLParser.NCHAR_CS:
            case PLSQLParser.NCLOB:
            case PLSQLParser.NESTED:
            case PLSQLParser.NEW:
            case PLSQLParser.NO:
            case PLSQLParser.NOAUDIT:
            case PLSQLParser.NOCOPY:
            case PLSQLParser.NOCYCLE:
            case PLSQLParser.NOENTITYESCAPING:
            case PLSQLParser.NONE:
            case PLSQLParser.NOSCHEMACHECK:
            case PLSQLParser.NULLS:
            case PLSQLParser.NUMBER:
            case PLSQLParser.NUMERIC:
            case PLSQLParser.NVARCHAR2:
            case PLSQLParser.OBJECT:
            case PLSQLParser.OFF:
            case PLSQLParser.OID:
            case PLSQLParser.OLD:
            case PLSQLParser.ONLY:
            case PLSQLParser.OPEN:
            case PLSQLParser.ORADATA:
            case PLSQLParser.ORDINALITY:
            case PLSQLParser.OSERROR:
            case PLSQLParser.OUT:
            case PLSQLParser.OUTER:
            case PLSQLParser.OVER:
            case PLSQLParser.OVERRIDING:
            case PLSQLParser.PACKAGE:
            case PLSQLParser.PARALLEL_ENABLE:
            case PLSQLParser.PARAMETERS:
            case PLSQLParser.PARENT:
            case PLSQLParser.PARTITION:
            case PLSQLParser.PASSING:
            case PLSQLParser.PATH:
            case PLSQLParser.PIPELINED:
            case PLSQLParser.PLAN:
            case PLSQLParser.PLS_INTEGER:
            case PLSQLParser.POSITIVE:
            case PLSQLParser.POSITIVEN:
            case PLSQLParser.PRAGMA:
            case PLSQLParser.PRECEDING:
            case PLSQLParser.PRECISION:
            case PLSQLParser.PRESENT:
            case PLSQLParser.RAISE:
            case PLSQLParser.RANGE:
            case PLSQLParser.RAW:
            case PLSQLParser.READ:
            case PLSQLParser.REAL:
            case PLSQLParser.RECORD:
            case PLSQLParser.REF:
            case PLSQLParser.REFERENCE:
            case PLSQLParser.REFERENCING:
            case PLSQLParser.REJECT:
            case PLSQLParser.RELIES_ON:
            case PLSQLParser.RENAME:
            case PLSQLParser.REPLACE:
            case PLSQLParser.RESPECT:
            case PLSQLParser.RESTRICT_REFERENCES:
            case PLSQLParser.RESULT:
            case PLSQLParser.RESULT_CACHE:
            case PLSQLParser.RETURN:
            case PLSQLParser.RETURNING:
            case PLSQLParser.REUSE:
            case PLSQLParser.REVERSE:
            case PLSQLParser.RIGHT:
            case PLSQLParser.ROLLBACK:
            case PLSQLParser.ROLLUP:
            case PLSQLParser.ROW:
            case PLSQLParser.ROWID:
            case PLSQLParser.ROWS:
            case PLSQLParser.RULES:
            case PLSQLParser.SAMPLE:
            case PLSQLParser.SAVE:
            case PLSQLParser.SAVEPOINT:
            case PLSQLParser.SCHEMA:
            case PLSQLParser.SCHEMACHECK:
            case PLSQLParser.SCN:
            case PLSQLParser.SECOND:
            case PLSQLParser.SEED:
            case PLSQLParser.SEGMENT:
            case PLSQLParser.SELF:
            case PLSQLParser.SEQUENTIAL:
            case PLSQLParser.SERIALIZABLE:
            case PLSQLParser.SERIALLY_REUSABLE:
            case PLSQLParser.SERVERERROR:
            case PLSQLParser.SESSIONTIMEZONE:
            case PLSQLParser.SET:
            case PLSQLParser.SETS:
            case PLSQLParser.SETTINGS:
            case PLSQLParser.SHOW:
            case PLSQLParser.SHUTDOWN:
            case PLSQLParser.SIBLINGS:
            case PLSQLParser.SIGNTYPE:
            case PLSQLParser.SIMPLE_INTEGER:
            case PLSQLParser.SINGLE:
            case PLSQLParser.SKIP:
            case PLSQLParser.SMALLINT:
            case PLSQLParser.SNAPSHOT:
            case PLSQLParser.SOME:
            case PLSQLParser.SPECIFICATION:
            case PLSQLParser.SQLDATA:
            case PLSQLParser.SQLERROR:
            case PLSQLParser.STANDALONE:
            case PLSQLParser.STARTUP:
            case PLSQLParser.STATEMENT:
            case PLSQLParser.STATEMENT_ID:
            case PLSQLParser.STATIC:
            case PLSQLParser.STATISTICS:
            case PLSQLParser.STRING:
            case PLSQLParser.SUBMULTISET:
            case PLSQLParser.SUBPARTITION:
            case PLSQLParser.SUBSTITUTABLE:
            case PLSQLParser.SUBTYPE:
            case PLSQLParser.SUCCESS:
            case PLSQLParser.SUSPEND:
            case PLSQLParser.TIME:
            case PLSQLParser.TIMESTAMP:
            case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
            case PLSQLParser.TIMEZONE_ABBR:
            case PLSQLParser.TIMEZONE_HOUR:
            case PLSQLParser.TIMEZONE_MINUTE:
            case PLSQLParser.TIMEZONE_REGION:
            case PLSQLParser.TRAILING:
            case PLSQLParser.TRANSACTION:
            case PLSQLParser.TRANSLATE:
            case PLSQLParser.TREAT:
            case PLSQLParser.TRIGGER:
            case PLSQLParser.TRIM:
            case PLSQLParser.TRUNCATE:
            case PLSQLParser.TYPE:
            case PLSQLParser.UNBOUNDED:
            case PLSQLParser.UNDER:
            case PLSQLParser.UNLIMITED:
            case PLSQLParser.UNTIL:
            case PLSQLParser.UPDATED:
            case PLSQLParser.UPSERT:
            case PLSQLParser.UROWID:
            case PLSQLParser.USE:
            case PLSQLParser.VALIDATE:
            case PLSQLParser.VALUE:
            case PLSQLParser.VARCHAR:
            case PLSQLParser.VARCHAR2:
            case PLSQLParser.VARIABLE:
            case PLSQLParser.VARRAY:
            case PLSQLParser.VARYING:
            case PLSQLParser.VERSION:
            case PLSQLParser.VERSIONS:
            case PLSQLParser.WAIT:
            case PLSQLParser.WARNING:
            case PLSQLParser.WELLFORMED:
            case PLSQLParser.WHENEVER:
            case PLSQLParser.WHILE:
            case PLSQLParser.WITHIN:
            case PLSQLParser.WORK:
            case PLSQLParser.WRITE:
            case PLSQLParser.XML:
            case PLSQLParser.XMLAGG:
            case PLSQLParser.XMLATTRIBUTES:
            case PLSQLParser.XMLCAST:
            case PLSQLParser.XMLCOLATTVAL:
            case PLSQLParser.XMLELEMENT:
            case PLSQLParser.XMLEXISTS:
            case PLSQLParser.XMLFOREST:
            case PLSQLParser.XMLNAMESPACES:
            case PLSQLParser.XMLPARSE:
            case PLSQLParser.XMLPI:
            case PLSQLParser.XMLQUERY:
            case PLSQLParser.XMLROOT:
            case PLSQLParser.XMLSERIALIZE:
            case PLSQLParser.XMLTABLE:
            case PLSQLParser.YEAR:
            case PLSQLParser.YES:
            case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
            case PLSQLParser.ZONE:
            case PLSQLParser.PREDICTION:
            case PLSQLParser.PREDICTION_BOUNDS:
            case PLSQLParser.PREDICTION_COST:
            case PLSQLParser.PREDICTION_DETAILS:
            case PLSQLParser.PREDICTION_PROBABILITY:
            case PLSQLParser.PREDICTION_SET:
            case PLSQLParser.CUME_DIST:
            case PLSQLParser.DENSE_RANK:
            case PLSQLParser.LISTAGG:
            case PLSQLParser.PERCENT_RANK:
            case PLSQLParser.PERCENTILE_CONT:
            case PLSQLParser.PERCENTILE_DISC:
            case PLSQLParser.RANK:
            case PLSQLParser.AVG:
            case PLSQLParser.CORR:
            case PLSQLParser.LAG:
            case PLSQLParser.LEAD:
            case PLSQLParser.MAX:
            case PLSQLParser.MEDIAN:
            case PLSQLParser.MIN:
            case PLSQLParser.NTILE:
            case PLSQLParser.RATIO_TO_REPORT:
            case PLSQLParser.ROW_NUMBER:
            case PLSQLParser.SUM:
            case PLSQLParser.VARIANCE:
            case PLSQLParser.REGR_:
            case PLSQLParser.STDDEV:
            case PLSQLParser.VAR_:
            case PLSQLParser.COVAR_:
            case PLSQLParser.DELIMITED_ID:
            case PLSQLParser.INTRODUCER:
            case PLSQLParser.REGULAR_ID:
                this.state = 2086;
                this.id();
                break;
            case PLSQLParser.DEFAULT:
                this.state = 2087;
                this.match(PLSQLParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2092; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2090;
                this.match(PLSQLParser.COMMA);
                this.state = 2091;
                this.id();
                this.state = 2094; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PLSQLParser.COMMA);
            this.state = 2096;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2100;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_record_declaration;
    return this;
}

Record_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_declarationContext.prototype.constructor = Record_declarationContext;

Record_declarationContext.prototype.record_type_dec = function() {
    return this.getTypedRuleContext(Record_type_decContext,0);
};

Record_declarationContext.prototype.record_var_dec = function() {
    return this.getTypedRuleContext(Record_var_decContext,0);
};

Record_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRecord_declaration(this);
	}
};

Record_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRecord_declaration(this);
	}
};




PLSQLParser.Record_declarationContext = Record_declarationContext;

PLSQLParser.prototype.record_declaration = function() {

    var localctx = new Record_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, PLSQLParser.RULE_record_declaration);
    try {
        this.state = 2104;
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2102;
            this.record_type_dec();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2103;
            this.record_var_dec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_type_decContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_record_type_dec;
    return this;
}

Record_type_decContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_type_decContext.prototype.constructor = Record_type_decContext;

Record_type_decContext.prototype.TYPE = function() {
    return this.getToken(PLSQLParser.TYPE, 0);
};

Record_type_decContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Record_type_decContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Record_type_decContext.prototype.RECORD = function() {
    return this.getToken(PLSQLParser.RECORD, 0);
};

Record_type_decContext.prototype.field_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Field_specContext);
    } else {
        return this.getTypedRuleContext(Field_specContext,i);
    }
};

Record_type_decContext.prototype.REF = function() {
    return this.getToken(PLSQLParser.REF, 0);
};

Record_type_decContext.prototype.CURSOR = function() {
    return this.getToken(PLSQLParser.CURSOR, 0);
};

Record_type_decContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Record_type_decContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Record_type_decContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRecord_type_dec(this);
	}
};

Record_type_decContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRecord_type_dec(this);
	}
};




PLSQLParser.Record_type_decContext = Record_type_decContext;

PLSQLParser.prototype.record_type_dec = function() {

    var localctx = new Record_type_decContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, PLSQLParser.RULE_record_type_dec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2106;
        this.match(PLSQLParser.TYPE);
        this.state = 2107;
        this.type_name();
        this.state = 2108;
        this.match(PLSQLParser.IS);
        this.state = 2127;
        switch(this._input.LA(1)) {
        case PLSQLParser.RECORD:
            this.state = 2109;
            this.match(PLSQLParser.RECORD);
            this.state = 2110;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2111;
            this.field_spec();
            this.state = 2116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2112;
                this.match(PLSQLParser.COMMA);
                this.state = 2113;
                this.field_spec();
                this.state = 2118;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2119;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        case PLSQLParser.REF:
            this.state = 2121;
            this.match(PLSQLParser.REF);
            this.state = 2122;
            this.match(PLSQLParser.CURSOR);
            this.state = 2125;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.RETURN) {
                this.state = 2123;
                this.match(PLSQLParser.RETURN);
                this.state = 2124;
                this.type_spec();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2129;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_field_spec;
    return this;
}

Field_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_specContext.prototype.constructor = Field_specContext;

Field_specContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Field_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Field_specContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Field_specContext.prototype.NULL = function() {
    return this.getToken(PLSQLParser.NULL, 0);
};

Field_specContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

Field_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterField_spec(this);
	}
};

Field_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitField_spec(this);
	}
};




PLSQLParser.Field_specContext = Field_specContext;

PLSQLParser.prototype.field_spec = function() {

    var localctx = new Field_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, PLSQLParser.RULE_field_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2131;
        this.column_name();
        this.state = 2133;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DATE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (PLSQLParser.DEFAULTS - 99)) | (1 << (PLSQLParser.DEFERRED - 99)) | (1 << (PLSQLParser.DEFINER - 99)) | (1 << (PLSQLParser.DETERMINISTIC - 99)) | (1 << (PLSQLParser.DIMENSION - 99)) | (1 << (PLSQLParser.DISABLE - 99)) | (1 << (PLSQLParser.DISASSOCIATE - 99)) | (1 << (PLSQLParser.DOCUMENT - 99)) | (1 << (PLSQLParser.DOUBLE - 99)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (PLSQLParser.EACH - 99)) | (1 << (PLSQLParser.ELEMENT - 99)) | (1 << (PLSQLParser.EMPTY - 99)) | (1 << (PLSQLParser.ENABLE - 99)) | (1 << (PLSQLParser.ENCODING - 99)) | (1 << (PLSQLParser.ENTITYESCAPING - 99)) | (1 << (PLSQLParser.ERRORS - 99)) | (1 << (PLSQLParser.ESCAPE - 99)) | (1 << (PLSQLParser.EVALNAME - 99)) | (1 << (PLSQLParser.EXCEPTION - 99)) | (1 << (PLSQLParser.EXCEPTION_INIT - 99)) | (1 << (PLSQLParser.EXCEPTIONS - 99)) | (1 << (PLSQLParser.EXCLUDE - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2132;
            this.type_spec();
        }

        this.state = 2137;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NOT) {
            this.state = 2135;
            this.match(PLSQLParser.NOT);
            this.state = 2136;
            this.match(PLSQLParser.NULL);
        }

        this.state = 2140;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.DEFAULT || _la===PLSQLParser.ASSIGN_OP) {
            this.state = 2139;
            this.default_value_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_var_decContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_record_var_dec;
    return this;
}

Record_var_decContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_var_decContext.prototype.constructor = Record_var_decContext;

Record_var_decContext.prototype.record_name = function() {
    return this.getTypedRuleContext(Record_nameContext,0);
};

Record_var_decContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Record_var_decContext.prototype.PERCENT_ROWTYPE = function() {
    return this.getToken(PLSQLParser.PERCENT_ROWTYPE, 0);
};

Record_var_decContext.prototype.PERCENT_TYPE = function() {
    return this.getToken(PLSQLParser.PERCENT_TYPE, 0);
};

Record_var_decContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRecord_var_dec(this);
	}
};

Record_var_decContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRecord_var_dec(this);
	}
};




PLSQLParser.Record_var_decContext = Record_var_decContext;

PLSQLParser.prototype.record_var_dec = function() {

    var localctx = new Record_var_decContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, PLSQLParser.RULE_record_var_dec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2142;
        this.record_name();
        this.state = 2143;
        this.type_name();
        this.state = 2144;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.PERCENT_ROWTYPE || _la===PLSQLParser.PERCENT_TYPE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 2145;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_declaration;
    return this;
}

Table_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_declarationContext.prototype.constructor = Table_declarationContext;

Table_declarationContext.prototype.table_type_dec = function() {
    return this.getTypedRuleContext(Table_type_decContext,0);
};

Table_declarationContext.prototype.table_var_dec = function() {
    return this.getTypedRuleContext(Table_var_decContext,0);
};

Table_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_declaration(this);
	}
};

Table_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_declaration(this);
	}
};




PLSQLParser.Table_declarationContext = Table_declarationContext;

PLSQLParser.prototype.table_declaration = function() {

    var localctx = new Table_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, PLSQLParser.RULE_table_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2149;
        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2147;
            this.table_type_dec();
            break;

        case 2:
            this.state = 2148;
            this.table_var_dec();
            break;

        }
        this.state = 2151;
        this.match(PLSQLParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_type_decContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_type_dec;
    return this;
}

Table_type_decContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_type_decContext.prototype.constructor = Table_type_decContext;

Table_type_decContext.prototype.TYPE = function() {
    return this.getToken(PLSQLParser.TYPE, 0);
};

Table_type_decContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Table_type_decContext.prototype.IS = function() {
    return this.getToken(PLSQLParser.IS, 0);
};

Table_type_decContext.prototype.TABLE = function() {
    return this.getToken(PLSQLParser.TABLE, 0);
};

Table_type_decContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Table_type_decContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Table_type_decContext.prototype.varray_type_def = function() {
    return this.getTypedRuleContext(Varray_type_defContext,0);
};

Table_type_decContext.prototype.table_indexed_by_part = function() {
    return this.getTypedRuleContext(Table_indexed_by_partContext,0);
};

Table_type_decContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Table_type_decContext.prototype.NULL = function() {
    return this.getToken(PLSQLParser.NULL, 0);
};

Table_type_decContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_type_dec(this);
	}
};

Table_type_decContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_type_dec(this);
	}
};




PLSQLParser.Table_type_decContext = Table_type_decContext;

PLSQLParser.prototype.table_type_dec = function() {

    var localctx = new Table_type_decContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, PLSQLParser.RULE_table_type_dec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2153;
        this.match(PLSQLParser.TYPE);
        this.state = 2154;
        this.type_name();
        this.state = 2155;
        this.match(PLSQLParser.IS);
        this.state = 2167;
        switch(this._input.LA(1)) {
        case PLSQLParser.TABLE:
            this.state = 2156;
            this.match(PLSQLParser.TABLE);
            this.state = 2157;
            this.match(PLSQLParser.OF);
            this.state = 2158;
            this.type_spec();
            this.state = 2160;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.INDEX || _la===PLSQLParser.INDEXED) {
                this.state = 2159;
                this.table_indexed_by_part();
            }

            this.state = 2164;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.NOT) {
                this.state = 2162;
                this.match(PLSQLParser.NOT);
                this.state = 2163;
                this.match(PLSQLParser.NULL);
            }

            break;
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
            this.state = 2166;
            this.varray_type_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_indexed_by_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_indexed_by_part;
    this.idx1 = null; // Token
    this.idx2 = null; // Token
    return this;
}

Table_indexed_by_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_indexed_by_partContext.prototype.constructor = Table_indexed_by_partContext;

Table_indexed_by_partContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Table_indexed_by_partContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Table_indexed_by_partContext.prototype.INDEXED = function() {
    return this.getToken(PLSQLParser.INDEXED, 0);
};

Table_indexed_by_partContext.prototype.INDEX = function() {
    return this.getToken(PLSQLParser.INDEX, 0);
};

Table_indexed_by_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_indexed_by_part(this);
	}
};

Table_indexed_by_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_indexed_by_part(this);
	}
};




PLSQLParser.Table_indexed_by_partContext = Table_indexed_by_partContext;

PLSQLParser.prototype.table_indexed_by_part = function() {

    var localctx = new Table_indexed_by_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, PLSQLParser.RULE_table_indexed_by_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2171;
        switch(this._input.LA(1)) {
        case PLSQLParser.INDEXED:
            this.state = 2169;
            localctx.idx1 = this.match(PLSQLParser.INDEXED);
            break;
        case PLSQLParser.INDEX:
            this.state = 2170;
            localctx.idx2 = this.match(PLSQLParser.INDEX);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2173;
        this.match(PLSQLParser.BY);
        this.state = 2174;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Varray_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_varray_type_def;
    return this;
}

Varray_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Varray_type_defContext.prototype.constructor = Varray_type_defContext;

Varray_type_defContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Varray_type_defContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Varray_type_defContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Varray_type_defContext.prototype.VARRAY = function() {
    return this.getToken(PLSQLParser.VARRAY, 0);
};

Varray_type_defContext.prototype.VARYING = function() {
    return this.getToken(PLSQLParser.VARYING, 0);
};

Varray_type_defContext.prototype.ARRAY = function() {
    return this.getToken(PLSQLParser.ARRAY, 0);
};

Varray_type_defContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Varray_type_defContext.prototype.NULL = function() {
    return this.getToken(PLSQLParser.NULL, 0);
};

Varray_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterVarray_type_def(this);
	}
};

Varray_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitVarray_type_def(this);
	}
};




PLSQLParser.Varray_type_defContext = Varray_type_defContext;

PLSQLParser.prototype.varray_type_def = function() {

    var localctx = new Varray_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, PLSQLParser.RULE_varray_type_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2179;
        switch(this._input.LA(1)) {
        case PLSQLParser.VARRAY:
            this.state = 2176;
            this.match(PLSQLParser.VARRAY);
            break;
        case PLSQLParser.VARYING:
            this.state = 2177;
            this.match(PLSQLParser.VARYING);
            this.state = 2178;
            this.match(PLSQLParser.ARRAY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2181;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 2182;
        this.expression();
        this.state = 2183;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 2184;
        this.match(PLSQLParser.OF);
        this.state = 2185;
        this.type_spec();
        this.state = 2188;
        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
        if(la_===1) {
            this.state = 2186;
            this.match(PLSQLParser.NOT);
            this.state = 2187;
            this.match(PLSQLParser.NULL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_var_decContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_var_dec;
    return this;
}

Table_var_decContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_var_decContext.prototype.constructor = Table_var_decContext;

Table_var_decContext.prototype.table_var_name = function() {
    return this.getTypedRuleContext(Table_var_nameContext,0);
};

Table_var_decContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Table_var_decContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_var_dec(this);
	}
};

Table_var_decContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_var_dec(this);
	}
};




PLSQLParser.Table_var_decContext = Table_var_decContext;

PLSQLParser.prototype.table_var_dec = function() {

    var localctx = new Table_var_decContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, PLSQLParser.RULE_table_var_dec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2190;
        this.table_var_name();
        this.state = 2191;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Seq_of_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_seq_of_statements;
    return this;
}

Seq_of_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Seq_of_statementsContext.prototype.constructor = Seq_of_statementsContext;

Seq_of_statementsContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Seq_of_statementsContext.prototype.label_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_declarationContext);
    } else {
        return this.getTypedRuleContext(Label_declarationContext,i);
    }
};

Seq_of_statementsContext.prototype.EOF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.EOF);
    } else {
        return this.getToken(PLSQLParser.EOF, i);
    }
};


Seq_of_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSeq_of_statements(this);
	}
};

Seq_of_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSeq_of_statements(this);
	}
};




PLSQLParser.Seq_of_statementsContext = Seq_of_statementsContext;

PLSQLParser.prototype.seq_of_statements = function() {

    var localctx = new Seq_of_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, PLSQLParser.RULE_seq_of_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2197; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2197;
        		switch(this._input.LA(1)) {
        		case PLSQLParser.A_LETTER:
        		case PLSQLParser.ADD:
        		case PLSQLParser.AFTER:
        		case PLSQLParser.AGENT:
        		case PLSQLParser.AGGREGATE:
        		case PLSQLParser.ALTER:
        		case PLSQLParser.ANALYZE:
        		case PLSQLParser.ARRAY:
        		case PLSQLParser.ASSOCIATE:
        		case PLSQLParser.AT:
        		case PLSQLParser.ATTRIBUTE:
        		case PLSQLParser.AUDIT:
        		case PLSQLParser.AUTHID:
        		case PLSQLParser.AUTO:
        		case PLSQLParser.AUTOMATIC:
        		case PLSQLParser.AUTONOMOUS_TRANSACTION:
        		case PLSQLParser.BATCH:
        		case PLSQLParser.BEFORE:
        		case PLSQLParser.BEGIN:
        		case PLSQLParser.BFILE:
        		case PLSQLParser.BINARY_DOUBLE:
        		case PLSQLParser.BINARY_FLOAT:
        		case PLSQLParser.BINARY_INTEGER:
        		case PLSQLParser.BLOB:
        		case PLSQLParser.BLOCK:
        		case PLSQLParser.BODY:
        		case PLSQLParser.BOOLEAN:
        		case PLSQLParser.BOTH:
        		case PLSQLParser.BULK:
        		case PLSQLParser.BYTE:
        		case PLSQLParser.C_LETTER:
        		case PLSQLParser.CALL:
        		case PLSQLParser.CANONICAL:
        		case PLSQLParser.CASCADE:
        		case PLSQLParser.CASE:
        		case PLSQLParser.CAST:
        		case PLSQLParser.CHAR:
        		case PLSQLParser.CHAR_CS:
        		case PLSQLParser.CHARACTER:
        		case PLSQLParser.CHR:
        		case PLSQLParser.CLOB:
        		case PLSQLParser.CLOSE:
        		case PLSQLParser.CLUSTER:
        		case PLSQLParser.COLLECT:
        		case PLSQLParser.COLUMNS:
        		case PLSQLParser.COMMENT:
        		case PLSQLParser.COMMIT:
        		case PLSQLParser.COMMITTED:
        		case PLSQLParser.COMPATIBILITY:
        		case PLSQLParser.COMPILE:
        		case PLSQLParser.COMPOUND:
        		case PLSQLParser.CONSTANT:
        		case PLSQLParser.CONSTRAINT:
        		case PLSQLParser.CONSTRAINTS:
        		case PLSQLParser.CONSTRUCTOR:
        		case PLSQLParser.CONTENT:
        		case PLSQLParser.CONTEXT:
        		case PLSQLParser.CONTINUE:
        		case PLSQLParser.CONVERT:
        		case PLSQLParser.CORRUPT_XID:
        		case PLSQLParser.CORRUPT_XID_ALL:
        		case PLSQLParser.COST:
        		case PLSQLParser.COUNT:
        		case PLSQLParser.CREATE:
        		case PLSQLParser.CROSS:
        		case PLSQLParser.CUBE:
        		case PLSQLParser.CURRENT_USER:
        		case PLSQLParser.CURSOR:
        		case PLSQLParser.CUSTOMDATUM:
        		case PLSQLParser.CYCLE:
        		case PLSQLParser.DATA:
        		case PLSQLParser.DATABASE:
        		case PLSQLParser.DAY:
        		case PLSQLParser.DB_ROLE_CHANGE:
        		case PLSQLParser.DBTIMEZONE:
        		case PLSQLParser.DDL:
        		case PLSQLParser.DEBUG:
        		case PLSQLParser.DEC:
        		case PLSQLParser.DECIMAL:
        		case PLSQLParser.DECLARE:
        		case PLSQLParser.DECOMPOSE:
        		case PLSQLParser.DECREMENT:
        		case PLSQLParser.DEFAULTS:
        		case PLSQLParser.DEFERRED:
        		case PLSQLParser.DEFINER:
        		case PLSQLParser.DELETE:
        		case PLSQLParser.DETERMINISTIC:
        		case PLSQLParser.DIMENSION:
        		case PLSQLParser.DISABLE:
        		case PLSQLParser.DISASSOCIATE:
        		case PLSQLParser.DOCUMENT:
        		case PLSQLParser.DOUBLE:
        		case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        		case PLSQLParser.EACH:
        		case PLSQLParser.ELEMENT:
        		case PLSQLParser.EMPTY:
        		case PLSQLParser.ENABLE:
        		case PLSQLParser.ENCODING:
        		case PLSQLParser.ENTITYESCAPING:
        		case PLSQLParser.ERRORS:
        		case PLSQLParser.ESCAPE:
        		case PLSQLParser.EVALNAME:
        		case PLSQLParser.EXCEPTION:
        		case PLSQLParser.EXCEPTION_INIT:
        		case PLSQLParser.EXCEPTIONS:
        		case PLSQLParser.EXCLUDE:
        		case PLSQLParser.EXECUTE:
        		case PLSQLParser.EXIT:
        		case PLSQLParser.EXPLAIN:
        		case PLSQLParser.EXTERNAL:
        		case PLSQLParser.EXTRACT:
        		case PLSQLParser.FAILURE:
        		case PLSQLParser.FETCH:
        		case PLSQLParser.FINAL:
        		case PLSQLParser.FIRST:
        		case PLSQLParser.FIRST_VALUE:
        		case PLSQLParser.FLOAT:
        		case PLSQLParser.FOLLOWING:
        		case PLSQLParser.FOLLOWS:
        		case PLSQLParser.FOR:
        		case PLSQLParser.FORALL:
        		case PLSQLParser.FORCE:
        		case PLSQLParser.FULL:
        		case PLSQLParser.FUNCTION:
        		case PLSQLParser.GOTO:
        		case PLSQLParser.GRANT:
        		case PLSQLParser.GROUPING:
        		case PLSQLParser.HASH:
        		case PLSQLParser.HIDE:
        		case PLSQLParser.HOUR:
        		case PLSQLParser.IF:
        		case PLSQLParser.IGNORE:
        		case PLSQLParser.IMMEDIATE:
        		case PLSQLParser.INCLUDE:
        		case PLSQLParser.INCLUDING:
        		case PLSQLParser.INCREMENT:
        		case PLSQLParser.INDENT:
        		case PLSQLParser.INDEXED:
        		case PLSQLParser.INDICATOR:
        		case PLSQLParser.INDICES:
        		case PLSQLParser.INFINITE:
        		case PLSQLParser.INLINE:
        		case PLSQLParser.INNER:
        		case PLSQLParser.INOUT:
        		case PLSQLParser.INSERT:
        		case PLSQLParser.INSTANTIABLE:
        		case PLSQLParser.INSTEAD:
        		case PLSQLParser.INT:
        		case PLSQLParser.INTEGER:
        		case PLSQLParser.INTERVAL:
        		case PLSQLParser.INVALIDATE:
        		case PLSQLParser.ISOLATION:
        		case PLSQLParser.ITERATE:
        		case PLSQLParser.JAVA:
        		case PLSQLParser.JOIN:
        		case PLSQLParser.KEEP:
        		case PLSQLParser.LANGUAGE:
        		case PLSQLParser.LAST:
        		case PLSQLParser.LAST_VALUE:
        		case PLSQLParser.LEADING:
        		case PLSQLParser.LEFT:
        		case PLSQLParser.LEVEL:
        		case PLSQLParser.LIBRARY:
        		case PLSQLParser.LIKE2:
        		case PLSQLParser.LIKE4:
        		case PLSQLParser.LIKEC:
        		case PLSQLParser.LIMIT:
        		case PLSQLParser.LOCAL:
        		case PLSQLParser.LOCK:
        		case PLSQLParser.LOCKED:
        		case PLSQLParser.LOG:
        		case PLSQLParser.LOGOFF:
        		case PLSQLParser.LOGON:
        		case PLSQLParser.LONG:
        		case PLSQLParser.LOOP:
        		case PLSQLParser.MAIN:
        		case PLSQLParser.MAP:
        		case PLSQLParser.MATCHED:
        		case PLSQLParser.MAXVALUE:
        		case PLSQLParser.MEASURES:
        		case PLSQLParser.MEMBER:
        		case PLSQLParser.MERGE:
        		case PLSQLParser.MINUTE:
        		case PLSQLParser.MINVALUE:
        		case PLSQLParser.MLSLABEL:
        		case PLSQLParser.MODEL:
        		case PLSQLParser.MODIFY:
        		case PLSQLParser.MONTH:
        		case PLSQLParser.MULTISET:
        		case PLSQLParser.NAME:
        		case PLSQLParser.NAN:
        		case PLSQLParser.NATURAL:
        		case PLSQLParser.NATURALN:
        		case PLSQLParser.NAV:
        		case PLSQLParser.NCHAR:
        		case PLSQLParser.NCHAR_CS:
        		case PLSQLParser.NCLOB:
        		case PLSQLParser.NESTED:
        		case PLSQLParser.NEW:
        		case PLSQLParser.NO:
        		case PLSQLParser.NOAUDIT:
        		case PLSQLParser.NOCOPY:
        		case PLSQLParser.NOCYCLE:
        		case PLSQLParser.NOENTITYESCAPING:
        		case PLSQLParser.NONE:
        		case PLSQLParser.NOSCHEMACHECK:
        		case PLSQLParser.NULL:
        		case PLSQLParser.NULLS:
        		case PLSQLParser.NUMBER:
        		case PLSQLParser.NUMERIC:
        		case PLSQLParser.NVARCHAR2:
        		case PLSQLParser.OBJECT:
        		case PLSQLParser.OFF:
        		case PLSQLParser.OID:
        		case PLSQLParser.OLD:
        		case PLSQLParser.ONLY:
        		case PLSQLParser.OPEN:
        		case PLSQLParser.ORADATA:
        		case PLSQLParser.ORDINALITY:
        		case PLSQLParser.OSERROR:
        		case PLSQLParser.OUT:
        		case PLSQLParser.OUTER:
        		case PLSQLParser.OVER:
        		case PLSQLParser.OVERRIDING:
        		case PLSQLParser.PACKAGE:
        		case PLSQLParser.PARALLEL_ENABLE:
        		case PLSQLParser.PARAMETERS:
        		case PLSQLParser.PARENT:
        		case PLSQLParser.PARTITION:
        		case PLSQLParser.PASSING:
        		case PLSQLParser.PATH:
        		case PLSQLParser.PIPELINED:
        		case PLSQLParser.PLAN:
        		case PLSQLParser.PLS_INTEGER:
        		case PLSQLParser.POSITIVE:
        		case PLSQLParser.POSITIVEN:
        		case PLSQLParser.PRAGMA:
        		case PLSQLParser.PRECEDING:
        		case PLSQLParser.PRECISION:
        		case PLSQLParser.PRESENT:
        		case PLSQLParser.PROCEDURE:
        		case PLSQLParser.RAISE:
        		case PLSQLParser.RANGE:
        		case PLSQLParser.RAW:
        		case PLSQLParser.READ:
        		case PLSQLParser.REAL:
        		case PLSQLParser.RECORD:
        		case PLSQLParser.REF:
        		case PLSQLParser.REFERENCE:
        		case PLSQLParser.REFERENCING:
        		case PLSQLParser.REJECT:
        		case PLSQLParser.RELIES_ON:
        		case PLSQLParser.RENAME:
        		case PLSQLParser.REPLACE:
        		case PLSQLParser.RESPECT:
        		case PLSQLParser.RESTRICT_REFERENCES:
        		case PLSQLParser.RESULT:
        		case PLSQLParser.RESULT_CACHE:
        		case PLSQLParser.RETURN:
        		case PLSQLParser.RETURNING:
        		case PLSQLParser.REUSE:
        		case PLSQLParser.REVERSE:
        		case PLSQLParser.RIGHT:
        		case PLSQLParser.ROLLBACK:
        		case PLSQLParser.ROLLUP:
        		case PLSQLParser.ROW:
        		case PLSQLParser.ROWID:
        		case PLSQLParser.ROWS:
        		case PLSQLParser.RULES:
        		case PLSQLParser.SAMPLE:
        		case PLSQLParser.SAVE:
        		case PLSQLParser.SAVEPOINT:
        		case PLSQLParser.SCHEMA:
        		case PLSQLParser.SCHEMACHECK:
        		case PLSQLParser.SCN:
        		case PLSQLParser.SECOND:
        		case PLSQLParser.SEED:
        		case PLSQLParser.SEGMENT:
        		case PLSQLParser.SELECT:
        		case PLSQLParser.SELF:
        		case PLSQLParser.SEQUENTIAL:
        		case PLSQLParser.SERIALIZABLE:
        		case PLSQLParser.SERIALLY_REUSABLE:
        		case PLSQLParser.SERVERERROR:
        		case PLSQLParser.SESSIONTIMEZONE:
        		case PLSQLParser.SET:
        		case PLSQLParser.SETS:
        		case PLSQLParser.SETTINGS:
        		case PLSQLParser.SHOW:
        		case PLSQLParser.SHUTDOWN:
        		case PLSQLParser.SIBLINGS:
        		case PLSQLParser.SIGNTYPE:
        		case PLSQLParser.SIMPLE_INTEGER:
        		case PLSQLParser.SINGLE:
        		case PLSQLParser.SKIP:
        		case PLSQLParser.SMALLINT:
        		case PLSQLParser.SNAPSHOT:
        		case PLSQLParser.SOME:
        		case PLSQLParser.SPECIFICATION:
        		case PLSQLParser.SQLDATA:
        		case PLSQLParser.SQLERROR:
        		case PLSQLParser.STANDALONE:
        		case PLSQLParser.STARTUP:
        		case PLSQLParser.STATEMENT:
        		case PLSQLParser.STATEMENT_ID:
        		case PLSQLParser.STATIC:
        		case PLSQLParser.STATISTICS:
        		case PLSQLParser.STRING:
        		case PLSQLParser.SUBMULTISET:
        		case PLSQLParser.SUBPARTITION:
        		case PLSQLParser.SUBSTITUTABLE:
        		case PLSQLParser.SUBTYPE:
        		case PLSQLParser.SUCCESS:
        		case PLSQLParser.SUSPEND:
        		case PLSQLParser.TIME:
        		case PLSQLParser.TIMESTAMP:
        		case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        		case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        		case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        		case PLSQLParser.TIMEZONE_ABBR:
        		case PLSQLParser.TIMEZONE_HOUR:
        		case PLSQLParser.TIMEZONE_MINUTE:
        		case PLSQLParser.TIMEZONE_REGION:
        		case PLSQLParser.TRAILING:
        		case PLSQLParser.TRANSACTION:
        		case PLSQLParser.TRANSLATE:
        		case PLSQLParser.TREAT:
        		case PLSQLParser.TRIGGER:
        		case PLSQLParser.TRIM:
        		case PLSQLParser.TRUNCATE:
        		case PLSQLParser.TYPE:
        		case PLSQLParser.UNBOUNDED:
        		case PLSQLParser.UNDER:
        		case PLSQLParser.UNLIMITED:
        		case PLSQLParser.UNTIL:
        		case PLSQLParser.UPDATE:
        		case PLSQLParser.UPDATED:
        		case PLSQLParser.UPSERT:
        		case PLSQLParser.UROWID:
        		case PLSQLParser.USE:
        		case PLSQLParser.VALIDATE:
        		case PLSQLParser.VALUE:
        		case PLSQLParser.VARCHAR:
        		case PLSQLParser.VARCHAR2:
        		case PLSQLParser.VARIABLE:
        		case PLSQLParser.VARRAY:
        		case PLSQLParser.VARYING:
        		case PLSQLParser.VERSION:
        		case PLSQLParser.VERSIONS:
        		case PLSQLParser.WAIT:
        		case PLSQLParser.WARNING:
        		case PLSQLParser.WELLFORMED:
        		case PLSQLParser.WHENEVER:
        		case PLSQLParser.WHILE:
        		case PLSQLParser.WITH:
        		case PLSQLParser.WITHIN:
        		case PLSQLParser.WORK:
        		case PLSQLParser.WRITE:
        		case PLSQLParser.XML:
        		case PLSQLParser.XMLAGG:
        		case PLSQLParser.XMLATTRIBUTES:
        		case PLSQLParser.XMLCAST:
        		case PLSQLParser.XMLCOLATTVAL:
        		case PLSQLParser.XMLELEMENT:
        		case PLSQLParser.XMLEXISTS:
        		case PLSQLParser.XMLFOREST:
        		case PLSQLParser.XMLNAMESPACES:
        		case PLSQLParser.XMLPARSE:
        		case PLSQLParser.XMLPI:
        		case PLSQLParser.XMLQUERY:
        		case PLSQLParser.XMLROOT:
        		case PLSQLParser.XMLSERIALIZE:
        		case PLSQLParser.XMLTABLE:
        		case PLSQLParser.YEAR:
        		case PLSQLParser.YES:
        		case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        		case PLSQLParser.ZONE:
        		case PLSQLParser.PREDICTION:
        		case PLSQLParser.PREDICTION_BOUNDS:
        		case PLSQLParser.PREDICTION_COST:
        		case PLSQLParser.PREDICTION_DETAILS:
        		case PLSQLParser.PREDICTION_PROBABILITY:
        		case PLSQLParser.PREDICTION_SET:
        		case PLSQLParser.CUME_DIST:
        		case PLSQLParser.DENSE_RANK:
        		case PLSQLParser.LISTAGG:
        		case PLSQLParser.PERCENT_RANK:
        		case PLSQLParser.PERCENTILE_CONT:
        		case PLSQLParser.PERCENTILE_DISC:
        		case PLSQLParser.RANK:
        		case PLSQLParser.AVG:
        		case PLSQLParser.CORR:
        		case PLSQLParser.LAG:
        		case PLSQLParser.LEAD:
        		case PLSQLParser.MAX:
        		case PLSQLParser.MEDIAN:
        		case PLSQLParser.MIN:
        		case PLSQLParser.NTILE:
        		case PLSQLParser.RATIO_TO_REPORT:
        		case PLSQLParser.ROW_NUMBER:
        		case PLSQLParser.SUM:
        		case PLSQLParser.VARIANCE:
        		case PLSQLParser.REGR_:
        		case PLSQLParser.STDDEV:
        		case PLSQLParser.VAR_:
        		case PLSQLParser.COVAR_:
        		case PLSQLParser.DELIMITED_ID:
        		case PLSQLParser.LEFT_PAREN:
        		case PLSQLParser.BINDVAR:
        		case PLSQLParser.COLON:
        		case PLSQLParser.INTRODUCER:
        		case PLSQLParser.REGULAR_ID:
        		    this.state = 2193;
        		    this.statement();
        		    this.state = 2194;
        		    _la = this._input.LA(1);
        		    if(!(_la===PLSQLParser.EOF || _la===PLSQLParser.SEMICOLON)) {
        		    this._errHandler.recoverInline(this);
        		    }
        		    else {
        		        this.consume();
        		    }
        		    break;
        		case PLSQLParser.LESS_THAN_OP:
        		    this.state = 2196;
        		    this.label_declaration();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2199; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,204, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Label_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_label_declaration;
    this.ltp1 = null; // Token
    return this;
}

Label_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_declarationContext.prototype.constructor = Label_declarationContext;

Label_declarationContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Label_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLabel_declaration(this);
	}
};

Label_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLabel_declaration(this);
	}
};




PLSQLParser.Label_declarationContext = Label_declarationContext;

PLSQLParser.prototype.label_declaration = function() {

    var localctx = new Label_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, PLSQLParser.RULE_label_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2201;
        localctx.ltp1 = this.match(PLSQLParser.LESS_THAN_OP);
        this.state = 2202;
        this.match(PLSQLParser.LESS_THAN_OP);
        this.state = 2203;
        this.label_name();
        this.state = 2204;
        this.match(PLSQLParser.GREATER_THAN_OP);
        this.state = 2205;
        this.match(PLSQLParser.GREATER_THAN_OP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.CREATE = function() {
    return this.getToken(PLSQLParser.CREATE, 0);
};

StatementContext.prototype.swallow_to_semi = function() {
    return this.getTypedRuleContext(Swallow_to_semiContext,0);
};

StatementContext.prototype.ALTER = function() {
    return this.getToken(PLSQLParser.ALTER, 0);
};

StatementContext.prototype.GRANT = function() {
    return this.getToken(PLSQLParser.GRANT, 0);
};

StatementContext.prototype.TRUNCATE = function() {
    return this.getToken(PLSQLParser.TRUNCATE, 0);
};

StatementContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.assignment_statement = function() {
    return this.getTypedRuleContext(Assignment_statementContext,0);
};

StatementContext.prototype.continue_statement = function() {
    return this.getTypedRuleContext(Continue_statementContext,0);
};

StatementContext.prototype.exit_statement = function() {
    return this.getTypedRuleContext(Exit_statementContext,0);
};

StatementContext.prototype.goto_statement = function() {
    return this.getTypedRuleContext(Goto_statementContext,0);
};

StatementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};

StatementContext.prototype.loop_statement = function() {
    return this.getTypedRuleContext(Loop_statementContext,0);
};

StatementContext.prototype.forall_statement = function() {
    return this.getTypedRuleContext(Forall_statementContext,0);
};

StatementContext.prototype.null_statement = function() {
    return this.getTypedRuleContext(Null_statementContext,0);
};

StatementContext.prototype.raise_statement = function() {
    return this.getTypedRuleContext(Raise_statementContext,0);
};

StatementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};

StatementContext.prototype.case_statement = function() {
    return this.getTypedRuleContext(Case_statementContext,0);
};

StatementContext.prototype.sql_statement = function() {
    return this.getTypedRuleContext(Sql_statementContext,0);
};

StatementContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitStatement(this);
	}
};




PLSQLParser.StatementContext = StatementContext;

PLSQLParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, PLSQLParser.RULE_statement);
    try {
        this.state = 2230;
        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2207;
            this.match(PLSQLParser.CREATE);
            this.state = 2208;
            this.swallow_to_semi();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2209;
            this.match(PLSQLParser.ALTER);
            this.state = 2210;
            this.swallow_to_semi();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2211;
            this.match(PLSQLParser.GRANT);
            this.state = 2212;
            this.swallow_to_semi();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2213;
            this.match(PLSQLParser.TRUNCATE);
            this.state = 2214;
            this.swallow_to_semi();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2215;
            this.body();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2216;
            this.block();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2217;
            this.assignment_statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2218;
            this.continue_statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2219;
            this.exit_statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2220;
            this.goto_statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2221;
            this.if_statement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2222;
            this.loop_statement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2223;
            this.forall_statement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2224;
            this.null_statement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2225;
            this.raise_statement();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2226;
            this.return_statement();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2227;
            this.case_statement();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2228;
            this.sql_statement();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2229;
            this.function_call();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_assignment_statement;
    return this;
}

Assignment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_statementContext.prototype.constructor = Assignment_statementContext;

Assignment_statementContext.prototype.ASSIGN_OP = function() {
    return this.getToken(PLSQLParser.ASSIGN_OP, 0);
};

Assignment_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assignment_statementContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

Assignment_statementContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Assignment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAssignment_statement(this);
	}
};

Assignment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAssignment_statement(this);
	}
};




PLSQLParser.Assignment_statementContext = Assignment_statementContext;

PLSQLParser.prototype.assignment_statement = function() {

    var localctx = new Assignment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, PLSQLParser.RULE_assignment_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2234;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 2232;
            this.general_element();
            break;
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
            this.state = 2233;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2236;
        this.match(PLSQLParser.ASSIGN_OP);
        this.state = 2237;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Continue_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_continue_statement;
    return this;
}

Continue_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_statementContext.prototype.constructor = Continue_statementContext;

Continue_statementContext.prototype.CONTINUE = function() {
    return this.getToken(PLSQLParser.CONTINUE, 0);
};

Continue_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Continue_statementContext.prototype.WHEN = function() {
    return this.getToken(PLSQLParser.WHEN, 0);
};

Continue_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Continue_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterContinue_statement(this);
	}
};

Continue_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitContinue_statement(this);
	}
};




PLSQLParser.Continue_statementContext = Continue_statementContext;

PLSQLParser.prototype.continue_statement = function() {

    var localctx = new Continue_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, PLSQLParser.RULE_continue_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2239;
        this.match(PLSQLParser.CONTINUE);
        this.state = 2241;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (PLSQLParser.DEFAULTS - 99)) | (1 << (PLSQLParser.DEFERRED - 99)) | (1 << (PLSQLParser.DEFINER - 99)) | (1 << (PLSQLParser.DETERMINISTIC - 99)) | (1 << (PLSQLParser.DIMENSION - 99)) | (1 << (PLSQLParser.DISABLE - 99)) | (1 << (PLSQLParser.DISASSOCIATE - 99)) | (1 << (PLSQLParser.DOCUMENT - 99)) | (1 << (PLSQLParser.DOUBLE - 99)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (PLSQLParser.EACH - 99)) | (1 << (PLSQLParser.ELEMENT - 99)) | (1 << (PLSQLParser.EMPTY - 99)) | (1 << (PLSQLParser.ENABLE - 99)) | (1 << (PLSQLParser.ENCODING - 99)) | (1 << (PLSQLParser.ENTITYESCAPING - 99)) | (1 << (PLSQLParser.ERRORS - 99)) | (1 << (PLSQLParser.ESCAPE - 99)) | (1 << (PLSQLParser.EVALNAME - 99)) | (1 << (PLSQLParser.EXCEPTION - 99)) | (1 << (PLSQLParser.EXCEPTION_INIT - 99)) | (1 << (PLSQLParser.EXCEPTIONS - 99)) | (1 << (PLSQLParser.EXCLUDE - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2240;
            this.label_name();
        }

        this.state = 2245;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WHEN) {
            this.state = 2243;
            this.match(PLSQLParser.WHEN);
            this.state = 2244;
            this.condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_exit_statement;
    return this;
}

Exit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exit_statementContext.prototype.constructor = Exit_statementContext;

Exit_statementContext.prototype.EXIT = function() {
    return this.getToken(PLSQLParser.EXIT, 0);
};

Exit_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Exit_statementContext.prototype.WHEN = function() {
    return this.getToken(PLSQLParser.WHEN, 0);
};

Exit_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Exit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterExit_statement(this);
	}
};

Exit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitExit_statement(this);
	}
};




PLSQLParser.Exit_statementContext = Exit_statementContext;

PLSQLParser.prototype.exit_statement = function() {

    var localctx = new Exit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, PLSQLParser.RULE_exit_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2247;
        this.match(PLSQLParser.EXIT);
        this.state = 2249;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (PLSQLParser.DEFAULTS - 99)) | (1 << (PLSQLParser.DEFERRED - 99)) | (1 << (PLSQLParser.DEFINER - 99)) | (1 << (PLSQLParser.DETERMINISTIC - 99)) | (1 << (PLSQLParser.DIMENSION - 99)) | (1 << (PLSQLParser.DISABLE - 99)) | (1 << (PLSQLParser.DISASSOCIATE - 99)) | (1 << (PLSQLParser.DOCUMENT - 99)) | (1 << (PLSQLParser.DOUBLE - 99)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (PLSQLParser.EACH - 99)) | (1 << (PLSQLParser.ELEMENT - 99)) | (1 << (PLSQLParser.EMPTY - 99)) | (1 << (PLSQLParser.ENABLE - 99)) | (1 << (PLSQLParser.ENCODING - 99)) | (1 << (PLSQLParser.ENTITYESCAPING - 99)) | (1 << (PLSQLParser.ERRORS - 99)) | (1 << (PLSQLParser.ESCAPE - 99)) | (1 << (PLSQLParser.EVALNAME - 99)) | (1 << (PLSQLParser.EXCEPTION - 99)) | (1 << (PLSQLParser.EXCEPTION_INIT - 99)) | (1 << (PLSQLParser.EXCEPTIONS - 99)) | (1 << (PLSQLParser.EXCLUDE - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2248;
            this.label_name();
        }

        this.state = 2253;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WHEN) {
            this.state = 2251;
            this.match(PLSQLParser.WHEN);
            this.state = 2252;
            this.condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Goto_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_goto_statement;
    return this;
}

Goto_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Goto_statementContext.prototype.constructor = Goto_statementContext;

Goto_statementContext.prototype.GOTO = function() {
    return this.getToken(PLSQLParser.GOTO, 0);
};

Goto_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Goto_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterGoto_statement(this);
	}
};

Goto_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitGoto_statement(this);
	}
};




PLSQLParser.Goto_statementContext = Goto_statementContext;

PLSQLParser.prototype.goto_statement = function() {

    var localctx = new Goto_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, PLSQLParser.RULE_goto_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2255;
        this.match(PLSQLParser.GOTO);
        this.state = 2256;
        this.label_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_if_statement;
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.IF);
    } else {
        return this.getToken(PLSQLParser.IF, i);
    }
};


If_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

If_statementContext.prototype.THEN = function() {
    return this.getToken(PLSQLParser.THEN, 0);
};

If_statementContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

If_statementContext.prototype.END = function() {
    return this.getToken(PLSQLParser.END, 0);
};

If_statementContext.prototype.elsif_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Elsif_partContext);
    } else {
        return this.getTypedRuleContext(Elsif_partContext,i);
    }
};

If_statementContext.prototype.else_part = function() {
    return this.getTypedRuleContext(Else_partContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitIf_statement(this);
	}
};




PLSQLParser.If_statementContext = If_statementContext;

PLSQLParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, PLSQLParser.RULE_if_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2258;
        this.match(PLSQLParser.IF);
        this.state = 2259;
        this.condition();
        this.state = 2260;
        this.match(PLSQLParser.THEN);
        this.state = 2261;
        this.seq_of_statements();
        this.state = 2265;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.ELSIF) {
            this.state = 2262;
            this.elsif_part();
            this.state = 2267;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2269;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ELSE) {
            this.state = 2268;
            this.else_part();
        }

        this.state = 2271;
        this.match(PLSQLParser.END);
        this.state = 2272;
        this.match(PLSQLParser.IF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Elsif_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_elsif_part;
    return this;
}

Elsif_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Elsif_partContext.prototype.constructor = Elsif_partContext;

Elsif_partContext.prototype.ELSIF = function() {
    return this.getToken(PLSQLParser.ELSIF, 0);
};

Elsif_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Elsif_partContext.prototype.THEN = function() {
    return this.getToken(PLSQLParser.THEN, 0);
};

Elsif_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Elsif_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterElsif_part(this);
	}
};

Elsif_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitElsif_part(this);
	}
};




PLSQLParser.Elsif_partContext = Elsif_partContext;

PLSQLParser.prototype.elsif_part = function() {

    var localctx = new Elsif_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, PLSQLParser.RULE_elsif_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2274;
        this.match(PLSQLParser.ELSIF);
        this.state = 2275;
        this.condition();
        this.state = 2276;
        this.match(PLSQLParser.THEN);
        this.state = 2277;
        this.seq_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_else_part;
    return this;
}

Else_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_partContext.prototype.constructor = Else_partContext;

Else_partContext.prototype.ELSE = function() {
    return this.getToken(PLSQLParser.ELSE, 0);
};

Else_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Else_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterElse_part(this);
	}
};

Else_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitElse_part(this);
	}
};




PLSQLParser.Else_partContext = Else_partContext;

PLSQLParser.prototype.else_part = function() {

    var localctx = new Else_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, PLSQLParser.RULE_else_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2279;
        this.match(PLSQLParser.ELSE);
        this.state = 2280;
        this.seq_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Loop_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_loop_statement;
    return this;
}

Loop_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Loop_statementContext.prototype.constructor = Loop_statementContext;

Loop_statementContext.prototype.LOOP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.LOOP);
    } else {
        return this.getToken(PLSQLParser.LOOP, i);
    }
};


Loop_statementContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Loop_statementContext.prototype.END = function() {
    return this.getToken(PLSQLParser.END, 0);
};

Loop_statementContext.prototype.label_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_nameContext);
    } else {
        return this.getTypedRuleContext(Label_nameContext,i);
    }
};

Loop_statementContext.prototype.WHILE = function() {
    return this.getToken(PLSQLParser.WHILE, 0);
};

Loop_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Loop_statementContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

Loop_statementContext.prototype.cursor_loop_param = function() {
    return this.getTypedRuleContext(Cursor_loop_paramContext,0);
};

Loop_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLoop_statement(this);
	}
};

Loop_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLoop_statement(this);
	}
};




PLSQLParser.Loop_statementContext = Loop_statementContext;

PLSQLParser.prototype.loop_statement = function() {

    var localctx = new Loop_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, PLSQLParser.RULE_loop_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2283;
        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
        if(la_===1) {
            this.state = 2282;
            this.label_name();

        }
        this.state = 2289;
        switch (this._input.LA(1)) {
        case PLSQLParser.WHILE:
        	this.state = 2285;
        	this.match(PLSQLParser.WHILE);
        	this.state = 2286;
        	this.condition();
        	break;
        case PLSQLParser.FOR:
        	this.state = 2287;
        	this.match(PLSQLParser.FOR);
        	this.state = 2288;
        	this.cursor_loop_param();
        	break;
        case PLSQLParser.LOOP:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2291;
        this.match(PLSQLParser.LOOP);
        this.state = 2292;
        this.seq_of_statements();
        this.state = 2293;
        this.match(PLSQLParser.END);
        this.state = 2294;
        this.match(PLSQLParser.LOOP);
        this.state = 2296;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (PLSQLParser.DEFAULTS - 99)) | (1 << (PLSQLParser.DEFERRED - 99)) | (1 << (PLSQLParser.DEFINER - 99)) | (1 << (PLSQLParser.DETERMINISTIC - 99)) | (1 << (PLSQLParser.DIMENSION - 99)) | (1 << (PLSQLParser.DISABLE - 99)) | (1 << (PLSQLParser.DISASSOCIATE - 99)) | (1 << (PLSQLParser.DOCUMENT - 99)) | (1 << (PLSQLParser.DOUBLE - 99)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (PLSQLParser.EACH - 99)) | (1 << (PLSQLParser.ELEMENT - 99)) | (1 << (PLSQLParser.EMPTY - 99)) | (1 << (PLSQLParser.ENABLE - 99)) | (1 << (PLSQLParser.ENCODING - 99)) | (1 << (PLSQLParser.ENTITYESCAPING - 99)) | (1 << (PLSQLParser.ERRORS - 99)) | (1 << (PLSQLParser.ESCAPE - 99)) | (1 << (PLSQLParser.EVALNAME - 99)) | (1 << (PLSQLParser.EXCEPTION - 99)) | (1 << (PLSQLParser.EXCEPTION_INIT - 99)) | (1 << (PLSQLParser.EXCEPTIONS - 99)) | (1 << (PLSQLParser.EXCLUDE - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2295;
            this.label_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_loop_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cursor_loop_param;
    return this;
}

Cursor_loop_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_loop_paramContext.prototype.constructor = Cursor_loop_paramContext;

Cursor_loop_paramContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Cursor_loop_paramContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Cursor_loop_paramContext.prototype.lower_bound = function() {
    return this.getTypedRuleContext(Lower_boundContext,0);
};

Cursor_loop_paramContext.prototype.upper_bound = function() {
    return this.getTypedRuleContext(Upper_boundContext,0);
};

Cursor_loop_paramContext.prototype.REVERSE = function() {
    return this.getToken(PLSQLParser.REVERSE, 0);
};

Cursor_loop_paramContext.prototype.record_name = function() {
    return this.getTypedRuleContext(Record_nameContext,0);
};

Cursor_loop_paramContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Cursor_loop_paramContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Cursor_loop_paramContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Cursor_loop_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCursor_loop_param(this);
	}
};

Cursor_loop_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCursor_loop_param(this);
	}
};




PLSQLParser.Cursor_loop_paramContext = Cursor_loop_paramContext;

PLSQLParser.prototype.cursor_loop_param = function() {

    var localctx = new Cursor_loop_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, PLSQLParser.RULE_cursor_loop_param);
    var _la = 0; // Token type
    try {
        this.state = 2319;
        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2298;
            this.index_name();
            this.state = 2299;
            this.match(PLSQLParser.IN);
            this.state = 2301;
            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
            if(la_===1) {
                this.state = 2300;
                this.match(PLSQLParser.REVERSE);

            }
            this.state = 2303;
            this.lower_bound();
            this.state = 2304;
            this.match(PLSQLParser.T__0);
            this.state = 2305;
            this.upper_bound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2307;
            this.record_name();
            this.state = 2308;
            this.match(PLSQLParser.IN);
            this.state = 2317;
            switch(this._input.LA(1)) {
            case PLSQLParser.A_LETTER:
            case PLSQLParser.ADD:
            case PLSQLParser.AFTER:
            case PLSQLParser.AGENT:
            case PLSQLParser.AGGREGATE:
            case PLSQLParser.ANALYZE:
            case PLSQLParser.ARRAY:
            case PLSQLParser.ASSOCIATE:
            case PLSQLParser.AT:
            case PLSQLParser.ATTRIBUTE:
            case PLSQLParser.AUDIT:
            case PLSQLParser.AUTHID:
            case PLSQLParser.AUTO:
            case PLSQLParser.AUTOMATIC:
            case PLSQLParser.AUTONOMOUS_TRANSACTION:
            case PLSQLParser.BATCH:
            case PLSQLParser.BEFORE:
            case PLSQLParser.BFILE:
            case PLSQLParser.BINARY_DOUBLE:
            case PLSQLParser.BINARY_FLOAT:
            case PLSQLParser.BINARY_INTEGER:
            case PLSQLParser.BLOB:
            case PLSQLParser.BLOCK:
            case PLSQLParser.BODY:
            case PLSQLParser.BOOLEAN:
            case PLSQLParser.BOTH:
            case PLSQLParser.BULK:
            case PLSQLParser.BYTE:
            case PLSQLParser.C_LETTER:
            case PLSQLParser.CALL:
            case PLSQLParser.CANONICAL:
            case PLSQLParser.CASCADE:
            case PLSQLParser.CAST:
            case PLSQLParser.CHAR:
            case PLSQLParser.CHAR_CS:
            case PLSQLParser.CHARACTER:
            case PLSQLParser.CHR:
            case PLSQLParser.CLOB:
            case PLSQLParser.CLOSE:
            case PLSQLParser.CLUSTER:
            case PLSQLParser.COLLECT:
            case PLSQLParser.COLUMNS:
            case PLSQLParser.COMMENT:
            case PLSQLParser.COMMIT:
            case PLSQLParser.COMMITTED:
            case PLSQLParser.COMPATIBILITY:
            case PLSQLParser.COMPILE:
            case PLSQLParser.COMPOUND:
            case PLSQLParser.CONSTANT:
            case PLSQLParser.CONSTRAINT:
            case PLSQLParser.CONSTRAINTS:
            case PLSQLParser.CONSTRUCTOR:
            case PLSQLParser.CONTENT:
            case PLSQLParser.CONTEXT:
            case PLSQLParser.CONTINUE:
            case PLSQLParser.CONVERT:
            case PLSQLParser.CORRUPT_XID:
            case PLSQLParser.CORRUPT_XID_ALL:
            case PLSQLParser.COST:
            case PLSQLParser.COUNT:
            case PLSQLParser.CROSS:
            case PLSQLParser.CUBE:
            case PLSQLParser.CURRENT_USER:
            case PLSQLParser.CURSOR:
            case PLSQLParser.CUSTOMDATUM:
            case PLSQLParser.CYCLE:
            case PLSQLParser.DATA:
            case PLSQLParser.DATABASE:
            case PLSQLParser.DAY:
            case PLSQLParser.DB_ROLE_CHANGE:
            case PLSQLParser.DBTIMEZONE:
            case PLSQLParser.DDL:
            case PLSQLParser.DEBUG:
            case PLSQLParser.DEC:
            case PLSQLParser.DECIMAL:
            case PLSQLParser.DECOMPOSE:
            case PLSQLParser.DECREMENT:
            case PLSQLParser.DEFAULTS:
            case PLSQLParser.DEFERRED:
            case PLSQLParser.DEFINER:
            case PLSQLParser.DETERMINISTIC:
            case PLSQLParser.DIMENSION:
            case PLSQLParser.DISABLE:
            case PLSQLParser.DISASSOCIATE:
            case PLSQLParser.DOCUMENT:
            case PLSQLParser.DOUBLE:
            case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
            case PLSQLParser.EACH:
            case PLSQLParser.ELEMENT:
            case PLSQLParser.EMPTY:
            case PLSQLParser.ENABLE:
            case PLSQLParser.ENCODING:
            case PLSQLParser.ENTITYESCAPING:
            case PLSQLParser.ERRORS:
            case PLSQLParser.ESCAPE:
            case PLSQLParser.EVALNAME:
            case PLSQLParser.EXCEPTION:
            case PLSQLParser.EXCEPTION_INIT:
            case PLSQLParser.EXCEPTIONS:
            case PLSQLParser.EXCLUDE:
            case PLSQLParser.EXECUTE:
            case PLSQLParser.EXIT:
            case PLSQLParser.EXPLAIN:
            case PLSQLParser.EXTERNAL:
            case PLSQLParser.EXTRACT:
            case PLSQLParser.FAILURE:
            case PLSQLParser.FINAL:
            case PLSQLParser.FIRST:
            case PLSQLParser.FIRST_VALUE:
            case PLSQLParser.FLOAT:
            case PLSQLParser.FOLLOWING:
            case PLSQLParser.FOLLOWS:
            case PLSQLParser.FORALL:
            case PLSQLParser.FORCE:
            case PLSQLParser.FULL:
            case PLSQLParser.FUNCTION:
            case PLSQLParser.GROUPING:
            case PLSQLParser.HASH:
            case PLSQLParser.HIDE:
            case PLSQLParser.HOUR:
            case PLSQLParser.IGNORE:
            case PLSQLParser.IMMEDIATE:
            case PLSQLParser.INCLUDE:
            case PLSQLParser.INCLUDING:
            case PLSQLParser.INCREMENT:
            case PLSQLParser.INDENT:
            case PLSQLParser.INDEXED:
            case PLSQLParser.INDICATOR:
            case PLSQLParser.INDICES:
            case PLSQLParser.INFINITE:
            case PLSQLParser.INLINE:
            case PLSQLParser.INNER:
            case PLSQLParser.INOUT:
            case PLSQLParser.INSTANTIABLE:
            case PLSQLParser.INSTEAD:
            case PLSQLParser.INT:
            case PLSQLParser.INTEGER:
            case PLSQLParser.INTERVAL:
            case PLSQLParser.INVALIDATE:
            case PLSQLParser.ISOLATION:
            case PLSQLParser.ITERATE:
            case PLSQLParser.JAVA:
            case PLSQLParser.JOIN:
            case PLSQLParser.KEEP:
            case PLSQLParser.LANGUAGE:
            case PLSQLParser.LAST:
            case PLSQLParser.LAST_VALUE:
            case PLSQLParser.LEADING:
            case PLSQLParser.LEFT:
            case PLSQLParser.LEVEL:
            case PLSQLParser.LIBRARY:
            case PLSQLParser.LIKE2:
            case PLSQLParser.LIKE4:
            case PLSQLParser.LIKEC:
            case PLSQLParser.LIMIT:
            case PLSQLParser.LOCAL:
            case PLSQLParser.LOCKED:
            case PLSQLParser.LOG:
            case PLSQLParser.LOGOFF:
            case PLSQLParser.LOGON:
            case PLSQLParser.LONG:
            case PLSQLParser.LOOP:
            case PLSQLParser.MAIN:
            case PLSQLParser.MAP:
            case PLSQLParser.MATCHED:
            case PLSQLParser.MAXVALUE:
            case PLSQLParser.MEASURES:
            case PLSQLParser.MEMBER:
            case PLSQLParser.MERGE:
            case PLSQLParser.MINUTE:
            case PLSQLParser.MINVALUE:
            case PLSQLParser.MLSLABEL:
            case PLSQLParser.MODEL:
            case PLSQLParser.MODIFY:
            case PLSQLParser.MONTH:
            case PLSQLParser.MULTISET:
            case PLSQLParser.NAME:
            case PLSQLParser.NAN:
            case PLSQLParser.NATURAL:
            case PLSQLParser.NATURALN:
            case PLSQLParser.NAV:
            case PLSQLParser.NCHAR:
            case PLSQLParser.NCHAR_CS:
            case PLSQLParser.NCLOB:
            case PLSQLParser.NESTED:
            case PLSQLParser.NEW:
            case PLSQLParser.NO:
            case PLSQLParser.NOAUDIT:
            case PLSQLParser.NOCOPY:
            case PLSQLParser.NOCYCLE:
            case PLSQLParser.NOENTITYESCAPING:
            case PLSQLParser.NONE:
            case PLSQLParser.NOSCHEMACHECK:
            case PLSQLParser.NULLS:
            case PLSQLParser.NUMBER:
            case PLSQLParser.NUMERIC:
            case PLSQLParser.NVARCHAR2:
            case PLSQLParser.OBJECT:
            case PLSQLParser.OFF:
            case PLSQLParser.OID:
            case PLSQLParser.OLD:
            case PLSQLParser.ONLY:
            case PLSQLParser.OPEN:
            case PLSQLParser.ORADATA:
            case PLSQLParser.ORDINALITY:
            case PLSQLParser.OSERROR:
            case PLSQLParser.OUT:
            case PLSQLParser.OUTER:
            case PLSQLParser.OVER:
            case PLSQLParser.OVERRIDING:
            case PLSQLParser.PACKAGE:
            case PLSQLParser.PARALLEL_ENABLE:
            case PLSQLParser.PARAMETERS:
            case PLSQLParser.PARENT:
            case PLSQLParser.PARTITION:
            case PLSQLParser.PASSING:
            case PLSQLParser.PATH:
            case PLSQLParser.PIPELINED:
            case PLSQLParser.PLAN:
            case PLSQLParser.PLS_INTEGER:
            case PLSQLParser.POSITIVE:
            case PLSQLParser.POSITIVEN:
            case PLSQLParser.PRAGMA:
            case PLSQLParser.PRECEDING:
            case PLSQLParser.PRECISION:
            case PLSQLParser.PRESENT:
            case PLSQLParser.RAISE:
            case PLSQLParser.RANGE:
            case PLSQLParser.RAW:
            case PLSQLParser.READ:
            case PLSQLParser.REAL:
            case PLSQLParser.RECORD:
            case PLSQLParser.REF:
            case PLSQLParser.REFERENCE:
            case PLSQLParser.REFERENCING:
            case PLSQLParser.REJECT:
            case PLSQLParser.RELIES_ON:
            case PLSQLParser.RENAME:
            case PLSQLParser.REPLACE:
            case PLSQLParser.RESPECT:
            case PLSQLParser.RESTRICT_REFERENCES:
            case PLSQLParser.RESULT:
            case PLSQLParser.RESULT_CACHE:
            case PLSQLParser.RETURN:
            case PLSQLParser.RETURNING:
            case PLSQLParser.REUSE:
            case PLSQLParser.REVERSE:
            case PLSQLParser.RIGHT:
            case PLSQLParser.ROLLBACK:
            case PLSQLParser.ROLLUP:
            case PLSQLParser.ROW:
            case PLSQLParser.ROWID:
            case PLSQLParser.ROWS:
            case PLSQLParser.RULES:
            case PLSQLParser.SAMPLE:
            case PLSQLParser.SAVE:
            case PLSQLParser.SAVEPOINT:
            case PLSQLParser.SCHEMA:
            case PLSQLParser.SCHEMACHECK:
            case PLSQLParser.SCN:
            case PLSQLParser.SECOND:
            case PLSQLParser.SEED:
            case PLSQLParser.SEGMENT:
            case PLSQLParser.SELF:
            case PLSQLParser.SEQUENTIAL:
            case PLSQLParser.SERIALIZABLE:
            case PLSQLParser.SERIALLY_REUSABLE:
            case PLSQLParser.SERVERERROR:
            case PLSQLParser.SESSIONTIMEZONE:
            case PLSQLParser.SET:
            case PLSQLParser.SETS:
            case PLSQLParser.SETTINGS:
            case PLSQLParser.SHOW:
            case PLSQLParser.SHUTDOWN:
            case PLSQLParser.SIBLINGS:
            case PLSQLParser.SIGNTYPE:
            case PLSQLParser.SIMPLE_INTEGER:
            case PLSQLParser.SINGLE:
            case PLSQLParser.SKIP:
            case PLSQLParser.SMALLINT:
            case PLSQLParser.SNAPSHOT:
            case PLSQLParser.SOME:
            case PLSQLParser.SPECIFICATION:
            case PLSQLParser.SQLDATA:
            case PLSQLParser.SQLERROR:
            case PLSQLParser.STANDALONE:
            case PLSQLParser.STARTUP:
            case PLSQLParser.STATEMENT:
            case PLSQLParser.STATEMENT_ID:
            case PLSQLParser.STATIC:
            case PLSQLParser.STATISTICS:
            case PLSQLParser.STRING:
            case PLSQLParser.SUBMULTISET:
            case PLSQLParser.SUBPARTITION:
            case PLSQLParser.SUBSTITUTABLE:
            case PLSQLParser.SUBTYPE:
            case PLSQLParser.SUCCESS:
            case PLSQLParser.SUSPEND:
            case PLSQLParser.TIME:
            case PLSQLParser.TIMESTAMP:
            case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
            case PLSQLParser.TIMEZONE_ABBR:
            case PLSQLParser.TIMEZONE_HOUR:
            case PLSQLParser.TIMEZONE_MINUTE:
            case PLSQLParser.TIMEZONE_REGION:
            case PLSQLParser.TRAILING:
            case PLSQLParser.TRANSACTION:
            case PLSQLParser.TRANSLATE:
            case PLSQLParser.TREAT:
            case PLSQLParser.TRIGGER:
            case PLSQLParser.TRIM:
            case PLSQLParser.TRUNCATE:
            case PLSQLParser.TYPE:
            case PLSQLParser.UNBOUNDED:
            case PLSQLParser.UNDER:
            case PLSQLParser.UNLIMITED:
            case PLSQLParser.UNTIL:
            case PLSQLParser.UPDATED:
            case PLSQLParser.UPSERT:
            case PLSQLParser.UROWID:
            case PLSQLParser.USE:
            case PLSQLParser.VALIDATE:
            case PLSQLParser.VALUE:
            case PLSQLParser.VARCHAR:
            case PLSQLParser.VARCHAR2:
            case PLSQLParser.VARIABLE:
            case PLSQLParser.VARRAY:
            case PLSQLParser.VARYING:
            case PLSQLParser.VERSION:
            case PLSQLParser.VERSIONS:
            case PLSQLParser.WAIT:
            case PLSQLParser.WARNING:
            case PLSQLParser.WELLFORMED:
            case PLSQLParser.WHENEVER:
            case PLSQLParser.WHILE:
            case PLSQLParser.WITHIN:
            case PLSQLParser.WORK:
            case PLSQLParser.WRITE:
            case PLSQLParser.XML:
            case PLSQLParser.XMLAGG:
            case PLSQLParser.XMLATTRIBUTES:
            case PLSQLParser.XMLCAST:
            case PLSQLParser.XMLCOLATTVAL:
            case PLSQLParser.XMLELEMENT:
            case PLSQLParser.XMLEXISTS:
            case PLSQLParser.XMLFOREST:
            case PLSQLParser.XMLNAMESPACES:
            case PLSQLParser.XMLPARSE:
            case PLSQLParser.XMLPI:
            case PLSQLParser.XMLQUERY:
            case PLSQLParser.XMLROOT:
            case PLSQLParser.XMLSERIALIZE:
            case PLSQLParser.XMLTABLE:
            case PLSQLParser.YEAR:
            case PLSQLParser.YES:
            case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
            case PLSQLParser.ZONE:
            case PLSQLParser.PREDICTION:
            case PLSQLParser.PREDICTION_BOUNDS:
            case PLSQLParser.PREDICTION_COST:
            case PLSQLParser.PREDICTION_DETAILS:
            case PLSQLParser.PREDICTION_PROBABILITY:
            case PLSQLParser.PREDICTION_SET:
            case PLSQLParser.CUME_DIST:
            case PLSQLParser.DENSE_RANK:
            case PLSQLParser.LISTAGG:
            case PLSQLParser.PERCENT_RANK:
            case PLSQLParser.PERCENTILE_CONT:
            case PLSQLParser.PERCENTILE_DISC:
            case PLSQLParser.RANK:
            case PLSQLParser.AVG:
            case PLSQLParser.CORR:
            case PLSQLParser.LAG:
            case PLSQLParser.LEAD:
            case PLSQLParser.MAX:
            case PLSQLParser.MEDIAN:
            case PLSQLParser.MIN:
            case PLSQLParser.NTILE:
            case PLSQLParser.RATIO_TO_REPORT:
            case PLSQLParser.ROW_NUMBER:
            case PLSQLParser.SUM:
            case PLSQLParser.VARIANCE:
            case PLSQLParser.REGR_:
            case PLSQLParser.STDDEV:
            case PLSQLParser.VAR_:
            case PLSQLParser.COVAR_:
            case PLSQLParser.DELIMITED_ID:
            case PLSQLParser.BINDVAR:
            case PLSQLParser.COLON:
            case PLSQLParser.INTRODUCER:
            case PLSQLParser.REGULAR_ID:
                this.state = 2309;
                this.cursor_name();
                this.state = 2311;
                _la = this._input.LA(1);
                if(_la===PLSQLParser.LEFT_PAREN) {
                    this.state = 2310;
                    this.expression_list();
                }

                break;
            case PLSQLParser.LEFT_PAREN:
                this.state = 2313;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 2314;
                this.select_statement();
                this.state = 2315;
                this.match(PLSQLParser.RIGHT_PAREN);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Forall_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_forall_statement;
    return this;
}

Forall_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Forall_statementContext.prototype.constructor = Forall_statementContext;

Forall_statementContext.prototype.FORALL = function() {
    return this.getToken(PLSQLParser.FORALL, 0);
};

Forall_statementContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Forall_statementContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Forall_statementContext.prototype.bounds_clause = function() {
    return this.getTypedRuleContext(Bounds_clauseContext,0);
};

Forall_statementContext.prototype.sql_statement = function() {
    return this.getTypedRuleContext(Sql_statementContext,0);
};

Forall_statementContext.prototype.SAVE = function() {
    return this.getToken(PLSQLParser.SAVE, 0);
};

Forall_statementContext.prototype.EXCEPTIONS = function() {
    return this.getToken(PLSQLParser.EXCEPTIONS, 0);
};

Forall_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterForall_statement(this);
	}
};

Forall_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitForall_statement(this);
	}
};




PLSQLParser.Forall_statementContext = Forall_statementContext;

PLSQLParser.prototype.forall_statement = function() {

    var localctx = new Forall_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, PLSQLParser.RULE_forall_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2321;
        this.match(PLSQLParser.FORALL);
        this.state = 2322;
        this.index_name();
        this.state = 2323;
        this.match(PLSQLParser.IN);
        this.state = 2324;
        this.bounds_clause();
        this.state = 2325;
        this.sql_statement();
        this.state = 2328;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.SAVE) {
            this.state = 2326;
            this.match(PLSQLParser.SAVE);
            this.state = 2327;
            this.match(PLSQLParser.EXCEPTIONS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bounds_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_bounds_clause;
    return this;
}

Bounds_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bounds_clauseContext.prototype.constructor = Bounds_clauseContext;

Bounds_clauseContext.prototype.lower_bound = function() {
    return this.getTypedRuleContext(Lower_boundContext,0);
};

Bounds_clauseContext.prototype.upper_bound = function() {
    return this.getTypedRuleContext(Upper_boundContext,0);
};

Bounds_clauseContext.prototype.INDICES = function() {
    return this.getToken(PLSQLParser.INDICES, 0);
};

Bounds_clauseContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Bounds_clauseContext.prototype.collection_name = function() {
    return this.getTypedRuleContext(Collection_nameContext,0);
};

Bounds_clauseContext.prototype.between_bound = function() {
    return this.getTypedRuleContext(Between_boundContext,0);
};

Bounds_clauseContext.prototype.VALUES = function() {
    return this.getToken(PLSQLParser.VALUES, 0);
};

Bounds_clauseContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Bounds_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterBounds_clause(this);
	}
};

Bounds_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitBounds_clause(this);
	}
};




PLSQLParser.Bounds_clauseContext = Bounds_clauseContext;

PLSQLParser.prototype.bounds_clause = function() {

    var localctx = new Bounds_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, PLSQLParser.RULE_bounds_clause);
    var _la = 0; // Token type
    try {
        this.state = 2343;
        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2330;
            this.lower_bound();
            this.state = 2331;
            this.match(PLSQLParser.T__0);
            this.state = 2332;
            this.upper_bound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2334;
            this.match(PLSQLParser.INDICES);
            this.state = 2335;
            this.match(PLSQLParser.OF);
            this.state = 2336;
            this.collection_name();
            this.state = 2338;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.BETWEEN) {
                this.state = 2337;
                this.between_bound();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2340;
            this.match(PLSQLParser.VALUES);
            this.state = 2341;
            this.match(PLSQLParser.OF);
            this.state = 2342;
            this.index_name();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_between_bound;
    return this;
}

Between_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_boundContext.prototype.constructor = Between_boundContext;

Between_boundContext.prototype.BETWEEN = function() {
    return this.getToken(PLSQLParser.BETWEEN, 0);
};

Between_boundContext.prototype.lower_bound = function() {
    return this.getTypedRuleContext(Lower_boundContext,0);
};

Between_boundContext.prototype.AND = function() {
    return this.getToken(PLSQLParser.AND, 0);
};

Between_boundContext.prototype.upper_bound = function() {
    return this.getTypedRuleContext(Upper_boundContext,0);
};

Between_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterBetween_bound(this);
	}
};

Between_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitBetween_bound(this);
	}
};




PLSQLParser.Between_boundContext = Between_boundContext;

PLSQLParser.prototype.between_bound = function() {

    var localctx = new Between_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, PLSQLParser.RULE_between_bound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2345;
        this.match(PLSQLParser.BETWEEN);
        this.state = 2346;
        this.lower_bound();
        this.state = 2347;
        this.match(PLSQLParser.AND);
        this.state = 2348;
        this.upper_bound();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lower_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_lower_bound;
    return this;
}

Lower_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lower_boundContext.prototype.constructor = Lower_boundContext;

Lower_boundContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Lower_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLower_bound(this);
	}
};

Lower_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLower_bound(this);
	}
};




PLSQLParser.Lower_boundContext = Lower_boundContext;

PLSQLParser.prototype.lower_bound = function() {

    var localctx = new Lower_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, PLSQLParser.RULE_lower_bound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2350;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Upper_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_upper_bound;
    return this;
}

Upper_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Upper_boundContext.prototype.constructor = Upper_boundContext;

Upper_boundContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Upper_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUpper_bound(this);
	}
};

Upper_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUpper_bound(this);
	}
};




PLSQLParser.Upper_boundContext = Upper_boundContext;

PLSQLParser.prototype.upper_bound = function() {

    var localctx = new Upper_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, PLSQLParser.RULE_upper_bound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2352;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_null_statement;
    return this;
}

Null_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_statementContext.prototype.constructor = Null_statementContext;

Null_statementContext.prototype.NULL = function() {
    return this.getToken(PLSQLParser.NULL, 0);
};

Null_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterNull_statement(this);
	}
};

Null_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitNull_statement(this);
	}
};




PLSQLParser.Null_statementContext = Null_statementContext;

PLSQLParser.prototype.null_statement = function() {

    var localctx = new Null_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, PLSQLParser.RULE_null_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2354;
        this.match(PLSQLParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Raise_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_raise_statement;
    return this;
}

Raise_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_statementContext.prototype.constructor = Raise_statementContext;

Raise_statementContext.prototype.RAISE = function() {
    return this.getToken(PLSQLParser.RAISE, 0);
};

Raise_statementContext.prototype.exception_name = function() {
    return this.getTypedRuleContext(Exception_nameContext,0);
};

Raise_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRaise_statement(this);
	}
};

Raise_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRaise_statement(this);
	}
};




PLSQLParser.Raise_statementContext = Raise_statementContext;

PLSQLParser.prototype.raise_statement = function() {

    var localctx = new Raise_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, PLSQLParser.RULE_raise_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2356;
        this.match(PLSQLParser.RAISE);
        this.state = 2358;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || _la===PLSQLParser.DELIMITED_ID || _la===PLSQLParser.INTRODUCER || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2357;
            this.exception_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_return_statement;
    this.cn1 = null; // ConditionContext
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Return_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitReturn_statement(this);
	}
};




PLSQLParser.Return_statementContext = Return_statementContext;

PLSQLParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, PLSQLParser.RULE_return_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2360;
        this.match(PLSQLParser.RETURN);
        this.state = 2362;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ALL - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ANY - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CASE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONNECT_BY_ROOT - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DATE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (PLSQLParser.DEFAULT - 98)) | (1 << (PLSQLParser.DEFAULTS - 98)) | (1 << (PLSQLParser.DEFERRED - 98)) | (1 << (PLSQLParser.DEFINER - 98)) | (1 << (PLSQLParser.DETERMINISTIC - 98)) | (1 << (PLSQLParser.DIMENSION - 98)) | (1 << (PLSQLParser.DISABLE - 98)) | (1 << (PLSQLParser.DISASSOCIATE - 98)) | (1 << (PLSQLParser.DISTINCT - 98)) | (1 << (PLSQLParser.DOCUMENT - 98)) | (1 << (PLSQLParser.DOUBLE - 98)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 98)) | (1 << (PLSQLParser.EACH - 98)) | (1 << (PLSQLParser.ELEMENT - 98)) | (1 << (PLSQLParser.EMPTY - 98)) | (1 << (PLSQLParser.ENABLE - 98)) | (1 << (PLSQLParser.ENCODING - 98)) | (1 << (PLSQLParser.ENTITYESCAPING - 98)) | (1 << (PLSQLParser.ERRORS - 98)) | (1 << (PLSQLParser.ESCAPE - 98)) | (1 << (PLSQLParser.EVALNAME - 98)) | (1 << (PLSQLParser.EXCEPTION - 98)) | (1 << (PLSQLParser.EXCEPTION_INIT - 98)) | (1 << (PLSQLParser.EXCEPTIONS - 98)) | (1 << (PLSQLParser.EXCLUDE - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXISTS - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FALSE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NOT - 228)) | (1 << (PLSQLParser.NULL - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)) | (1 << (PLSQLParser.PRIOR - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUE - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 454)) | (1 << (PLSQLParser.UNSIGNED_INTEGER - 454)) | (1 << (PLSQLParser.APPROXIMATE_NUM_LIT - 454)) | (1 << (PLSQLParser.CHAR_STRING - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PLSQLParser.LEFT_PAREN - 488)) | (1 << (PLSQLParser.PLUS_SIGN - 488)) | (1 << (PLSQLParser.MINUS_SIGN - 488)) | (1 << (PLSQLParser.BINDVAR - 488)) | (1 << (PLSQLParser.COLON - 488)) | (1 << (PLSQLParser.INTRODUCER - 488)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2361;
            localctx.cn1 = this.condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_function_call;
    return this;
}

Function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_callContext.prototype.constructor = Function_callContext;

Function_callContext.prototype.routine_name = function() {
    return this.getTypedRuleContext(Routine_nameContext,0);
};

Function_callContext.prototype.CALL = function() {
    return this.getToken(PLSQLParser.CALL, 0);
};

Function_callContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

Function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFunction_call(this);
	}
};

Function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFunction_call(this);
	}
};




PLSQLParser.Function_callContext = Function_callContext;

PLSQLParser.prototype.function_call = function() {

    var localctx = new Function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, PLSQLParser.RULE_function_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2365;
        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
        if(la_===1) {
            this.state = 2364;
            this.match(PLSQLParser.CALL);

        }
        this.state = 2367;
        this.routine_name();
        this.state = 2369;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 2368;
            this.function_argument();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_body;
    return this;
}

BodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BodyContext.prototype.constructor = BodyContext;

BodyContext.prototype.BEGIN = function() {
    return this.getToken(PLSQLParser.BEGIN, 0);
};

BodyContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

BodyContext.prototype.END = function() {
    return this.getToken(PLSQLParser.END, 0);
};

BodyContext.prototype.exception_clause = function() {
    return this.getTypedRuleContext(Exception_clauseContext,0);
};

BodyContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

BodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterBody(this);
	}
};

BodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitBody(this);
	}
};




PLSQLParser.BodyContext = BodyContext;

PLSQLParser.prototype.body = function() {

    var localctx = new BodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, PLSQLParser.RULE_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2371;
        this.match(PLSQLParser.BEGIN);
        this.state = 2372;
        this.seq_of_statements();
        this.state = 2374;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.EXCEPTION) {
            this.state = 2373;
            this.exception_clause();
        }

        this.state = 2376;
        this.match(PLSQLParser.END);
        this.state = 2378;
        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
        if(la_===1) {
            this.state = 2377;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_exception_clause;
    return this;
}

Exception_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_clauseContext.prototype.constructor = Exception_clauseContext;

Exception_clauseContext.prototype.EXCEPTION = function() {
    return this.getToken(PLSQLParser.EXCEPTION, 0);
};

Exception_clauseContext.prototype.exception_handler = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Exception_handlerContext);
    } else {
        return this.getTypedRuleContext(Exception_handlerContext,i);
    }
};

Exception_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterException_clause(this);
	}
};

Exception_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitException_clause(this);
	}
};




PLSQLParser.Exception_clauseContext = Exception_clauseContext;

PLSQLParser.prototype.exception_clause = function() {

    var localctx = new Exception_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, PLSQLParser.RULE_exception_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2380;
        this.match(PLSQLParser.EXCEPTION);
        this.state = 2382; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2381;
            this.exception_handler();
            this.state = 2384; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLSQLParser.WHEN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_handlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_exception_handler;
    return this;
}

Exception_handlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_handlerContext.prototype.constructor = Exception_handlerContext;

Exception_handlerContext.prototype.WHEN = function() {
    return this.getToken(PLSQLParser.WHEN, 0);
};

Exception_handlerContext.prototype.exception_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Exception_nameContext);
    } else {
        return this.getTypedRuleContext(Exception_nameContext,i);
    }
};

Exception_handlerContext.prototype.THEN = function() {
    return this.getToken(PLSQLParser.THEN, 0);
};

Exception_handlerContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Exception_handlerContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.OR);
    } else {
        return this.getToken(PLSQLParser.OR, i);
    }
};


Exception_handlerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterException_handler(this);
	}
};

Exception_handlerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitException_handler(this);
	}
};




PLSQLParser.Exception_handlerContext = Exception_handlerContext;

PLSQLParser.prototype.exception_handler = function() {

    var localctx = new Exception_handlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, PLSQLParser.RULE_exception_handler);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2386;
        this.match(PLSQLParser.WHEN);
        this.state = 2387;
        this.exception_name();
        this.state = 2392;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.OR) {
            this.state = 2388;
            this.match(PLSQLParser.OR);
            this.state = 2389;
            this.exception_name();
            this.state = 2394;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2395;
        this.match(PLSQLParser.THEN);
        this.state = 2396;
        this.seq_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_trigger_block;
    return this;
}

Trigger_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_blockContext.prototype.constructor = Trigger_blockContext;

Trigger_blockContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Trigger_blockContext.prototype.DECLARE = function() {
    return this.getToken(PLSQLParser.DECLARE, 0);
};

Trigger_blockContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Trigger_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTrigger_block(this);
	}
};

Trigger_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTrigger_block(this);
	}
};




PLSQLParser.Trigger_blockContext = Trigger_blockContext;

PLSQLParser.prototype.trigger_block = function() {

    var localctx = new Trigger_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, PLSQLParser.RULE_trigger_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2406;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CREATE - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECLARE - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2399;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.DECLARE) {
                this.state = 2398;
                this.match(PLSQLParser.DECLARE);
            }

            this.state = 2402; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2401;
                this.declare_spec();
                this.state = 2404; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CREATE - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID);
        }

        this.state = 2408;
        this.body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

BlockContext.prototype.DECLARE = function() {
    return this.getToken(PLSQLParser.DECLARE, 0);
};

BlockContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitBlock(this);
	}
};




PLSQLParser.BlockContext = BlockContext;

PLSQLParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, PLSQLParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2411;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.DECLARE) {
            this.state = 2410;
            this.match(PLSQLParser.DECLARE);
        }

        this.state = 2414; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2413;
            this.declare_spec();
            this.state = 2416; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CREATE - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.PROCEDURE - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & ((1 << (PLSQLParser.DELIMITED_ID - 485)) | (1 << (PLSQLParser.BINDVAR - 485)) | (1 << (PLSQLParser.COLON - 485)) | (1 << (PLSQLParser.INTRODUCER - 485)))) !== 0) || _la===PLSQLParser.REGULAR_ID);
        this.state = 2418;
        this.body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_sql_statement;
    return this;
}

Sql_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_statementContext.prototype.constructor = Sql_statementContext;

Sql_statementContext.prototype.execute_immediate = function() {
    return this.getTypedRuleContext(Execute_immediateContext,0);
};

Sql_statementContext.prototype.data_manipulation_language_statements = function() {
    return this.getTypedRuleContext(Data_manipulation_language_statementsContext,0);
};

Sql_statementContext.prototype.cursor_manipulation_statements = function() {
    return this.getTypedRuleContext(Cursor_manipulation_statementsContext,0);
};

Sql_statementContext.prototype.transaction_control_statements = function() {
    return this.getTypedRuleContext(Transaction_control_statementsContext,0);
};

Sql_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSql_statement(this);
	}
};

Sql_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSql_statement(this);
	}
};




PLSQLParser.Sql_statementContext = Sql_statementContext;

PLSQLParser.prototype.sql_statement = function() {

    var localctx = new Sql_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, PLSQLParser.RULE_sql_statement);
    try {
        this.state = 2424;
        switch(this._input.LA(1)) {
        case PLSQLParser.EXECUTE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2420;
            this.execute_immediate();
            break;
        case PLSQLParser.DELETE:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.INSERT:
        case PLSQLParser.LOCK:
        case PLSQLParser.MERGE:
        case PLSQLParser.SELECT:
        case PLSQLParser.UPDATE:
        case PLSQLParser.WITH:
        case PLSQLParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2421;
            this.data_manipulation_language_statements();
            break;
        case PLSQLParser.CLOSE:
        case PLSQLParser.FETCH:
        case PLSQLParser.OPEN:
            this.enterOuterAlt(localctx, 3);
            this.state = 2422;
            this.cursor_manipulation_statements();
            break;
        case PLSQLParser.COMMIT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SET:
            this.enterOuterAlt(localctx, 4);
            this.state = 2423;
            this.transaction_control_statements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Execute_immediateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_execute_immediate;
    return this;
}

Execute_immediateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Execute_immediateContext.prototype.constructor = Execute_immediateContext;

Execute_immediateContext.prototype.EXECUTE = function() {
    return this.getToken(PLSQLParser.EXECUTE, 0);
};

Execute_immediateContext.prototype.IMMEDIATE = function() {
    return this.getToken(PLSQLParser.IMMEDIATE, 0);
};

Execute_immediateContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Execute_immediateContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Execute_immediateContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Execute_immediateContext.prototype.dynamic_returning_clause = function() {
    return this.getTypedRuleContext(Dynamic_returning_clauseContext,0);
};

Execute_immediateContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterExecute_immediate(this);
	}
};

Execute_immediateContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitExecute_immediate(this);
	}
};




PLSQLParser.Execute_immediateContext = Execute_immediateContext;

PLSQLParser.prototype.execute_immediate = function() {

    var localctx = new Execute_immediateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, PLSQLParser.RULE_execute_immediate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2426;
        this.match(PLSQLParser.EXECUTE);
        this.state = 2427;
        this.match(PLSQLParser.IMMEDIATE);
        this.state = 2428;
        this.expression();
        this.state = 2438;
        switch (this._input.LA(1)) {
        case PLSQLParser.BULK:
        case PLSQLParser.INTO:
        	this.state = 2429;
        	this.into_clause();
        	this.state = 2431;
        	_la = this._input.LA(1);
        	if(_la===PLSQLParser.USING) {
        	    this.state = 2430;
        	    this.using_clause();
        	}

        	break;
        case PLSQLParser.USING:
        	this.state = 2433;
        	this.using_clause();
        	this.state = 2435;
        	_la = this._input.LA(1);
        	if(_la===PLSQLParser.RETURN || _la===PLSQLParser.RETURNING) {
        	    this.state = 2434;
        	    this.dynamic_returning_clause();
        	}

        	break;
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        	this.state = 2437;
        	this.dynamic_returning_clause();
        	break;
        case PLSQLParser.EOF:
        case PLSQLParser.SAVE:
        case PLSQLParser.SEMICOLON:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dynamic_returning_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_dynamic_returning_clause;
    return this;
}

Dynamic_returning_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dynamic_returning_clauseContext.prototype.constructor = Dynamic_returning_clauseContext;

Dynamic_returning_clauseContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Dynamic_returning_clauseContext.prototype.RETURNING = function() {
    return this.getToken(PLSQLParser.RETURNING, 0);
};

Dynamic_returning_clauseContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Dynamic_returning_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDynamic_returning_clause(this);
	}
};

Dynamic_returning_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDynamic_returning_clause(this);
	}
};




PLSQLParser.Dynamic_returning_clauseContext = Dynamic_returning_clauseContext;

PLSQLParser.prototype.dynamic_returning_clause = function() {

    var localctx = new Dynamic_returning_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, PLSQLParser.RULE_dynamic_returning_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2440;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.RETURN || _la===PLSQLParser.RETURNING)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 2441;
        this.into_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_manipulation_language_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_data_manipulation_language_statements;
    return this;
}

Data_manipulation_language_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_manipulation_language_statementsContext.prototype.constructor = Data_manipulation_language_statementsContext;

Data_manipulation_language_statementsContext.prototype.merge_statement = function() {
    return this.getTypedRuleContext(Merge_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.lock_table_statement = function() {
    return this.getTypedRuleContext(Lock_table_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.update_statement = function() {
    return this.getTypedRuleContext(Update_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.delete_statement = function() {
    return this.getTypedRuleContext(Delete_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.insert_statement = function() {
    return this.getTypedRuleContext(Insert_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.explain_statement = function() {
    return this.getTypedRuleContext(Explain_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterData_manipulation_language_statements(this);
	}
};

Data_manipulation_language_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitData_manipulation_language_statements(this);
	}
};




PLSQLParser.Data_manipulation_language_statementsContext = Data_manipulation_language_statementsContext;

PLSQLParser.prototype.data_manipulation_language_statements = function() {

    var localctx = new Data_manipulation_language_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, PLSQLParser.RULE_data_manipulation_language_statements);
    try {
        this.state = 2450;
        switch(this._input.LA(1)) {
        case PLSQLParser.MERGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2443;
            this.merge_statement();
            break;
        case PLSQLParser.LOCK:
            this.enterOuterAlt(localctx, 2);
            this.state = 2444;
            this.lock_table_statement();
            break;
        case PLSQLParser.SELECT:
        case PLSQLParser.WITH:
        case PLSQLParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 3);
            this.state = 2445;
            this.select_statement();
            break;
        case PLSQLParser.UPDATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 2446;
            this.update_statement();
            break;
        case PLSQLParser.DELETE:
            this.enterOuterAlt(localctx, 5);
            this.state = 2447;
            this.delete_statement();
            break;
        case PLSQLParser.INSERT:
            this.enterOuterAlt(localctx, 6);
            this.state = 2448;
            this.insert_statement();
            break;
        case PLSQLParser.EXPLAIN:
            this.enterOuterAlt(localctx, 7);
            this.state = 2449;
            this.explain_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_manipulation_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cursor_manipulation_statements;
    return this;
}

Cursor_manipulation_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_manipulation_statementsContext.prototype.constructor = Cursor_manipulation_statementsContext;

Cursor_manipulation_statementsContext.prototype.close_statement = function() {
    return this.getTypedRuleContext(Close_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.open_statement = function() {
    return this.getTypedRuleContext(Open_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.fetch_statement = function() {
    return this.getTypedRuleContext(Fetch_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.open_for_statement = function() {
    return this.getTypedRuleContext(Open_for_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCursor_manipulation_statements(this);
	}
};

Cursor_manipulation_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCursor_manipulation_statements(this);
	}
};




PLSQLParser.Cursor_manipulation_statementsContext = Cursor_manipulation_statementsContext;

PLSQLParser.prototype.cursor_manipulation_statements = function() {

    var localctx = new Cursor_manipulation_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, PLSQLParser.RULE_cursor_manipulation_statements);
    try {
        this.state = 2456;
        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2452;
            this.close_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2453;
            this.open_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2454;
            this.fetch_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2455;
            this.open_for_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Close_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_close_statement;
    return this;
}

Close_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Close_statementContext.prototype.constructor = Close_statementContext;

Close_statementContext.prototype.CLOSE = function() {
    return this.getToken(PLSQLParser.CLOSE, 0);
};

Close_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Close_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterClose_statement(this);
	}
};

Close_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitClose_statement(this);
	}
};




PLSQLParser.Close_statementContext = Close_statementContext;

PLSQLParser.prototype.close_statement = function() {

    var localctx = new Close_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, PLSQLParser.RULE_close_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2458;
        this.match(PLSQLParser.CLOSE);
        this.state = 2459;
        this.cursor_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Open_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_open_statement;
    return this;
}

Open_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Open_statementContext.prototype.constructor = Open_statementContext;

Open_statementContext.prototype.OPEN = function() {
    return this.getToken(PLSQLParser.OPEN, 0);
};

Open_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Open_statementContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Open_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterOpen_statement(this);
	}
};

Open_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitOpen_statement(this);
	}
};




PLSQLParser.Open_statementContext = Open_statementContext;

PLSQLParser.prototype.open_statement = function() {

    var localctx = new Open_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, PLSQLParser.RULE_open_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2461;
        this.match(PLSQLParser.OPEN);
        this.state = 2462;
        this.cursor_name();
        this.state = 2464;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 2463;
            this.expression_list();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_fetch_statement;
    this.it1 = null; // Token
    return this;
}

Fetch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_statementContext.prototype.constructor = Fetch_statementContext;

Fetch_statementContext.prototype.FETCH = function() {
    return this.getToken(PLSQLParser.FETCH, 0);
};

Fetch_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Fetch_statementContext.prototype.variable_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_nameContext);
    } else {
        return this.getTypedRuleContext(Variable_nameContext,i);
    }
};

Fetch_statementContext.prototype.BULK = function() {
    return this.getToken(PLSQLParser.BULK, 0);
};

Fetch_statementContext.prototype.COLLECT = function() {
    return this.getToken(PLSQLParser.COLLECT, 0);
};

Fetch_statementContext.prototype.INTO = function() {
    return this.getToken(PLSQLParser.INTO, 0);
};

Fetch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFetch_statement(this);
	}
};

Fetch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFetch_statement(this);
	}
};




PLSQLParser.Fetch_statementContext = Fetch_statementContext;

PLSQLParser.prototype.fetch_statement = function() {

    var localctx = new Fetch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, PLSQLParser.RULE_fetch_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2466;
        this.match(PLSQLParser.FETCH);
        this.state = 2467;
        this.cursor_name();
        this.state = 2488;
        switch(this._input.LA(1)) {
        case PLSQLParser.INTO:
            this.state = 2468;
            localctx.it1 = this.match(PLSQLParser.INTO);
            this.state = 2469;
            this.variable_name();
            this.state = 2474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2470;
                this.match(PLSQLParser.COMMA);
                this.state = 2471;
                this.variable_name();
                this.state = 2476;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case PLSQLParser.BULK:
            this.state = 2477;
            this.match(PLSQLParser.BULK);
            this.state = 2478;
            this.match(PLSQLParser.COLLECT);
            this.state = 2479;
            this.match(PLSQLParser.INTO);
            this.state = 2480;
            this.variable_name();
            this.state = 2485;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2481;
                this.match(PLSQLParser.COMMA);
                this.state = 2482;
                this.variable_name();
                this.state = 2487;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Open_for_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_open_for_statement;
    return this;
}

Open_for_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Open_for_statementContext.prototype.constructor = Open_for_statementContext;

Open_for_statementContext.prototype.OPEN = function() {
    return this.getToken(PLSQLParser.OPEN, 0);
};

Open_for_statementContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Open_for_statementContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

Open_for_statementContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Open_for_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Open_for_statementContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Open_for_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterOpen_for_statement(this);
	}
};

Open_for_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitOpen_for_statement(this);
	}
};




PLSQLParser.Open_for_statementContext = Open_for_statementContext;

PLSQLParser.prototype.open_for_statement = function() {

    var localctx = new Open_for_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, PLSQLParser.RULE_open_for_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2490;
        this.match(PLSQLParser.OPEN);
        this.state = 2491;
        this.variable_name();
        this.state = 2492;
        this.match(PLSQLParser.FOR);
        this.state = 2495;
        var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2493;
            this.select_statement();
            break;

        case 2:
            this.state = 2494;
            this.expression();
            break;

        }
        this.state = 2498;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.USING) {
            this.state = 2497;
            this.using_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Transaction_control_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_transaction_control_statements;
    return this;
}

Transaction_control_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_control_statementsContext.prototype.constructor = Transaction_control_statementsContext;

Transaction_control_statementsContext.prototype.set_transaction_command = function() {
    return this.getTypedRuleContext(Set_transaction_commandContext,0);
};

Transaction_control_statementsContext.prototype.set_constraint_command = function() {
    return this.getTypedRuleContext(Set_constraint_commandContext,0);
};

Transaction_control_statementsContext.prototype.commit_statement = function() {
    return this.getTypedRuleContext(Commit_statementContext,0);
};

Transaction_control_statementsContext.prototype.rollback_statement = function() {
    return this.getTypedRuleContext(Rollback_statementContext,0);
};

Transaction_control_statementsContext.prototype.savepoint_statement = function() {
    return this.getTypedRuleContext(Savepoint_statementContext,0);
};

Transaction_control_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTransaction_control_statements(this);
	}
};

Transaction_control_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTransaction_control_statements(this);
	}
};




PLSQLParser.Transaction_control_statementsContext = Transaction_control_statementsContext;

PLSQLParser.prototype.transaction_control_statements = function() {

    var localctx = new Transaction_control_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, PLSQLParser.RULE_transaction_control_statements);
    try {
        this.state = 2505;
        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2500;
            this.set_transaction_command();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2501;
            this.set_constraint_command();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2502;
            this.commit_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2503;
            this.rollback_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2504;
            this.savepoint_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_transaction_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_set_transaction_command;
    return this;
}

Set_transaction_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_transaction_commandContext.prototype.constructor = Set_transaction_commandContext;

Set_transaction_commandContext.prototype.SET = function() {
    return this.getToken(PLSQLParser.SET, 0);
};

Set_transaction_commandContext.prototype.TRANSACTION = function() {
    return this.getToken(PLSQLParser.TRANSACTION, 0);
};

Set_transaction_commandContext.prototype.READ = function() {
    return this.getToken(PLSQLParser.READ, 0);
};

Set_transaction_commandContext.prototype.ISOLATION = function() {
    return this.getToken(PLSQLParser.ISOLATION, 0);
};

Set_transaction_commandContext.prototype.LEVEL = function() {
    return this.getToken(PLSQLParser.LEVEL, 0);
};

Set_transaction_commandContext.prototype.USE = function() {
    return this.getToken(PLSQLParser.USE, 0);
};

Set_transaction_commandContext.prototype.ROLLBACK = function() {
    return this.getToken(PLSQLParser.ROLLBACK, 0);
};

Set_transaction_commandContext.prototype.SEGMENT = function() {
    return this.getToken(PLSQLParser.SEGMENT, 0);
};

Set_transaction_commandContext.prototype.rollback_segment_name = function() {
    return this.getTypedRuleContext(Rollback_segment_nameContext,0);
};

Set_transaction_commandContext.prototype.NAME = function() {
    return this.getToken(PLSQLParser.NAME, 0);
};

Set_transaction_commandContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Set_transaction_commandContext.prototype.ONLY = function() {
    return this.getToken(PLSQLParser.ONLY, 0);
};

Set_transaction_commandContext.prototype.WRITE = function() {
    return this.getToken(PLSQLParser.WRITE, 0);
};

Set_transaction_commandContext.prototype.SERIALIZABLE = function() {
    return this.getToken(PLSQLParser.SERIALIZABLE, 0);
};

Set_transaction_commandContext.prototype.COMMITTED = function() {
    return this.getToken(PLSQLParser.COMMITTED, 0);
};

Set_transaction_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSet_transaction_command(this);
	}
};

Set_transaction_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSet_transaction_command(this);
	}
};




PLSQLParser.Set_transaction_commandContext = Set_transaction_commandContext;

PLSQLParser.prototype.set_transaction_command = function() {

    var localctx = new Set_transaction_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, PLSQLParser.RULE_set_transaction_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2507;
        this.match(PLSQLParser.SET);
        this.state = 2508;
        this.match(PLSQLParser.TRANSACTION);
        this.state = 2522;
        switch (this._input.LA(1)) {
        case PLSQLParser.READ:
        	this.state = 2509;
        	this.match(PLSQLParser.READ);
        	this.state = 2510;
        	_la = this._input.LA(1);
        	if(!(_la===PLSQLParser.ONLY || _la===PLSQLParser.WRITE)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        	    this.consume();
        	}
        	break;
        case PLSQLParser.ISOLATION:
        	this.state = 2511;
        	this.match(PLSQLParser.ISOLATION);
        	this.state = 2512;
        	this.match(PLSQLParser.LEVEL);
        	this.state = 2516;
        	switch(this._input.LA(1)) {
        	case PLSQLParser.SERIALIZABLE:
        	    this.state = 2513;
        	    this.match(PLSQLParser.SERIALIZABLE);
        	    break;
        	case PLSQLParser.READ:
        	    this.state = 2514;
        	    this.match(PLSQLParser.READ);
        	    this.state = 2515;
        	    this.match(PLSQLParser.COMMITTED);
        	    break;
        	default:
        	    throw new antlr4.error.NoViableAltException(this);
        	}
        	break;
        case PLSQLParser.USE:
        	this.state = 2518;
        	this.match(PLSQLParser.USE);
        	this.state = 2519;
        	this.match(PLSQLParser.ROLLBACK);
        	this.state = 2520;
        	this.match(PLSQLParser.SEGMENT);
        	this.state = 2521;
        	this.rollback_segment_name();
        	break;
        case PLSQLParser.EOF:
        case PLSQLParser.NAME:
        case PLSQLParser.SAVE:
        case PLSQLParser.SEMICOLON:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2526;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NAME) {
            this.state = 2524;
            this.match(PLSQLParser.NAME);
            this.state = 2525;
            this.quoted_string();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_constraint_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_set_constraint_command;
    return this;
}

Set_constraint_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_constraint_commandContext.prototype.constructor = Set_constraint_commandContext;

Set_constraint_commandContext.prototype.SET = function() {
    return this.getToken(PLSQLParser.SET, 0);
};

Set_constraint_commandContext.prototype.CONSTRAINT = function() {
    return this.getToken(PLSQLParser.CONSTRAINT, 0);
};

Set_constraint_commandContext.prototype.CONSTRAINTS = function() {
    return this.getToken(PLSQLParser.CONSTRAINTS, 0);
};

Set_constraint_commandContext.prototype.IMMEDIATE = function() {
    return this.getToken(PLSQLParser.IMMEDIATE, 0);
};

Set_constraint_commandContext.prototype.DEFERRED = function() {
    return this.getToken(PLSQLParser.DEFERRED, 0);
};

Set_constraint_commandContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Set_constraint_commandContext.prototype.constraint_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constraint_nameContext);
    } else {
        return this.getTypedRuleContext(Constraint_nameContext,i);
    }
};

Set_constraint_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSet_constraint_command(this);
	}
};

Set_constraint_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSet_constraint_command(this);
	}
};




PLSQLParser.Set_constraint_commandContext = Set_constraint_commandContext;

PLSQLParser.prototype.set_constraint_command = function() {

    var localctx = new Set_constraint_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, PLSQLParser.RULE_set_constraint_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2528;
        this.match(PLSQLParser.SET);
        this.state = 2529;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.CONSTRAINT || _la===PLSQLParser.CONSTRAINTS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 2539;
        switch(this._input.LA(1)) {
        case PLSQLParser.ALL:
            this.state = 2530;
            this.match(PLSQLParser.ALL);
            break;
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 2531;
            this.constraint_name();
            this.state = 2536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2532;
                this.match(PLSQLParser.COMMA);
                this.state = 2533;
                this.constraint_name();
                this.state = 2538;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2541;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.DEFERRED || _la===PLSQLParser.IMMEDIATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Commit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_commit_statement;
    return this;
}

Commit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Commit_statementContext.prototype.constructor = Commit_statementContext;

Commit_statementContext.prototype.COMMIT = function() {
    return this.getToken(PLSQLParser.COMMIT, 0);
};

Commit_statementContext.prototype.WORK = function() {
    return this.getToken(PLSQLParser.WORK, 0);
};

Commit_statementContext.prototype.COMMENT = function() {
    return this.getToken(PLSQLParser.COMMENT, 0);
};

Commit_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Commit_statementContext.prototype.FORCE = function() {
    return this.getToken(PLSQLParser.FORCE, 0);
};

Commit_statementContext.prototype.write_clause = function() {
    return this.getTypedRuleContext(Write_clauseContext,0);
};

Commit_statementContext.prototype.CORRUPT_XID = function() {
    return this.getToken(PLSQLParser.CORRUPT_XID, 0);
};

Commit_statementContext.prototype.CORRUPT_XID_ALL = function() {
    return this.getToken(PLSQLParser.CORRUPT_XID_ALL, 0);
};

Commit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCommit_statement(this);
	}
};

Commit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCommit_statement(this);
	}
};




PLSQLParser.Commit_statementContext = Commit_statementContext;

PLSQLParser.prototype.commit_statement = function() {

    var localctx = new Commit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, PLSQLParser.RULE_commit_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2543;
        this.match(PLSQLParser.COMMIT);
        this.state = 2545;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WORK) {
            this.state = 2544;
            this.match(PLSQLParser.WORK);
        }

        this.state = 2560;
        switch (this._input.LA(1)) {
        case PLSQLParser.COMMENT:
        	this.state = 2547;
        	this.match(PLSQLParser.COMMENT);
        	this.state = 2548;
        	this.expression();
        	break;
        case PLSQLParser.FORCE:
        	this.state = 2549;
        	this.match(PLSQLParser.FORCE);
        	this.state = 2558;
        	var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
        	switch(la_) {
        	case 1:
        	    this.state = 2550;
        	    this.match(PLSQLParser.CORRUPT_XID);
        	    this.state = 2551;
        	    this.expression();
        	    break;

        	case 2:
        	    this.state = 2552;
        	    this.match(PLSQLParser.CORRUPT_XID_ALL);
        	    break;

        	case 3:
        	    this.state = 2553;
        	    this.expression();
        	    this.state = 2556;
        	    _la = this._input.LA(1);
        	    if(_la===PLSQLParser.COMMA) {
        	        this.state = 2554;
        	        this.match(PLSQLParser.COMMA);
        	        this.state = 2555;
        	        this.expression();
        	    }

        	    break;

        	}
        	break;
        case PLSQLParser.EOF:
        case PLSQLParser.SAVE:
        case PLSQLParser.WRITE:
        case PLSQLParser.SEMICOLON:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2563;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WRITE) {
            this.state = 2562;
            this.write_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Write_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_write_clause;
    return this;
}

Write_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Write_clauseContext.prototype.constructor = Write_clauseContext;

Write_clauseContext.prototype.WRITE = function() {
    return this.getToken(PLSQLParser.WRITE, 0);
};

Write_clauseContext.prototype.WAIT = function() {
    return this.getToken(PLSQLParser.WAIT, 0);
};

Write_clauseContext.prototype.NOWAIT = function() {
    return this.getToken(PLSQLParser.NOWAIT, 0);
};

Write_clauseContext.prototype.IMMEDIATE = function() {
    return this.getToken(PLSQLParser.IMMEDIATE, 0);
};

Write_clauseContext.prototype.BATCH = function() {
    return this.getToken(PLSQLParser.BATCH, 0);
};

Write_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterWrite_clause(this);
	}
};

Write_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitWrite_clause(this);
	}
};




PLSQLParser.Write_clauseContext = Write_clauseContext;

PLSQLParser.prototype.write_clause = function() {

    var localctx = new Write_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, PLSQLParser.RULE_write_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2565;
        this.match(PLSQLParser.WRITE);
        this.state = 2567;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NOWAIT || _la===PLSQLParser.WAIT) {
            this.state = 2566;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.NOWAIT || _la===PLSQLParser.WAIT)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 2570;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.BATCH || _la===PLSQLParser.IMMEDIATE) {
            this.state = 2569;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.BATCH || _la===PLSQLParser.IMMEDIATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollback_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_rollback_statement;
    return this;
}

Rollback_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollback_statementContext.prototype.constructor = Rollback_statementContext;

Rollback_statementContext.prototype.ROLLBACK = function() {
    return this.getToken(PLSQLParser.ROLLBACK, 0);
};

Rollback_statementContext.prototype.WORK = function() {
    return this.getToken(PLSQLParser.WORK, 0);
};

Rollback_statementContext.prototype.TO = function() {
    return this.getToken(PLSQLParser.TO, 0);
};

Rollback_statementContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Rollback_statementContext.prototype.FORCE = function() {
    return this.getToken(PLSQLParser.FORCE, 0);
};

Rollback_statementContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Rollback_statementContext.prototype.SAVEPOINT = function() {
    return this.getToken(PLSQLParser.SAVEPOINT, 0);
};

Rollback_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRollback_statement(this);
	}
};

Rollback_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRollback_statement(this);
	}
};




PLSQLParser.Rollback_statementContext = Rollback_statementContext;

PLSQLParser.prototype.rollback_statement = function() {

    var localctx = new Rollback_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, PLSQLParser.RULE_rollback_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2572;
        this.match(PLSQLParser.ROLLBACK);
        this.state = 2574;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WORK) {
            this.state = 2573;
            this.match(PLSQLParser.WORK);
        }

        this.state = 2583;
        switch (this._input.LA(1)) {
        case PLSQLParser.TO:
        	this.state = 2576;
        	this.match(PLSQLParser.TO);
        	this.state = 2578;
        	var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
        	if(la_===1) {
        	    this.state = 2577;
        	    this.match(PLSQLParser.SAVEPOINT);

        	}
        	this.state = 2580;
        	this.savepoint_name();
        	break;
        case PLSQLParser.FORCE:
        	this.state = 2581;
        	this.match(PLSQLParser.FORCE);
        	this.state = 2582;
        	this.quoted_string();
        	break;
        case PLSQLParser.EOF:
        case PLSQLParser.SAVE:
        case PLSQLParser.SEMICOLON:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_savepoint_statement;
    return this;
}

Savepoint_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_statementContext.prototype.constructor = Savepoint_statementContext;

Savepoint_statementContext.prototype.SAVEPOINT = function() {
    return this.getToken(PLSQLParser.SAVEPOINT, 0);
};

Savepoint_statementContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Savepoint_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSavepoint_statement(this);
	}
};

Savepoint_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSavepoint_statement(this);
	}
};




PLSQLParser.Savepoint_statementContext = Savepoint_statementContext;

PLSQLParser.prototype.savepoint_statement = function() {

    var localctx = new Savepoint_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, PLSQLParser.RULE_savepoint_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2585;
        this.match(PLSQLParser.SAVEPOINT);
        this.state = 2586;
        this.savepoint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explain_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_explain_statement;
    return this;
}

Explain_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explain_statementContext.prototype.constructor = Explain_statementContext;

Explain_statementContext.prototype.EXPLAIN = function() {
    return this.getToken(PLSQLParser.EXPLAIN, 0);
};

Explain_statementContext.prototype.PLAN = function() {
    return this.getToken(PLSQLParser.PLAN, 0);
};

Explain_statementContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

Explain_statementContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Explain_statementContext.prototype.update_statement = function() {
    return this.getTypedRuleContext(Update_statementContext,0);
};

Explain_statementContext.prototype.delete_statement = function() {
    return this.getTypedRuleContext(Delete_statementContext,0);
};

Explain_statementContext.prototype.insert_statement = function() {
    return this.getTypedRuleContext(Insert_statementContext,0);
};

Explain_statementContext.prototype.merge_statement = function() {
    return this.getTypedRuleContext(Merge_statementContext,0);
};

Explain_statementContext.prototype.SET = function() {
    return this.getToken(PLSQLParser.SET, 0);
};

Explain_statementContext.prototype.STATEMENT_ID = function() {
    return this.getToken(PLSQLParser.STATEMENT_ID, 0);
};

Explain_statementContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Explain_statementContext.prototype.INTO = function() {
    return this.getToken(PLSQLParser.INTO, 0);
};

Explain_statementContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Explain_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterExplain_statement(this);
	}
};

Explain_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitExplain_statement(this);
	}
};




PLSQLParser.Explain_statementContext = Explain_statementContext;

PLSQLParser.prototype.explain_statement = function() {

    var localctx = new Explain_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, PLSQLParser.RULE_explain_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2588;
        this.match(PLSQLParser.EXPLAIN);
        this.state = 2589;
        this.match(PLSQLParser.PLAN);
        this.state = 2594;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.SET) {
            this.state = 2590;
            this.match(PLSQLParser.SET);
            this.state = 2591;
            this.match(PLSQLParser.STATEMENT_ID);
            this.state = 2592;
            this.match(PLSQLParser.EQUALS_OP);
            this.state = 2593;
            this.quoted_string();
        }

        this.state = 2598;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.INTO) {
            this.state = 2596;
            this.match(PLSQLParser.INTO);
            this.state = 2597;
            this.tableview_name();
        }

        this.state = 2600;
        this.match(PLSQLParser.FOR);
        this.state = 2606;
        switch(this._input.LA(1)) {
        case PLSQLParser.SELECT:
        case PLSQLParser.WITH:
        case PLSQLParser.LEFT_PAREN:
            this.state = 2601;
            this.select_statement();
            break;
        case PLSQLParser.UPDATE:
            this.state = 2602;
            this.update_statement();
            break;
        case PLSQLParser.DELETE:
            this.state = 2603;
            this.delete_statement();
            break;
        case PLSQLParser.INSERT:
            this.state = 2604;
            this.insert_statement();
            break;
        case PLSQLParser.MERGE:
            this.state = 2605;
            this.merge_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_select_statement;
    return this;
}

Select_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_statementContext.prototype.constructor = Select_statementContext;

Select_statementContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Select_statementContext.prototype.subquery_factoring_clause = function() {
    return this.getTypedRuleContext(Subquery_factoring_clauseContext,0);
};

Select_statementContext.prototype.for_update_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(For_update_clauseContext);
    } else {
        return this.getTypedRuleContext(For_update_clauseContext,i);
    }
};

Select_statementContext.prototype.order_by_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_by_clauseContext);
    } else {
        return this.getTypedRuleContext(Order_by_clauseContext,i);
    }
};

Select_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSelect_statement(this);
	}
};

Select_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSelect_statement(this);
	}
};




PLSQLParser.Select_statementContext = Select_statementContext;

PLSQLParser.prototype.select_statement = function() {

    var localctx = new Select_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, PLSQLParser.RULE_select_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2609;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WITH) {
            this.state = 2608;
            this.subquery_factoring_clause();
        }

        this.state = 2611;
        this.subquery();
        this.state = 2616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.FOR || _la===PLSQLParser.ORDER) {
            this.state = 2614;
            switch(this._input.LA(1)) {
            case PLSQLParser.FOR:
                this.state = 2612;
                this.for_update_clause();
                break;
            case PLSQLParser.ORDER:
                this.state = 2613;
                this.order_by_clause();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_factoring_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_subquery_factoring_clause;
    return this;
}

Subquery_factoring_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_factoring_clauseContext.prototype.constructor = Subquery_factoring_clauseContext;

Subquery_factoring_clauseContext.prototype.WITH = function() {
    return this.getToken(PLSQLParser.WITH, 0);
};

Subquery_factoring_clauseContext.prototype.factoring_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Factoring_elementContext);
    } else {
        return this.getTypedRuleContext(Factoring_elementContext,i);
    }
};

Subquery_factoring_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSubquery_factoring_clause(this);
	}
};

Subquery_factoring_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSubquery_factoring_clause(this);
	}
};




PLSQLParser.Subquery_factoring_clauseContext = Subquery_factoring_clauseContext;

PLSQLParser.prototype.subquery_factoring_clause = function() {

    var localctx = new Subquery_factoring_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, PLSQLParser.RULE_subquery_factoring_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2619;
        this.match(PLSQLParser.WITH);
        this.state = 2620;
        this.factoring_element();
        this.state = 2625;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 2621;
            this.match(PLSQLParser.COMMA);
            this.state = 2622;
            this.factoring_element();
            this.state = 2627;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Factoring_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_factoring_element;
    return this;
}

Factoring_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Factoring_elementContext.prototype.constructor = Factoring_elementContext;

Factoring_elementContext.prototype.query_name = function() {
    return this.getTypedRuleContext(Query_nameContext,0);
};

Factoring_elementContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Factoring_elementContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Factoring_elementContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Factoring_elementContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Factoring_elementContext.prototype.search_clause = function() {
    return this.getTypedRuleContext(Search_clauseContext,0);
};

Factoring_elementContext.prototype.cycle_clause = function() {
    return this.getTypedRuleContext(Cycle_clauseContext,0);
};

Factoring_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFactoring_element(this);
	}
};

Factoring_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFactoring_element(this);
	}
};




PLSQLParser.Factoring_elementContext = Factoring_elementContext;

PLSQLParser.prototype.factoring_element = function() {

    var localctx = new Factoring_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, PLSQLParser.RULE_factoring_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2628;
        this.query_name();
        this.state = 2640;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 2629;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2630;
            this.column_name();
            this.state = 2635;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2631;
                this.match(PLSQLParser.COMMA);
                this.state = 2632;
                this.column_name();
                this.state = 2637;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2638;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 2642;
        this.match(PLSQLParser.AS);
        this.state = 2643;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 2644;
        this.subquery();
        this.state = 2646;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ORDER) {
            this.state = 2645;
            this.order_by_clause();
        }

        this.state = 2648;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 2650;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.SEARCH) {
            this.state = 2649;
            this.search_clause();
        }

        this.state = 2653;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.CYCLE) {
            this.state = 2652;
            this.cycle_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_search_clause;
    return this;
}

Search_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_clauseContext.prototype.constructor = Search_clauseContext;

Search_clauseContext.prototype.SEARCH = function() {
    return this.getToken(PLSQLParser.SEARCH, 0);
};

Search_clauseContext.prototype.FIRST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.FIRST);
    } else {
        return this.getToken(PLSQLParser.FIRST, i);
    }
};


Search_clauseContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Search_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Search_clauseContext.prototype.SET = function() {
    return this.getToken(PLSQLParser.SET, 0);
};

Search_clauseContext.prototype.DEPTH = function() {
    return this.getToken(PLSQLParser.DEPTH, 0);
};

Search_clauseContext.prototype.BREADTH = function() {
    return this.getToken(PLSQLParser.BREADTH, 0);
};

Search_clauseContext.prototype.ASC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.ASC);
    } else {
        return this.getToken(PLSQLParser.ASC, i);
    }
};


Search_clauseContext.prototype.DESC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.DESC);
    } else {
        return this.getToken(PLSQLParser.DESC, i);
    }
};


Search_clauseContext.prototype.NULLS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.NULLS);
    } else {
        return this.getToken(PLSQLParser.NULLS, i);
    }
};


Search_clauseContext.prototype.LAST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.LAST);
    } else {
        return this.getToken(PLSQLParser.LAST, i);
    }
};


Search_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSearch_clause(this);
	}
};

Search_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSearch_clause(this);
	}
};




PLSQLParser.Search_clauseContext = Search_clauseContext;

PLSQLParser.prototype.search_clause = function() {

    var localctx = new Search_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, PLSQLParser.RULE_search_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2655;
        this.match(PLSQLParser.SEARCH);
        this.state = 2656;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.BREADTH || _la===PLSQLParser.DEPTH)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 2657;
        this.match(PLSQLParser.FIRST);
        this.state = 2658;
        this.match(PLSQLParser.BY);
        this.state = 2659;
        this.column_name();
        this.state = 2661;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ASC) {
            this.state = 2660;
            this.match(PLSQLParser.ASC);
        }

        this.state = 2664;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.DESC) {
            this.state = 2663;
            this.match(PLSQLParser.DESC);
        }

        this.state = 2668;
        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
        if(la_===1) {
            this.state = 2666;
            this.match(PLSQLParser.NULLS);
            this.state = 2667;
            this.match(PLSQLParser.FIRST);

        }
        this.state = 2672;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NULLS) {
            this.state = 2670;
            this.match(PLSQLParser.NULLS);
            this.state = 2671;
            this.match(PLSQLParser.LAST);
        }

        this.state = 2692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 2674;
            this.match(PLSQLParser.COMMA);
            this.state = 2675;
            this.column_name();
            this.state = 2677;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.ASC) {
                this.state = 2676;
                this.match(PLSQLParser.ASC);
            }

            this.state = 2680;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.DESC) {
                this.state = 2679;
                this.match(PLSQLParser.DESC);
            }

            this.state = 2684;
            var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
            if(la_===1) {
                this.state = 2682;
                this.match(PLSQLParser.NULLS);
                this.state = 2683;
                this.match(PLSQLParser.FIRST);

            }
            this.state = 2688;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.NULLS) {
                this.state = 2686;
                this.match(PLSQLParser.NULLS);
                this.state = 2687;
                this.match(PLSQLParser.LAST);
            }

            this.state = 2694;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2695;
        this.match(PLSQLParser.SET);
        this.state = 2696;
        this.column_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cycle_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cycle_clause;
    return this;
}

Cycle_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cycle_clauseContext.prototype.constructor = Cycle_clauseContext;

Cycle_clauseContext.prototype.CYCLE = function() {
    return this.getToken(PLSQLParser.CYCLE, 0);
};

Cycle_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Cycle_clauseContext.prototype.SET = function() {
    return this.getToken(PLSQLParser.SET, 0);
};

Cycle_clauseContext.prototype.TO = function() {
    return this.getToken(PLSQLParser.TO, 0);
};

Cycle_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Cycle_clauseContext.prototype.DEFAULT = function() {
    return this.getToken(PLSQLParser.DEFAULT, 0);
};

Cycle_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCycle_clause(this);
	}
};

Cycle_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCycle_clause(this);
	}
};




PLSQLParser.Cycle_clauseContext = Cycle_clauseContext;

PLSQLParser.prototype.cycle_clause = function() {

    var localctx = new Cycle_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, PLSQLParser.RULE_cycle_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2698;
        this.match(PLSQLParser.CYCLE);
        this.state = 2699;
        this.column_name();
        this.state = 2704;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 2700;
            this.match(PLSQLParser.COMMA);
            this.state = 2701;
            this.column_name();
            this.state = 2706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2707;
        this.match(PLSQLParser.SET);
        this.state = 2708;
        this.column_name();
        this.state = 2709;
        this.match(PLSQLParser.TO);
        this.state = 2710;
        this.expression();
        this.state = 2711;
        this.match(PLSQLParser.DEFAULT);
        this.state = 2712;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_subquery;
    return this;
}

SubqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SubqueryContext.prototype.subquery_basic_elements = function() {
    return this.getTypedRuleContext(Subquery_basic_elementsContext,0);
};

SubqueryContext.prototype.subquery_operation_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subquery_operation_partContext);
    } else {
        return this.getTypedRuleContext(Subquery_operation_partContext,i);
    }
};

SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSubquery(this);
	}
};




PLSQLParser.SubqueryContext = SubqueryContext;

PLSQLParser.prototype.subquery = function() {

    var localctx = new SubqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, PLSQLParser.RULE_subquery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2714;
        this.subquery_basic_elements();
        this.state = 2718;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.INTERSECT || _la===PLSQLParser.MINUS || _la===PLSQLParser.UNION) {
            this.state = 2715;
            this.subquery_operation_part();
            this.state = 2720;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_operation_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_subquery_operation_part;
    return this;
}

Subquery_operation_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_operation_partContext.prototype.constructor = Subquery_operation_partContext;

Subquery_operation_partContext.prototype.subquery_basic_elements = function() {
    return this.getTypedRuleContext(Subquery_basic_elementsContext,0);
};

Subquery_operation_partContext.prototype.UNION = function() {
    return this.getToken(PLSQLParser.UNION, 0);
};

Subquery_operation_partContext.prototype.INTERSECT = function() {
    return this.getToken(PLSQLParser.INTERSECT, 0);
};

Subquery_operation_partContext.prototype.MINUS = function() {
    return this.getToken(PLSQLParser.MINUS, 0);
};

Subquery_operation_partContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Subquery_operation_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSubquery_operation_part(this);
	}
};

Subquery_operation_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSubquery_operation_part(this);
	}
};




PLSQLParser.Subquery_operation_partContext = Subquery_operation_partContext;

PLSQLParser.prototype.subquery_operation_part = function() {

    var localctx = new Subquery_operation_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, PLSQLParser.RULE_subquery_operation_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2727;
        switch(this._input.LA(1)) {
        case PLSQLParser.UNION:
            this.state = 2721;
            this.match(PLSQLParser.UNION);
            this.state = 2723;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.ALL) {
                this.state = 2722;
                this.match(PLSQLParser.ALL);
            }

            break;
        case PLSQLParser.INTERSECT:
            this.state = 2725;
            this.match(PLSQLParser.INTERSECT);
            break;
        case PLSQLParser.MINUS:
            this.state = 2726;
            this.match(PLSQLParser.MINUS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2729;
        this.subquery_basic_elements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_basic_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_subquery_basic_elements;
    return this;
}

Subquery_basic_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_basic_elementsContext.prototype.constructor = Subquery_basic_elementsContext;

Subquery_basic_elementsContext.prototype.query_block = function() {
    return this.getTypedRuleContext(Query_blockContext,0);
};

Subquery_basic_elementsContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Subquery_basic_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSubquery_basic_elements(this);
	}
};

Subquery_basic_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSubquery_basic_elements(this);
	}
};




PLSQLParser.Subquery_basic_elementsContext = Subquery_basic_elementsContext;

PLSQLParser.prototype.subquery_basic_elements = function() {

    var localctx = new Subquery_basic_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, PLSQLParser.RULE_subquery_basic_elements);
    try {
        this.state = 2736;
        switch(this._input.LA(1)) {
        case PLSQLParser.SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2731;
            this.query_block();
            break;
        case PLSQLParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2732;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2733;
            this.subquery();
            this.state = 2734;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_query_block;
    return this;
}

Query_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_blockContext.prototype.constructor = Query_blockContext;

Query_blockContext.prototype.SELECT = function() {
    return this.getToken(PLSQLParser.SELECT, 0);
};

Query_blockContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Query_blockContext.prototype.selected_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Selected_elementContext);
    } else {
        return this.getTypedRuleContext(Selected_elementContext,i);
    }
};

Query_blockContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Query_blockContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Query_blockContext.prototype.hierarchical_query_clause = function() {
    return this.getTypedRuleContext(Hierarchical_query_clauseContext,0);
};

Query_blockContext.prototype.group_by_clause = function() {
    return this.getTypedRuleContext(Group_by_clauseContext,0);
};

Query_blockContext.prototype.model_clause = function() {
    return this.getTypedRuleContext(Model_clauseContext,0);
};

Query_blockContext.prototype.DISTINCT = function() {
    return this.getToken(PLSQLParser.DISTINCT, 0);
};

Query_blockContext.prototype.UNIQUE = function() {
    return this.getToken(PLSQLParser.UNIQUE, 0);
};

Query_blockContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Query_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterQuery_block(this);
	}
};

Query_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitQuery_block(this);
	}
};




PLSQLParser.Query_blockContext = Query_blockContext;

PLSQLParser.prototype.query_block = function() {

    var localctx = new Query_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, PLSQLParser.RULE_query_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2738;
        this.match(PLSQLParser.SELECT);
        this.state = 2740;
        var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
        if(la_===1) {
            this.state = 2739;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.ALL || _la===PLSQLParser.DISTINCT || _la===PLSQLParser.UNIQUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }

        }
        this.state = 2751;
        switch(this._input.LA(1)) {
        case PLSQLParser.ASTERISK:
            this.state = 2742;
            this.match(PLSQLParser.ASTERISK);
            break;
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ALL:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ANY:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CASE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONNECT_BY_ROOT:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DATE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DISTINCT:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXISTS:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FALSE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NOT:
        case PLSQLParser.NULL:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.PRIOR:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUE:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
        case PLSQLParser.UNSIGNED_INTEGER:
        case PLSQLParser.APPROXIMATE_NUM_LIT:
        case PLSQLParser.CHAR_STRING:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.LEFT_PAREN:
        case PLSQLParser.PLUS_SIGN:
        case PLSQLParser.MINUS_SIGN:
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 2743;
            this.selected_element();
            this.state = 2748;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2744;
                this.match(PLSQLParser.COMMA);
                this.state = 2745;
                this.selected_element();
                this.state = 2750;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2754;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.BULK || _la===PLSQLParser.INTO) {
            this.state = 2753;
            this.into_clause();
        }

        this.state = 2756;
        this.from_clause();
        this.state = 2758;
        var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
        if(la_===1) {
            this.state = 2757;
            this.where_clause();

        }
        this.state = 2761;
        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
        if(la_===1) {
            this.state = 2760;
            this.hierarchical_query_clause();

        }
        this.state = 2764;
        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
        if(la_===1) {
            this.state = 2763;
            this.group_by_clause();

        }
        this.state = 2767;
        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
        if(la_===1) {
            this.state = 2766;
            this.model_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Selected_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_selected_element;
    return this;
}

Selected_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_elementContext.prototype.constructor = Selected_elementContext;

Selected_elementContext.prototype.select_list_elements = function() {
    return this.getTypedRuleContext(Select_list_elementsContext,0);
};

Selected_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Selected_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSelected_element(this);
	}
};

Selected_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSelected_element(this);
	}
};




PLSQLParser.Selected_elementContext = Selected_elementContext;

PLSQLParser.prototype.selected_element = function() {

    var localctx = new Selected_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, PLSQLParser.RULE_selected_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2769;
        this.select_list_elements();
        this.state = 2771;
        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
        if(la_===1) {
            this.state = 2770;
            this.column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function From_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_from_clause;
    return this;
}

From_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
From_clauseContext.prototype.constructor = From_clauseContext;

From_clauseContext.prototype.FROM = function() {
    return this.getToken(PLSQLParser.FROM, 0);
};

From_clauseContext.prototype.table_ref_list = function() {
    return this.getTypedRuleContext(Table_ref_listContext,0);
};

From_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFrom_clause(this);
	}
};

From_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFrom_clause(this);
	}
};




PLSQLParser.From_clauseContext = From_clauseContext;

PLSQLParser.prototype.from_clause = function() {

    var localctx = new From_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, PLSQLParser.RULE_from_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2773;
        this.match(PLSQLParser.FROM);
        this.state = 2774;
        this.table_ref_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_list_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_select_list_elements;
    return this;
}

Select_list_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_list_elementsContext.prototype.constructor = Select_list_elementsContext;

Select_list_elementsContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Select_list_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Select_list_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSelect_list_elements(this);
	}
};

Select_list_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSelect_list_elements(this);
	}
};




PLSQLParser.Select_list_elementsContext = Select_list_elementsContext;

PLSQLParser.prototype.select_list_elements = function() {

    var localctx = new Select_list_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, PLSQLParser.RULE_select_list_elements);
    try {
        this.state = 2781;
        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2776;
            this.tableview_name();
            this.state = 2777;
            this.match(PLSQLParser.PERIOD);
            this.state = 2778;
            this.match(PLSQLParser.ASTERISK);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2780;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_ref_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_ref_list;
    return this;
}

Table_ref_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_ref_listContext.prototype.constructor = Table_ref_listContext;

Table_ref_listContext.prototype.table_ref = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_refContext);
    } else {
        return this.getTypedRuleContext(Table_refContext,i);
    }
};

Table_ref_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_ref_list(this);
	}
};

Table_ref_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_ref_list(this);
	}
};




PLSQLParser.Table_ref_listContext = Table_ref_listContext;

PLSQLParser.prototype.table_ref_list = function() {

    var localctx = new Table_ref_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, PLSQLParser.RULE_table_ref_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2783;
        this.table_ref();
        this.state = 2788;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,300,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2784;
                this.match(PLSQLParser.COMMA);
                this.state = 2785;
                this.table_ref(); 
            }
            this.state = 2790;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,300,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_refContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_ref;
    return this;
}

Table_refContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_refContext.prototype.constructor = Table_refContext;

Table_refContext.prototype.table_ref_aux = function() {
    return this.getTypedRuleContext(Table_ref_auxContext,0);
};

Table_refContext.prototype.join_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_clauseContext);
    } else {
        return this.getTypedRuleContext(Join_clauseContext,i);
    }
};

Table_refContext.prototype.pivot_clause = function() {
    return this.getTypedRuleContext(Pivot_clauseContext,0);
};

Table_refContext.prototype.unpivot_clause = function() {
    return this.getTypedRuleContext(Unpivot_clauseContext,0);
};

Table_refContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_ref(this);
	}
};

Table_refContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_ref(this);
	}
};




PLSQLParser.Table_refContext = Table_refContext;

PLSQLParser.prototype.table_ref = function() {

    var localctx = new Table_refContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, PLSQLParser.RULE_table_ref);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2791;
        this.table_ref_aux();
        this.state = 2795;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,301,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2792;
                this.join_clause(); 
            }
            this.state = 2797;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,301,this._ctx);
        }

        this.state = 2800;
        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
        if(la_===1) {
            this.state = 2798;
            this.pivot_clause();

        } else if(la_===2) {
            this.state = 2799;
            this.unpivot_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_ref_auxContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_ref_aux;
    return this;
}

Table_ref_auxContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_ref_auxContext.prototype.constructor = Table_ref_auxContext;

Table_ref_auxContext.prototype.dml_table_expression_clause = function() {
    return this.getTypedRuleContext(Dml_table_expression_clauseContext,0);
};

Table_ref_auxContext.prototype.table_ref = function() {
    return this.getTypedRuleContext(Table_refContext,0);
};

Table_ref_auxContext.prototype.ONLY = function() {
    return this.getToken(PLSQLParser.ONLY, 0);
};

Table_ref_auxContext.prototype.flashback_query_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Flashback_query_clauseContext);
    } else {
        return this.getTypedRuleContext(Flashback_query_clauseContext,i);
    }
};

Table_ref_auxContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Table_ref_auxContext.prototype.pivot_clause = function() {
    return this.getTypedRuleContext(Pivot_clauseContext,0);
};

Table_ref_auxContext.prototype.unpivot_clause = function() {
    return this.getTypedRuleContext(Unpivot_clauseContext,0);
};

Table_ref_auxContext.prototype.subquery_operation_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subquery_operation_partContext);
    } else {
        return this.getTypedRuleContext(Subquery_operation_partContext,i);
    }
};

Table_ref_auxContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_ref_aux(this);
	}
};

Table_ref_auxContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_ref_aux(this);
	}
};




PLSQLParser.Table_ref_auxContext = Table_ref_auxContext;

PLSQLParser.prototype.table_ref_aux = function() {

    var localctx = new Table_ref_auxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, PLSQLParser.RULE_table_ref_aux);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2830;
        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2802;
            this.dml_table_expression_clause();
            this.state = 2805;
            var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
            if(la_===1) {
                this.state = 2803;
                this.pivot_clause();

            } else if(la_===2) {
                this.state = 2804;
                this.unpivot_clause();

            }
            break;

        case 2:
            this.state = 2807;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2808;
            this.table_ref();
            this.state = 2812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.INTERSECT || _la===PLSQLParser.MINUS || _la===PLSQLParser.UNION) {
                this.state = 2809;
                this.subquery_operation_part();
                this.state = 2814;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2815;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 2818;
            var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
            if(la_===1) {
                this.state = 2816;
                this.pivot_clause();

            } else if(la_===2) {
                this.state = 2817;
                this.unpivot_clause();

            }
            break;

        case 3:
            this.state = 2820;
            this.match(PLSQLParser.ONLY);
            this.state = 2821;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2822;
            this.dml_table_expression_clause();
            this.state = 2823;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 4:
            this.state = 2825;
            this.dml_table_expression_clause();
            this.state = 2828;
            var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
            if(la_===1) {
                this.state = 2826;
                this.pivot_clause();

            } else if(la_===2) {
                this.state = 2827;
                this.unpivot_clause();

            }
            break;

        }
        this.state = 2835;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,308,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2832;
                this.flashback_query_clause(); 
            }
            this.state = 2837;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,308,this._ctx);
        }

        this.state = 2839;
        var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
        if(la_===1) {
            this.state = 2838;
            this.table_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_join_clause;
    return this;
}

Join_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_clauseContext.prototype.constructor = Join_clauseContext;

Join_clauseContext.prototype.JOIN = function() {
    return this.getToken(PLSQLParser.JOIN, 0);
};

Join_clauseContext.prototype.table_ref_aux = function() {
    return this.getTypedRuleContext(Table_ref_auxContext,0);
};

Join_clauseContext.prototype.query_partition_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_partition_clauseContext);
    } else {
        return this.getTypedRuleContext(Query_partition_clauseContext,i);
    }
};

Join_clauseContext.prototype.INNER = function() {
    return this.getToken(PLSQLParser.INNER, 0);
};

Join_clauseContext.prototype.outer_join_type = function() {
    return this.getTypedRuleContext(Outer_join_typeContext,0);
};

Join_clauseContext.prototype.join_on_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_on_partContext);
    } else {
        return this.getTypedRuleContext(Join_on_partContext,i);
    }
};

Join_clauseContext.prototype.join_using_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_using_partContext);
    } else {
        return this.getTypedRuleContext(Join_using_partContext,i);
    }
};

Join_clauseContext.prototype.CROSS = function() {
    return this.getToken(PLSQLParser.CROSS, 0);
};

Join_clauseContext.prototype.NATURAL = function() {
    return this.getToken(PLSQLParser.NATURAL, 0);
};

Join_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterJoin_clause(this);
	}
};

Join_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitJoin_clause(this);
	}
};




PLSQLParser.Join_clauseContext = Join_clauseContext;

PLSQLParser.prototype.join_clause = function() {

    var localctx = new Join_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, PLSQLParser.RULE_join_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2842;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PARTITION) {
            this.state = 2841;
            this.query_partition_clause();
        }

        this.state = 2845;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.CROSS || _la===PLSQLParser.NATURAL) {
            this.state = 2844;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.CROSS || _la===PLSQLParser.NATURAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 2849;
        switch (this._input.LA(1)) {
        case PLSQLParser.INNER:
        	this.state = 2847;
        	this.match(PLSQLParser.INNER);
        	break;
        case PLSQLParser.FULL:
        case PLSQLParser.LEFT:
        case PLSQLParser.RIGHT:
        	this.state = 2848;
        	this.outer_join_type();
        	break;
        case PLSQLParser.JOIN:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2851;
        this.match(PLSQLParser.JOIN);
        this.state = 2852;
        this.table_ref_aux();
        this.state = 2854;
        var la_ = this._interp.adaptivePredict(this._input,313,this._ctx);
        if(la_===1) {
            this.state = 2853;
            this.query_partition_clause();

        }
        this.state = 2860;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,315,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2858;
                switch(this._input.LA(1)) {
                case PLSQLParser.ON:
                    this.state = 2856;
                    this.join_on_part();
                    break;
                case PLSQLParser.USING:
                    this.state = 2857;
                    this.join_using_part();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 2862;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,315,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_on_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_join_on_part;
    return this;
}

Join_on_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_on_partContext.prototype.constructor = Join_on_partContext;

Join_on_partContext.prototype.ON = function() {
    return this.getToken(PLSQLParser.ON, 0);
};

Join_on_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Join_on_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterJoin_on_part(this);
	}
};

Join_on_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitJoin_on_part(this);
	}
};




PLSQLParser.Join_on_partContext = Join_on_partContext;

PLSQLParser.prototype.join_on_part = function() {

    var localctx = new Join_on_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, PLSQLParser.RULE_join_on_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2863;
        this.match(PLSQLParser.ON);
        this.state = 2864;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_using_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_join_using_part;
    return this;
}

Join_using_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_using_partContext.prototype.constructor = Join_using_partContext;

Join_using_partContext.prototype.USING = function() {
    return this.getToken(PLSQLParser.USING, 0);
};

Join_using_partContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Join_using_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterJoin_using_part(this);
	}
};

Join_using_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitJoin_using_part(this);
	}
};




PLSQLParser.Join_using_partContext = Join_using_partContext;

PLSQLParser.prototype.join_using_part = function() {

    var localctx = new Join_using_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, PLSQLParser.RULE_join_using_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2866;
        this.match(PLSQLParser.USING);
        this.state = 2867;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 2868;
        this.column_name();
        this.state = 2873;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 2869;
            this.match(PLSQLParser.COMMA);
            this.state = 2870;
            this.column_name();
            this.state = 2875;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2876;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_outer_join_type;
    return this;
}

Outer_join_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_typeContext.prototype.constructor = Outer_join_typeContext;

Outer_join_typeContext.prototype.FULL = function() {
    return this.getToken(PLSQLParser.FULL, 0);
};

Outer_join_typeContext.prototype.LEFT = function() {
    return this.getToken(PLSQLParser.LEFT, 0);
};

Outer_join_typeContext.prototype.RIGHT = function() {
    return this.getToken(PLSQLParser.RIGHT, 0);
};

Outer_join_typeContext.prototype.OUTER = function() {
    return this.getToken(PLSQLParser.OUTER, 0);
};

Outer_join_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterOuter_join_type(this);
	}
};

Outer_join_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitOuter_join_type(this);
	}
};




PLSQLParser.Outer_join_typeContext = Outer_join_typeContext;

PLSQLParser.prototype.outer_join_type = function() {

    var localctx = new Outer_join_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, PLSQLParser.RULE_outer_join_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2878;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.FULL || _la===PLSQLParser.LEFT || _la===PLSQLParser.RIGHT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 2880;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.OUTER) {
            this.state = 2879;
            this.match(PLSQLParser.OUTER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_partition_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_query_partition_clause;
    return this;
}

Query_partition_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_partition_clauseContext.prototype.constructor = Query_partition_clauseContext;

Query_partition_clauseContext.prototype.PARTITION = function() {
    return this.getToken(PLSQLParser.PARTITION, 0);
};

Query_partition_clauseContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Query_partition_clauseContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Query_partition_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Query_partition_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Query_partition_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterQuery_partition_clause(this);
	}
};

Query_partition_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitQuery_partition_clause(this);
	}
};




PLSQLParser.Query_partition_clauseContext = Query_partition_clauseContext;

PLSQLParser.prototype.query_partition_clause = function() {

    var localctx = new Query_partition_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, PLSQLParser.RULE_query_partition_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2882;
        this.match(PLSQLParser.PARTITION);
        this.state = 2883;
        this.match(PLSQLParser.BY);
        this.state = 2897;
        var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2884;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2885;
            this.subquery();
            this.state = 2886;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 2888;
            this.expression_list();
            break;

        case 3:
            this.state = 2889;
            this.expression();
            this.state = 2894;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,318,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2890;
                    this.match(PLSQLParser.COMMA);
                    this.state = 2891;
                    this.expression(); 
                }
                this.state = 2896;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,318,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flashback_query_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_flashback_query_clause;
    return this;
}

Flashback_query_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flashback_query_clauseContext.prototype.constructor = Flashback_query_clauseContext;

Flashback_query_clauseContext.prototype.VERSIONS = function() {
    return this.getToken(PLSQLParser.VERSIONS, 0);
};

Flashback_query_clauseContext.prototype.BETWEEN = function() {
    return this.getToken(PLSQLParser.BETWEEN, 0);
};

Flashback_query_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Flashback_query_clauseContext.prototype.SCN = function() {
    return this.getToken(PLSQLParser.SCN, 0);
};

Flashback_query_clauseContext.prototype.TIMESTAMP = function() {
    return this.getToken(PLSQLParser.TIMESTAMP, 0);
};

Flashback_query_clauseContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Flashback_query_clauseContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Flashback_query_clauseContext.prototype.SNAPSHOT = function() {
    return this.getToken(PLSQLParser.SNAPSHOT, 0);
};

Flashback_query_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFlashback_query_clause(this);
	}
};

Flashback_query_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFlashback_query_clause(this);
	}
};




PLSQLParser.Flashback_query_clauseContext = Flashback_query_clauseContext;

PLSQLParser.prototype.flashback_query_clause = function() {

    var localctx = new Flashback_query_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, PLSQLParser.RULE_flashback_query_clause);
    var _la = 0; // Token type
    try {
        this.state = 2907;
        switch(this._input.LA(1)) {
        case PLSQLParser.VERSIONS:
            this.enterOuterAlt(localctx, 1);
            this.state = 2899;
            this.match(PLSQLParser.VERSIONS);
            this.state = 2900;
            this.match(PLSQLParser.BETWEEN);
            this.state = 2901;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.SCN || _la===PLSQLParser.TIMESTAMP)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 2902;
            this.expression();
            break;
        case PLSQLParser.AS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2903;
            this.match(PLSQLParser.AS);
            this.state = 2904;
            this.match(PLSQLParser.OF);
            this.state = 2905;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.SCN || _la===PLSQLParser.SNAPSHOT || _la===PLSQLParser.TIMESTAMP)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 2906;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_pivot_clause;
    return this;
}

Pivot_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_clauseContext.prototype.constructor = Pivot_clauseContext;

Pivot_clauseContext.prototype.PIVOT = function() {
    return this.getToken(PLSQLParser.PIVOT, 0);
};

Pivot_clauseContext.prototype.pivot_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pivot_elementContext);
    } else {
        return this.getTypedRuleContext(Pivot_elementContext,i);
    }
};

Pivot_clauseContext.prototype.pivot_for_clause = function() {
    return this.getTypedRuleContext(Pivot_for_clauseContext,0);
};

Pivot_clauseContext.prototype.pivot_in_clause = function() {
    return this.getTypedRuleContext(Pivot_in_clauseContext,0);
};

Pivot_clauseContext.prototype.XML = function() {
    return this.getToken(PLSQLParser.XML, 0);
};

Pivot_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPivot_clause(this);
	}
};

Pivot_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPivot_clause(this);
	}
};




PLSQLParser.Pivot_clauseContext = Pivot_clauseContext;

PLSQLParser.prototype.pivot_clause = function() {

    var localctx = new Pivot_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, PLSQLParser.RULE_pivot_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2909;
        this.match(PLSQLParser.PIVOT);
        this.state = 2911;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.XML) {
            this.state = 2910;
            this.match(PLSQLParser.XML);
        }

        this.state = 2913;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 2914;
        this.pivot_element();
        this.state = 2919;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 2915;
            this.match(PLSQLParser.COMMA);
            this.state = 2916;
            this.pivot_element();
            this.state = 2921;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2922;
        this.pivot_for_clause();
        this.state = 2923;
        this.pivot_in_clause();
        this.state = 2924;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_pivot_element;
    return this;
}

Pivot_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_elementContext.prototype.constructor = Pivot_elementContext;

Pivot_elementContext.prototype.aggregate_function_name = function() {
    return this.getTypedRuleContext(Aggregate_function_nameContext,0);
};

Pivot_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pivot_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Pivot_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPivot_element(this);
	}
};

Pivot_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPivot_element(this);
	}
};




PLSQLParser.Pivot_elementContext = Pivot_elementContext;

PLSQLParser.prototype.pivot_element = function() {

    var localctx = new Pivot_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, PLSQLParser.RULE_pivot_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2926;
        this.aggregate_function_name();
        this.state = 2927;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 2928;
        this.expression();
        this.state = 2929;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 2931;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.AS) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 450)))) !== 0) || ((((_la - 484)) & ~0x1f) == 0 && ((1 << (_la - 484)) & ((1 << (PLSQLParser.CHAR_STRING - 484)) | (1 << (PLSQLParser.DELIMITED_ID - 484)) | (1 << (PLSQLParser.INTRODUCER - 484)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2930;
            this.column_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_for_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_pivot_for_clause;
    return this;
}

Pivot_for_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_for_clauseContext.prototype.constructor = Pivot_for_clauseContext;

Pivot_for_clauseContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

Pivot_for_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Pivot_for_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPivot_for_clause(this);
	}
};

Pivot_for_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPivot_for_clause(this);
	}
};




PLSQLParser.Pivot_for_clauseContext = Pivot_for_clauseContext;

PLSQLParser.prototype.pivot_for_clause = function() {

    var localctx = new Pivot_for_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, PLSQLParser.RULE_pivot_for_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2933;
        this.match(PLSQLParser.FOR);
        this.state = 2946;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 2934;
            this.column_name();
            break;
        case PLSQLParser.LEFT_PAREN:
            this.state = 2935;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2936;
            this.column_name();
            this.state = 2941;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2937;
                this.match(PLSQLParser.COMMA);
                this.state = 2938;
                this.column_name();
                this.state = 2943;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2944;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_in_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_pivot_in_clause;
    return this;
}

Pivot_in_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_in_clauseContext.prototype.constructor = Pivot_in_clauseContext;

Pivot_in_clauseContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Pivot_in_clauseContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Pivot_in_clauseContext.prototype.ANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.ANY);
    } else {
        return this.getToken(PLSQLParser.ANY, i);
    }
};


Pivot_in_clauseContext.prototype.pivot_in_clause_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pivot_in_clause_elementContext);
    } else {
        return this.getTypedRuleContext(Pivot_in_clause_elementContext,i);
    }
};

Pivot_in_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPivot_in_clause(this);
	}
};

Pivot_in_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPivot_in_clause(this);
	}
};




PLSQLParser.Pivot_in_clauseContext = Pivot_in_clauseContext;

PLSQLParser.prototype.pivot_in_clause = function() {

    var localctx = new Pivot_in_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, PLSQLParser.RULE_pivot_in_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2948;
        this.match(PLSQLParser.IN);
        this.state = 2949;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 2967;
        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2950;
            this.subquery();
            break;

        case 2:
            this.state = 2951;
            this.match(PLSQLParser.ANY);
            this.state = 2956;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2952;
                this.match(PLSQLParser.COMMA);
                this.state = 2953;
                this.match(PLSQLParser.ANY);
                this.state = 2958;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.state = 2959;
            this.pivot_in_clause_element();
            this.state = 2964;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2960;
                this.match(PLSQLParser.COMMA);
                this.state = 2961;
                this.pivot_in_clause_element();
                this.state = 2966;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
        this.state = 2969;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_in_clause_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_pivot_in_clause_element;
    return this;
}

Pivot_in_clause_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_in_clause_elementContext.prototype.constructor = Pivot_in_clause_elementContext;

Pivot_in_clause_elementContext.prototype.pivot_in_clause_elements = function() {
    return this.getTypedRuleContext(Pivot_in_clause_elementsContext,0);
};

Pivot_in_clause_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Pivot_in_clause_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPivot_in_clause_element(this);
	}
};

Pivot_in_clause_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPivot_in_clause_element(this);
	}
};




PLSQLParser.Pivot_in_clause_elementContext = Pivot_in_clause_elementContext;

PLSQLParser.prototype.pivot_in_clause_element = function() {

    var localctx = new Pivot_in_clause_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, PLSQLParser.RULE_pivot_in_clause_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2971;
        this.pivot_in_clause_elements();
        this.state = 2973;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.AS) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 450)))) !== 0) || ((((_la - 484)) & ~0x1f) == 0 && ((1 << (_la - 484)) & ((1 << (PLSQLParser.CHAR_STRING - 484)) | (1 << (PLSQLParser.DELIMITED_ID - 484)) | (1 << (PLSQLParser.INTRODUCER - 484)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 2972;
            this.column_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_in_clause_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_pivot_in_clause_elements;
    return this;
}

Pivot_in_clause_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_in_clause_elementsContext.prototype.constructor = Pivot_in_clause_elementsContext;

Pivot_in_clause_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pivot_in_clause_elementsContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Pivot_in_clause_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPivot_in_clause_elements(this);
	}
};

Pivot_in_clause_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPivot_in_clause_elements(this);
	}
};




PLSQLParser.Pivot_in_clause_elementsContext = Pivot_in_clause_elementsContext;

PLSQLParser.prototype.pivot_in_clause_elements = function() {

    var localctx = new Pivot_in_clause_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, PLSQLParser.RULE_pivot_in_clause_elements);
    try {
        this.state = 2977;
        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2975;
            this.expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2976;
            this.expression_list();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_unpivot_clause;
    return this;
}

Unpivot_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_clauseContext.prototype.constructor = Unpivot_clauseContext;

Unpivot_clauseContext.prototype.UNPIVOT = function() {
    return this.getToken(PLSQLParser.UNPIVOT, 0);
};

Unpivot_clauseContext.prototype.pivot_for_clause = function() {
    return this.getTypedRuleContext(Pivot_for_clauseContext,0);
};

Unpivot_clauseContext.prototype.unpivot_in_clause = function() {
    return this.getTypedRuleContext(Unpivot_in_clauseContext,0);
};

Unpivot_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Unpivot_clauseContext.prototype.NULLS = function() {
    return this.getToken(PLSQLParser.NULLS, 0);
};

Unpivot_clauseContext.prototype.INCLUDE = function() {
    return this.getToken(PLSQLParser.INCLUDE, 0);
};

Unpivot_clauseContext.prototype.EXCLUDE = function() {
    return this.getToken(PLSQLParser.EXCLUDE, 0);
};

Unpivot_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUnpivot_clause(this);
	}
};

Unpivot_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUnpivot_clause(this);
	}
};




PLSQLParser.Unpivot_clauseContext = Unpivot_clauseContext;

PLSQLParser.prototype.unpivot_clause = function() {

    var localctx = new Unpivot_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, PLSQLParser.RULE_unpivot_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2979;
        this.match(PLSQLParser.UNPIVOT);
        this.state = 2982;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.EXCLUDE || _la===PLSQLParser.INCLUDE) {
            this.state = 2980;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.EXCLUDE || _la===PLSQLParser.INCLUDE)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 2981;
            this.match(PLSQLParser.NULLS);
        }

        this.state = 2984;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 2997;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 2985;
            this.column_name();
            break;
        case PLSQLParser.LEFT_PAREN:
            this.state = 2986;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 2987;
            this.column_name();
            this.state = 2992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 2988;
                this.match(PLSQLParser.COMMA);
                this.state = 2989;
                this.column_name();
                this.state = 2994;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2995;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2999;
        this.pivot_for_clause();
        this.state = 3000;
        this.unpivot_in_clause();
        this.state = 3001;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_in_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_unpivot_in_clause;
    return this;
}

Unpivot_in_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_in_clauseContext.prototype.constructor = Unpivot_in_clauseContext;

Unpivot_in_clauseContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Unpivot_in_clauseContext.prototype.unpivot_in_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unpivot_in_elementsContext);
    } else {
        return this.getTypedRuleContext(Unpivot_in_elementsContext,i);
    }
};

Unpivot_in_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUnpivot_in_clause(this);
	}
};

Unpivot_in_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUnpivot_in_clause(this);
	}
};




PLSQLParser.Unpivot_in_clauseContext = Unpivot_in_clauseContext;

PLSQLParser.prototype.unpivot_in_clause = function() {

    var localctx = new Unpivot_in_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, PLSQLParser.RULE_unpivot_in_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3003;
        this.match(PLSQLParser.IN);
        this.state = 3004;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3005;
        this.unpivot_in_elements();
        this.state = 3010;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3006;
            this.match(PLSQLParser.COMMA);
            this.state = 3007;
            this.unpivot_in_elements();
            this.state = 3012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3013;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_in_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_unpivot_in_elements;
    return this;
}

Unpivot_in_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_in_elementsContext.prototype.constructor = Unpivot_in_elementsContext;

Unpivot_in_elementsContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Unpivot_in_elementsContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Unpivot_in_elementsContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

Unpivot_in_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUnpivot_in_elements(this);
	}
};

Unpivot_in_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUnpivot_in_elements(this);
	}
};




PLSQLParser.Unpivot_in_elementsContext = Unpivot_in_elementsContext;

PLSQLParser.prototype.unpivot_in_elements = function() {

    var localctx = new Unpivot_in_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, PLSQLParser.RULE_unpivot_in_elements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3027;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 3015;
            this.column_name();
            break;
        case PLSQLParser.LEFT_PAREN:
            this.state = 3016;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3017;
            this.column_name();
            this.state = 3022;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 3018;
                this.match(PLSQLParser.COMMA);
                this.state = 3019;
                this.column_name();
                this.state = 3024;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3025;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3044;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AS) {
            this.state = 3029;
            this.match(PLSQLParser.AS);
            this.state = 3042;
            switch(this._input.LA(1)) {
            case PLSQLParser.DATE:
            case PLSQLParser.DBTIMEZONE:
            case PLSQLParser.DEFAULT:
            case PLSQLParser.FALSE:
            case PLSQLParser.INTERVAL:
            case PLSQLParser.MAXVALUE:
            case PLSQLParser.MINVALUE:
            case PLSQLParser.NULL:
            case PLSQLParser.SESSIONTIMEZONE:
            case PLSQLParser.TIMESTAMP:
            case PLSQLParser.TRUE:
            case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
            case PLSQLParser.UNSIGNED_INTEGER:
            case PLSQLParser.APPROXIMATE_NUM_LIT:
            case PLSQLParser.CHAR_STRING:
                this.state = 3030;
                this.constant();
                break;
            case PLSQLParser.LEFT_PAREN:
                this.state = 3031;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 3032;
                this.constant();
                this.state = 3037;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===PLSQLParser.COMMA) {
                    this.state = 3033;
                    this.match(PLSQLParser.COMMA);
                    this.state = 3034;
                    this.constant();
                    this.state = 3039;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3040;
                this.match(PLSQLParser.RIGHT_PAREN);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hierarchical_query_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_hierarchical_query_clause;
    return this;
}

Hierarchical_query_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_query_clauseContext.prototype.constructor = Hierarchical_query_clauseContext;

Hierarchical_query_clauseContext.prototype.CONNECT = function() {
    return this.getToken(PLSQLParser.CONNECT, 0);
};

Hierarchical_query_clauseContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Hierarchical_query_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Hierarchical_query_clauseContext.prototype.NOCYCLE = function() {
    return this.getToken(PLSQLParser.NOCYCLE, 0);
};

Hierarchical_query_clauseContext.prototype.start_part = function() {
    return this.getTypedRuleContext(Start_partContext,0);
};

Hierarchical_query_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterHierarchical_query_clause(this);
	}
};

Hierarchical_query_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitHierarchical_query_clause(this);
	}
};




PLSQLParser.Hierarchical_query_clauseContext = Hierarchical_query_clauseContext;

PLSQLParser.prototype.hierarchical_query_clause = function() {

    var localctx = new Hierarchical_query_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, PLSQLParser.RULE_hierarchical_query_clause);
    try {
        this.state = 3063;
        switch(this._input.LA(1)) {
        case PLSQLParser.CONNECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3046;
            this.match(PLSQLParser.CONNECT);
            this.state = 3047;
            this.match(PLSQLParser.BY);
            this.state = 3049;
            var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
            if(la_===1) {
                this.state = 3048;
                this.match(PLSQLParser.NOCYCLE);

            }
            this.state = 3051;
            this.condition();
            this.state = 3053;
            var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
            if(la_===1) {
                this.state = 3052;
                this.start_part();

            }
            break;
        case PLSQLParser.START:
            this.enterOuterAlt(localctx, 2);
            this.state = 3055;
            this.start_part();
            this.state = 3056;
            this.match(PLSQLParser.CONNECT);
            this.state = 3057;
            this.match(PLSQLParser.BY);
            this.state = 3059;
            var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
            if(la_===1) {
                this.state = 3058;
                this.match(PLSQLParser.NOCYCLE);

            }
            this.state = 3061;
            this.condition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Start_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_start_part;
    return this;
}

Start_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Start_partContext.prototype.constructor = Start_partContext;

Start_partContext.prototype.START = function() {
    return this.getToken(PLSQLParser.START, 0);
};

Start_partContext.prototype.WITH = function() {
    return this.getToken(PLSQLParser.WITH, 0);
};

Start_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Start_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterStart_part(this);
	}
};

Start_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitStart_part(this);
	}
};




PLSQLParser.Start_partContext = Start_partContext;

PLSQLParser.prototype.start_part = function() {

    var localctx = new Start_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, PLSQLParser.RULE_start_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3065;
        this.match(PLSQLParser.START);
        this.state = 3066;
        this.match(PLSQLParser.WITH);
        this.state = 3067;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_group_by_clause;
    return this;
}

Group_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_clauseContext.prototype.constructor = Group_by_clauseContext;

Group_by_clauseContext.prototype.GROUP = function() {
    return this.getToken(PLSQLParser.GROUP, 0);
};

Group_by_clauseContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Group_by_clauseContext.prototype.group_by_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_by_elementsContext);
    } else {
        return this.getTypedRuleContext(Group_by_elementsContext,i);
    }
};

Group_by_clauseContext.prototype.having_clause = function() {
    return this.getTypedRuleContext(Having_clauseContext,0);
};

Group_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterGroup_by_clause(this);
	}
};

Group_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitGroup_by_clause(this);
	}
};




PLSQLParser.Group_by_clauseContext = Group_by_clauseContext;

PLSQLParser.prototype.group_by_clause = function() {

    var localctx = new Group_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, PLSQLParser.RULE_group_by_clause);
    try {
        this.state = 3095;
        switch(this._input.LA(1)) {
        case PLSQLParser.GROUP:
            this.enterOuterAlt(localctx, 1);
            this.state = 3069;
            this.match(PLSQLParser.GROUP);
            this.state = 3070;
            this.match(PLSQLParser.BY);
            this.state = 3071;
            this.group_by_elements();
            this.state = 3076;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,344,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3072;
                    this.match(PLSQLParser.COMMA);
                    this.state = 3073;
                    this.group_by_elements(); 
                }
                this.state = 3078;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,344,this._ctx);
            }

            this.state = 3080;
            var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
            if(la_===1) {
                this.state = 3079;
                this.having_clause();

            }
            break;
        case PLSQLParser.HAVING:
            this.enterOuterAlt(localctx, 2);
            this.state = 3082;
            this.having_clause();
            this.state = 3093;
            var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
            if(la_===1) {
                this.state = 3083;
                this.match(PLSQLParser.GROUP);
                this.state = 3084;
                this.match(PLSQLParser.BY);
                this.state = 3085;
                this.group_by_elements();
                this.state = 3090;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,346,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 3086;
                        this.match(PLSQLParser.COMMA);
                        this.state = 3087;
                        this.group_by_elements(); 
                    }
                    this.state = 3092;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,346,this._ctx);
                }


            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_group_by_elements;
    return this;
}

Group_by_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_elementsContext.prototype.constructor = Group_by_elementsContext;

Group_by_elementsContext.prototype.grouping_sets_clause = function() {
    return this.getTypedRuleContext(Grouping_sets_clauseContext,0);
};

Group_by_elementsContext.prototype.rollup_cube_clause = function() {
    return this.getTypedRuleContext(Rollup_cube_clauseContext,0);
};

Group_by_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Group_by_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterGroup_by_elements(this);
	}
};

Group_by_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitGroup_by_elements(this);
	}
};




PLSQLParser.Group_by_elementsContext = Group_by_elementsContext;

PLSQLParser.prototype.group_by_elements = function() {

    var localctx = new Group_by_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, PLSQLParser.RULE_group_by_elements);
    try {
        this.state = 3100;
        var la_ = this._interp.adaptivePredict(this._input,349,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3097;
            this.grouping_sets_clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3098;
            this.rollup_cube_clause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3099;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollup_cube_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_rollup_cube_clause;
    return this;
}

Rollup_cube_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollup_cube_clauseContext.prototype.constructor = Rollup_cube_clauseContext;

Rollup_cube_clauseContext.prototype.grouping_sets_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Grouping_sets_elementsContext);
    } else {
        return this.getTypedRuleContext(Grouping_sets_elementsContext,i);
    }
};

Rollup_cube_clauseContext.prototype.ROLLUP = function() {
    return this.getToken(PLSQLParser.ROLLUP, 0);
};

Rollup_cube_clauseContext.prototype.CUBE = function() {
    return this.getToken(PLSQLParser.CUBE, 0);
};

Rollup_cube_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRollup_cube_clause(this);
	}
};

Rollup_cube_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRollup_cube_clause(this);
	}
};




PLSQLParser.Rollup_cube_clauseContext = Rollup_cube_clauseContext;

PLSQLParser.prototype.rollup_cube_clause = function() {

    var localctx = new Rollup_cube_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, PLSQLParser.RULE_rollup_cube_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3102;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.CUBE || _la===PLSQLParser.ROLLUP)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 3103;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3104;
        this.grouping_sets_elements();
        this.state = 3109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3105;
            this.match(PLSQLParser.COMMA);
            this.state = 3106;
            this.grouping_sets_elements();
            this.state = 3111;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3112;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_sets_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_grouping_sets_clause;
    return this;
}

Grouping_sets_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_sets_clauseContext.prototype.constructor = Grouping_sets_clauseContext;

Grouping_sets_clauseContext.prototype.GROUPING = function() {
    return this.getToken(PLSQLParser.GROUPING, 0);
};

Grouping_sets_clauseContext.prototype.SETS = function() {
    return this.getToken(PLSQLParser.SETS, 0);
};

Grouping_sets_clauseContext.prototype.grouping_sets_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Grouping_sets_elementsContext);
    } else {
        return this.getTypedRuleContext(Grouping_sets_elementsContext,i);
    }
};

Grouping_sets_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterGrouping_sets_clause(this);
	}
};

Grouping_sets_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitGrouping_sets_clause(this);
	}
};




PLSQLParser.Grouping_sets_clauseContext = Grouping_sets_clauseContext;

PLSQLParser.prototype.grouping_sets_clause = function() {

    var localctx = new Grouping_sets_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, PLSQLParser.RULE_grouping_sets_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3114;
        this.match(PLSQLParser.GROUPING);
        this.state = 3115;
        this.match(PLSQLParser.SETS);
        this.state = 3116;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3117;
        this.grouping_sets_elements();
        this.state = 3122;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3118;
            this.match(PLSQLParser.COMMA);
            this.state = 3119;
            this.grouping_sets_elements();
            this.state = 3124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3125;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_sets_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_grouping_sets_elements;
    return this;
}

Grouping_sets_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_sets_elementsContext.prototype.constructor = Grouping_sets_elementsContext;

Grouping_sets_elementsContext.prototype.rollup_cube_clause = function() {
    return this.getTypedRuleContext(Rollup_cube_clauseContext,0);
};

Grouping_sets_elementsContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Grouping_sets_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Grouping_sets_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterGrouping_sets_elements(this);
	}
};

Grouping_sets_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitGrouping_sets_elements(this);
	}
};




PLSQLParser.Grouping_sets_elementsContext = Grouping_sets_elementsContext;

PLSQLParser.prototype.grouping_sets_elements = function() {

    var localctx = new Grouping_sets_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, PLSQLParser.RULE_grouping_sets_elements);
    try {
        this.state = 3130;
        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3127;
            this.rollup_cube_clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3128;
            this.expression_list();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3129;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Having_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_having_clause;
    return this;
}

Having_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Having_clauseContext.prototype.constructor = Having_clauseContext;

Having_clauseContext.prototype.HAVING = function() {
    return this.getToken(PLSQLParser.HAVING, 0);
};

Having_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Having_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterHaving_clause(this);
	}
};

Having_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitHaving_clause(this);
	}
};




PLSQLParser.Having_clauseContext = Having_clauseContext;

PLSQLParser.prototype.having_clause = function() {

    var localctx = new Having_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, PLSQLParser.RULE_having_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3132;
        this.match(PLSQLParser.HAVING);
        this.state = 3133;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_clause;
    return this;
}

Model_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_clauseContext.prototype.constructor = Model_clauseContext;

Model_clauseContext.prototype.MODEL = function() {
    return this.getToken(PLSQLParser.MODEL, 0);
};

Model_clauseContext.prototype.main_model = function() {
    return this.getTypedRuleContext(Main_modelContext,0);
};

Model_clauseContext.prototype.cell_reference_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_reference_optionsContext);
    } else {
        return this.getTypedRuleContext(Cell_reference_optionsContext,i);
    }
};

Model_clauseContext.prototype.return_rows_clause = function() {
    return this.getTypedRuleContext(Return_rows_clauseContext,0);
};

Model_clauseContext.prototype.reference_model = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Reference_modelContext);
    } else {
        return this.getTypedRuleContext(Reference_modelContext,i);
    }
};

Model_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_clause(this);
	}
};

Model_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_clause(this);
	}
};




PLSQLParser.Model_clauseContext = Model_clauseContext;

PLSQLParser.prototype.model_clause = function() {

    var localctx = new Model_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, PLSQLParser.RULE_model_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3135;
        this.match(PLSQLParser.MODEL);
        this.state = 3139;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.IGNORE || _la===PLSQLParser.KEEP || _la===PLSQLParser.UNIQUE) {
            this.state = 3136;
            this.cell_reference_options();
            this.state = 3141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3143;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.RETURN) {
            this.state = 3142;
            this.return_rows_clause();
        }

        this.state = 3148;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.REFERENCE) {
            this.state = 3145;
            this.reference_model();
            this.state = 3150;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3151;
        this.main_model();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cell_reference_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cell_reference_options;
    return this;
}

Cell_reference_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cell_reference_optionsContext.prototype.constructor = Cell_reference_optionsContext;

Cell_reference_optionsContext.prototype.NAV = function() {
    return this.getToken(PLSQLParser.NAV, 0);
};

Cell_reference_optionsContext.prototype.IGNORE = function() {
    return this.getToken(PLSQLParser.IGNORE, 0);
};

Cell_reference_optionsContext.prototype.KEEP = function() {
    return this.getToken(PLSQLParser.KEEP, 0);
};

Cell_reference_optionsContext.prototype.UNIQUE = function() {
    return this.getToken(PLSQLParser.UNIQUE, 0);
};

Cell_reference_optionsContext.prototype.DIMENSION = function() {
    return this.getToken(PLSQLParser.DIMENSION, 0);
};

Cell_reference_optionsContext.prototype.SINGLE = function() {
    return this.getToken(PLSQLParser.SINGLE, 0);
};

Cell_reference_optionsContext.prototype.REFERENCE = function() {
    return this.getToken(PLSQLParser.REFERENCE, 0);
};

Cell_reference_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCell_reference_options(this);
	}
};

Cell_reference_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCell_reference_options(this);
	}
};




PLSQLParser.Cell_reference_optionsContext = Cell_reference_optionsContext;

PLSQLParser.prototype.cell_reference_options = function() {

    var localctx = new Cell_reference_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, PLSQLParser.RULE_cell_reference_options);
    var _la = 0; // Token type
    try {
        this.state = 3161;
        switch(this._input.LA(1)) {
        case PLSQLParser.IGNORE:
        case PLSQLParser.KEEP:
            this.enterOuterAlt(localctx, 1);
            this.state = 3153;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.IGNORE || _la===PLSQLParser.KEEP)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 3154;
            this.match(PLSQLParser.NAV);
            break;
        case PLSQLParser.UNIQUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3155;
            this.match(PLSQLParser.UNIQUE);
            this.state = 3159;
            switch(this._input.LA(1)) {
            case PLSQLParser.DIMENSION:
                this.state = 3156;
                this.match(PLSQLParser.DIMENSION);
                break;
            case PLSQLParser.SINGLE:
                this.state = 3157;
                this.match(PLSQLParser.SINGLE);
                this.state = 3158;
                this.match(PLSQLParser.REFERENCE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_rows_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_return_rows_clause;
    return this;
}

Return_rows_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_rows_clauseContext.prototype.constructor = Return_rows_clauseContext;

Return_rows_clauseContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Return_rows_clauseContext.prototype.ROWS = function() {
    return this.getToken(PLSQLParser.ROWS, 0);
};

Return_rows_clauseContext.prototype.UPDATED = function() {
    return this.getToken(PLSQLParser.UPDATED, 0);
};

Return_rows_clauseContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Return_rows_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterReturn_rows_clause(this);
	}
};

Return_rows_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitReturn_rows_clause(this);
	}
};




PLSQLParser.Return_rows_clauseContext = Return_rows_clauseContext;

PLSQLParser.prototype.return_rows_clause = function() {

    var localctx = new Return_rows_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, PLSQLParser.RULE_return_rows_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3163;
        this.match(PLSQLParser.RETURN);
        this.state = 3164;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.ALL || _la===PLSQLParser.UPDATED)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 3165;
        this.match(PLSQLParser.ROWS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Reference_modelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_reference_model;
    return this;
}

Reference_modelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reference_modelContext.prototype.constructor = Reference_modelContext;

Reference_modelContext.prototype.REFERENCE = function() {
    return this.getToken(PLSQLParser.REFERENCE, 0);
};

Reference_modelContext.prototype.reference_model_name = function() {
    return this.getTypedRuleContext(Reference_model_nameContext,0);
};

Reference_modelContext.prototype.ON = function() {
    return this.getToken(PLSQLParser.ON, 0);
};

Reference_modelContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Reference_modelContext.prototype.model_column_clauses = function() {
    return this.getTypedRuleContext(Model_column_clausesContext,0);
};

Reference_modelContext.prototype.cell_reference_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_reference_optionsContext);
    } else {
        return this.getTypedRuleContext(Cell_reference_optionsContext,i);
    }
};

Reference_modelContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterReference_model(this);
	}
};

Reference_modelContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitReference_model(this);
	}
};




PLSQLParser.Reference_modelContext = Reference_modelContext;

PLSQLParser.prototype.reference_model = function() {

    var localctx = new Reference_modelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, PLSQLParser.RULE_reference_model);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3167;
        this.match(PLSQLParser.REFERENCE);
        this.state = 3168;
        this.reference_model_name();
        this.state = 3169;
        this.match(PLSQLParser.ON);
        this.state = 3170;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3171;
        this.subquery();
        this.state = 3172;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 3173;
        this.model_column_clauses();
        this.state = 3177;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.IGNORE || _la===PLSQLParser.KEEP || _la===PLSQLParser.UNIQUE) {
            this.state = 3174;
            this.cell_reference_options();
            this.state = 3179;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Main_modelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_main_model;
    return this;
}

Main_modelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Main_modelContext.prototype.constructor = Main_modelContext;

Main_modelContext.prototype.model_column_clauses = function() {
    return this.getTypedRuleContext(Model_column_clausesContext,0);
};

Main_modelContext.prototype.model_rules_clause = function() {
    return this.getTypedRuleContext(Model_rules_clauseContext,0);
};

Main_modelContext.prototype.MAIN = function() {
    return this.getToken(PLSQLParser.MAIN, 0);
};

Main_modelContext.prototype.main_model_name = function() {
    return this.getTypedRuleContext(Main_model_nameContext,0);
};

Main_modelContext.prototype.cell_reference_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_reference_optionsContext);
    } else {
        return this.getTypedRuleContext(Cell_reference_optionsContext,i);
    }
};

Main_modelContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMain_model(this);
	}
};

Main_modelContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMain_model(this);
	}
};




PLSQLParser.Main_modelContext = Main_modelContext;

PLSQLParser.prototype.main_model = function() {

    var localctx = new Main_modelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, PLSQLParser.RULE_main_model);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3182;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.MAIN) {
            this.state = 3180;
            this.match(PLSQLParser.MAIN);
            this.state = 3181;
            this.main_model_name();
        }

        this.state = 3184;
        this.model_column_clauses();
        this.state = 3188;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.IGNORE || _la===PLSQLParser.KEEP || _la===PLSQLParser.UNIQUE) {
            this.state = 3185;
            this.cell_reference_options();
            this.state = 3190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3191;
        this.model_rules_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_column_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_column_clauses;
    return this;
}

Model_column_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_column_clausesContext.prototype.constructor = Model_column_clausesContext;

Model_column_clausesContext.prototype.DIMENSION = function() {
    return this.getToken(PLSQLParser.DIMENSION, 0);
};

Model_column_clausesContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Model_column_clausesContext.prototype.model_column_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Model_column_listContext);
    } else {
        return this.getTypedRuleContext(Model_column_listContext,i);
    }
};

Model_column_clausesContext.prototype.MEASURES = function() {
    return this.getToken(PLSQLParser.MEASURES, 0);
};

Model_column_clausesContext.prototype.model_column_partition_part = function() {
    return this.getTypedRuleContext(Model_column_partition_partContext,0);
};

Model_column_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_column_clauses(this);
	}
};

Model_column_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_column_clauses(this);
	}
};




PLSQLParser.Model_column_clausesContext = Model_column_clausesContext;

PLSQLParser.prototype.model_column_clauses = function() {

    var localctx = new Model_column_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, PLSQLParser.RULE_model_column_clauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3194;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PARTITION) {
            this.state = 3193;
            this.model_column_partition_part();
        }

        this.state = 3196;
        this.match(PLSQLParser.DIMENSION);
        this.state = 3197;
        this.match(PLSQLParser.BY);
        this.state = 3198;
        this.model_column_list();
        this.state = 3199;
        this.match(PLSQLParser.MEASURES);
        this.state = 3200;
        this.model_column_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_column_partition_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_column_partition_part;
    return this;
}

Model_column_partition_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_column_partition_partContext.prototype.constructor = Model_column_partition_partContext;

Model_column_partition_partContext.prototype.PARTITION = function() {
    return this.getToken(PLSQLParser.PARTITION, 0);
};

Model_column_partition_partContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Model_column_partition_partContext.prototype.model_column_list = function() {
    return this.getTypedRuleContext(Model_column_listContext,0);
};

Model_column_partition_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_column_partition_part(this);
	}
};

Model_column_partition_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_column_partition_part(this);
	}
};




PLSQLParser.Model_column_partition_partContext = Model_column_partition_partContext;

PLSQLParser.prototype.model_column_partition_part = function() {

    var localctx = new Model_column_partition_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, PLSQLParser.RULE_model_column_partition_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3202;
        this.match(PLSQLParser.PARTITION);
        this.state = 3203;
        this.match(PLSQLParser.BY);
        this.state = 3204;
        this.model_column_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_column_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_column_list;
    return this;
}

Model_column_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_column_listContext.prototype.constructor = Model_column_listContext;

Model_column_listContext.prototype.model_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Model_columnContext);
    } else {
        return this.getTypedRuleContext(Model_columnContext,i);
    }
};

Model_column_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_column_list(this);
	}
};

Model_column_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_column_list(this);
	}
};




PLSQLParser.Model_column_listContext = Model_column_listContext;

PLSQLParser.prototype.model_column_list = function() {

    var localctx = new Model_column_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, PLSQLParser.RULE_model_column_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3206;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3207;
        this.model_column();
        this.state = 3212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3208;
            this.match(PLSQLParser.COMMA);
            this.state = 3209;
            this.model_column();
            this.state = 3214;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3215;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_column;
    return this;
}

Model_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_columnContext.prototype.constructor = Model_columnContext;

Model_columnContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Model_columnContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Model_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_column(this);
	}
};

Model_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_column(this);
	}
};




PLSQLParser.Model_columnContext = Model_columnContext;

PLSQLParser.prototype.model_column = function() {

    var localctx = new Model_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, PLSQLParser.RULE_model_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3217;
        this.expression();
        this.state = 3219;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 450)))) !== 0) || ((((_la - 484)) & ~0x1f) == 0 && ((1 << (_la - 484)) & ((1 << (PLSQLParser.CHAR_STRING - 484)) | (1 << (PLSQLParser.DELIMITED_ID - 484)) | (1 << (PLSQLParser.INTRODUCER - 484)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 3218;
            this.table_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_rules_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_rules_clause;
    return this;
}

Model_rules_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_rules_clauseContext.prototype.constructor = Model_rules_clauseContext;

Model_rules_clauseContext.prototype.model_rules_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Model_rules_elementContext);
    } else {
        return this.getTypedRuleContext(Model_rules_elementContext,i);
    }
};

Model_rules_clauseContext.prototype.model_rules_part = function() {
    return this.getTypedRuleContext(Model_rules_partContext,0);
};

Model_rules_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_rules_clause(this);
	}
};

Model_rules_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_rules_clause(this);
	}
};




PLSQLParser.Model_rules_clauseContext = Model_rules_clauseContext;

PLSQLParser.prototype.model_rules_clause = function() {

    var localctx = new Model_rules_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, PLSQLParser.RULE_model_rules_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3222;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.RULES) {
            this.state = 3221;
            this.model_rules_part();
        }

        this.state = 3224;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3225;
        this.model_rules_element();
        this.state = 3230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3226;
            this.match(PLSQLParser.COMMA);
            this.state = 3227;
            this.model_rules_element();
            this.state = 3232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3233;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_rules_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_rules_part;
    return this;
}

Model_rules_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_rules_partContext.prototype.constructor = Model_rules_partContext;

Model_rules_partContext.prototype.RULES = function() {
    return this.getToken(PLSQLParser.RULES, 0);
};

Model_rules_partContext.prototype.UPDATE = function() {
    return this.getToken(PLSQLParser.UPDATE, 0);
};

Model_rules_partContext.prototype.UPSERT = function() {
    return this.getToken(PLSQLParser.UPSERT, 0);
};

Model_rules_partContext.prototype.ORDER = function() {
    return this.getToken(PLSQLParser.ORDER, 0);
};

Model_rules_partContext.prototype.model_iterate_clause = function() {
    return this.getTypedRuleContext(Model_iterate_clauseContext,0);
};

Model_rules_partContext.prototype.AUTOMATIC = function() {
    return this.getToken(PLSQLParser.AUTOMATIC, 0);
};

Model_rules_partContext.prototype.SEQUENTIAL = function() {
    return this.getToken(PLSQLParser.SEQUENTIAL, 0);
};

Model_rules_partContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Model_rules_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_rules_part(this);
	}
};

Model_rules_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_rules_part(this);
	}
};




PLSQLParser.Model_rules_partContext = Model_rules_partContext;

PLSQLParser.prototype.model_rules_part = function() {

    var localctx = new Model_rules_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, PLSQLParser.RULE_model_rules_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3235;
        this.match(PLSQLParser.RULES);
        this.state = 3241;
        switch (this._input.LA(1)) {
        case PLSQLParser.UPDATE:
        	this.state = 3236;
        	this.match(PLSQLParser.UPDATE);
        	break;
        case PLSQLParser.UPSERT:
        	this.state = 3237;
        	this.match(PLSQLParser.UPSERT);
        	this.state = 3239;
        	_la = this._input.LA(1);
        	if(_la===PLSQLParser.ALL) {
        	    this.state = 3238;
        	    this.match(PLSQLParser.ALL);
        	}

        	break;
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.ITERATE:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.LEFT_PAREN:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3245;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AUTOMATIC || _la===PLSQLParser.SEQUENTIAL) {
            this.state = 3243;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.AUTOMATIC || _la===PLSQLParser.SEQUENTIAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 3244;
            this.match(PLSQLParser.ORDER);
        }

        this.state = 3248;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ITERATE) {
            this.state = 3247;
            this.model_iterate_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_rules_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_rules_element;
    return this;
}

Model_rules_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_rules_elementContext.prototype.constructor = Model_rules_elementContext;

Model_rules_elementContext.prototype.cell_assignment = function() {
    return this.getTypedRuleContext(Cell_assignmentContext,0);
};

Model_rules_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Model_rules_elementContext.prototype.UPDATE = function() {
    return this.getToken(PLSQLParser.UPDATE, 0);
};

Model_rules_elementContext.prototype.UPSERT = function() {
    return this.getToken(PLSQLParser.UPSERT, 0);
};

Model_rules_elementContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Model_rules_elementContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Model_rules_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_rules_element(this);
	}
};

Model_rules_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_rules_element(this);
	}
};




PLSQLParser.Model_rules_elementContext = Model_rules_elementContext;

PLSQLParser.prototype.model_rules_element = function() {

    var localctx = new Model_rules_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, PLSQLParser.RULE_model_rules_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3255;
        var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
        if(la_===1) {
            this.state = 3250;
            this.match(PLSQLParser.UPDATE);

        } else if(la_===2) {
            this.state = 3251;
            this.match(PLSQLParser.UPSERT);
            this.state = 3253;
            var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
            if(la_===1) {
                this.state = 3252;
                this.match(PLSQLParser.ALL);

            }

        }
        this.state = 3257;
        this.cell_assignment();
        this.state = 3259;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ORDER) {
            this.state = 3258;
            this.order_by_clause();
        }

        this.state = 3261;
        this.match(PLSQLParser.EQUALS_OP);
        this.state = 3262;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cell_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cell_assignment;
    return this;
}

Cell_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cell_assignmentContext.prototype.constructor = Cell_assignmentContext;

Cell_assignmentContext.prototype.model_expression = function() {
    return this.getTypedRuleContext(Model_expressionContext,0);
};

Cell_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCell_assignment(this);
	}
};

Cell_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCell_assignment(this);
	}
};




PLSQLParser.Cell_assignmentContext = Cell_assignmentContext;

PLSQLParser.prototype.cell_assignment = function() {

    var localctx = new Cell_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, PLSQLParser.RULE_cell_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3264;
        this.model_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_iterate_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_iterate_clause;
    return this;
}

Model_iterate_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_iterate_clauseContext.prototype.constructor = Model_iterate_clauseContext;

Model_iterate_clauseContext.prototype.ITERATE = function() {
    return this.getToken(PLSQLParser.ITERATE, 0);
};

Model_iterate_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Model_iterate_clauseContext.prototype.until_part = function() {
    return this.getTypedRuleContext(Until_partContext,0);
};

Model_iterate_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_iterate_clause(this);
	}
};

Model_iterate_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_iterate_clause(this);
	}
};




PLSQLParser.Model_iterate_clauseContext = Model_iterate_clauseContext;

PLSQLParser.prototype.model_iterate_clause = function() {

    var localctx = new Model_iterate_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, PLSQLParser.RULE_model_iterate_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3266;
        this.match(PLSQLParser.ITERATE);
        this.state = 3267;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3268;
        this.expression();
        this.state = 3269;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 3271;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.UNTIL) {
            this.state = 3270;
            this.until_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Until_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_until_part;
    return this;
}

Until_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Until_partContext.prototype.constructor = Until_partContext;

Until_partContext.prototype.UNTIL = function() {
    return this.getToken(PLSQLParser.UNTIL, 0);
};

Until_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Until_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUntil_part(this);
	}
};

Until_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUntil_part(this);
	}
};




PLSQLParser.Until_partContext = Until_partContext;

PLSQLParser.prototype.until_part = function() {

    var localctx = new Until_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, PLSQLParser.RULE_until_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3273;
        this.match(PLSQLParser.UNTIL);
        this.state = 3274;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3275;
        this.condition();
        this.state = 3276;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_order_by_clause;
    return this;
}

Order_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_clauseContext.prototype.constructor = Order_by_clauseContext;

Order_by_clauseContext.prototype.ORDER = function() {
    return this.getToken(PLSQLParser.ORDER, 0);
};

Order_by_clauseContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Order_by_clauseContext.prototype.order_by_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_by_elementsContext);
    } else {
        return this.getTypedRuleContext(Order_by_elementsContext,i);
    }
};

Order_by_clauseContext.prototype.SIBLINGS = function() {
    return this.getToken(PLSQLParser.SIBLINGS, 0);
};

Order_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterOrder_by_clause(this);
	}
};

Order_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitOrder_by_clause(this);
	}
};




PLSQLParser.Order_by_clauseContext = Order_by_clauseContext;

PLSQLParser.prototype.order_by_clause = function() {

    var localctx = new Order_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, PLSQLParser.RULE_order_by_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3278;
        this.match(PLSQLParser.ORDER);
        this.state = 3280;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.SIBLINGS) {
            this.state = 3279;
            this.match(PLSQLParser.SIBLINGS);
        }

        this.state = 3282;
        this.match(PLSQLParser.BY);
        this.state = 3283;
        this.order_by_elements();
        this.state = 3288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3284;
            this.match(PLSQLParser.COMMA);
            this.state = 3285;
            this.order_by_elements();
            this.state = 3290;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_order_by_elements;
    return this;
}

Order_by_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_elementsContext.prototype.constructor = Order_by_elementsContext;

Order_by_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Order_by_elementsContext.prototype.NULLS = function() {
    return this.getToken(PLSQLParser.NULLS, 0);
};

Order_by_elementsContext.prototype.ASC = function() {
    return this.getToken(PLSQLParser.ASC, 0);
};

Order_by_elementsContext.prototype.DESC = function() {
    return this.getToken(PLSQLParser.DESC, 0);
};

Order_by_elementsContext.prototype.FIRST = function() {
    return this.getToken(PLSQLParser.FIRST, 0);
};

Order_by_elementsContext.prototype.LAST = function() {
    return this.getToken(PLSQLParser.LAST, 0);
};

Order_by_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterOrder_by_elements(this);
	}
};

Order_by_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitOrder_by_elements(this);
	}
};




PLSQLParser.Order_by_elementsContext = Order_by_elementsContext;

PLSQLParser.prototype.order_by_elements = function() {

    var localctx = new Order_by_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, PLSQLParser.RULE_order_by_elements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3291;
        this.expression();
        this.state = 3293;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ASC || _la===PLSQLParser.DESC) {
            this.state = 3292;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.ASC || _la===PLSQLParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 3297;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NULLS) {
            this.state = 3295;
            this.match(PLSQLParser.NULLS);
            this.state = 3296;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.FIRST || _la===PLSQLParser.LAST)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_update_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_for_update_clause;
    return this;
}

For_update_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_update_clauseContext.prototype.constructor = For_update_clauseContext;

For_update_clauseContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

For_update_clauseContext.prototype.UPDATE = function() {
    return this.getToken(PLSQLParser.UPDATE, 0);
};

For_update_clauseContext.prototype.for_update_of_part = function() {
    return this.getTypedRuleContext(For_update_of_partContext,0);
};

For_update_clauseContext.prototype.for_update_options = function() {
    return this.getTypedRuleContext(For_update_optionsContext,0);
};

For_update_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFor_update_clause(this);
	}
};

For_update_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFor_update_clause(this);
	}
};




PLSQLParser.For_update_clauseContext = For_update_clauseContext;

PLSQLParser.prototype.for_update_clause = function() {

    var localctx = new For_update_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, PLSQLParser.RULE_for_update_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3299;
        this.match(PLSQLParser.FOR);
        this.state = 3300;
        this.match(PLSQLParser.UPDATE);
        this.state = 3302;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.OF) {
            this.state = 3301;
            this.for_update_of_part();
        }

        this.state = 3305;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NOWAIT || _la===PLSQLParser.SKIP || _la===PLSQLParser.WAIT) {
            this.state = 3304;
            this.for_update_options();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_update_of_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_for_update_of_part;
    return this;
}

For_update_of_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_update_of_partContext.prototype.constructor = For_update_of_partContext;

For_update_of_partContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

For_update_of_partContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

For_update_of_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFor_update_of_part(this);
	}
};

For_update_of_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFor_update_of_part(this);
	}
};




PLSQLParser.For_update_of_partContext = For_update_of_partContext;

PLSQLParser.prototype.for_update_of_part = function() {

    var localctx = new For_update_of_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, PLSQLParser.RULE_for_update_of_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3307;
        this.match(PLSQLParser.OF);
        this.state = 3308;
        this.column_name();
        this.state = 3313;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3309;
            this.match(PLSQLParser.COMMA);
            this.state = 3310;
            this.column_name();
            this.state = 3315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_update_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_for_update_options;
    return this;
}

For_update_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_update_optionsContext.prototype.constructor = For_update_optionsContext;

For_update_optionsContext.prototype.SKIP = function() {
    return this.getToken(PLSQLParser.SKIP, 0);
};

For_update_optionsContext.prototype.LOCKED = function() {
    return this.getToken(PLSQLParser.LOCKED, 0);
};

For_update_optionsContext.prototype.NOWAIT = function() {
    return this.getToken(PLSQLParser.NOWAIT, 0);
};

For_update_optionsContext.prototype.WAIT = function() {
    return this.getToken(PLSQLParser.WAIT, 0);
};

For_update_optionsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_update_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFor_update_options(this);
	}
};

For_update_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFor_update_options(this);
	}
};




PLSQLParser.For_update_optionsContext = For_update_optionsContext;

PLSQLParser.prototype.for_update_options = function() {

    var localctx = new For_update_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, PLSQLParser.RULE_for_update_options);
    try {
        this.state = 3321;
        switch(this._input.LA(1)) {
        case PLSQLParser.SKIP:
            this.enterOuterAlt(localctx, 1);
            this.state = 3316;
            this.match(PLSQLParser.SKIP);
            this.state = 3317;
            this.match(PLSQLParser.LOCKED);
            break;
        case PLSQLParser.NOWAIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3318;
            this.match(PLSQLParser.NOWAIT);
            break;
        case PLSQLParser.WAIT:
            this.enterOuterAlt(localctx, 3);
            this.state = 3319;
            this.match(PLSQLParser.WAIT);
            this.state = 3320;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_update_statement;
    return this;
}

Update_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_statementContext.prototype.constructor = Update_statementContext;

Update_statementContext.prototype.UPDATE = function() {
    return this.getToken(PLSQLParser.UPDATE, 0);
};

Update_statementContext.prototype.general_table_ref = function() {
    return this.getTypedRuleContext(General_table_refContext,0);
};

Update_statementContext.prototype.update_set_clause = function() {
    return this.getTypedRuleContext(Update_set_clauseContext,0);
};

Update_statementContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Update_statementContext.prototype.static_returning_clause = function() {
    return this.getTypedRuleContext(Static_returning_clauseContext,0);
};

Update_statementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Update_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUpdate_statement(this);
	}
};

Update_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUpdate_statement(this);
	}
};




PLSQLParser.Update_statementContext = Update_statementContext;

PLSQLParser.prototype.update_statement = function() {

    var localctx = new Update_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, PLSQLParser.RULE_update_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3323;
        this.match(PLSQLParser.UPDATE);
        this.state = 3324;
        this.general_table_ref();
        this.state = 3325;
        this.update_set_clause();
        this.state = 3327;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WHERE) {
            this.state = 3326;
            this.where_clause();
        }

        this.state = 3330;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.RETURN || _la===PLSQLParser.RETURNING) {
            this.state = 3329;
            this.static_returning_clause();
        }

        this.state = 3333;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LOG) {
            this.state = 3332;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_set_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_update_set_clause;
    return this;
}

Update_set_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_set_clauseContext.prototype.constructor = Update_set_clauseContext;

Update_set_clauseContext.prototype.SET = function() {
    return this.getToken(PLSQLParser.SET, 0);
};

Update_set_clauseContext.prototype.column_based_update_set_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_based_update_set_clauseContext);
    } else {
        return this.getTypedRuleContext(Column_based_update_set_clauseContext,i);
    }
};

Update_set_clauseContext.prototype.VALUE = function() {
    return this.getToken(PLSQLParser.VALUE, 0);
};

Update_set_clauseContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Update_set_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Update_set_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUpdate_set_clause(this);
	}
};

Update_set_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUpdate_set_clause(this);
	}
};




PLSQLParser.Update_set_clauseContext = Update_set_clauseContext;

PLSQLParser.prototype.update_set_clause = function() {

    var localctx = new Update_set_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, PLSQLParser.RULE_update_set_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3335;
        this.match(PLSQLParser.SET);
        this.state = 3351;
        var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3336;
            this.column_based_update_set_clause();
            this.state = 3341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 3337;
                this.match(PLSQLParser.COMMA);
                this.state = 3338;
                this.column_based_update_set_clause();
                this.state = 3343;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.state = 3344;
            this.match(PLSQLParser.VALUE);
            this.state = 3345;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3346;
            this.id();
            this.state = 3347;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 3348;
            this.match(PLSQLParser.EQUALS_OP);
            this.state = 3349;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_based_update_set_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_column_based_update_set_clause;
    return this;
}

Column_based_update_set_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_based_update_set_clauseContext.prototype.constructor = Column_based_update_set_clauseContext;

Column_based_update_set_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Column_based_update_set_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Column_based_update_set_clauseContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Column_based_update_set_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterColumn_based_update_set_clause(this);
	}
};

Column_based_update_set_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitColumn_based_update_set_clause(this);
	}
};




PLSQLParser.Column_based_update_set_clauseContext = Column_based_update_set_clauseContext;

PLSQLParser.prototype.column_based_update_set_clause = function() {

    var localctx = new Column_based_update_set_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, PLSQLParser.RULE_column_based_update_set_clause);
    var _la = 0; // Token type
    try {
        this.state = 3370;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 3353;
            this.column_name();
            this.state = 3354;
            this.match(PLSQLParser.EQUALS_OP);
            this.state = 3355;
            this.expression();
            break;
        case PLSQLParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 3357;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3358;
            this.column_name();
            this.state = 3363;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 3359;
                this.match(PLSQLParser.COMMA);
                this.state = 3360;
                this.column_name();
                this.state = 3365;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3366;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 3367;
            this.match(PLSQLParser.EQUALS_OP);
            this.state = 3368;
            this.subquery();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delete_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_delete_statement;
    return this;
}

Delete_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delete_statementContext.prototype.constructor = Delete_statementContext;

Delete_statementContext.prototype.DELETE = function() {
    return this.getToken(PLSQLParser.DELETE, 0);
};

Delete_statementContext.prototype.general_table_ref = function() {
    return this.getTypedRuleContext(General_table_refContext,0);
};

Delete_statementContext.prototype.FROM = function() {
    return this.getToken(PLSQLParser.FROM, 0);
};

Delete_statementContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Delete_statementContext.prototype.static_returning_clause = function() {
    return this.getTypedRuleContext(Static_returning_clauseContext,0);
};

Delete_statementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Delete_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDelete_statement(this);
	}
};

Delete_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDelete_statement(this);
	}
};




PLSQLParser.Delete_statementContext = Delete_statementContext;

PLSQLParser.prototype.delete_statement = function() {

    var localctx = new Delete_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, PLSQLParser.RULE_delete_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3372;
        this.match(PLSQLParser.DELETE);
        this.state = 3374;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.FROM) {
            this.state = 3373;
            this.match(PLSQLParser.FROM);
        }

        this.state = 3376;
        this.general_table_ref();
        this.state = 3378;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WHERE) {
            this.state = 3377;
            this.where_clause();
        }

        this.state = 3381;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.RETURN || _la===PLSQLParser.RETURNING) {
            this.state = 3380;
            this.static_returning_clause();
        }

        this.state = 3384;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LOG) {
            this.state = 3383;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_insert_statement;
    return this;
}

Insert_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_statementContext.prototype.constructor = Insert_statementContext;

Insert_statementContext.prototype.INSERT = function() {
    return this.getToken(PLSQLParser.INSERT, 0);
};

Insert_statementContext.prototype.single_table_insert = function() {
    return this.getTypedRuleContext(Single_table_insertContext,0);
};

Insert_statementContext.prototype.multi_table_insert = function() {
    return this.getTypedRuleContext(Multi_table_insertContext,0);
};

Insert_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterInsert_statement(this);
	}
};

Insert_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitInsert_statement(this);
	}
};




PLSQLParser.Insert_statementContext = Insert_statementContext;

PLSQLParser.prototype.insert_statement = function() {

    var localctx = new Insert_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, PLSQLParser.RULE_insert_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3386;
        this.match(PLSQLParser.INSERT);
        this.state = 3389;
        switch(this._input.LA(1)) {
        case PLSQLParser.INTO:
            this.state = 3387;
            this.single_table_insert();
            break;
        case PLSQLParser.ALL:
        case PLSQLParser.FIRST:
        case PLSQLParser.WHEN:
            this.state = 3388;
            this.multi_table_insert();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Single_table_insertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_single_table_insert;
    return this;
}

Single_table_insertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_table_insertContext.prototype.constructor = Single_table_insertContext;

Single_table_insertContext.prototype.insert_into_clause = function() {
    return this.getTypedRuleContext(Insert_into_clauseContext,0);
};

Single_table_insertContext.prototype.values_clause = function() {
    return this.getTypedRuleContext(Values_clauseContext,0);
};

Single_table_insertContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Single_table_insertContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Single_table_insertContext.prototype.static_returning_clause = function() {
    return this.getTypedRuleContext(Static_returning_clauseContext,0);
};

Single_table_insertContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSingle_table_insert(this);
	}
};

Single_table_insertContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSingle_table_insert(this);
	}
};




PLSQLParser.Single_table_insertContext = Single_table_insertContext;

PLSQLParser.prototype.single_table_insert = function() {

    var localctx = new Single_table_insertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, PLSQLParser.RULE_single_table_insert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3391;
        this.insert_into_clause();
        this.state = 3397;
        switch(this._input.LA(1)) {
        case PLSQLParser.VALUES:
            this.state = 3392;
            this.values_clause();
            this.state = 3394;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.RETURN || _la===PLSQLParser.RETURNING) {
                this.state = 3393;
                this.static_returning_clause();
            }

            break;
        case PLSQLParser.SELECT:
        case PLSQLParser.WITH:
        case PLSQLParser.LEFT_PAREN:
            this.state = 3396;
            this.select_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3400;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LOG) {
            this.state = 3399;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_table_insertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_multi_table_insert;
    return this;
}

Multi_table_insertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_table_insertContext.prototype.constructor = Multi_table_insertContext;

Multi_table_insertContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Multi_table_insertContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Multi_table_insertContext.prototype.conditional_insert_clause = function() {
    return this.getTypedRuleContext(Conditional_insert_clauseContext,0);
};

Multi_table_insertContext.prototype.multi_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multi_table_elementContext);
    } else {
        return this.getTypedRuleContext(Multi_table_elementContext,i);
    }
};

Multi_table_insertContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMulti_table_insert(this);
	}
};

Multi_table_insertContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMulti_table_insert(this);
	}
};




PLSQLParser.Multi_table_insertContext = Multi_table_insertContext;

PLSQLParser.prototype.multi_table_insert = function() {

    var localctx = new Multi_table_insertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, PLSQLParser.RULE_multi_table_insert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3409;
        var la_ = this._interp.adaptivePredict(this._input,398,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3402;
            this.match(PLSQLParser.ALL);
            this.state = 3404; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 3403;
                this.multi_table_element();
                this.state = 3406; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PLSQLParser.INTO);
            break;

        case 2:
            this.state = 3408;
            this.conditional_insert_clause();
            break;

        }
        this.state = 3411;
        this.select_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_table_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_multi_table_element;
    return this;
}

Multi_table_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_table_elementContext.prototype.constructor = Multi_table_elementContext;

Multi_table_elementContext.prototype.insert_into_clause = function() {
    return this.getTypedRuleContext(Insert_into_clauseContext,0);
};

Multi_table_elementContext.prototype.values_clause = function() {
    return this.getTypedRuleContext(Values_clauseContext,0);
};

Multi_table_elementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Multi_table_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMulti_table_element(this);
	}
};

Multi_table_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMulti_table_element(this);
	}
};




PLSQLParser.Multi_table_elementContext = Multi_table_elementContext;

PLSQLParser.prototype.multi_table_element = function() {

    var localctx = new Multi_table_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, PLSQLParser.RULE_multi_table_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3413;
        this.insert_into_clause();
        this.state = 3415;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.VALUES) {
            this.state = 3414;
            this.values_clause();
        }

        this.state = 3418;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LOG) {
            this.state = 3417;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_insert_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_conditional_insert_clause;
    return this;
}

Conditional_insert_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_insert_clauseContext.prototype.constructor = Conditional_insert_clauseContext;

Conditional_insert_clauseContext.prototype.conditional_insert_when_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Conditional_insert_when_partContext);
    } else {
        return this.getTypedRuleContext(Conditional_insert_when_partContext,i);
    }
};

Conditional_insert_clauseContext.prototype.conditional_insert_else_part = function() {
    return this.getTypedRuleContext(Conditional_insert_else_partContext,0);
};

Conditional_insert_clauseContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Conditional_insert_clauseContext.prototype.FIRST = function() {
    return this.getToken(PLSQLParser.FIRST, 0);
};

Conditional_insert_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConditional_insert_clause(this);
	}
};

Conditional_insert_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConditional_insert_clause(this);
	}
};




PLSQLParser.Conditional_insert_clauseContext = Conditional_insert_clauseContext;

PLSQLParser.prototype.conditional_insert_clause = function() {

    var localctx = new Conditional_insert_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, PLSQLParser.RULE_conditional_insert_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3421;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ALL || _la===PLSQLParser.FIRST) {
            this.state = 3420;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.ALL || _la===PLSQLParser.FIRST)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 3424; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3423;
            this.conditional_insert_when_part();
            this.state = 3426; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLSQLParser.WHEN);
        this.state = 3429;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ELSE) {
            this.state = 3428;
            this.conditional_insert_else_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_insert_when_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_conditional_insert_when_part;
    return this;
}

Conditional_insert_when_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_insert_when_partContext.prototype.constructor = Conditional_insert_when_partContext;

Conditional_insert_when_partContext.prototype.WHEN = function() {
    return this.getToken(PLSQLParser.WHEN, 0);
};

Conditional_insert_when_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Conditional_insert_when_partContext.prototype.THEN = function() {
    return this.getToken(PLSQLParser.THEN, 0);
};

Conditional_insert_when_partContext.prototype.multi_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multi_table_elementContext);
    } else {
        return this.getTypedRuleContext(Multi_table_elementContext,i);
    }
};

Conditional_insert_when_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConditional_insert_when_part(this);
	}
};

Conditional_insert_when_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConditional_insert_when_part(this);
	}
};




PLSQLParser.Conditional_insert_when_partContext = Conditional_insert_when_partContext;

PLSQLParser.prototype.conditional_insert_when_part = function() {

    var localctx = new Conditional_insert_when_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, PLSQLParser.RULE_conditional_insert_when_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3431;
        this.match(PLSQLParser.WHEN);
        this.state = 3432;
        this.condition();
        this.state = 3433;
        this.match(PLSQLParser.THEN);
        this.state = 3435; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3434;
            this.multi_table_element();
            this.state = 3437; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLSQLParser.INTO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_insert_else_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_conditional_insert_else_part;
    return this;
}

Conditional_insert_else_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_insert_else_partContext.prototype.constructor = Conditional_insert_else_partContext;

Conditional_insert_else_partContext.prototype.ELSE = function() {
    return this.getToken(PLSQLParser.ELSE, 0);
};

Conditional_insert_else_partContext.prototype.multi_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multi_table_elementContext);
    } else {
        return this.getTypedRuleContext(Multi_table_elementContext,i);
    }
};

Conditional_insert_else_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConditional_insert_else_part(this);
	}
};

Conditional_insert_else_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConditional_insert_else_part(this);
	}
};




PLSQLParser.Conditional_insert_else_partContext = Conditional_insert_else_partContext;

PLSQLParser.prototype.conditional_insert_else_part = function() {

    var localctx = new Conditional_insert_else_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, PLSQLParser.RULE_conditional_insert_else_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3439;
        this.match(PLSQLParser.ELSE);
        this.state = 3441; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3440;
            this.multi_table_element();
            this.state = 3443; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLSQLParser.INTO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_into_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_insert_into_clause;
    return this;
}

Insert_into_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_into_clauseContext.prototype.constructor = Insert_into_clauseContext;

Insert_into_clauseContext.prototype.INTO = function() {
    return this.getToken(PLSQLParser.INTO, 0);
};

Insert_into_clauseContext.prototype.general_table_ref = function() {
    return this.getTypedRuleContext(General_table_refContext,0);
};

Insert_into_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Insert_into_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterInsert_into_clause(this);
	}
};

Insert_into_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitInsert_into_clause(this);
	}
};




PLSQLParser.Insert_into_clauseContext = Insert_into_clauseContext;

PLSQLParser.prototype.insert_into_clause = function() {

    var localctx = new Insert_into_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, PLSQLParser.RULE_insert_into_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3445;
        this.match(PLSQLParser.INTO);
        this.state = 3446;
        this.general_table_ref();
        this.state = 3458;
        var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
        if(la_===1) {
            this.state = 3447;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3448;
            this.column_name();
            this.state = 3453;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 3449;
                this.match(PLSQLParser.COMMA);
                this.state = 3450;
                this.column_name();
                this.state = 3455;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3456;
            this.match(PLSQLParser.RIGHT_PAREN);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Values_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_values_clause;
    return this;
}

Values_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Values_clauseContext.prototype.constructor = Values_clauseContext;

Values_clauseContext.prototype.VALUES = function() {
    return this.getToken(PLSQLParser.VALUES, 0);
};

Values_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Values_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterValues_clause(this);
	}
};

Values_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitValues_clause(this);
	}
};




PLSQLParser.Values_clauseContext = Values_clauseContext;

PLSQLParser.prototype.values_clause = function() {

    var localctx = new Values_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, PLSQLParser.RULE_values_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3460;
        this.match(PLSQLParser.VALUES);
        this.state = 3461;
        this.expression_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_merge_statement;
    return this;
}

Merge_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_statementContext.prototype.constructor = Merge_statementContext;

Merge_statementContext.prototype.MERGE = function() {
    return this.getToken(PLSQLParser.MERGE, 0);
};

Merge_statementContext.prototype.INTO = function() {
    return this.getToken(PLSQLParser.INTO, 0);
};

Merge_statementContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Merge_statementContext.prototype.USING = function() {
    return this.getToken(PLSQLParser.USING, 0);
};

Merge_statementContext.prototype.selected_tableview = function() {
    return this.getTypedRuleContext(Selected_tableviewContext,0);
};

Merge_statementContext.prototype.ON = function() {
    return this.getToken(PLSQLParser.ON, 0);
};

Merge_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Merge_statementContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Merge_statementContext.prototype.merge_update_clause = function() {
    return this.getTypedRuleContext(Merge_update_clauseContext,0);
};

Merge_statementContext.prototype.merge_insert_clause = function() {
    return this.getTypedRuleContext(Merge_insert_clauseContext,0);
};

Merge_statementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Merge_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMerge_statement(this);
	}
};

Merge_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMerge_statement(this);
	}
};




PLSQLParser.Merge_statementContext = Merge_statementContext;

PLSQLParser.prototype.merge_statement = function() {

    var localctx = new Merge_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, PLSQLParser.RULE_merge_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3463;
        this.match(PLSQLParser.MERGE);
        this.state = 3464;
        this.match(PLSQLParser.INTO);
        this.state = 3465;
        this.tableview_name();
        this.state = 3467;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 450)))) !== 0) || ((((_la - 484)) & ~0x1f) == 0 && ((1 << (_la - 484)) & ((1 << (PLSQLParser.CHAR_STRING - 484)) | (1 << (PLSQLParser.DELIMITED_ID - 484)) | (1 << (PLSQLParser.INTRODUCER - 484)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 3466;
            this.table_alias();
        }

        this.state = 3469;
        this.match(PLSQLParser.USING);
        this.state = 3470;
        this.selected_tableview();
        this.state = 3471;
        this.match(PLSQLParser.ON);
        this.state = 3472;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3473;
        this.condition();
        this.state = 3474;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 3483;
        var la_ = this._interp.adaptivePredict(this._input,411,this._ctx);
        if(la_===1) {
            this.state = 3475;
            this.merge_update_clause();
            this.state = 3477;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.WHEN) {
                this.state = 3476;
                this.merge_insert_clause();
            }


        } else if(la_===2) {
            this.state = 3479;
            this.merge_insert_clause();
            this.state = 3481;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.WHEN) {
                this.state = 3480;
                this.merge_update_clause();
            }


        }
        this.state = 3486;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LOG) {
            this.state = 3485;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_update_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_merge_update_clause;
    return this;
}

Merge_update_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_update_clauseContext.prototype.constructor = Merge_update_clauseContext;

Merge_update_clauseContext.prototype.WHEN = function() {
    return this.getToken(PLSQLParser.WHEN, 0);
};

Merge_update_clauseContext.prototype.MATCHED = function() {
    return this.getToken(PLSQLParser.MATCHED, 0);
};

Merge_update_clauseContext.prototype.THEN = function() {
    return this.getToken(PLSQLParser.THEN, 0);
};

Merge_update_clauseContext.prototype.UPDATE = function() {
    return this.getToken(PLSQLParser.UPDATE, 0);
};

Merge_update_clauseContext.prototype.SET = function() {
    return this.getToken(PLSQLParser.SET, 0);
};

Merge_update_clauseContext.prototype.merge_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Merge_elementContext);
    } else {
        return this.getTypedRuleContext(Merge_elementContext,i);
    }
};

Merge_update_clauseContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Merge_update_clauseContext.prototype.merge_update_delete_part = function() {
    return this.getTypedRuleContext(Merge_update_delete_partContext,0);
};

Merge_update_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMerge_update_clause(this);
	}
};

Merge_update_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMerge_update_clause(this);
	}
};




PLSQLParser.Merge_update_clauseContext = Merge_update_clauseContext;

PLSQLParser.prototype.merge_update_clause = function() {

    var localctx = new Merge_update_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, PLSQLParser.RULE_merge_update_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3488;
        this.match(PLSQLParser.WHEN);
        this.state = 3489;
        this.match(PLSQLParser.MATCHED);
        this.state = 3490;
        this.match(PLSQLParser.THEN);
        this.state = 3491;
        this.match(PLSQLParser.UPDATE);
        this.state = 3492;
        this.match(PLSQLParser.SET);
        this.state = 3493;
        this.merge_element();
        this.state = 3498;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3494;
            this.match(PLSQLParser.COMMA);
            this.state = 3495;
            this.merge_element();
            this.state = 3500;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3502;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WHERE) {
            this.state = 3501;
            this.where_clause();
        }

        this.state = 3505;
        var la_ = this._interp.adaptivePredict(this._input,415,this._ctx);
        if(la_===1) {
            this.state = 3504;
            this.merge_update_delete_part();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_merge_element;
    return this;
}

Merge_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_elementContext.prototype.constructor = Merge_elementContext;

Merge_elementContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Merge_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Merge_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMerge_element(this);
	}
};

Merge_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMerge_element(this);
	}
};




PLSQLParser.Merge_elementContext = Merge_elementContext;

PLSQLParser.prototype.merge_element = function() {

    var localctx = new Merge_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, PLSQLParser.RULE_merge_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3507;
        this.column_name();
        this.state = 3508;
        this.match(PLSQLParser.EQUALS_OP);
        this.state = 3509;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_update_delete_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_merge_update_delete_part;
    return this;
}

Merge_update_delete_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_update_delete_partContext.prototype.constructor = Merge_update_delete_partContext;

Merge_update_delete_partContext.prototype.DELETE = function() {
    return this.getToken(PLSQLParser.DELETE, 0);
};

Merge_update_delete_partContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Merge_update_delete_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMerge_update_delete_part(this);
	}
};

Merge_update_delete_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMerge_update_delete_part(this);
	}
};




PLSQLParser.Merge_update_delete_partContext = Merge_update_delete_partContext;

PLSQLParser.prototype.merge_update_delete_part = function() {

    var localctx = new Merge_update_delete_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, PLSQLParser.RULE_merge_update_delete_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3511;
        this.match(PLSQLParser.DELETE);
        this.state = 3512;
        this.where_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_insert_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_merge_insert_clause;
    return this;
}

Merge_insert_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_insert_clauseContext.prototype.constructor = Merge_insert_clauseContext;

Merge_insert_clauseContext.prototype.WHEN = function() {
    return this.getToken(PLSQLParser.WHEN, 0);
};

Merge_insert_clauseContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Merge_insert_clauseContext.prototype.MATCHED = function() {
    return this.getToken(PLSQLParser.MATCHED, 0);
};

Merge_insert_clauseContext.prototype.THEN = function() {
    return this.getToken(PLSQLParser.THEN, 0);
};

Merge_insert_clauseContext.prototype.INSERT = function() {
    return this.getToken(PLSQLParser.INSERT, 0);
};

Merge_insert_clauseContext.prototype.VALUES = function() {
    return this.getToken(PLSQLParser.VALUES, 0);
};

Merge_insert_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Merge_insert_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Merge_insert_clauseContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Merge_insert_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMerge_insert_clause(this);
	}
};

Merge_insert_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMerge_insert_clause(this);
	}
};




PLSQLParser.Merge_insert_clauseContext = Merge_insert_clauseContext;

PLSQLParser.prototype.merge_insert_clause = function() {

    var localctx = new Merge_insert_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, PLSQLParser.RULE_merge_insert_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3514;
        this.match(PLSQLParser.WHEN);
        this.state = 3515;
        this.match(PLSQLParser.NOT);
        this.state = 3516;
        this.match(PLSQLParser.MATCHED);
        this.state = 3517;
        this.match(PLSQLParser.THEN);
        this.state = 3518;
        this.match(PLSQLParser.INSERT);
        this.state = 3530;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.LEFT_PAREN) {
            this.state = 3519;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3520;
            this.column_name();
            this.state = 3525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 3521;
                this.match(PLSQLParser.COMMA);
                this.state = 3522;
                this.column_name();
                this.state = 3527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3528;
            this.match(PLSQLParser.RIGHT_PAREN);
        }

        this.state = 3532;
        this.match(PLSQLParser.VALUES);
        this.state = 3533;
        this.expression_list();
        this.state = 3535;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.WHERE) {
            this.state = 3534;
            this.where_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Selected_tableviewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_selected_tableview;
    return this;
}

Selected_tableviewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_tableviewContext.prototype.constructor = Selected_tableviewContext;

Selected_tableviewContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Selected_tableviewContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Selected_tableviewContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Selected_tableviewContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSelected_tableview(this);
	}
};

Selected_tableviewContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSelected_tableview(this);
	}
};




PLSQLParser.Selected_tableviewContext = Selected_tableviewContext;

PLSQLParser.prototype.selected_tableview = function() {

    var localctx = new Selected_tableviewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, PLSQLParser.RULE_selected_tableview);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3542;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 3537;
            this.tableview_name();
            break;
        case PLSQLParser.LEFT_PAREN:
            this.state = 3538;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3539;
            this.select_statement();
            this.state = 3540;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3545;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 450)))) !== 0) || ((((_la - 484)) & ~0x1f) == 0 && ((1 << (_la - 484)) & ((1 << (PLSQLParser.CHAR_STRING - 484)) | (1 << (PLSQLParser.DELIMITED_ID - 484)) | (1 << (PLSQLParser.INTRODUCER - 484)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 3544;
            this.table_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lock_table_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_lock_table_statement;
    return this;
}

Lock_table_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lock_table_statementContext.prototype.constructor = Lock_table_statementContext;

Lock_table_statementContext.prototype.LOCK = function() {
    return this.getToken(PLSQLParser.LOCK, 0);
};

Lock_table_statementContext.prototype.TABLE = function() {
    return this.getToken(PLSQLParser.TABLE, 0);
};

Lock_table_statementContext.prototype.lock_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Lock_table_elementContext);
    } else {
        return this.getTypedRuleContext(Lock_table_elementContext,i);
    }
};

Lock_table_statementContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Lock_table_statementContext.prototype.lock_mode = function() {
    return this.getTypedRuleContext(Lock_modeContext,0);
};

Lock_table_statementContext.prototype.MODE = function() {
    return this.getToken(PLSQLParser.MODE, 0);
};

Lock_table_statementContext.prototype.wait_nowait_part = function() {
    return this.getTypedRuleContext(Wait_nowait_partContext,0);
};

Lock_table_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLock_table_statement(this);
	}
};

Lock_table_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLock_table_statement(this);
	}
};




PLSQLParser.Lock_table_statementContext = Lock_table_statementContext;

PLSQLParser.prototype.lock_table_statement = function() {

    var localctx = new Lock_table_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, PLSQLParser.RULE_lock_table_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3547;
        this.match(PLSQLParser.LOCK);
        this.state = 3548;
        this.match(PLSQLParser.TABLE);
        this.state = 3549;
        this.lock_table_element();
        this.state = 3554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3550;
            this.match(PLSQLParser.COMMA);
            this.state = 3551;
            this.lock_table_element();
            this.state = 3556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3557;
        this.match(PLSQLParser.IN);
        this.state = 3558;
        this.lock_mode();
        this.state = 3559;
        this.match(PLSQLParser.MODE);
        this.state = 3561;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.NOWAIT || _la===PLSQLParser.WAIT) {
            this.state = 3560;
            this.wait_nowait_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Wait_nowait_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_wait_nowait_part;
    return this;
}

Wait_nowait_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Wait_nowait_partContext.prototype.constructor = Wait_nowait_partContext;

Wait_nowait_partContext.prototype.WAIT = function() {
    return this.getToken(PLSQLParser.WAIT, 0);
};

Wait_nowait_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Wait_nowait_partContext.prototype.NOWAIT = function() {
    return this.getToken(PLSQLParser.NOWAIT, 0);
};

Wait_nowait_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterWait_nowait_part(this);
	}
};

Wait_nowait_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitWait_nowait_part(this);
	}
};




PLSQLParser.Wait_nowait_partContext = Wait_nowait_partContext;

PLSQLParser.prototype.wait_nowait_part = function() {

    var localctx = new Wait_nowait_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, PLSQLParser.RULE_wait_nowait_part);
    try {
        this.state = 3566;
        switch(this._input.LA(1)) {
        case PLSQLParser.WAIT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3563;
            this.match(PLSQLParser.WAIT);
            this.state = 3564;
            this.expression();
            break;
        case PLSQLParser.NOWAIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3565;
            this.match(PLSQLParser.NOWAIT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lock_table_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_lock_table_element;
    return this;
}

Lock_table_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lock_table_elementContext.prototype.constructor = Lock_table_elementContext;

Lock_table_elementContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Lock_table_elementContext.prototype.partition_extension_clause = function() {
    return this.getTypedRuleContext(Partition_extension_clauseContext,0);
};

Lock_table_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLock_table_element(this);
	}
};

Lock_table_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLock_table_element(this);
	}
};




PLSQLParser.Lock_table_elementContext = Lock_table_elementContext;

PLSQLParser.prototype.lock_table_element = function() {

    var localctx = new Lock_table_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, PLSQLParser.RULE_lock_table_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3568;
        this.tableview_name();
        this.state = 3570;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PARTITION || _la===PLSQLParser.SUBPARTITION) {
            this.state = 3569;
            this.partition_extension_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lock_modeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_lock_mode;
    return this;
}

Lock_modeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lock_modeContext.prototype.constructor = Lock_modeContext;

Lock_modeContext.prototype.ROW = function() {
    return this.getToken(PLSQLParser.ROW, 0);
};

Lock_modeContext.prototype.SHARE = function() {
    return this.getToken(PLSQLParser.SHARE, 0);
};

Lock_modeContext.prototype.EXCLUSIVE = function() {
    return this.getToken(PLSQLParser.EXCLUSIVE, 0);
};

Lock_modeContext.prototype.UPDATE = function() {
    return this.getToken(PLSQLParser.UPDATE, 0);
};

Lock_modeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLock_mode(this);
	}
};

Lock_modeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLock_mode(this);
	}
};




PLSQLParser.Lock_modeContext = Lock_modeContext;

PLSQLParser.prototype.lock_mode = function() {

    var localctx = new Lock_modeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, PLSQLParser.RULE_lock_mode);
    var _la = 0; // Token type
    try {
        this.state = 3584;
        var la_ = this._interp.adaptivePredict(this._input,426,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3572;
            this.match(PLSQLParser.ROW);
            this.state = 3573;
            this.match(PLSQLParser.SHARE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3574;
            this.match(PLSQLParser.ROW);
            this.state = 3575;
            this.match(PLSQLParser.EXCLUSIVE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3576;
            this.match(PLSQLParser.SHARE);
            this.state = 3578;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.UPDATE) {
                this.state = 3577;
                this.match(PLSQLParser.UPDATE);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3580;
            this.match(PLSQLParser.SHARE);
            this.state = 3581;
            this.match(PLSQLParser.ROW);
            this.state = 3582;
            this.match(PLSQLParser.EXCLUSIVE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3583;
            this.match(PLSQLParser.EXCLUSIVE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_table_refContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_general_table_ref;
    return this;
}

General_table_refContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_table_refContext.prototype.constructor = General_table_refContext;

General_table_refContext.prototype.dml_table_expression_clause = function() {
    return this.getTypedRuleContext(Dml_table_expression_clauseContext,0);
};

General_table_refContext.prototype.ONLY = function() {
    return this.getToken(PLSQLParser.ONLY, 0);
};

General_table_refContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

General_table_refContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterGeneral_table_ref(this);
	}
};

General_table_refContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitGeneral_table_ref(this);
	}
};




PLSQLParser.General_table_refContext = General_table_refContext;

PLSQLParser.prototype.general_table_ref = function() {

    var localctx = new General_table_refContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, PLSQLParser.RULE_general_table_ref);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3592;
        var la_ = this._interp.adaptivePredict(this._input,427,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3586;
            this.dml_table_expression_clause();
            break;

        case 2:
            this.state = 3587;
            this.match(PLSQLParser.ONLY);
            this.state = 3588;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3589;
            this.dml_table_expression_clause();
            this.state = 3590;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        }
        this.state = 3595;
        var la_ = this._interp.adaptivePredict(this._input,428,this._ctx);
        if(la_===1) {
            this.state = 3594;
            this.table_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Static_returning_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_static_returning_clause;
    return this;
}

Static_returning_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Static_returning_clauseContext.prototype.constructor = Static_returning_clauseContext;

Static_returning_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Static_returning_clauseContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Static_returning_clauseContext.prototype.RETURNING = function() {
    return this.getToken(PLSQLParser.RETURNING, 0);
};

Static_returning_clauseContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Static_returning_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterStatic_returning_clause(this);
	}
};

Static_returning_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitStatic_returning_clause(this);
	}
};




PLSQLParser.Static_returning_clauseContext = Static_returning_clauseContext;

PLSQLParser.prototype.static_returning_clause = function() {

    var localctx = new Static_returning_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, PLSQLParser.RULE_static_returning_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3597;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.RETURN || _la===PLSQLParser.RETURNING)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 3598;
        this.expression();
        this.state = 3603;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3599;
            this.match(PLSQLParser.COMMA);
            this.state = 3600;
            this.expression();
            this.state = 3605;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3606;
        this.into_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_logging_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_error_logging_clause;
    return this;
}

Error_logging_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_logging_clauseContext.prototype.constructor = Error_logging_clauseContext;

Error_logging_clauseContext.prototype.LOG = function() {
    return this.getToken(PLSQLParser.LOG, 0);
};

Error_logging_clauseContext.prototype.ERRORS = function() {
    return this.getToken(PLSQLParser.ERRORS, 0);
};

Error_logging_clauseContext.prototype.error_logging_into_part = function() {
    return this.getTypedRuleContext(Error_logging_into_partContext,0);
};

Error_logging_clauseContext.prototype.expression_wrapper = function() {
    return this.getTypedRuleContext(Expression_wrapperContext,0);
};

Error_logging_clauseContext.prototype.error_logging_reject_part = function() {
    return this.getTypedRuleContext(Error_logging_reject_partContext,0);
};

Error_logging_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterError_logging_clause(this);
	}
};

Error_logging_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitError_logging_clause(this);
	}
};




PLSQLParser.Error_logging_clauseContext = Error_logging_clauseContext;

PLSQLParser.prototype.error_logging_clause = function() {

    var localctx = new Error_logging_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, PLSQLParser.RULE_error_logging_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3608;
        this.match(PLSQLParser.LOG);
        this.state = 3609;
        this.match(PLSQLParser.ERRORS);
        this.state = 3611;
        var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
        if(la_===1) {
            this.state = 3610;
            this.error_logging_into_part();

        }
        this.state = 3614;
        var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
        if(la_===1) {
            this.state = 3613;
            this.expression_wrapper();

        }
        this.state = 3617;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.REJECT) {
            this.state = 3616;
            this.error_logging_reject_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_logging_into_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_error_logging_into_part;
    return this;
}

Error_logging_into_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_logging_into_partContext.prototype.constructor = Error_logging_into_partContext;

Error_logging_into_partContext.prototype.INTO = function() {
    return this.getToken(PLSQLParser.INTO, 0);
};

Error_logging_into_partContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Error_logging_into_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterError_logging_into_part(this);
	}
};

Error_logging_into_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitError_logging_into_part(this);
	}
};




PLSQLParser.Error_logging_into_partContext = Error_logging_into_partContext;

PLSQLParser.prototype.error_logging_into_part = function() {

    var localctx = new Error_logging_into_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, PLSQLParser.RULE_error_logging_into_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3619;
        this.match(PLSQLParser.INTO);
        this.state = 3620;
        this.tableview_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_logging_reject_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_error_logging_reject_part;
    return this;
}

Error_logging_reject_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_logging_reject_partContext.prototype.constructor = Error_logging_reject_partContext;

Error_logging_reject_partContext.prototype.REJECT = function() {
    return this.getToken(PLSQLParser.REJECT, 0);
};

Error_logging_reject_partContext.prototype.LIMIT = function() {
    return this.getToken(PLSQLParser.LIMIT, 0);
};

Error_logging_reject_partContext.prototype.UNLIMITED = function() {
    return this.getToken(PLSQLParser.UNLIMITED, 0);
};

Error_logging_reject_partContext.prototype.expression_wrapper = function() {
    return this.getTypedRuleContext(Expression_wrapperContext,0);
};

Error_logging_reject_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterError_logging_reject_part(this);
	}
};

Error_logging_reject_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitError_logging_reject_part(this);
	}
};




PLSQLParser.Error_logging_reject_partContext = Error_logging_reject_partContext;

PLSQLParser.prototype.error_logging_reject_part = function() {

    var localctx = new Error_logging_reject_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, PLSQLParser.RULE_error_logging_reject_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3622;
        this.match(PLSQLParser.REJECT);
        this.state = 3623;
        this.match(PLSQLParser.LIMIT);
        this.state = 3626;
        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3624;
            this.match(PLSQLParser.UNLIMITED);
            break;

        case 2:
            this.state = 3625;
            this.expression_wrapper();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_table_expression_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_dml_table_expression_clause;
    return this;
}

Dml_table_expression_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_table_expression_clauseContext.prototype.constructor = Dml_table_expression_clauseContext;

Dml_table_expression_clauseContext.prototype.table_collection_expression = function() {
    return this.getTypedRuleContext(Table_collection_expressionContext,0);
};

Dml_table_expression_clauseContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Dml_table_expression_clauseContext.prototype.subquery_restriction_clause = function() {
    return this.getTypedRuleContext(Subquery_restriction_clauseContext,0);
};

Dml_table_expression_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dml_table_expression_clauseContext.prototype.sample_clause = function() {
    return this.getTypedRuleContext(Sample_clauseContext,0);
};

Dml_table_expression_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDml_table_expression_clause(this);
	}
};

Dml_table_expression_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDml_table_expression_clause(this);
	}
};




PLSQLParser.Dml_table_expression_clauseContext = Dml_table_expression_clauseContext;

PLSQLParser.prototype.dml_table_expression_clause = function() {

    var localctx = new Dml_table_expression_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, PLSQLParser.RULE_dml_table_expression_clause);
    var _la = 0; // Token type
    try {
        this.state = 3640;
        switch(this._input.LA(1)) {
        case PLSQLParser.TABLE:
        case PLSQLParser.THE:
            this.enterOuterAlt(localctx, 1);
            this.state = 3628;
            this.table_collection_expression();
            break;
        case PLSQLParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 3629;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3630;
            this.select_statement();
            this.state = 3632;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.WITH) {
                this.state = 3631;
                this.subquery_restriction_clause();
            }

            this.state = 3634;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 3636;
            this.tableview_name();
            this.state = 3638;
            var la_ = this._interp.adaptivePredict(this._input,435,this._ctx);
            if(la_===1) {
                this.state = 3637;
                this.sample_clause();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_collection_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_collection_expression;
    return this;
}

Table_collection_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_collection_expressionContext.prototype.constructor = Table_collection_expressionContext;

Table_collection_expressionContext.prototype.TABLE = function() {
    return this.getToken(PLSQLParser.TABLE, 0);
};

Table_collection_expressionContext.prototype.THE = function() {
    return this.getToken(PLSQLParser.THE, 0);
};

Table_collection_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Table_collection_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Table_collection_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_collection_expression(this);
	}
};

Table_collection_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_collection_expression(this);
	}
};




PLSQLParser.Table_collection_expressionContext = Table_collection_expressionContext;

PLSQLParser.prototype.table_collection_expression = function() {

    var localctx = new Table_collection_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, PLSQLParser.RULE_table_collection_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3642;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.TABLE || _la===PLSQLParser.THE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 3655;
        var la_ = this._interp.adaptivePredict(this._input,438,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3643;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3644;
            this.subquery();
            this.state = 3645;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 3647;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3648;
            this.expression();
            this.state = 3649;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 3653;
            var la_ = this._interp.adaptivePredict(this._input,437,this._ctx);
            if(la_===1) {
                this.state = 3650;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 3651;
                this.match(PLSQLParser.PLUS_SIGN);
                this.state = 3652;
                this.match(PLSQLParser.RIGHT_PAREN);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_restriction_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_subquery_restriction_clause;
    return this;
}

Subquery_restriction_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_restriction_clauseContext.prototype.constructor = Subquery_restriction_clauseContext;

Subquery_restriction_clauseContext.prototype.WITH = function() {
    return this.getToken(PLSQLParser.WITH, 0);
};

Subquery_restriction_clauseContext.prototype.READ = function() {
    return this.getToken(PLSQLParser.READ, 0);
};

Subquery_restriction_clauseContext.prototype.ONLY = function() {
    return this.getToken(PLSQLParser.ONLY, 0);
};

Subquery_restriction_clauseContext.prototype.CHECK = function() {
    return this.getToken(PLSQLParser.CHECK, 0);
};

Subquery_restriction_clauseContext.prototype.OPTION = function() {
    return this.getToken(PLSQLParser.OPTION, 0);
};

Subquery_restriction_clauseContext.prototype.CONSTRAINT = function() {
    return this.getToken(PLSQLParser.CONSTRAINT, 0);
};

Subquery_restriction_clauseContext.prototype.constraint_name = function() {
    return this.getTypedRuleContext(Constraint_nameContext,0);
};

Subquery_restriction_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSubquery_restriction_clause(this);
	}
};

Subquery_restriction_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSubquery_restriction_clause(this);
	}
};




PLSQLParser.Subquery_restriction_clauseContext = Subquery_restriction_clauseContext;

PLSQLParser.prototype.subquery_restriction_clause = function() {

    var localctx = new Subquery_restriction_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, PLSQLParser.RULE_subquery_restriction_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3657;
        this.match(PLSQLParser.WITH);
        this.state = 3666;
        switch(this._input.LA(1)) {
        case PLSQLParser.READ:
            this.state = 3658;
            this.match(PLSQLParser.READ);
            this.state = 3659;
            this.match(PLSQLParser.ONLY);
            break;
        case PLSQLParser.CHECK:
            this.state = 3660;
            this.match(PLSQLParser.CHECK);
            this.state = 3661;
            this.match(PLSQLParser.OPTION);
            this.state = 3664;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.CONSTRAINT) {
                this.state = 3662;
                this.match(PLSQLParser.CONSTRAINT);
                this.state = 3663;
                this.constraint_name();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sample_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_sample_clause;
    return this;
}

Sample_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sample_clauseContext.prototype.constructor = Sample_clauseContext;

Sample_clauseContext.prototype.SAMPLE = function() {
    return this.getToken(PLSQLParser.SAMPLE, 0);
};

Sample_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Sample_clauseContext.prototype.BLOCK = function() {
    return this.getToken(PLSQLParser.BLOCK, 0);
};

Sample_clauseContext.prototype.seed_part = function() {
    return this.getTypedRuleContext(Seed_partContext,0);
};

Sample_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSample_clause(this);
	}
};

Sample_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSample_clause(this);
	}
};




PLSQLParser.Sample_clauseContext = Sample_clauseContext;

PLSQLParser.prototype.sample_clause = function() {

    var localctx = new Sample_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, PLSQLParser.RULE_sample_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3668;
        this.match(PLSQLParser.SAMPLE);
        this.state = 3670;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.BLOCK) {
            this.state = 3669;
            this.match(PLSQLParser.BLOCK);
        }

        this.state = 3672;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3673;
        this.expression();
        this.state = 3676;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.COMMA) {
            this.state = 3674;
            this.match(PLSQLParser.COMMA);
            this.state = 3675;
            this.expression();
        }

        this.state = 3678;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 3680;
        var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
        if(la_===1) {
            this.state = 3679;
            this.seed_part();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Seed_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_seed_part;
    return this;
}

Seed_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Seed_partContext.prototype.constructor = Seed_partContext;

Seed_partContext.prototype.SEED = function() {
    return this.getToken(PLSQLParser.SEED, 0);
};

Seed_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Seed_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSeed_part(this);
	}
};

Seed_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSeed_part(this);
	}
};




PLSQLParser.Seed_partContext = Seed_partContext;

PLSQLParser.prototype.seed_part = function() {

    var localctx = new Seed_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, PLSQLParser.RULE_seed_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3682;
        this.match(PLSQLParser.SEED);
        this.state = 3683;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3684;
        this.expression();
        this.state = 3685;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cursor_expression;
    return this;
}

Cursor_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_expressionContext.prototype.constructor = Cursor_expressionContext;

Cursor_expressionContext.prototype.CURSOR = function() {
    return this.getToken(PLSQLParser.CURSOR, 0);
};

Cursor_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Cursor_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCursor_expression(this);
	}
};

Cursor_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCursor_expression(this);
	}
};




PLSQLParser.Cursor_expressionContext = Cursor_expressionContext;

PLSQLParser.prototype.cursor_expression = function() {

    var localctx = new Cursor_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, PLSQLParser.RULE_cursor_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3687;
        this.match(PLSQLParser.CURSOR);
        this.state = 3688;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3689;
        this.subquery();
        this.state = 3690;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitExpression_list(this);
	}
};




PLSQLParser.Expression_listContext = Expression_listContext;

PLSQLParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, PLSQLParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3692;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3694;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ALL - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ANY - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CASE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONNECT_BY_ROOT - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DATE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (PLSQLParser.DEFAULT - 98)) | (1 << (PLSQLParser.DEFAULTS - 98)) | (1 << (PLSQLParser.DEFERRED - 98)) | (1 << (PLSQLParser.DEFINER - 98)) | (1 << (PLSQLParser.DETERMINISTIC - 98)) | (1 << (PLSQLParser.DIMENSION - 98)) | (1 << (PLSQLParser.DISABLE - 98)) | (1 << (PLSQLParser.DISASSOCIATE - 98)) | (1 << (PLSQLParser.DISTINCT - 98)) | (1 << (PLSQLParser.DOCUMENT - 98)) | (1 << (PLSQLParser.DOUBLE - 98)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 98)) | (1 << (PLSQLParser.EACH - 98)) | (1 << (PLSQLParser.ELEMENT - 98)) | (1 << (PLSQLParser.EMPTY - 98)) | (1 << (PLSQLParser.ENABLE - 98)) | (1 << (PLSQLParser.ENCODING - 98)) | (1 << (PLSQLParser.ENTITYESCAPING - 98)) | (1 << (PLSQLParser.ERRORS - 98)) | (1 << (PLSQLParser.ESCAPE - 98)) | (1 << (PLSQLParser.EVALNAME - 98)) | (1 << (PLSQLParser.EXCEPTION - 98)) | (1 << (PLSQLParser.EXCEPTION_INIT - 98)) | (1 << (PLSQLParser.EXCEPTIONS - 98)) | (1 << (PLSQLParser.EXCLUDE - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXISTS - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FALSE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NOT - 228)) | (1 << (PLSQLParser.NULL - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)) | (1 << (PLSQLParser.PRIOR - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUE - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 454)) | (1 << (PLSQLParser.UNSIGNED_INTEGER - 454)) | (1 << (PLSQLParser.APPROXIMATE_NUM_LIT - 454)) | (1 << (PLSQLParser.CHAR_STRING - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PLSQLParser.LEFT_PAREN - 488)) | (1 << (PLSQLParser.PLUS_SIGN - 488)) | (1 << (PLSQLParser.MINUS_SIGN - 488)) | (1 << (PLSQLParser.BINDVAR - 488)) | (1 << (PLSQLParser.COLON - 488)) | (1 << (PLSQLParser.INTRODUCER - 488)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 3693;
            this.expression();
        }

        this.state = 3700;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3696;
            this.match(PLSQLParser.COMMA);
            this.state = 3697;
            this.expression();
            this.state = 3702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3703;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_condition;
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCondition(this);
	}
};

ConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCondition(this);
	}
};




PLSQLParser.ConditionContext = ConditionContext;

PLSQLParser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, PLSQLParser.RULE_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3705;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Condition_wrapperContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_condition_wrapper;
    return this;
}

Condition_wrapperContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Condition_wrapperContext.prototype.constructor = Condition_wrapperContext;

Condition_wrapperContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Condition_wrapperContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCondition_wrapper(this);
	}
};

Condition_wrapperContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCondition_wrapper(this);
	}
};




PLSQLParser.Condition_wrapperContext = Condition_wrapperContext;

PLSQLParser.prototype.condition_wrapper = function() {

    var localctx = new Condition_wrapperContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, PLSQLParser.RULE_condition_wrapper);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3707;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.cursor_expression = function() {
    return this.getTypedRuleContext(Cursor_expressionContext,0);
};

ExpressionContext.prototype.logical_and_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Logical_and_expressionContext);
    } else {
        return this.getTypedRuleContext(Logical_and_expressionContext,i);
    }
};

ExpressionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.OR);
    } else {
        return this.getToken(PLSQLParser.OR, i);
    }
};


ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitExpression(this);
	}
};




PLSQLParser.ExpressionContext = ExpressionContext;

PLSQLParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, PLSQLParser.RULE_expression);
    try {
        this.state = 3718;
        var la_ = this._interp.adaptivePredict(this._input,447,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3709;
            this.cursor_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3710;
            this.logical_and_expression();
            this.state = 3715;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,446,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3711;
                    this.match(PLSQLParser.OR);
                    this.state = 3712;
                    this.logical_and_expression(); 
                }
                this.state = 3717;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,446,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_wrapperContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_expression_wrapper;
    return this;
}

Expression_wrapperContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_wrapperContext.prototype.constructor = Expression_wrapperContext;

Expression_wrapperContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Expression_wrapperContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterExpression_wrapper(this);
	}
};

Expression_wrapperContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitExpression_wrapper(this);
	}
};




PLSQLParser.Expression_wrapperContext = Expression_wrapperContext;

PLSQLParser.prototype.expression_wrapper = function() {

    var localctx = new Expression_wrapperContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, PLSQLParser.RULE_expression_wrapper);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3720;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Logical_and_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_logical_and_expression;
    return this;
}

Logical_and_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Logical_and_expressionContext.prototype.constructor = Logical_and_expressionContext;

Logical_and_expressionContext.prototype.negated_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Negated_expressionContext);
    } else {
        return this.getTypedRuleContext(Negated_expressionContext,i);
    }
};

Logical_and_expressionContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.AND);
    } else {
        return this.getToken(PLSQLParser.AND, i);
    }
};


Logical_and_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLogical_and_expression(this);
	}
};

Logical_and_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLogical_and_expression(this);
	}
};




PLSQLParser.Logical_and_expressionContext = Logical_and_expressionContext;

PLSQLParser.prototype.logical_and_expression = function() {

    var localctx = new Logical_and_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, PLSQLParser.RULE_logical_and_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3722;
        this.negated_expression();
        this.state = 3727;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,448,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3723;
                this.match(PLSQLParser.AND);
                this.state = 3724;
                this.negated_expression(); 
            }
            this.state = 3729;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,448,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Negated_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_negated_expression;
    return this;
}

Negated_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Negated_expressionContext.prototype.constructor = Negated_expressionContext;

Negated_expressionContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Negated_expressionContext.prototype.negated_expression = function() {
    return this.getTypedRuleContext(Negated_expressionContext,0);
};

Negated_expressionContext.prototype.equality_expression = function() {
    return this.getTypedRuleContext(Equality_expressionContext,0);
};

Negated_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterNegated_expression(this);
	}
};

Negated_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitNegated_expression(this);
	}
};




PLSQLParser.Negated_expressionContext = Negated_expressionContext;

PLSQLParser.prototype.negated_expression = function() {

    var localctx = new Negated_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, PLSQLParser.RULE_negated_expression);
    try {
        this.state = 3733;
        switch(this._input.LA(1)) {
        case PLSQLParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3730;
            this.match(PLSQLParser.NOT);
            this.state = 3731;
            this.negated_expression();
            break;
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ALL:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ANY:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CASE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONNECT_BY_ROOT:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DATE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DISTINCT:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXISTS:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FALSE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULL:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.PRIOR:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUE:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
        case PLSQLParser.UNSIGNED_INTEGER:
        case PLSQLParser.APPROXIMATE_NUM_LIT:
        case PLSQLParser.CHAR_STRING:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.LEFT_PAREN:
        case PLSQLParser.PLUS_SIGN:
        case PLSQLParser.MINUS_SIGN:
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 3732;
            this.equality_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Equality_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_equality_expression;
    return this;
}

Equality_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Equality_expressionContext.prototype.constructor = Equality_expressionContext;

Equality_expressionContext.prototype.multiset_expression = function() {
    return this.getTypedRuleContext(Multiset_expressionContext,0);
};

Equality_expressionContext.prototype.IS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.IS);
    } else {
        return this.getToken(PLSQLParser.IS, i);
    }
};


Equality_expressionContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.NULL);
    } else {
        return this.getToken(PLSQLParser.NULL, i);
    }
};


Equality_expressionContext.prototype.NAN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.NAN);
    } else {
        return this.getToken(PLSQLParser.NAN, i);
    }
};


Equality_expressionContext.prototype.PRESENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.PRESENT);
    } else {
        return this.getToken(PLSQLParser.PRESENT, i);
    }
};


Equality_expressionContext.prototype.INFINITE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.INFINITE);
    } else {
        return this.getToken(PLSQLParser.INFINITE, i);
    }
};


Equality_expressionContext.prototype.A_LETTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.A_LETTER);
    } else {
        return this.getToken(PLSQLParser.A_LETTER, i);
    }
};


Equality_expressionContext.prototype.SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.SET);
    } else {
        return this.getToken(PLSQLParser.SET, i);
    }
};


Equality_expressionContext.prototype.EMPTY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.EMPTY);
    } else {
        return this.getToken(PLSQLParser.EMPTY, i);
    }
};


Equality_expressionContext.prototype.OF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.OF);
    } else {
        return this.getToken(PLSQLParser.OF, i);
    }
};


Equality_expressionContext.prototype.type_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_specContext);
    } else {
        return this.getTypedRuleContext(Type_specContext,i);
    }
};

Equality_expressionContext.prototype.NOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.NOT);
    } else {
        return this.getToken(PLSQLParser.NOT, i);
    }
};


Equality_expressionContext.prototype.TYPE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.TYPE);
    } else {
        return this.getToken(PLSQLParser.TYPE, i);
    }
};


Equality_expressionContext.prototype.ONLY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.ONLY);
    } else {
        return this.getToken(PLSQLParser.ONLY, i);
    }
};


Equality_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterEquality_expression(this);
	}
};

Equality_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitEquality_expression(this);
	}
};




PLSQLParser.Equality_expressionContext = Equality_expressionContext;

PLSQLParser.prototype.equality_expression = function() {

    var localctx = new Equality_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, PLSQLParser.RULE_equality_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3735;
        this.multiset_expression();
        this.state = 3769;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,455,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3736;
                this.match(PLSQLParser.IS);
                this.state = 3738;
                _la = this._input.LA(1);
                if(_la===PLSQLParser.NOT) {
                    this.state = 3737;
                    this.match(PLSQLParser.NOT);
                }

                this.state = 3765;
                switch(this._input.LA(1)) {
                case PLSQLParser.NULL:
                    this.state = 3740;
                    this.match(PLSQLParser.NULL);
                    break;
                case PLSQLParser.NAN:
                    this.state = 3741;
                    this.match(PLSQLParser.NAN);
                    break;
                case PLSQLParser.PRESENT:
                    this.state = 3742;
                    this.match(PLSQLParser.PRESENT);
                    break;
                case PLSQLParser.INFINITE:
                    this.state = 3743;
                    this.match(PLSQLParser.INFINITE);
                    break;
                case PLSQLParser.A_LETTER:
                    this.state = 3744;
                    this.match(PLSQLParser.A_LETTER);
                    this.state = 3745;
                    this.match(PLSQLParser.SET);
                    break;
                case PLSQLParser.EMPTY:
                    this.state = 3746;
                    this.match(PLSQLParser.EMPTY);
                    break;
                case PLSQLParser.OF:
                    this.state = 3747;
                    this.match(PLSQLParser.OF);
                    this.state = 3749;
                    _la = this._input.LA(1);
                    if(_la===PLSQLParser.TYPE) {
                        this.state = 3748;
                        this.match(PLSQLParser.TYPE);
                    }

                    this.state = 3751;
                    this.match(PLSQLParser.LEFT_PAREN);
                    this.state = 3753;
                    var la_ = this._interp.adaptivePredict(this._input,452,this._ctx);
                    if(la_===1) {
                        this.state = 3752;
                        this.match(PLSQLParser.ONLY);

                    }
                    this.state = 3755;
                    this.type_spec();
                    this.state = 3760;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===PLSQLParser.COMMA) {
                        this.state = 3756;
                        this.match(PLSQLParser.COMMA);
                        this.state = 3757;
                        this.type_spec();
                        this.state = 3762;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3763;
                    this.match(PLSQLParser.RIGHT_PAREN);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 3771;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,455,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiset_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_multiset_expression;
    return this;
}

Multiset_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiset_expressionContext.prototype.constructor = Multiset_expressionContext;

Multiset_expressionContext.prototype.relational_expression = function() {
    return this.getTypedRuleContext(Relational_expressionContext,0);
};

Multiset_expressionContext.prototype.multiset_type = function() {
    return this.getTypedRuleContext(Multiset_typeContext,0);
};

Multiset_expressionContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Multiset_expressionContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Multiset_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMultiset_expression(this);
	}
};

Multiset_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMultiset_expression(this);
	}
};




PLSQLParser.Multiset_expressionContext = Multiset_expressionContext;

PLSQLParser.prototype.multiset_expression = function() {

    var localctx = new Multiset_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, PLSQLParser.RULE_multiset_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3772;
        this.relational_expression();
        this.state = 3779;
        var la_ = this._interp.adaptivePredict(this._input,457,this._ctx);
        if(la_===1) {
            this.state = 3773;
            this.multiset_type();
            this.state = 3775;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.OF) {
                this.state = 3774;
                this.match(PLSQLParser.OF);
            }

            this.state = 3777;
            this.concatenation();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiset_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_multiset_type;
    return this;
}

Multiset_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiset_typeContext.prototype.constructor = Multiset_typeContext;

Multiset_typeContext.prototype.MEMBER = function() {
    return this.getToken(PLSQLParser.MEMBER, 0);
};

Multiset_typeContext.prototype.SUBMULTISET = function() {
    return this.getToken(PLSQLParser.SUBMULTISET, 0);
};

Multiset_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMultiset_type(this);
	}
};

Multiset_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMultiset_type(this);
	}
};




PLSQLParser.Multiset_typeContext = Multiset_typeContext;

PLSQLParser.prototype.multiset_type = function() {

    var localctx = new Multiset_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, PLSQLParser.RULE_multiset_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3781;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.MEMBER || _la===PLSQLParser.SUBMULTISET)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relational_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_relational_expression;
    return this;
}

Relational_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relational_expressionContext.prototype.constructor = Relational_expressionContext;

Relational_expressionContext.prototype.compound_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compound_expressionContext);
    } else {
        return this.getTypedRuleContext(Compound_expressionContext,i);
    }
};

Relational_expressionContext.prototype.not_equal_op = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Not_equal_opContext);
    } else {
        return this.getTypedRuleContext(Not_equal_opContext,i);
    }
};

Relational_expressionContext.prototype.less_than_or_equals_op = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Less_than_or_equals_opContext);
    } else {
        return this.getTypedRuleContext(Less_than_or_equals_opContext,i);
    }
};

Relational_expressionContext.prototype.greater_than_or_equals_op = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Greater_than_or_equals_opContext);
    } else {
        return this.getTypedRuleContext(Greater_than_or_equals_opContext,i);
    }
};

Relational_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRelational_expression(this);
	}
};

Relational_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRelational_expression(this);
	}
};




PLSQLParser.Relational_expressionContext = Relational_expressionContext;

PLSQLParser.prototype.relational_expression = function() {

    var localctx = new Relational_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, PLSQLParser.RULE_relational_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3783;
        this.compound_expression();
        this.state = 3795;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,459,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3790;
                var la_ = this._interp.adaptivePredict(this._input,458,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 3784;
                    this.match(PLSQLParser.EQUALS_OP);
                    break;

                case 2:
                    this.state = 3785;
                    this.not_equal_op();
                    break;

                case 3:
                    this.state = 3786;
                    this.match(PLSQLParser.LESS_THAN_OP);
                    break;

                case 4:
                    this.state = 3787;
                    this.match(PLSQLParser.GREATER_THAN_OP);
                    break;

                case 5:
                    this.state = 3788;
                    this.less_than_or_equals_op();
                    break;

                case 6:
                    this.state = 3789;
                    this.greater_than_or_equals_op();
                    break;

                }
                this.state = 3792;
                this.compound_expression(); 
            }
            this.state = 3797;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,459,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_compound_expression;
    return this;
}

Compound_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_expressionContext.prototype.constructor = Compound_expressionContext;

Compound_expressionContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Compound_expressionContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Compound_expressionContext.prototype.in_elements = function() {
    return this.getTypedRuleContext(In_elementsContext,0);
};

Compound_expressionContext.prototype.BETWEEN = function() {
    return this.getToken(PLSQLParser.BETWEEN, 0);
};

Compound_expressionContext.prototype.between_elements = function() {
    return this.getTypedRuleContext(Between_elementsContext,0);
};

Compound_expressionContext.prototype.like_type = function() {
    return this.getTypedRuleContext(Like_typeContext,0);
};

Compound_expressionContext.prototype.NOT = function() {
    return this.getToken(PLSQLParser.NOT, 0);
};

Compound_expressionContext.prototype.like_escape_part = function() {
    return this.getTypedRuleContext(Like_escape_partContext,0);
};

Compound_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCompound_expression(this);
	}
};

Compound_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCompound_expression(this);
	}
};




PLSQLParser.Compound_expressionContext = Compound_expressionContext;

PLSQLParser.prototype.compound_expression = function() {

    var localctx = new Compound_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, PLSQLParser.RULE_compound_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3798;
        this.concatenation();
        this.state = 3813;
        var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
        if(la_===1) {
            this.state = 3800;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.NOT) {
                this.state = 3799;
                this.match(PLSQLParser.NOT);
            }

            this.state = 3811;
            switch(this._input.LA(1)) {
            case PLSQLParser.IN:
                this.state = 3802;
                this.match(PLSQLParser.IN);
                this.state = 3803;
                this.in_elements();
                break;
            case PLSQLParser.BETWEEN:
                this.state = 3804;
                this.match(PLSQLParser.BETWEEN);
                this.state = 3805;
                this.between_elements();
                break;
            case PLSQLParser.LIKE:
            case PLSQLParser.LIKE2:
            case PLSQLParser.LIKE4:
            case PLSQLParser.LIKEC:
                this.state = 3806;
                this.like_type();
                this.state = 3807;
                this.concatenation();
                this.state = 3809;
                var la_ = this._interp.adaptivePredict(this._input,461,this._ctx);
                if(la_===1) {
                    this.state = 3808;
                    this.like_escape_part();

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Like_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_like_type;
    return this;
}

Like_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Like_typeContext.prototype.constructor = Like_typeContext;

Like_typeContext.prototype.LIKE = function() {
    return this.getToken(PLSQLParser.LIKE, 0);
};

Like_typeContext.prototype.LIKEC = function() {
    return this.getToken(PLSQLParser.LIKEC, 0);
};

Like_typeContext.prototype.LIKE2 = function() {
    return this.getToken(PLSQLParser.LIKE2, 0);
};

Like_typeContext.prototype.LIKE4 = function() {
    return this.getToken(PLSQLParser.LIKE4, 0);
};

Like_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLike_type(this);
	}
};

Like_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLike_type(this);
	}
};




PLSQLParser.Like_typeContext = Like_typeContext;

PLSQLParser.prototype.like_type = function() {

    var localctx = new Like_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, PLSQLParser.RULE_like_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3815;
        _la = this._input.LA(1);
        if(!(((((_la - 198)) & ~0x1f) == 0 && ((1 << (_la - 198)) & ((1 << (PLSQLParser.LIKE - 198)) | (1 << (PLSQLParser.LIKE2 - 198)) | (1 << (PLSQLParser.LIKE4 - 198)) | (1 << (PLSQLParser.LIKEC - 198)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Like_escape_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_like_escape_part;
    return this;
}

Like_escape_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Like_escape_partContext.prototype.constructor = Like_escape_partContext;

Like_escape_partContext.prototype.ESCAPE = function() {
    return this.getToken(PLSQLParser.ESCAPE, 0);
};

Like_escape_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Like_escape_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLike_escape_part(this);
	}
};

Like_escape_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLike_escape_part(this);
	}
};




PLSQLParser.Like_escape_partContext = Like_escape_partContext;

PLSQLParser.prototype.like_escape_part = function() {

    var localctx = new Like_escape_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, PLSQLParser.RULE_like_escape_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3817;
        this.match(PLSQLParser.ESCAPE);
        this.state = 3818;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function In_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_in_elements;
    return this;
}

In_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
In_elementsContext.prototype.constructor = In_elementsContext;

In_elementsContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

In_elementsContext.prototype.concatenation_wrapper = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Concatenation_wrapperContext);
    } else {
        return this.getTypedRuleContext(Concatenation_wrapperContext,i);
    }
};

In_elementsContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

In_elementsContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

In_elementsContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

In_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterIn_elements(this);
	}
};

In_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitIn_elements(this);
	}
};




PLSQLParser.In_elementsContext = In_elementsContext;

PLSQLParser.prototype.in_elements = function() {

    var localctx = new In_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, PLSQLParser.RULE_in_elements);
    var _la = 0; // Token type
    try {
        this.state = 3838;
        var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3820;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3821;
            this.subquery();
            this.state = 3822;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3824;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3825;
            this.concatenation_wrapper();
            this.state = 3830;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 3826;
                this.match(PLSQLParser.COMMA);
                this.state = 3827;
                this.concatenation_wrapper();
                this.state = 3832;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3833;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3835;
            this.constant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3836;
            this.bind_variable();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3837;
            this.general_element();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_between_elements;
    return this;
}

Between_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_elementsContext.prototype.constructor = Between_elementsContext;

Between_elementsContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Between_elementsContext.prototype.AND = function() {
    return this.getToken(PLSQLParser.AND, 0);
};

Between_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterBetween_elements(this);
	}
};

Between_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitBetween_elements(this);
	}
};




PLSQLParser.Between_elementsContext = Between_elementsContext;

PLSQLParser.prototype.between_elements = function() {

    var localctx = new Between_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, PLSQLParser.RULE_between_elements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3840;
        this.concatenation();
        this.state = 3841;
        this.match(PLSQLParser.AND);
        this.state = 3842;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConcatenationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_concatenation;
    return this;
}

ConcatenationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConcatenationContext.prototype.constructor = ConcatenationContext;

ConcatenationContext.prototype.additive_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Additive_expressionContext);
    } else {
        return this.getTypedRuleContext(Additive_expressionContext,i);
    }
};

ConcatenationContext.prototype.concatenation_op = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Concatenation_opContext);
    } else {
        return this.getTypedRuleContext(Concatenation_opContext,i);
    }
};

ConcatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConcatenation(this);
	}
};

ConcatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConcatenation(this);
	}
};




PLSQLParser.ConcatenationContext = ConcatenationContext;

PLSQLParser.prototype.concatenation = function() {

    var localctx = new ConcatenationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, PLSQLParser.RULE_concatenation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3844;
        this.additive_expression();
        this.state = 3850;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,466,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3845;
                this.concatenation_op();
                this.state = 3846;
                this.additive_expression(); 
            }
            this.state = 3852;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,466,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concatenation_wrapperContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_concatenation_wrapper;
    return this;
}

Concatenation_wrapperContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concatenation_wrapperContext.prototype.constructor = Concatenation_wrapperContext;

Concatenation_wrapperContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Concatenation_wrapperContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConcatenation_wrapper(this);
	}
};

Concatenation_wrapperContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConcatenation_wrapper(this);
	}
};




PLSQLParser.Concatenation_wrapperContext = Concatenation_wrapperContext;

PLSQLParser.prototype.concatenation_wrapper = function() {

    var localctx = new Concatenation_wrapperContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, PLSQLParser.RULE_concatenation_wrapper);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3853;
        this.concatenation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Additive_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_additive_expression;
    return this;
}

Additive_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Additive_expressionContext.prototype.constructor = Additive_expressionContext;

Additive_expressionContext.prototype.multiply_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multiply_expressionContext);
    } else {
        return this.getTypedRuleContext(Multiply_expressionContext,i);
    }
};

Additive_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAdditive_expression(this);
	}
};

Additive_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAdditive_expression(this);
	}
};




PLSQLParser.Additive_expressionContext = Additive_expressionContext;

PLSQLParser.prototype.additive_expression = function() {

    var localctx = new Additive_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, PLSQLParser.RULE_additive_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3855;
        this.multiply_expression();
        this.state = 3860;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,467,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3856;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.PLUS_SIGN || _la===PLSQLParser.MINUS_SIGN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 3857;
                this.multiply_expression(); 
            }
            this.state = 3862;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,467,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiply_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_multiply_expression;
    return this;
}

Multiply_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiply_expressionContext.prototype.constructor = Multiply_expressionContext;

Multiply_expressionContext.prototype.datetime_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Datetime_expressionContext);
    } else {
        return this.getTypedRuleContext(Datetime_expressionContext,i);
    }
};

Multiply_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMultiply_expression(this);
	}
};

Multiply_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMultiply_expression(this);
	}
};




PLSQLParser.Multiply_expressionContext = Multiply_expressionContext;

PLSQLParser.prototype.multiply_expression = function() {

    var localctx = new Multiply_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, PLSQLParser.RULE_multiply_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3863;
        this.datetime_expression();
        this.state = 3868;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,468,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3864;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.ASTERISK || _la===PLSQLParser.SOLIDUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 3865;
                this.datetime_expression(); 
            }
            this.state = 3870;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,468,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Datetime_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_datetime_expression;
    return this;
}

Datetime_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Datetime_expressionContext.prototype.constructor = Datetime_expressionContext;

Datetime_expressionContext.prototype.model_expression = function() {
    return this.getTypedRuleContext(Model_expressionContext,0);
};

Datetime_expressionContext.prototype.AT = function() {
    return this.getToken(PLSQLParser.AT, 0);
};

Datetime_expressionContext.prototype.interval_expression = function() {
    return this.getTypedRuleContext(Interval_expressionContext,0);
};

Datetime_expressionContext.prototype.LOCAL = function() {
    return this.getToken(PLSQLParser.LOCAL, 0);
};

Datetime_expressionContext.prototype.TIME = function() {
    return this.getToken(PLSQLParser.TIME, 0);
};

Datetime_expressionContext.prototype.ZONE = function() {
    return this.getToken(PLSQLParser.ZONE, 0);
};

Datetime_expressionContext.prototype.concatenation_wrapper = function() {
    return this.getTypedRuleContext(Concatenation_wrapperContext,0);
};

Datetime_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDatetime_expression(this);
	}
};

Datetime_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDatetime_expression(this);
	}
};




PLSQLParser.Datetime_expressionContext = Datetime_expressionContext;

PLSQLParser.prototype.datetime_expression = function() {

    var localctx = new Datetime_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, PLSQLParser.RULE_datetime_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3871;
        this.model_expression();
        this.state = 3880;
        var la_ = this._interp.adaptivePredict(this._input,470,this._ctx);
        if(la_===1) {
            this.state = 3872;
            this.match(PLSQLParser.AT);
            this.state = 3877;
            switch(this._input.LA(1)) {
            case PLSQLParser.LOCAL:
                this.state = 3873;
                this.match(PLSQLParser.LOCAL);
                break;
            case PLSQLParser.TIME:
                this.state = 3874;
                this.match(PLSQLParser.TIME);
                this.state = 3875;
                this.match(PLSQLParser.ZONE);
                this.state = 3876;
                this.concatenation_wrapper();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        } else if(la_===2) {
            this.state = 3879;
            this.interval_expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interval_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_interval_expression;
    return this;
}

Interval_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interval_expressionContext.prototype.constructor = Interval_expressionContext;

Interval_expressionContext.prototype.DAY = function() {
    return this.getToken(PLSQLParser.DAY, 0);
};

Interval_expressionContext.prototype.TO = function() {
    return this.getToken(PLSQLParser.TO, 0);
};

Interval_expressionContext.prototype.SECOND = function() {
    return this.getToken(PLSQLParser.SECOND, 0);
};

Interval_expressionContext.prototype.concatenation_wrapper = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Concatenation_wrapperContext);
    } else {
        return this.getTypedRuleContext(Concatenation_wrapperContext,i);
    }
};

Interval_expressionContext.prototype.YEAR = function() {
    return this.getToken(PLSQLParser.YEAR, 0);
};

Interval_expressionContext.prototype.MONTH = function() {
    return this.getToken(PLSQLParser.MONTH, 0);
};

Interval_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterInterval_expression(this);
	}
};

Interval_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitInterval_expression(this);
	}
};




PLSQLParser.Interval_expressionContext = Interval_expressionContext;

PLSQLParser.prototype.interval_expression = function() {

    var localctx = new Interval_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, PLSQLParser.RULE_interval_expression);
    var _la = 0; // Token type
    try {
        this.state = 3906;
        switch(this._input.LA(1)) {
        case PLSQLParser.DAY:
            this.enterOuterAlt(localctx, 1);
            this.state = 3882;
            this.match(PLSQLParser.DAY);
            this.state = 3887;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.LEFT_PAREN) {
                this.state = 3883;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 3884;
                this.concatenation_wrapper();
                this.state = 3885;
                this.match(PLSQLParser.RIGHT_PAREN);
            }

            this.state = 3889;
            this.match(PLSQLParser.TO);
            this.state = 3890;
            this.match(PLSQLParser.SECOND);
            this.state = 3895;
            var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
            if(la_===1) {
                this.state = 3891;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 3892;
                this.concatenation_wrapper();
                this.state = 3893;
                this.match(PLSQLParser.RIGHT_PAREN);

            }
            break;
        case PLSQLParser.YEAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 3897;
            this.match(PLSQLParser.YEAR);
            this.state = 3902;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.LEFT_PAREN) {
                this.state = 3898;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 3899;
                this.concatenation_wrapper();
                this.state = 3900;
                this.match(PLSQLParser.RIGHT_PAREN);
            }

            this.state = 3904;
            this.match(PLSQLParser.TO);
            this.state = 3905;
            this.match(PLSQLParser.MONTH);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_expression;
    return this;
}

Model_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_expressionContext.prototype.constructor = Model_expressionContext;

Model_expressionContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

Model_expressionContext.prototype.model_expression_element = function() {
    return this.getTypedRuleContext(Model_expression_elementContext,0);
};

Model_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_expression(this);
	}
};

Model_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_expression(this);
	}
};




PLSQLParser.Model_expressionContext = Model_expressionContext;

PLSQLParser.prototype.model_expression = function() {

    var localctx = new Model_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, PLSQLParser.RULE_model_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3908;
        this.unary_expression();
        this.state = 3913;
        var la_ = this._interp.adaptivePredict(this._input,475,this._ctx);
        if(la_===1) {
            this.state = 3909;
            this.match(PLSQLParser.LEFT_BRACKET);
            this.state = 3910;
            this.model_expression_element();
            this.state = 3911;
            this.match(PLSQLParser.RIGHT_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_expression_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_model_expression_element;
    return this;
}

Model_expression_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_expression_elementContext.prototype.constructor = Model_expression_elementContext;

Model_expression_elementContext.prototype.ANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.ANY);
    } else {
        return this.getToken(PLSQLParser.ANY, i);
    }
};


Model_expression_elementContext.prototype.condition_wrapper = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Condition_wrapperContext);
    } else {
        return this.getTypedRuleContext(Condition_wrapperContext,i);
    }
};

Model_expression_elementContext.prototype.single_column_for_loop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Single_column_for_loopContext);
    } else {
        return this.getTypedRuleContext(Single_column_for_loopContext,i);
    }
};

Model_expression_elementContext.prototype.multi_column_for_loop = function() {
    return this.getTypedRuleContext(Multi_column_for_loopContext,0);
};

Model_expression_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterModel_expression_element(this);
	}
};

Model_expression_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitModel_expression_element(this);
	}
};




PLSQLParser.Model_expression_elementContext = Model_expression_elementContext;

PLSQLParser.prototype.model_expression_element = function() {

    var localctx = new Model_expression_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, PLSQLParser.RULE_model_expression_element);
    var _la = 0; // Token type
    try {
        this.state = 3938;
        var la_ = this._interp.adaptivePredict(this._input,480,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3917;
            var la_ = this._interp.adaptivePredict(this._input,476,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3915;
                this.match(PLSQLParser.ANY);
                break;

            case 2:
                this.state = 3916;
                this.condition_wrapper();
                break;

            }
            this.state = 3926;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 3919;
                this.match(PLSQLParser.COMMA);
                this.state = 3922;
                var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 3920;
                    this.match(PLSQLParser.ANY);
                    break;

                case 2:
                    this.state = 3921;
                    this.condition_wrapper();
                    break;

                }
                this.state = 3928;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3929;
            this.single_column_for_loop();
            this.state = 3934;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 3930;
                this.match(PLSQLParser.COMMA);
                this.state = 3931;
                this.single_column_for_loop();
                this.state = 3936;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3937;
            this.multi_column_for_loop();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Single_column_for_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_single_column_for_loop;
    this.ex1 = null; // ExpressionContext
    this.ex2 = null; // ExpressionContext
    this.ex3 = null; // ExpressionContext
    return this;
}

Single_column_for_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_column_for_loopContext.prototype.constructor = Single_column_for_loopContext;

Single_column_for_loopContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

Single_column_for_loopContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Single_column_for_loopContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Single_column_for_loopContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Single_column_for_loopContext.prototype.FROM = function() {
    return this.getToken(PLSQLParser.FROM, 0);
};

Single_column_for_loopContext.prototype.TO = function() {
    return this.getToken(PLSQLParser.TO, 0);
};

Single_column_for_loopContext.prototype.for_increment_decrement_type = function() {
    return this.getTypedRuleContext(For_increment_decrement_typeContext,0);
};

Single_column_for_loopContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Single_column_for_loopContext.prototype.for_like_part = function() {
    return this.getTypedRuleContext(For_like_partContext,0);
};

Single_column_for_loopContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSingle_column_for_loop(this);
	}
};

Single_column_for_loopContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSingle_column_for_loop(this);
	}
};




PLSQLParser.Single_column_for_loopContext = Single_column_for_loopContext;

PLSQLParser.prototype.single_column_for_loop = function() {

    var localctx = new Single_column_for_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, PLSQLParser.RULE_single_column_for_loop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3940;
        this.match(PLSQLParser.FOR);
        this.state = 3941;
        this.column_name();
        this.state = 3954;
        switch(this._input.LA(1)) {
        case PLSQLParser.IN:
            this.state = 3942;
            this.match(PLSQLParser.IN);
            this.state = 3943;
            this.expression_list();
            break;
        case PLSQLParser.FROM:
        case PLSQLParser.LIKE:
            this.state = 3945;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.LIKE) {
                this.state = 3944;
                this.for_like_part();
            }

            this.state = 3947;
            this.match(PLSQLParser.FROM);
            this.state = 3948;
            localctx.ex1 = this.expression();
            this.state = 3949;
            this.match(PLSQLParser.TO);
            this.state = 3950;
            localctx.ex2 = this.expression();
            this.state = 3951;
            this.for_increment_decrement_type();
            this.state = 3952;
            localctx.ex3 = this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_like_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_for_like_part;
    return this;
}

For_like_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_like_partContext.prototype.constructor = For_like_partContext;

For_like_partContext.prototype.LIKE = function() {
    return this.getToken(PLSQLParser.LIKE, 0);
};

For_like_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_like_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFor_like_part(this);
	}
};

For_like_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFor_like_part(this);
	}
};




PLSQLParser.For_like_partContext = For_like_partContext;

PLSQLParser.prototype.for_like_part = function() {

    var localctx = new For_like_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, PLSQLParser.RULE_for_like_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3956;
        this.match(PLSQLParser.LIKE);
        this.state = 3957;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_increment_decrement_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_for_increment_decrement_type;
    return this;
}

For_increment_decrement_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_increment_decrement_typeContext.prototype.constructor = For_increment_decrement_typeContext;

For_increment_decrement_typeContext.prototype.INCREMENT = function() {
    return this.getToken(PLSQLParser.INCREMENT, 0);
};

For_increment_decrement_typeContext.prototype.DECREMENT = function() {
    return this.getToken(PLSQLParser.DECREMENT, 0);
};

For_increment_decrement_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFor_increment_decrement_type(this);
	}
};

For_increment_decrement_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFor_increment_decrement_type(this);
	}
};




PLSQLParser.For_increment_decrement_typeContext = For_increment_decrement_typeContext;

PLSQLParser.prototype.for_increment_decrement_type = function() {

    var localctx = new For_increment_decrement_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, PLSQLParser.RULE_for_increment_decrement_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3959;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.DECREMENT || _la===PLSQLParser.INCREMENT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_column_for_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_multi_column_for_loop;
    return this;
}

Multi_column_for_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_column_for_loopContext.prototype.constructor = Multi_column_for_loopContext;

Multi_column_for_loopContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

Multi_column_for_loopContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Multi_column_for_loopContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Multi_column_for_loopContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Multi_column_for_loopContext.prototype.expression_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_listContext);
    } else {
        return this.getTypedRuleContext(Expression_listContext,i);
    }
};

Multi_column_for_loopContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMulti_column_for_loop(this);
	}
};

Multi_column_for_loopContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMulti_column_for_loop(this);
	}
};




PLSQLParser.Multi_column_for_loopContext = Multi_column_for_loopContext;

PLSQLParser.prototype.multi_column_for_loop = function() {

    var localctx = new Multi_column_for_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, PLSQLParser.RULE_multi_column_for_loop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3961;
        this.match(PLSQLParser.FOR);
        this.state = 3962;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3963;
        this.column_name();
        this.state = 3968;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 3964;
            this.match(PLSQLParser.COMMA);
            this.state = 3965;
            this.column_name();
            this.state = 3970;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3971;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 3972;
        this.match(PLSQLParser.IN);
        this.state = 3973;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 3986;
        var la_ = this._interp.adaptivePredict(this._input,485,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3974;
            this.subquery();
            break;

        case 2:
            this.state = 3975;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 3976;
            this.expression_list();
            this.state = 3981;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 3977;
                this.match(PLSQLParser.COMMA);
                this.state = 3978;
                this.expression_list();
                this.state = 3983;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3984;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        }
        this.state = 3988;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_unary_expression;
    return this;
}

Unary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_expressionContext.prototype.constructor = Unary_expressionContext;

Unary_expressionContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

Unary_expressionContext.prototype.PRIOR = function() {
    return this.getToken(PLSQLParser.PRIOR, 0);
};

Unary_expressionContext.prototype.CONNECT_BY_ROOT = function() {
    return this.getToken(PLSQLParser.CONNECT_BY_ROOT, 0);
};

Unary_expressionContext.prototype.NEW = function() {
    return this.getToken(PLSQLParser.NEW, 0);
};

Unary_expressionContext.prototype.DISTINCT = function() {
    return this.getToken(PLSQLParser.DISTINCT, 0);
};

Unary_expressionContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Unary_expressionContext.prototype.case_statement = function() {
    return this.getTypedRuleContext(Case_statementContext,0);
};

Unary_expressionContext.prototype.quantified_expression = function() {
    return this.getTypedRuleContext(Quantified_expressionContext,0);
};

Unary_expressionContext.prototype.standard_function = function() {
    return this.getTypedRuleContext(Standard_functionContext,0);
};

Unary_expressionContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

Unary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUnary_expression(this);
	}
};

Unary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUnary_expression(this);
	}
};




PLSQLParser.Unary_expressionContext = Unary_expressionContext;

PLSQLParser.prototype.unary_expression = function() {

    var localctx = new Unary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, PLSQLParser.RULE_unary_expression);
    try {
        this.state = 4008;
        var la_ = this._interp.adaptivePredict(this._input,486,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3990;
            this.match(PLSQLParser.MINUS_SIGN);
            this.state = 3991;
            this.unary_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3992;
            this.match(PLSQLParser.PLUS_SIGN);
            this.state = 3993;
            this.unary_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3994;
            this.match(PLSQLParser.PRIOR);
            this.state = 3995;
            this.unary_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3996;
            this.match(PLSQLParser.CONNECT_BY_ROOT);
            this.state = 3997;
            this.unary_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3998;
            this.match(PLSQLParser.NEW);
            this.state = 3999;
            this.unary_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4000;
            this.match(PLSQLParser.DISTINCT);
            this.state = 4001;
            this.unary_expression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4002;
            this.match(PLSQLParser.ALL);
            this.state = 4003;
            this.unary_expression();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 4004;
            this.case_statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 4005;
            this.quantified_expression();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 4006;
            this.standard_function();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 4007;
            this.atom();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_case_statement;
    return this;
}

Case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_statementContext.prototype.constructor = Case_statementContext;

Case_statementContext.prototype.searched_case_statement = function() {
    return this.getTypedRuleContext(Searched_case_statementContext,0);
};

Case_statementContext.prototype.simple_case_statement = function() {
    return this.getTypedRuleContext(Simple_case_statementContext,0);
};

Case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCase_statement(this);
	}
};

Case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCase_statement(this);
	}
};




PLSQLParser.Case_statementContext = Case_statementContext;

PLSQLParser.prototype.case_statement = function() {

    var localctx = new Case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, PLSQLParser.RULE_case_statement);
    try {
        this.state = 4012;
        var la_ = this._interp.adaptivePredict(this._input,487,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4010;
            this.searched_case_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4011;
            this.simple_case_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_simple_case_statement;
    this.ck1 = null; // Token
    return this;
}

Simple_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_case_statementContext.prototype.constructor = Simple_case_statementContext;

Simple_case_statementContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

Simple_case_statementContext.prototype.END = function() {
    return this.getToken(PLSQLParser.END, 0);
};

Simple_case_statementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.CASE);
    } else {
        return this.getToken(PLSQLParser.CASE, i);
    }
};


Simple_case_statementContext.prototype.label_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_nameContext);
    } else {
        return this.getTypedRuleContext(Label_nameContext,i);
    }
};

Simple_case_statementContext.prototype.simple_case_when_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_case_when_partContext);
    } else {
        return this.getTypedRuleContext(Simple_case_when_partContext,i);
    }
};

Simple_case_statementContext.prototype.case_else_part = function() {
    return this.getTypedRuleContext(Case_else_partContext,0);
};

Simple_case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSimple_case_statement(this);
	}
};

Simple_case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSimple_case_statement(this);
	}
};




PLSQLParser.Simple_case_statementContext = Simple_case_statementContext;

PLSQLParser.prototype.simple_case_statement = function() {

    var localctx = new Simple_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, PLSQLParser.RULE_simple_case_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4015;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (PLSQLParser.DEFAULTS - 99)) | (1 << (PLSQLParser.DEFERRED - 99)) | (1 << (PLSQLParser.DEFINER - 99)) | (1 << (PLSQLParser.DETERMINISTIC - 99)) | (1 << (PLSQLParser.DIMENSION - 99)) | (1 << (PLSQLParser.DISABLE - 99)) | (1 << (PLSQLParser.DISASSOCIATE - 99)) | (1 << (PLSQLParser.DOCUMENT - 99)) | (1 << (PLSQLParser.DOUBLE - 99)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (PLSQLParser.EACH - 99)) | (1 << (PLSQLParser.ELEMENT - 99)) | (1 << (PLSQLParser.EMPTY - 99)) | (1 << (PLSQLParser.ENABLE - 99)) | (1 << (PLSQLParser.ENCODING - 99)) | (1 << (PLSQLParser.ENTITYESCAPING - 99)) | (1 << (PLSQLParser.ERRORS - 99)) | (1 << (PLSQLParser.ESCAPE - 99)) | (1 << (PLSQLParser.EVALNAME - 99)) | (1 << (PLSQLParser.EXCEPTION - 99)) | (1 << (PLSQLParser.EXCEPTION_INIT - 99)) | (1 << (PLSQLParser.EXCEPTIONS - 99)) | (1 << (PLSQLParser.EXCLUDE - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 4014;
            this.label_name();
        }

        this.state = 4017;
        localctx.ck1 = this.match(PLSQLParser.CASE);
        this.state = 4018;
        this.atom();
        this.state = 4020; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4019;
            this.simple_case_when_part();
            this.state = 4022; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLSQLParser.WHEN);
        this.state = 4025;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ELSE) {
            this.state = 4024;
            this.case_else_part();
        }

        this.state = 4027;
        this.match(PLSQLParser.END);
        this.state = 4029;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.CASE) {
            this.state = 4028;
            this.match(PLSQLParser.CASE);
        }

        this.state = 4032;
        var la_ = this._interp.adaptivePredict(this._input,492,this._ctx);
        if(la_===1) {
            this.state = 4031;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_case_when_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_simple_case_when_part;
    return this;
}

Simple_case_when_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_case_when_partContext.prototype.constructor = Simple_case_when_partContext;

Simple_case_when_partContext.prototype.WHEN = function() {
    return this.getToken(PLSQLParser.WHEN, 0);
};

Simple_case_when_partContext.prototype.expression_wrapper = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_wrapperContext);
    } else {
        return this.getTypedRuleContext(Expression_wrapperContext,i);
    }
};

Simple_case_when_partContext.prototype.THEN = function() {
    return this.getToken(PLSQLParser.THEN, 0);
};

Simple_case_when_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Simple_case_when_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSimple_case_when_part(this);
	}
};

Simple_case_when_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSimple_case_when_part(this);
	}
};




PLSQLParser.Simple_case_when_partContext = Simple_case_when_partContext;

PLSQLParser.prototype.simple_case_when_part = function() {

    var localctx = new Simple_case_when_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, PLSQLParser.RULE_simple_case_when_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4034;
        this.match(PLSQLParser.WHEN);
        this.state = 4035;
        this.expression_wrapper();
        this.state = 4036;
        this.match(PLSQLParser.THEN);
        this.state = 4039;
        var la_ = this._interp.adaptivePredict(this._input,493,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4037;
            this.seq_of_statements();
            break;

        case 2:
            this.state = 4038;
            this.expression_wrapper();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_searched_case_statement;
    this.ck1 = null; // Token
    return this;
}

Searched_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_case_statementContext.prototype.constructor = Searched_case_statementContext;

Searched_case_statementContext.prototype.END = function() {
    return this.getToken(PLSQLParser.END, 0);
};

Searched_case_statementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.CASE);
    } else {
        return this.getToken(PLSQLParser.CASE, i);
    }
};


Searched_case_statementContext.prototype.label_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_nameContext);
    } else {
        return this.getTypedRuleContext(Label_nameContext,i);
    }
};

Searched_case_statementContext.prototype.searched_case_when_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Searched_case_when_partContext);
    } else {
        return this.getTypedRuleContext(Searched_case_when_partContext,i);
    }
};

Searched_case_statementContext.prototype.case_else_part = function() {
    return this.getTypedRuleContext(Case_else_partContext,0);
};

Searched_case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSearched_case_statement(this);
	}
};

Searched_case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSearched_case_statement(this);
	}
};




PLSQLParser.Searched_case_statementContext = Searched_case_statementContext;

PLSQLParser.prototype.searched_case_statement = function() {

    var localctx = new Searched_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, PLSQLParser.RULE_searched_case_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4042;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (PLSQLParser.DEFAULTS - 99)) | (1 << (PLSQLParser.DEFERRED - 99)) | (1 << (PLSQLParser.DEFINER - 99)) | (1 << (PLSQLParser.DETERMINISTIC - 99)) | (1 << (PLSQLParser.DIMENSION - 99)) | (1 << (PLSQLParser.DISABLE - 99)) | (1 << (PLSQLParser.DISASSOCIATE - 99)) | (1 << (PLSQLParser.DOCUMENT - 99)) | (1 << (PLSQLParser.DOUBLE - 99)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 99)) | (1 << (PLSQLParser.EACH - 99)) | (1 << (PLSQLParser.ELEMENT - 99)) | (1 << (PLSQLParser.EMPTY - 99)) | (1 << (PLSQLParser.ENABLE - 99)) | (1 << (PLSQLParser.ENCODING - 99)) | (1 << (PLSQLParser.ENTITYESCAPING - 99)) | (1 << (PLSQLParser.ERRORS - 99)) | (1 << (PLSQLParser.ESCAPE - 99)) | (1 << (PLSQLParser.EVALNAME - 99)) | (1 << (PLSQLParser.EXCEPTION - 99)) | (1 << (PLSQLParser.EXCEPTION_INIT - 99)) | (1 << (PLSQLParser.EXCEPTIONS - 99)) | (1 << (PLSQLParser.EXCLUDE - 99)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 4041;
            this.label_name();
        }

        this.state = 4044;
        localctx.ck1 = this.match(PLSQLParser.CASE);
        this.state = 4046; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4045;
            this.searched_case_when_part();
            this.state = 4048; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLSQLParser.WHEN);
        this.state = 4051;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ELSE) {
            this.state = 4050;
            this.case_else_part();
        }

        this.state = 4053;
        this.match(PLSQLParser.END);
        this.state = 4055;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.CASE) {
            this.state = 4054;
            this.match(PLSQLParser.CASE);
        }

        this.state = 4058;
        var la_ = this._interp.adaptivePredict(this._input,498,this._ctx);
        if(la_===1) {
            this.state = 4057;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_case_when_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_searched_case_when_part;
    return this;
}

Searched_case_when_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_case_when_partContext.prototype.constructor = Searched_case_when_partContext;

Searched_case_when_partContext.prototype.WHEN = function() {
    return this.getToken(PLSQLParser.WHEN, 0);
};

Searched_case_when_partContext.prototype.condition_wrapper = function() {
    return this.getTypedRuleContext(Condition_wrapperContext,0);
};

Searched_case_when_partContext.prototype.THEN = function() {
    return this.getToken(PLSQLParser.THEN, 0);
};

Searched_case_when_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Searched_case_when_partContext.prototype.expression_wrapper = function() {
    return this.getTypedRuleContext(Expression_wrapperContext,0);
};

Searched_case_when_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSearched_case_when_part(this);
	}
};

Searched_case_when_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSearched_case_when_part(this);
	}
};




PLSQLParser.Searched_case_when_partContext = Searched_case_when_partContext;

PLSQLParser.prototype.searched_case_when_part = function() {

    var localctx = new Searched_case_when_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, PLSQLParser.RULE_searched_case_when_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4060;
        this.match(PLSQLParser.WHEN);
        this.state = 4061;
        this.condition_wrapper();
        this.state = 4062;
        this.match(PLSQLParser.THEN);
        this.state = 4065;
        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4063;
            this.seq_of_statements();
            break;

        case 2:
            this.state = 4064;
            this.expression_wrapper();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_else_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_case_else_part;
    return this;
}

Case_else_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_else_partContext.prototype.constructor = Case_else_partContext;

Case_else_partContext.prototype.ELSE = function() {
    return this.getToken(PLSQLParser.ELSE, 0);
};

Case_else_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Case_else_partContext.prototype.expression_wrapper = function() {
    return this.getTypedRuleContext(Expression_wrapperContext,0);
};

Case_else_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCase_else_part(this);
	}
};

Case_else_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCase_else_part(this);
	}
};




PLSQLParser.Case_else_partContext = Case_else_partContext;

PLSQLParser.prototype.case_else_part = function() {

    var localctx = new Case_else_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, PLSQLParser.RULE_case_else_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4067;
        this.match(PLSQLParser.ELSE);
        this.state = 4070;
        var la_ = this._interp.adaptivePredict(this._input,500,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4068;
            this.seq_of_statements();
            break;

        case 2:
            this.state = 4069;
            this.expression_wrapper();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.table_element = function() {
    return this.getTypedRuleContext(Table_elementContext,0);
};

AtomContext.prototype.outer_join_sign = function() {
    return this.getTypedRuleContext(Outer_join_signContext,0);
};

AtomContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

AtomContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

AtomContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

AtomContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

AtomContext.prototype.expression_or_vector = function() {
    return this.getTypedRuleContext(Expression_or_vectorContext,0);
};

AtomContext.prototype.subquery_operation_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subquery_operation_partContext);
    } else {
        return this.getTypedRuleContext(Subquery_operation_partContext,i);
    }
};

AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAtom(this);
	}
};




PLSQLParser.AtomContext = AtomContext;

PLSQLParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, PLSQLParser.RULE_atom);
    try {
        this.state = 4092;
        var la_ = this._interp.adaptivePredict(this._input,503,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4072;
            this.table_element();
            this.state = 4073;
            this.outer_join_sign();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4075;
            this.bind_variable();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4076;
            this.constant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4077;
            this.general_element();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4078;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4090;
            var la_ = this._interp.adaptivePredict(this._input,502,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4079;
                this.subquery();
                this.state = 4080;
                this.match(PLSQLParser.RIGHT_PAREN);
                this.state = 4084;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,501,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 4081;
                        this.subquery_operation_part(); 
                    }
                    this.state = 4086;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,501,this._ctx);
                }

                break;

            case 2:
                this.state = 4087;
                this.expression_or_vector();
                this.state = 4088;
                this.match(PLSQLParser.RIGHT_PAREN);
                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_or_vectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_expression_or_vector;
    return this;
}

Expression_or_vectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_or_vectorContext.prototype.constructor = Expression_or_vectorContext;

Expression_or_vectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Expression_or_vectorContext.prototype.vector_expr = function() {
    return this.getTypedRuleContext(Vector_exprContext,0);
};

Expression_or_vectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterExpression_or_vector(this);
	}
};

Expression_or_vectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitExpression_or_vector(this);
	}
};




PLSQLParser.Expression_or_vectorContext = Expression_or_vectorContext;

PLSQLParser.prototype.expression_or_vector = function() {

    var localctx = new Expression_or_vectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, PLSQLParser.RULE_expression_or_vector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4094;
        this.expression();
        this.state = 4096;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.COMMA) {
            this.state = 4095;
            this.vector_expr();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Vector_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_vector_expr;
    return this;
}

Vector_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Vector_exprContext.prototype.constructor = Vector_exprContext;

Vector_exprContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Vector_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterVector_expr(this);
	}
};

Vector_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitVector_expr(this);
	}
};




PLSQLParser.Vector_exprContext = Vector_exprContext;

PLSQLParser.prototype.vector_expr = function() {

    var localctx = new Vector_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, PLSQLParser.RULE_vector_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4098;
        this.match(PLSQLParser.COMMA);
        this.state = 4099;
        this.expression();
        this.state = 4104;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 4100;
            this.match(PLSQLParser.COMMA);
            this.state = 4101;
            this.expression();
            this.state = 4106;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quantified_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_quantified_expression;
    return this;
}

Quantified_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quantified_expressionContext.prototype.constructor = Quantified_expressionContext;

Quantified_expressionContext.prototype.SOME = function() {
    return this.getToken(PLSQLParser.SOME, 0);
};

Quantified_expressionContext.prototype.EXISTS = function() {
    return this.getToken(PLSQLParser.EXISTS, 0);
};

Quantified_expressionContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Quantified_expressionContext.prototype.ANY = function() {
    return this.getToken(PLSQLParser.ANY, 0);
};

Quantified_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Quantified_expressionContext.prototype.expression_wrapper = function() {
    return this.getTypedRuleContext(Expression_wrapperContext,0);
};

Quantified_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterQuantified_expression(this);
	}
};

Quantified_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitQuantified_expression(this);
	}
};




PLSQLParser.Quantified_expressionContext = Quantified_expressionContext;

PLSQLParser.prototype.quantified_expression = function() {

    var localctx = new Quantified_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, PLSQLParser.RULE_quantified_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4107;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.ALL || _la===PLSQLParser.ANY || _la===PLSQLParser.EXISTS || _la===PLSQLParser.SOME)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 4116;
        var la_ = this._interp.adaptivePredict(this._input,506,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4108;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4109;
            this.subquery();
            this.state = 4110;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 4112;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4113;
            this.expression_wrapper();
            this.state = 4114;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Standard_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_standard_function;
    return this;
}

Standard_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Standard_functionContext.prototype.constructor = Standard_functionContext;

Standard_functionContext.prototype.over_clause_keyword = function() {
    return this.getTypedRuleContext(Over_clause_keywordContext,0);
};

Standard_functionContext.prototype.function_argument_analytic = function() {
    return this.getTypedRuleContext(Function_argument_analyticContext,0);
};

Standard_functionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Standard_functionContext.prototype.regular_id = function() {
    return this.getTypedRuleContext(Regular_idContext,0);
};

Standard_functionContext.prototype.function_argument_modeling = function() {
    return this.getTypedRuleContext(Function_argument_modelingContext,0);
};

Standard_functionContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Standard_functionContext.prototype.COUNT = function() {
    return this.getToken(PLSQLParser.COUNT, 0);
};

Standard_functionContext.prototype.concatenation_wrapper = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Concatenation_wrapperContext);
    } else {
        return this.getTypedRuleContext(Concatenation_wrapperContext,i);
    }
};

Standard_functionContext.prototype.DISTINCT = function() {
    return this.getToken(PLSQLParser.DISTINCT, 0);
};

Standard_functionContext.prototype.UNIQUE = function() {
    return this.getToken(PLSQLParser.UNIQUE, 0);
};

Standard_functionContext.prototype.ALL = function() {
    return this.getToken(PLSQLParser.ALL, 0);
};

Standard_functionContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Standard_functionContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Standard_functionContext.prototype.CAST = function() {
    return this.getToken(PLSQLParser.CAST, 0);
};

Standard_functionContext.prototype.XMLCAST = function() {
    return this.getToken(PLSQLParser.XMLCAST, 0);
};

Standard_functionContext.prototype.MULTISET = function() {
    return this.getToken(PLSQLParser.MULTISET, 0);
};

Standard_functionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Standard_functionContext.prototype.CHR = function() {
    return this.getToken(PLSQLParser.CHR, 0);
};

Standard_functionContext.prototype.USING = function() {
    return this.getToken(PLSQLParser.USING, 0);
};

Standard_functionContext.prototype.NCHAR_CS = function() {
    return this.getToken(PLSQLParser.NCHAR_CS, 0);
};

Standard_functionContext.prototype.COLLECT = function() {
    return this.getToken(PLSQLParser.COLLECT, 0);
};

Standard_functionContext.prototype.collect_order_by_part = function() {
    return this.getTypedRuleContext(Collect_order_by_partContext,0);
};

Standard_functionContext.prototype.within_or_over_clause_keyword = function() {
    return this.getTypedRuleContext(Within_or_over_clause_keywordContext,0);
};

Standard_functionContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

Standard_functionContext.prototype.within_or_over_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Within_or_over_partContext);
    } else {
        return this.getTypedRuleContext(Within_or_over_partContext,i);
    }
};

Standard_functionContext.prototype.DECOMPOSE = function() {
    return this.getToken(PLSQLParser.DECOMPOSE, 0);
};

Standard_functionContext.prototype.CANONICAL = function() {
    return this.getToken(PLSQLParser.CANONICAL, 0);
};

Standard_functionContext.prototype.COMPATIBILITY = function() {
    return this.getToken(PLSQLParser.COMPATIBILITY, 0);
};

Standard_functionContext.prototype.EXTRACT = function() {
    return this.getToken(PLSQLParser.EXTRACT, 0);
};

Standard_functionContext.prototype.FROM = function() {
    return this.getToken(PLSQLParser.FROM, 0);
};

Standard_functionContext.prototype.FIRST_VALUE = function() {
    return this.getToken(PLSQLParser.FIRST_VALUE, 0);
};

Standard_functionContext.prototype.LAST_VALUE = function() {
    return this.getToken(PLSQLParser.LAST_VALUE, 0);
};

Standard_functionContext.prototype.respect_or_ignore_nulls = function() {
    return this.getTypedRuleContext(Respect_or_ignore_nullsContext,0);
};

Standard_functionContext.prototype.standard_prediction_function_keyword = function() {
    return this.getTypedRuleContext(Standard_prediction_function_keywordContext,0);
};

Standard_functionContext.prototype.expression_wrapper = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_wrapperContext);
    } else {
        return this.getTypedRuleContext(Expression_wrapperContext,i);
    }
};

Standard_functionContext.prototype.cost_matrix_clause = function() {
    return this.getTypedRuleContext(Cost_matrix_clauseContext,0);
};

Standard_functionContext.prototype.TRANSLATE = function() {
    return this.getToken(PLSQLParser.TRANSLATE, 0);
};

Standard_functionContext.prototype.CHAR_CS = function() {
    return this.getToken(PLSQLParser.CHAR_CS, 0);
};

Standard_functionContext.prototype.TREAT = function() {
    return this.getToken(PLSQLParser.TREAT, 0);
};

Standard_functionContext.prototype.REF = function() {
    return this.getToken(PLSQLParser.REF, 0);
};

Standard_functionContext.prototype.TRIM = function() {
    return this.getToken(PLSQLParser.TRIM, 0);
};

Standard_functionContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Standard_functionContext.prototype.LEADING = function() {
    return this.getToken(PLSQLParser.LEADING, 0);
};

Standard_functionContext.prototype.TRAILING = function() {
    return this.getToken(PLSQLParser.TRAILING, 0);
};

Standard_functionContext.prototype.BOTH = function() {
    return this.getToken(PLSQLParser.BOTH, 0);
};

Standard_functionContext.prototype.XMLAGG = function() {
    return this.getToken(PLSQLParser.XMLAGG, 0);
};

Standard_functionContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Standard_functionContext.prototype.general_element_part = function() {
    return this.getTypedRuleContext(General_element_partContext,0);
};

Standard_functionContext.prototype.xml_multiuse_expression_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_multiuse_expression_elementContext);
    } else {
        return this.getTypedRuleContext(Xml_multiuse_expression_elementContext,i);
    }
};

Standard_functionContext.prototype.XMLCOLATTVAL = function() {
    return this.getToken(PLSQLParser.XMLCOLATTVAL, 0);
};

Standard_functionContext.prototype.XMLFOREST = function() {
    return this.getToken(PLSQLParser.XMLFOREST, 0);
};

Standard_functionContext.prototype.XMLELEMENT = function() {
    return this.getToken(PLSQLParser.XMLELEMENT, 0);
};

Standard_functionContext.prototype.xml_attributes_clause = function() {
    return this.getTypedRuleContext(Xml_attributes_clauseContext,0);
};

Standard_functionContext.prototype.ENTITYESCAPING = function() {
    return this.getToken(PLSQLParser.ENTITYESCAPING, 0);
};

Standard_functionContext.prototype.NOENTITYESCAPING = function() {
    return this.getToken(PLSQLParser.NOENTITYESCAPING, 0);
};

Standard_functionContext.prototype.NAME = function() {
    return this.getToken(PLSQLParser.NAME, 0);
};

Standard_functionContext.prototype.EVALNAME = function() {
    return this.getToken(PLSQLParser.EVALNAME, 0);
};

Standard_functionContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Standard_functionContext.prototype.XMLEXISTS = function() {
    return this.getToken(PLSQLParser.XMLEXISTS, 0);
};

Standard_functionContext.prototype.xml_passing_clause = function() {
    return this.getTypedRuleContext(Xml_passing_clauseContext,0);
};

Standard_functionContext.prototype.XMLPARSE = function() {
    return this.getToken(PLSQLParser.XMLPARSE, 0);
};

Standard_functionContext.prototype.DOCUMENT = function() {
    return this.getToken(PLSQLParser.DOCUMENT, 0);
};

Standard_functionContext.prototype.CONTENT = function() {
    return this.getToken(PLSQLParser.CONTENT, 0);
};

Standard_functionContext.prototype.WELLFORMED = function() {
    return this.getToken(PLSQLParser.WELLFORMED, 0);
};

Standard_functionContext.prototype.XMLPI = function() {
    return this.getToken(PLSQLParser.XMLPI, 0);
};

Standard_functionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Standard_functionContext.prototype.XMLQUERY = function() {
    return this.getToken(PLSQLParser.XMLQUERY, 0);
};

Standard_functionContext.prototype.RETURNING = function() {
    return this.getToken(PLSQLParser.RETURNING, 0);
};

Standard_functionContext.prototype.NULL = function() {
    return this.getToken(PLSQLParser.NULL, 0);
};

Standard_functionContext.prototype.ON = function() {
    return this.getToken(PLSQLParser.ON, 0);
};

Standard_functionContext.prototype.EMPTY = function() {
    return this.getToken(PLSQLParser.EMPTY, 0);
};

Standard_functionContext.prototype.XMLROOT = function() {
    return this.getToken(PLSQLParser.XMLROOT, 0);
};

Standard_functionContext.prototype.xmlroot_param_version_part = function() {
    return this.getTypedRuleContext(Xmlroot_param_version_partContext,0);
};

Standard_functionContext.prototype.xmlroot_param_standalone_part = function() {
    return this.getTypedRuleContext(Xmlroot_param_standalone_partContext,0);
};

Standard_functionContext.prototype.XMLSERIALIZE = function() {
    return this.getToken(PLSQLParser.XMLSERIALIZE, 0);
};

Standard_functionContext.prototype.xmlserialize_param_enconding_part = function() {
    return this.getTypedRuleContext(Xmlserialize_param_enconding_partContext,0);
};

Standard_functionContext.prototype.xmlserialize_param_version_part = function() {
    return this.getTypedRuleContext(Xmlserialize_param_version_partContext,0);
};

Standard_functionContext.prototype.xmlserialize_param_ident_part = function() {
    return this.getTypedRuleContext(Xmlserialize_param_ident_partContext,0);
};

Standard_functionContext.prototype.DEFAULTS = function() {
    return this.getToken(PLSQLParser.DEFAULTS, 0);
};

Standard_functionContext.prototype.HIDE = function() {
    return this.getToken(PLSQLParser.HIDE, 0);
};

Standard_functionContext.prototype.SHOW = function() {
    return this.getToken(PLSQLParser.SHOW, 0);
};

Standard_functionContext.prototype.XMLTABLE = function() {
    return this.getToken(PLSQLParser.XMLTABLE, 0);
};

Standard_functionContext.prototype.xml_namespaces_clause = function() {
    return this.getTypedRuleContext(Xml_namespaces_clauseContext,0);
};

Standard_functionContext.prototype.COLUMNS = function() {
    return this.getToken(PLSQLParser.COLUMNS, 0);
};

Standard_functionContext.prototype.xml_table_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_table_columnContext);
    } else {
        return this.getTypedRuleContext(Xml_table_columnContext,i);
    }
};

Standard_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterStandard_function(this);
	}
};

Standard_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitStandard_function(this);
	}
};




PLSQLParser.Standard_functionContext = Standard_functionContext;

PLSQLParser.prototype.standard_function = function() {

    var localctx = new Standard_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, PLSQLParser.RULE_standard_function);
    var _la = 0; // Token type
    try {
        this.state = 4429;
        var la_ = this._interp.adaptivePredict(this._input,558,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4118;
            this.over_clause_keyword();
            this.state = 4119;
            this.function_argument_analytic();
            this.state = 4121;
            var la_ = this._interp.adaptivePredict(this._input,507,this._ctx);
            if(la_===1) {
                this.state = 4120;
                this.over_clause();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4123;
            this.regular_id();
            this.state = 4124;
            this.function_argument_modeling();
            this.state = 4126;
            var la_ = this._interp.adaptivePredict(this._input,508,this._ctx);
            if(la_===1) {
                this.state = 4125;
                this.using_clause();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4128;
            this.match(PLSQLParser.COUNT);
            this.state = 4129;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4135;
            switch(this._input.LA(1)) {
            case PLSQLParser.ASTERISK:
                this.state = 4130;
                this.match(PLSQLParser.ASTERISK);
                break;
            case PLSQLParser.A_LETTER:
            case PLSQLParser.ADD:
            case PLSQLParser.AFTER:
            case PLSQLParser.AGENT:
            case PLSQLParser.AGGREGATE:
            case PLSQLParser.ALL:
            case PLSQLParser.ANALYZE:
            case PLSQLParser.ANY:
            case PLSQLParser.ARRAY:
            case PLSQLParser.ASSOCIATE:
            case PLSQLParser.AT:
            case PLSQLParser.ATTRIBUTE:
            case PLSQLParser.AUDIT:
            case PLSQLParser.AUTHID:
            case PLSQLParser.AUTO:
            case PLSQLParser.AUTOMATIC:
            case PLSQLParser.AUTONOMOUS_TRANSACTION:
            case PLSQLParser.BATCH:
            case PLSQLParser.BEFORE:
            case PLSQLParser.BFILE:
            case PLSQLParser.BINARY_DOUBLE:
            case PLSQLParser.BINARY_FLOAT:
            case PLSQLParser.BINARY_INTEGER:
            case PLSQLParser.BLOB:
            case PLSQLParser.BLOCK:
            case PLSQLParser.BODY:
            case PLSQLParser.BOOLEAN:
            case PLSQLParser.BOTH:
            case PLSQLParser.BULK:
            case PLSQLParser.BYTE:
            case PLSQLParser.C_LETTER:
            case PLSQLParser.CALL:
            case PLSQLParser.CANONICAL:
            case PLSQLParser.CASCADE:
            case PLSQLParser.CASE:
            case PLSQLParser.CAST:
            case PLSQLParser.CHAR:
            case PLSQLParser.CHAR_CS:
            case PLSQLParser.CHARACTER:
            case PLSQLParser.CHR:
            case PLSQLParser.CLOB:
            case PLSQLParser.CLOSE:
            case PLSQLParser.CLUSTER:
            case PLSQLParser.COLLECT:
            case PLSQLParser.COLUMNS:
            case PLSQLParser.COMMENT:
            case PLSQLParser.COMMIT:
            case PLSQLParser.COMMITTED:
            case PLSQLParser.COMPATIBILITY:
            case PLSQLParser.COMPILE:
            case PLSQLParser.COMPOUND:
            case PLSQLParser.CONNECT_BY_ROOT:
            case PLSQLParser.CONSTANT:
            case PLSQLParser.CONSTRAINT:
            case PLSQLParser.CONSTRAINTS:
            case PLSQLParser.CONSTRUCTOR:
            case PLSQLParser.CONTENT:
            case PLSQLParser.CONTEXT:
            case PLSQLParser.CONTINUE:
            case PLSQLParser.CONVERT:
            case PLSQLParser.CORRUPT_XID:
            case PLSQLParser.CORRUPT_XID_ALL:
            case PLSQLParser.COST:
            case PLSQLParser.COUNT:
            case PLSQLParser.CROSS:
            case PLSQLParser.CUBE:
            case PLSQLParser.CURRENT_USER:
            case PLSQLParser.CURSOR:
            case PLSQLParser.CUSTOMDATUM:
            case PLSQLParser.CYCLE:
            case PLSQLParser.DATA:
            case PLSQLParser.DATABASE:
            case PLSQLParser.DATE:
            case PLSQLParser.DAY:
            case PLSQLParser.DB_ROLE_CHANGE:
            case PLSQLParser.DBTIMEZONE:
            case PLSQLParser.DDL:
            case PLSQLParser.DEBUG:
            case PLSQLParser.DEC:
            case PLSQLParser.DECIMAL:
            case PLSQLParser.DECOMPOSE:
            case PLSQLParser.DECREMENT:
            case PLSQLParser.DEFAULT:
            case PLSQLParser.DEFAULTS:
            case PLSQLParser.DEFERRED:
            case PLSQLParser.DEFINER:
            case PLSQLParser.DETERMINISTIC:
            case PLSQLParser.DIMENSION:
            case PLSQLParser.DISABLE:
            case PLSQLParser.DISASSOCIATE:
            case PLSQLParser.DISTINCT:
            case PLSQLParser.DOCUMENT:
            case PLSQLParser.DOUBLE:
            case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
            case PLSQLParser.EACH:
            case PLSQLParser.ELEMENT:
            case PLSQLParser.EMPTY:
            case PLSQLParser.ENABLE:
            case PLSQLParser.ENCODING:
            case PLSQLParser.ENTITYESCAPING:
            case PLSQLParser.ERRORS:
            case PLSQLParser.ESCAPE:
            case PLSQLParser.EVALNAME:
            case PLSQLParser.EXCEPTION:
            case PLSQLParser.EXCEPTION_INIT:
            case PLSQLParser.EXCEPTIONS:
            case PLSQLParser.EXCLUDE:
            case PLSQLParser.EXECUTE:
            case PLSQLParser.EXISTS:
            case PLSQLParser.EXIT:
            case PLSQLParser.EXPLAIN:
            case PLSQLParser.EXTERNAL:
            case PLSQLParser.EXTRACT:
            case PLSQLParser.FAILURE:
            case PLSQLParser.FALSE:
            case PLSQLParser.FINAL:
            case PLSQLParser.FIRST:
            case PLSQLParser.FIRST_VALUE:
            case PLSQLParser.FLOAT:
            case PLSQLParser.FOLLOWING:
            case PLSQLParser.FOLLOWS:
            case PLSQLParser.FORALL:
            case PLSQLParser.FORCE:
            case PLSQLParser.FULL:
            case PLSQLParser.FUNCTION:
            case PLSQLParser.GROUPING:
            case PLSQLParser.HASH:
            case PLSQLParser.HIDE:
            case PLSQLParser.HOUR:
            case PLSQLParser.IGNORE:
            case PLSQLParser.IMMEDIATE:
            case PLSQLParser.INCLUDE:
            case PLSQLParser.INCLUDING:
            case PLSQLParser.INCREMENT:
            case PLSQLParser.INDENT:
            case PLSQLParser.INDEXED:
            case PLSQLParser.INDICATOR:
            case PLSQLParser.INDICES:
            case PLSQLParser.INFINITE:
            case PLSQLParser.INLINE:
            case PLSQLParser.INNER:
            case PLSQLParser.INOUT:
            case PLSQLParser.INSTANTIABLE:
            case PLSQLParser.INSTEAD:
            case PLSQLParser.INT:
            case PLSQLParser.INTEGER:
            case PLSQLParser.INTERVAL:
            case PLSQLParser.INVALIDATE:
            case PLSQLParser.ISOLATION:
            case PLSQLParser.ITERATE:
            case PLSQLParser.JAVA:
            case PLSQLParser.JOIN:
            case PLSQLParser.KEEP:
            case PLSQLParser.LANGUAGE:
            case PLSQLParser.LAST:
            case PLSQLParser.LAST_VALUE:
            case PLSQLParser.LEADING:
            case PLSQLParser.LEFT:
            case PLSQLParser.LEVEL:
            case PLSQLParser.LIBRARY:
            case PLSQLParser.LIKE2:
            case PLSQLParser.LIKE4:
            case PLSQLParser.LIKEC:
            case PLSQLParser.LIMIT:
            case PLSQLParser.LOCAL:
            case PLSQLParser.LOCKED:
            case PLSQLParser.LOG:
            case PLSQLParser.LOGOFF:
            case PLSQLParser.LOGON:
            case PLSQLParser.LONG:
            case PLSQLParser.LOOP:
            case PLSQLParser.MAIN:
            case PLSQLParser.MAP:
            case PLSQLParser.MATCHED:
            case PLSQLParser.MAXVALUE:
            case PLSQLParser.MEASURES:
            case PLSQLParser.MEMBER:
            case PLSQLParser.MERGE:
            case PLSQLParser.MINUTE:
            case PLSQLParser.MINVALUE:
            case PLSQLParser.MLSLABEL:
            case PLSQLParser.MODEL:
            case PLSQLParser.MODIFY:
            case PLSQLParser.MONTH:
            case PLSQLParser.MULTISET:
            case PLSQLParser.NAME:
            case PLSQLParser.NAN:
            case PLSQLParser.NATURAL:
            case PLSQLParser.NATURALN:
            case PLSQLParser.NAV:
            case PLSQLParser.NCHAR:
            case PLSQLParser.NCHAR_CS:
            case PLSQLParser.NCLOB:
            case PLSQLParser.NESTED:
            case PLSQLParser.NEW:
            case PLSQLParser.NO:
            case PLSQLParser.NOAUDIT:
            case PLSQLParser.NOCOPY:
            case PLSQLParser.NOCYCLE:
            case PLSQLParser.NOENTITYESCAPING:
            case PLSQLParser.NONE:
            case PLSQLParser.NOSCHEMACHECK:
            case PLSQLParser.NULL:
            case PLSQLParser.NULLS:
            case PLSQLParser.NUMBER:
            case PLSQLParser.NUMERIC:
            case PLSQLParser.NVARCHAR2:
            case PLSQLParser.OBJECT:
            case PLSQLParser.OFF:
            case PLSQLParser.OID:
            case PLSQLParser.OLD:
            case PLSQLParser.ONLY:
            case PLSQLParser.OPEN:
            case PLSQLParser.ORADATA:
            case PLSQLParser.ORDINALITY:
            case PLSQLParser.OSERROR:
            case PLSQLParser.OUT:
            case PLSQLParser.OUTER:
            case PLSQLParser.OVER:
            case PLSQLParser.OVERRIDING:
            case PLSQLParser.PACKAGE:
            case PLSQLParser.PARALLEL_ENABLE:
            case PLSQLParser.PARAMETERS:
            case PLSQLParser.PARENT:
            case PLSQLParser.PARTITION:
            case PLSQLParser.PASSING:
            case PLSQLParser.PATH:
            case PLSQLParser.PIPELINED:
            case PLSQLParser.PLAN:
            case PLSQLParser.PLS_INTEGER:
            case PLSQLParser.POSITIVE:
            case PLSQLParser.POSITIVEN:
            case PLSQLParser.PRAGMA:
            case PLSQLParser.PRECEDING:
            case PLSQLParser.PRECISION:
            case PLSQLParser.PRESENT:
            case PLSQLParser.PRIOR:
            case PLSQLParser.RAISE:
            case PLSQLParser.RANGE:
            case PLSQLParser.RAW:
            case PLSQLParser.READ:
            case PLSQLParser.REAL:
            case PLSQLParser.RECORD:
            case PLSQLParser.REF:
            case PLSQLParser.REFERENCE:
            case PLSQLParser.REFERENCING:
            case PLSQLParser.REJECT:
            case PLSQLParser.RELIES_ON:
            case PLSQLParser.RENAME:
            case PLSQLParser.REPLACE:
            case PLSQLParser.RESPECT:
            case PLSQLParser.RESTRICT_REFERENCES:
            case PLSQLParser.RESULT:
            case PLSQLParser.RESULT_CACHE:
            case PLSQLParser.RETURN:
            case PLSQLParser.RETURNING:
            case PLSQLParser.REUSE:
            case PLSQLParser.REVERSE:
            case PLSQLParser.RIGHT:
            case PLSQLParser.ROLLBACK:
            case PLSQLParser.ROLLUP:
            case PLSQLParser.ROW:
            case PLSQLParser.ROWID:
            case PLSQLParser.ROWS:
            case PLSQLParser.RULES:
            case PLSQLParser.SAMPLE:
            case PLSQLParser.SAVE:
            case PLSQLParser.SAVEPOINT:
            case PLSQLParser.SCHEMA:
            case PLSQLParser.SCHEMACHECK:
            case PLSQLParser.SCN:
            case PLSQLParser.SECOND:
            case PLSQLParser.SEED:
            case PLSQLParser.SEGMENT:
            case PLSQLParser.SELF:
            case PLSQLParser.SEQUENTIAL:
            case PLSQLParser.SERIALIZABLE:
            case PLSQLParser.SERIALLY_REUSABLE:
            case PLSQLParser.SERVERERROR:
            case PLSQLParser.SESSIONTIMEZONE:
            case PLSQLParser.SET:
            case PLSQLParser.SETS:
            case PLSQLParser.SETTINGS:
            case PLSQLParser.SHOW:
            case PLSQLParser.SHUTDOWN:
            case PLSQLParser.SIBLINGS:
            case PLSQLParser.SIGNTYPE:
            case PLSQLParser.SIMPLE_INTEGER:
            case PLSQLParser.SINGLE:
            case PLSQLParser.SKIP:
            case PLSQLParser.SMALLINT:
            case PLSQLParser.SNAPSHOT:
            case PLSQLParser.SOME:
            case PLSQLParser.SPECIFICATION:
            case PLSQLParser.SQLDATA:
            case PLSQLParser.SQLERROR:
            case PLSQLParser.STANDALONE:
            case PLSQLParser.STARTUP:
            case PLSQLParser.STATEMENT:
            case PLSQLParser.STATEMENT_ID:
            case PLSQLParser.STATIC:
            case PLSQLParser.STATISTICS:
            case PLSQLParser.STRING:
            case PLSQLParser.SUBMULTISET:
            case PLSQLParser.SUBPARTITION:
            case PLSQLParser.SUBSTITUTABLE:
            case PLSQLParser.SUBTYPE:
            case PLSQLParser.SUCCESS:
            case PLSQLParser.SUSPEND:
            case PLSQLParser.TIME:
            case PLSQLParser.TIMESTAMP:
            case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
            case PLSQLParser.TIMEZONE_ABBR:
            case PLSQLParser.TIMEZONE_HOUR:
            case PLSQLParser.TIMEZONE_MINUTE:
            case PLSQLParser.TIMEZONE_REGION:
            case PLSQLParser.TRAILING:
            case PLSQLParser.TRANSACTION:
            case PLSQLParser.TRANSLATE:
            case PLSQLParser.TREAT:
            case PLSQLParser.TRIGGER:
            case PLSQLParser.TRIM:
            case PLSQLParser.TRUE:
            case PLSQLParser.TRUNCATE:
            case PLSQLParser.TYPE:
            case PLSQLParser.UNBOUNDED:
            case PLSQLParser.UNDER:
            case PLSQLParser.UNIQUE:
            case PLSQLParser.UNLIMITED:
            case PLSQLParser.UNTIL:
            case PLSQLParser.UPDATED:
            case PLSQLParser.UPSERT:
            case PLSQLParser.UROWID:
            case PLSQLParser.USE:
            case PLSQLParser.VALIDATE:
            case PLSQLParser.VALUE:
            case PLSQLParser.VARCHAR:
            case PLSQLParser.VARCHAR2:
            case PLSQLParser.VARIABLE:
            case PLSQLParser.VARRAY:
            case PLSQLParser.VARYING:
            case PLSQLParser.VERSION:
            case PLSQLParser.VERSIONS:
            case PLSQLParser.WAIT:
            case PLSQLParser.WARNING:
            case PLSQLParser.WELLFORMED:
            case PLSQLParser.WHENEVER:
            case PLSQLParser.WHILE:
            case PLSQLParser.WITHIN:
            case PLSQLParser.WORK:
            case PLSQLParser.WRITE:
            case PLSQLParser.XML:
            case PLSQLParser.XMLAGG:
            case PLSQLParser.XMLATTRIBUTES:
            case PLSQLParser.XMLCAST:
            case PLSQLParser.XMLCOLATTVAL:
            case PLSQLParser.XMLELEMENT:
            case PLSQLParser.XMLEXISTS:
            case PLSQLParser.XMLFOREST:
            case PLSQLParser.XMLNAMESPACES:
            case PLSQLParser.XMLPARSE:
            case PLSQLParser.XMLPI:
            case PLSQLParser.XMLQUERY:
            case PLSQLParser.XMLROOT:
            case PLSQLParser.XMLSERIALIZE:
            case PLSQLParser.XMLTABLE:
            case PLSQLParser.YEAR:
            case PLSQLParser.YES:
            case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
            case PLSQLParser.ZONE:
            case PLSQLParser.PREDICTION:
            case PLSQLParser.PREDICTION_BOUNDS:
            case PLSQLParser.PREDICTION_COST:
            case PLSQLParser.PREDICTION_DETAILS:
            case PLSQLParser.PREDICTION_PROBABILITY:
            case PLSQLParser.PREDICTION_SET:
            case PLSQLParser.CUME_DIST:
            case PLSQLParser.DENSE_RANK:
            case PLSQLParser.LISTAGG:
            case PLSQLParser.PERCENT_RANK:
            case PLSQLParser.PERCENTILE_CONT:
            case PLSQLParser.PERCENTILE_DISC:
            case PLSQLParser.RANK:
            case PLSQLParser.AVG:
            case PLSQLParser.CORR:
            case PLSQLParser.LAG:
            case PLSQLParser.LEAD:
            case PLSQLParser.MAX:
            case PLSQLParser.MEDIAN:
            case PLSQLParser.MIN:
            case PLSQLParser.NTILE:
            case PLSQLParser.RATIO_TO_REPORT:
            case PLSQLParser.ROW_NUMBER:
            case PLSQLParser.SUM:
            case PLSQLParser.VARIANCE:
            case PLSQLParser.REGR_:
            case PLSQLParser.STDDEV:
            case PLSQLParser.VAR_:
            case PLSQLParser.COVAR_:
            case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
            case PLSQLParser.UNSIGNED_INTEGER:
            case PLSQLParser.APPROXIMATE_NUM_LIT:
            case PLSQLParser.CHAR_STRING:
            case PLSQLParser.DELIMITED_ID:
            case PLSQLParser.LEFT_PAREN:
            case PLSQLParser.PLUS_SIGN:
            case PLSQLParser.MINUS_SIGN:
            case PLSQLParser.BINDVAR:
            case PLSQLParser.COLON:
            case PLSQLParser.INTRODUCER:
            case PLSQLParser.REGULAR_ID:
                this.state = 4132;
                var la_ = this._interp.adaptivePredict(this._input,509,this._ctx);
                if(la_===1) {
                    this.state = 4131;
                    _la = this._input.LA(1);
                    if(!(_la===PLSQLParser.ALL || _la===PLSQLParser.DISTINCT || _la===PLSQLParser.UNIQUE)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }

                }
                this.state = 4134;
                this.concatenation_wrapper();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4137;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4139;
            var la_ = this._interp.adaptivePredict(this._input,511,this._ctx);
            if(la_===1) {
                this.state = 4138;
                this.over_clause();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4141;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.CAST || _la===PLSQLParser.XMLCAST)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 4142;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4149;
            var la_ = this._interp.adaptivePredict(this._input,512,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4143;
                this.match(PLSQLParser.MULTISET);
                this.state = 4144;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 4145;
                this.subquery();
                this.state = 4146;
                this.match(PLSQLParser.RIGHT_PAREN);
                break;

            case 2:
                this.state = 4148;
                this.concatenation_wrapper();
                break;

            }
            this.state = 4151;
            this.match(PLSQLParser.AS);
            this.state = 4152;
            this.type_spec();
            this.state = 4153;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4155;
            this.match(PLSQLParser.CHR);
            this.state = 4156;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4157;
            this.concatenation_wrapper();
            this.state = 4158;
            this.match(PLSQLParser.USING);
            this.state = 4159;
            this.match(PLSQLParser.NCHAR_CS);
            this.state = 4160;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4162;
            this.match(PLSQLParser.COLLECT);
            this.state = 4163;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4165;
            var la_ = this._interp.adaptivePredict(this._input,513,this._ctx);
            if(la_===1) {
                this.state = 4164;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.DISTINCT || _la===PLSQLParser.UNIQUE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }

            }
            this.state = 4167;
            this.concatenation_wrapper();
            this.state = 4169;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.ORDER) {
                this.state = 4168;
                this.collect_order_by_part();
            }

            this.state = 4171;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4173;
            this.within_or_over_clause_keyword();
            this.state = 4174;
            this.function_argument();
            this.state = 4176; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 4175;
            		this.within_or_over_part();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 4178; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,515, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 4180;
            this.match(PLSQLParser.DECOMPOSE);
            this.state = 4181;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4182;
            this.concatenation_wrapper();
            this.state = 4184;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.CANONICAL || _la===PLSQLParser.COMPATIBILITY) {
                this.state = 4183;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.CANONICAL || _la===PLSQLParser.COMPATIBILITY)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 4186;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 4188;
            this.match(PLSQLParser.EXTRACT);
            this.state = 4189;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4190;
            this.regular_id();
            this.state = 4191;
            this.match(PLSQLParser.FROM);
            this.state = 4192;
            this.concatenation_wrapper();
            this.state = 4193;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 4195;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.FIRST_VALUE || _la===PLSQLParser.LAST_VALUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 4196;
            this.function_argument_analytic();
            this.state = 4198;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.IGNORE || _la===PLSQLParser.RESPECT) {
                this.state = 4197;
                this.respect_or_ignore_nulls();
            }

            this.state = 4200;
            this.over_clause();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 4202;
            this.standard_prediction_function_keyword();
            this.state = 4203;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4204;
            this.expression_wrapper();
            this.state = 4209;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 4205;
                this.match(PLSQLParser.COMMA);
                this.state = 4206;
                this.expression_wrapper();
                this.state = 4211;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4213;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.COST) {
                this.state = 4212;
                this.cost_matrix_clause();
            }

            this.state = 4216;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.USING) {
                this.state = 4215;
                this.using_clause();
            }

            this.state = 4218;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 4220;
            this.match(PLSQLParser.TRANSLATE);
            this.state = 4221;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4222;
            this.expression_wrapper();
            this.state = 4225;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.USING) {
                this.state = 4223;
                this.match(PLSQLParser.USING);
                this.state = 4224;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.CHAR_CS || _la===PLSQLParser.NCHAR_CS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 4231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 4227;
                this.match(PLSQLParser.COMMA);
                this.state = 4228;
                this.expression_wrapper();
                this.state = 4233;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4234;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 4236;
            this.match(PLSQLParser.TREAT);
            this.state = 4237;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4238;
            this.expression_wrapper();
            this.state = 4239;
            this.match(PLSQLParser.AS);
            this.state = 4241;
            var la_ = this._interp.adaptivePredict(this._input,523,this._ctx);
            if(la_===1) {
                this.state = 4240;
                this.match(PLSQLParser.REF);

            }
            this.state = 4243;
            this.type_spec();
            this.state = 4244;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 4246;
            this.match(PLSQLParser.TRIM);
            this.state = 4247;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4255;
            var la_ = this._interp.adaptivePredict(this._input,526,this._ctx);
            if(la_===1) {
                this.state = 4249;
                _la = this._input.LA(1);
                if(_la===PLSQLParser.BOTH || _la===PLSQLParser.LEADING || _la===PLSQLParser.TRAILING) {
                    this.state = 4248;
                    _la = this._input.LA(1);
                    if(!(_la===PLSQLParser.BOTH || _la===PLSQLParser.LEADING || _la===PLSQLParser.TRAILING)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                }

                this.state = 4252;
                _la = this._input.LA(1);
                if(_la===PLSQLParser.NATIONAL_CHAR_STRING_LIT || _la===PLSQLParser.CHAR_STRING) {
                    this.state = 4251;
                    this.quoted_string();
                }

                this.state = 4254;
                this.match(PLSQLParser.FROM);

            }
            this.state = 4257;
            this.concatenation_wrapper();
            this.state = 4258;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 4260;
            this.match(PLSQLParser.XMLAGG);
            this.state = 4261;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4262;
            this.expression_wrapper();
            this.state = 4264;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.ORDER) {
                this.state = 4263;
                this.order_by_clause();
            }

            this.state = 4266;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4269;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4267;
                this.match(PLSQLParser.PERIOD);
                this.state = 4268;
                this.general_element_part();
            }

            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 4271;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.XMLCOLATTVAL || _la===PLSQLParser.XMLFOREST)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 4272;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4273;
            this.xml_multiuse_expression_element();
            this.state = 4278;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 4274;
                this.match(PLSQLParser.COMMA);
                this.state = 4275;
                this.xml_multiuse_expression_element();
                this.state = 4280;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4281;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4284;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4282;
                this.match(PLSQLParser.PERIOD);
                this.state = 4283;
                this.general_element_part();
            }

            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 4286;
            this.match(PLSQLParser.XMLELEMENT);
            this.state = 4287;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4289;
            var la_ = this._interp.adaptivePredict(this._input,531,this._ctx);
            if(la_===1) {
                this.state = 4288;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.ENTITYESCAPING || _la===PLSQLParser.NOENTITYESCAPING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }

            }
            this.state = 4292;
            var la_ = this._interp.adaptivePredict(this._input,532,this._ctx);
            if(la_===1) {
                this.state = 4291;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.EVALNAME || _la===PLSQLParser.NAME)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }

            }
            this.state = 4294;
            this.expression_wrapper();
            this.state = 4297;
            var la_ = this._interp.adaptivePredict(this._input,533,this._ctx);
            if(la_===1) {
                this.state = 4295;
                this.match(PLSQLParser.COMMA);
                this.state = 4296;
                this.xml_attributes_clause();

            }
            this.state = 4306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 4299;
                this.match(PLSQLParser.COMMA);
                this.state = 4300;
                this.expression_wrapper();
                this.state = 4302;
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.AS) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 450)))) !== 0) || ((((_la - 484)) & ~0x1f) == 0 && ((1 << (_la - 484)) & ((1 << (PLSQLParser.CHAR_STRING - 484)) | (1 << (PLSQLParser.DELIMITED_ID - 484)) | (1 << (PLSQLParser.INTRODUCER - 484)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
                    this.state = 4301;
                    this.column_alias();
                }

                this.state = 4308;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4309;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4312;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4310;
                this.match(PLSQLParser.PERIOD);
                this.state = 4311;
                this.general_element_part();
            }

            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 4314;
            this.match(PLSQLParser.XMLEXISTS);
            this.state = 4315;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4316;
            this.expression_wrapper();
            this.state = 4318;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PASSING) {
                this.state = 4317;
                this.xml_passing_clause();
            }

            this.state = 4320;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 4322;
            this.match(PLSQLParser.XMLPARSE);
            this.state = 4323;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4324;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.CONTENT || _la===PLSQLParser.DOCUMENT)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 4325;
            this.concatenation_wrapper();
            this.state = 4327;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.WELLFORMED) {
                this.state = 4326;
                this.match(PLSQLParser.WELLFORMED);
            }

            this.state = 4329;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4332;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4330;
                this.match(PLSQLParser.PERIOD);
                this.state = 4331;
                this.general_element_part();
            }

            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 4334;
            this.match(PLSQLParser.XMLPI);
            this.state = 4335;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4340;
            switch(this._input.LA(1)) {
            case PLSQLParser.NAME:
                this.state = 4336;
                this.match(PLSQLParser.NAME);
                this.state = 4337;
                this.id();
                break;
            case PLSQLParser.EVALNAME:
                this.state = 4338;
                this.match(PLSQLParser.EVALNAME);
                this.state = 4339;
                this.concatenation_wrapper();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4344;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.COMMA) {
                this.state = 4342;
                this.match(PLSQLParser.COMMA);
                this.state = 4343;
                this.concatenation_wrapper();
            }

            this.state = 4346;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4349;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4347;
                this.match(PLSQLParser.PERIOD);
                this.state = 4348;
                this.general_element_part();
            }

            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 4351;
            this.match(PLSQLParser.XMLQUERY);
            this.state = 4352;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4353;
            this.concatenation_wrapper();
            this.state = 4355;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PASSING) {
                this.state = 4354;
                this.xml_passing_clause();
            }

            this.state = 4357;
            this.match(PLSQLParser.RETURNING);
            this.state = 4358;
            this.match(PLSQLParser.CONTENT);
            this.state = 4362;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.NULL) {
                this.state = 4359;
                this.match(PLSQLParser.NULL);
                this.state = 4360;
                this.match(PLSQLParser.ON);
                this.state = 4361;
                this.match(PLSQLParser.EMPTY);
            }

            this.state = 4364;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4367;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4365;
                this.match(PLSQLParser.PERIOD);
                this.state = 4366;
                this.general_element_part();
            }

            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 4369;
            this.match(PLSQLParser.XMLROOT);
            this.state = 4370;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4371;
            this.concatenation_wrapper();
            this.state = 4372;
            this.xmlroot_param_version_part();
            this.state = 4375;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.COMMA) {
                this.state = 4373;
                this.match(PLSQLParser.COMMA);
                this.state = 4374;
                this.xmlroot_param_standalone_part();
            }

            this.state = 4377;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4380;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4378;
                this.match(PLSQLParser.PERIOD);
                this.state = 4379;
                this.general_element_part();
            }

            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 4382;
            this.match(PLSQLParser.XMLSERIALIZE);
            this.state = 4383;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4384;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.CONTENT || _la===PLSQLParser.DOCUMENT)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 4385;
            this.concatenation_wrapper();
            this.state = 4388;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.AS) {
                this.state = 4386;
                this.match(PLSQLParser.AS);
                this.state = 4387;
                this.type_spec();
            }

            this.state = 4391;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.ENCODING) {
                this.state = 4390;
                this.xmlserialize_param_enconding_part();
            }

            this.state = 4394;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.VERSION) {
                this.state = 4393;
                this.xmlserialize_param_version_part();
            }

            this.state = 4397;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.INDENT || _la===PLSQLParser.NO) {
                this.state = 4396;
                this.xmlserialize_param_ident_part();
            }

            this.state = 4401;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.HIDE || _la===PLSQLParser.SHOW) {
                this.state = 4399;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.HIDE || _la===PLSQLParser.SHOW)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 4400;
                this.match(PLSQLParser.DEFAULTS);
            }

            this.state = 4403;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4406;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4404;
                this.match(PLSQLParser.PERIOD);
                this.state = 4405;
                this.general_element_part();
            }

            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 4408;
            this.match(PLSQLParser.XMLTABLE);
            this.state = 4409;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4411;
            var la_ = this._interp.adaptivePredict(this._input,554,this._ctx);
            if(la_===1) {
                this.state = 4410;
                this.xml_namespaces_clause();

            }
            this.state = 4413;
            this.concatenation_wrapper();
            this.state = 4415;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PASSING) {
                this.state = 4414;
                this.xml_passing_clause();
            }

            this.state = 4422;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.COLUMNS) {
                this.state = 4417;
                this.match(PLSQLParser.COLUMNS);
                this.state = 4418;
                this.xml_table_column();

                this.state = 4419;
                this.match(PLSQLParser.COMMA);
                this.state = 4420;
                this.xml_table_column();
            }

            this.state = 4424;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4427;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4425;
                this.match(PLSQLParser.PERIOD);
                this.state = 4426;
                this.general_element_part();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Over_clause_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_over_clause_keyword;
    return this;
}

Over_clause_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Over_clause_keywordContext.prototype.constructor = Over_clause_keywordContext;

Over_clause_keywordContext.prototype.AVG = function() {
    return this.getToken(PLSQLParser.AVG, 0);
};

Over_clause_keywordContext.prototype.CORR = function() {
    return this.getToken(PLSQLParser.CORR, 0);
};

Over_clause_keywordContext.prototype.LAG = function() {
    return this.getToken(PLSQLParser.LAG, 0);
};

Over_clause_keywordContext.prototype.LEAD = function() {
    return this.getToken(PLSQLParser.LEAD, 0);
};

Over_clause_keywordContext.prototype.MAX = function() {
    return this.getToken(PLSQLParser.MAX, 0);
};

Over_clause_keywordContext.prototype.MEDIAN = function() {
    return this.getToken(PLSQLParser.MEDIAN, 0);
};

Over_clause_keywordContext.prototype.MIN = function() {
    return this.getToken(PLSQLParser.MIN, 0);
};

Over_clause_keywordContext.prototype.NTILE = function() {
    return this.getToken(PLSQLParser.NTILE, 0);
};

Over_clause_keywordContext.prototype.RATIO_TO_REPORT = function() {
    return this.getToken(PLSQLParser.RATIO_TO_REPORT, 0);
};

Over_clause_keywordContext.prototype.ROW_NUMBER = function() {
    return this.getToken(PLSQLParser.ROW_NUMBER, 0);
};

Over_clause_keywordContext.prototype.SUM = function() {
    return this.getToken(PLSQLParser.SUM, 0);
};

Over_clause_keywordContext.prototype.VARIANCE = function() {
    return this.getToken(PLSQLParser.VARIANCE, 0);
};

Over_clause_keywordContext.prototype.REGR_ = function() {
    return this.getToken(PLSQLParser.REGR_, 0);
};

Over_clause_keywordContext.prototype.STDDEV = function() {
    return this.getToken(PLSQLParser.STDDEV, 0);
};

Over_clause_keywordContext.prototype.VAR_ = function() {
    return this.getToken(PLSQLParser.VAR_, 0);
};

Over_clause_keywordContext.prototype.COVAR_ = function() {
    return this.getToken(PLSQLParser.COVAR_, 0);
};

Over_clause_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterOver_clause_keyword(this);
	}
};

Over_clause_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitOver_clause_keyword(this);
	}
};




PLSQLParser.Over_clause_keywordContext = Over_clause_keywordContext;

PLSQLParser.prototype.over_clause_keyword = function() {

    var localctx = new Over_clause_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, PLSQLParser.RULE_over_clause_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4431;
        _la = this._input.LA(1);
        if(!(((((_la - 461)) & ~0x1f) == 0 && ((1 << (_la - 461)) & ((1 << (PLSQLParser.AVG - 461)) | (1 << (PLSQLParser.CORR - 461)) | (1 << (PLSQLParser.LAG - 461)) | (1 << (PLSQLParser.LEAD - 461)) | (1 << (PLSQLParser.MAX - 461)) | (1 << (PLSQLParser.MEDIAN - 461)) | (1 << (PLSQLParser.MIN - 461)) | (1 << (PLSQLParser.NTILE - 461)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 461)) | (1 << (PLSQLParser.ROW_NUMBER - 461)) | (1 << (PLSQLParser.SUM - 461)) | (1 << (PLSQLParser.VARIANCE - 461)) | (1 << (PLSQLParser.REGR_ - 461)) | (1 << (PLSQLParser.STDDEV - 461)) | (1 << (PLSQLParser.VAR_ - 461)) | (1 << (PLSQLParser.COVAR_ - 461)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Within_or_over_clause_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_within_or_over_clause_keyword;
    return this;
}

Within_or_over_clause_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Within_or_over_clause_keywordContext.prototype.constructor = Within_or_over_clause_keywordContext;

Within_or_over_clause_keywordContext.prototype.CUME_DIST = function() {
    return this.getToken(PLSQLParser.CUME_DIST, 0);
};

Within_or_over_clause_keywordContext.prototype.DENSE_RANK = function() {
    return this.getToken(PLSQLParser.DENSE_RANK, 0);
};

Within_or_over_clause_keywordContext.prototype.LISTAGG = function() {
    return this.getToken(PLSQLParser.LISTAGG, 0);
};

Within_or_over_clause_keywordContext.prototype.PERCENT_RANK = function() {
    return this.getToken(PLSQLParser.PERCENT_RANK, 0);
};

Within_or_over_clause_keywordContext.prototype.PERCENTILE_CONT = function() {
    return this.getToken(PLSQLParser.PERCENTILE_CONT, 0);
};

Within_or_over_clause_keywordContext.prototype.PERCENTILE_DISC = function() {
    return this.getToken(PLSQLParser.PERCENTILE_DISC, 0);
};

Within_or_over_clause_keywordContext.prototype.RANK = function() {
    return this.getToken(PLSQLParser.RANK, 0);
};

Within_or_over_clause_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterWithin_or_over_clause_keyword(this);
	}
};

Within_or_over_clause_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitWithin_or_over_clause_keyword(this);
	}
};




PLSQLParser.Within_or_over_clause_keywordContext = Within_or_over_clause_keywordContext;

PLSQLParser.prototype.within_or_over_clause_keyword = function() {

    var localctx = new Within_or_over_clause_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, PLSQLParser.RULE_within_or_over_clause_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4433;
        _la = this._input.LA(1);
        if(!(((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Standard_prediction_function_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_standard_prediction_function_keyword;
    return this;
}

Standard_prediction_function_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Standard_prediction_function_keywordContext.prototype.constructor = Standard_prediction_function_keywordContext;

Standard_prediction_function_keywordContext.prototype.PREDICTION = function() {
    return this.getToken(PLSQLParser.PREDICTION, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_BOUNDS = function() {
    return this.getToken(PLSQLParser.PREDICTION_BOUNDS, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_COST = function() {
    return this.getToken(PLSQLParser.PREDICTION_COST, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_DETAILS = function() {
    return this.getToken(PLSQLParser.PREDICTION_DETAILS, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_PROBABILITY = function() {
    return this.getToken(PLSQLParser.PREDICTION_PROBABILITY, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_SET = function() {
    return this.getToken(PLSQLParser.PREDICTION_SET, 0);
};

Standard_prediction_function_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterStandard_prediction_function_keyword(this);
	}
};

Standard_prediction_function_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitStandard_prediction_function_keyword(this);
	}
};




PLSQLParser.Standard_prediction_function_keywordContext = Standard_prediction_function_keywordContext;

PLSQLParser.prototype.standard_prediction_function_keyword = function() {

    var localctx = new Standard_prediction_function_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, PLSQLParser.RULE_standard_prediction_function_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4435;
        _la = this._input.LA(1);
        if(!(((((_la - 448)) & ~0x1f) == 0 && ((1 << (_la - 448)) & ((1 << (PLSQLParser.PREDICTION - 448)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 448)) | (1 << (PLSQLParser.PREDICTION_COST - 448)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 448)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 448)) | (1 << (PLSQLParser.PREDICTION_SET - 448)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Over_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_over_clause;
    return this;
}

Over_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Over_clauseContext.prototype.constructor = Over_clauseContext;

Over_clauseContext.prototype.OVER = function() {
    return this.getToken(PLSQLParser.OVER, 0);
};

Over_clauseContext.prototype.query_partition_clause = function() {
    return this.getTypedRuleContext(Query_partition_clauseContext,0);
};

Over_clauseContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Over_clauseContext.prototype.windowing_clause = function() {
    return this.getTypedRuleContext(Windowing_clauseContext,0);
};

Over_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterOver_clause(this);
	}
};

Over_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitOver_clause(this);
	}
};




PLSQLParser.Over_clauseContext = Over_clauseContext;

PLSQLParser.prototype.over_clause = function() {

    var localctx = new Over_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, PLSQLParser.RULE_over_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4437;
        this.match(PLSQLParser.OVER);
        this.state = 4438;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 4440;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PARTITION) {
            this.state = 4439;
            this.query_partition_clause();
        }

        this.state = 4446;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.ORDER) {
            this.state = 4442;
            this.order_by_clause();
            this.state = 4444;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.RANGE || _la===PLSQLParser.ROWS) {
                this.state = 4443;
                this.windowing_clause();
            }

        }

        this.state = 4448;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Windowing_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_windowing_clause;
    return this;
}

Windowing_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Windowing_clauseContext.prototype.constructor = Windowing_clauseContext;

Windowing_clauseContext.prototype.windowing_type = function() {
    return this.getTypedRuleContext(Windowing_typeContext,0);
};

Windowing_clauseContext.prototype.BETWEEN = function() {
    return this.getToken(PLSQLParser.BETWEEN, 0);
};

Windowing_clauseContext.prototype.windowing_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Windowing_elementsContext);
    } else {
        return this.getTypedRuleContext(Windowing_elementsContext,i);
    }
};

Windowing_clauseContext.prototype.AND = function() {
    return this.getToken(PLSQLParser.AND, 0);
};

Windowing_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterWindowing_clause(this);
	}
};

Windowing_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitWindowing_clause(this);
	}
};




PLSQLParser.Windowing_clauseContext = Windowing_clauseContext;

PLSQLParser.prototype.windowing_clause = function() {

    var localctx = new Windowing_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, PLSQLParser.RULE_windowing_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4450;
        this.windowing_type();
        this.state = 4457;
        switch(this._input.LA(1)) {
        case PLSQLParser.BETWEEN:
            this.state = 4451;
            this.match(PLSQLParser.BETWEEN);
            this.state = 4452;
            this.windowing_elements();
            this.state = 4453;
            this.match(PLSQLParser.AND);
            this.state = 4454;
            this.windowing_elements();
            break;
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ALL:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ANY:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CASE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONNECT_BY_ROOT:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DATE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DISTINCT:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXISTS:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FALSE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULL:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.PRIOR:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUE:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
        case PLSQLParser.UNSIGNED_INTEGER:
        case PLSQLParser.APPROXIMATE_NUM_LIT:
        case PLSQLParser.CHAR_STRING:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.LEFT_PAREN:
        case PLSQLParser.PLUS_SIGN:
        case PLSQLParser.MINUS_SIGN:
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 4456;
            this.windowing_elements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Windowing_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_windowing_type;
    return this;
}

Windowing_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Windowing_typeContext.prototype.constructor = Windowing_typeContext;

Windowing_typeContext.prototype.ROWS = function() {
    return this.getToken(PLSQLParser.ROWS, 0);
};

Windowing_typeContext.prototype.RANGE = function() {
    return this.getToken(PLSQLParser.RANGE, 0);
};

Windowing_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterWindowing_type(this);
	}
};

Windowing_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitWindowing_type(this);
	}
};




PLSQLParser.Windowing_typeContext = Windowing_typeContext;

PLSQLParser.prototype.windowing_type = function() {

    var localctx = new Windowing_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, PLSQLParser.RULE_windowing_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4459;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.RANGE || _la===PLSQLParser.ROWS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Windowing_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_windowing_elements;
    return this;
}

Windowing_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Windowing_elementsContext.prototype.constructor = Windowing_elementsContext;

Windowing_elementsContext.prototype.UNBOUNDED = function() {
    return this.getToken(PLSQLParser.UNBOUNDED, 0);
};

Windowing_elementsContext.prototype.PRECEDING = function() {
    return this.getToken(PLSQLParser.PRECEDING, 0);
};

Windowing_elementsContext.prototype.CURRENT = function() {
    return this.getToken(PLSQLParser.CURRENT, 0);
};

Windowing_elementsContext.prototype.ROW = function() {
    return this.getToken(PLSQLParser.ROW, 0);
};

Windowing_elementsContext.prototype.concatenation_wrapper = function() {
    return this.getTypedRuleContext(Concatenation_wrapperContext,0);
};

Windowing_elementsContext.prototype.FOLLOWING = function() {
    return this.getToken(PLSQLParser.FOLLOWING, 0);
};

Windowing_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterWindowing_elements(this);
	}
};

Windowing_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitWindowing_elements(this);
	}
};




PLSQLParser.Windowing_elementsContext = Windowing_elementsContext;

PLSQLParser.prototype.windowing_elements = function() {

    var localctx = new Windowing_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, PLSQLParser.RULE_windowing_elements);
    var _la = 0; // Token type
    try {
        this.state = 4468;
        var la_ = this._interp.adaptivePredict(this._input,563,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4461;
            this.match(PLSQLParser.UNBOUNDED);
            this.state = 4462;
            this.match(PLSQLParser.PRECEDING);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4463;
            this.match(PLSQLParser.CURRENT);
            this.state = 4464;
            this.match(PLSQLParser.ROW);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4465;
            this.concatenation_wrapper();
            this.state = 4466;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.FOLLOWING || _la===PLSQLParser.PRECEDING)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_using_clause;
    return this;
}

Using_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_clauseContext.prototype.constructor = Using_clauseContext;

Using_clauseContext.prototype.USING = function() {
    return this.getToken(PLSQLParser.USING, 0);
};

Using_clauseContext.prototype.using_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Using_elementContext);
    } else {
        return this.getTypedRuleContext(Using_elementContext,i);
    }
};

Using_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUsing_clause(this);
	}
};

Using_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUsing_clause(this);
	}
};




PLSQLParser.Using_clauseContext = Using_clauseContext;

PLSQLParser.prototype.using_clause = function() {

    var localctx = new Using_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, PLSQLParser.RULE_using_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4470;
        this.match(PLSQLParser.USING);
        this.state = 4480;
        switch(this._input.LA(1)) {
        case PLSQLParser.ASTERISK:
            this.state = 4471;
            this.match(PLSQLParser.ASTERISK);
            break;
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ALL:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ANY:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CASE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONNECT_BY_ROOT:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DATE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DISTINCT:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXISTS:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FALSE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.IN:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NOT:
        case PLSQLParser.NULL:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.PRIOR:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUE:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
        case PLSQLParser.UNSIGNED_INTEGER:
        case PLSQLParser.APPROXIMATE_NUM_LIT:
        case PLSQLParser.CHAR_STRING:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.LEFT_PAREN:
        case PLSQLParser.PLUS_SIGN:
        case PLSQLParser.MINUS_SIGN:
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 4472;
            this.using_element();
            this.state = 4477;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,564,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4473;
                    this.match(PLSQLParser.COMMA);
                    this.state = 4474;
                    this.using_element(); 
                }
                this.state = 4479;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,564,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_using_element;
    return this;
}

Using_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_elementContext.prototype.constructor = Using_elementContext;

Using_elementContext.prototype.select_list_elements = function() {
    return this.getTypedRuleContext(Select_list_elementsContext,0);
};

Using_elementContext.prototype.IN = function() {
    return this.getToken(PLSQLParser.IN, 0);
};

Using_elementContext.prototype.OUT = function() {
    return this.getToken(PLSQLParser.OUT, 0);
};

Using_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Using_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterUsing_element(this);
	}
};

Using_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitUsing_element(this);
	}
};




PLSQLParser.Using_elementContext = Using_elementContext;

PLSQLParser.prototype.using_element = function() {

    var localctx = new Using_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, PLSQLParser.RULE_using_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4487;
        var la_ = this._interp.adaptivePredict(this._input,567,this._ctx);
        if(la_===1) {
            this.state = 4482;
            this.match(PLSQLParser.IN);
            this.state = 4484;
            var la_ = this._interp.adaptivePredict(this._input,566,this._ctx);
            if(la_===1) {
                this.state = 4483;
                this.match(PLSQLParser.OUT);

            }

        } else if(la_===2) {
            this.state = 4486;
            this.match(PLSQLParser.OUT);

        }
        this.state = 4489;
        this.select_list_elements();
        this.state = 4491;
        var la_ = this._interp.adaptivePredict(this._input,568,this._ctx);
        if(la_===1) {
            this.state = 4490;
            this.column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collect_order_by_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_collect_order_by_part;
    return this;
}

Collect_order_by_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collect_order_by_partContext.prototype.constructor = Collect_order_by_partContext;

Collect_order_by_partContext.prototype.ORDER = function() {
    return this.getToken(PLSQLParser.ORDER, 0);
};

Collect_order_by_partContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Collect_order_by_partContext.prototype.concatenation_wrapper = function() {
    return this.getTypedRuleContext(Concatenation_wrapperContext,0);
};

Collect_order_by_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCollect_order_by_part(this);
	}
};

Collect_order_by_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCollect_order_by_part(this);
	}
};




PLSQLParser.Collect_order_by_partContext = Collect_order_by_partContext;

PLSQLParser.prototype.collect_order_by_part = function() {

    var localctx = new Collect_order_by_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, PLSQLParser.RULE_collect_order_by_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4493;
        this.match(PLSQLParser.ORDER);
        this.state = 4494;
        this.match(PLSQLParser.BY);
        this.state = 4495;
        this.concatenation_wrapper();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Within_or_over_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_within_or_over_part;
    return this;
}

Within_or_over_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Within_or_over_partContext.prototype.constructor = Within_or_over_partContext;

Within_or_over_partContext.prototype.WITHIN = function() {
    return this.getToken(PLSQLParser.WITHIN, 0);
};

Within_or_over_partContext.prototype.GROUP = function() {
    return this.getToken(PLSQLParser.GROUP, 0);
};

Within_or_over_partContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Within_or_over_partContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Within_or_over_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterWithin_or_over_part(this);
	}
};

Within_or_over_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitWithin_or_over_part(this);
	}
};




PLSQLParser.Within_or_over_partContext = Within_or_over_partContext;

PLSQLParser.prototype.within_or_over_part = function() {

    var localctx = new Within_or_over_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, PLSQLParser.RULE_within_or_over_part);
    try {
        this.state = 4504;
        switch(this._input.LA(1)) {
        case PLSQLParser.WITHIN:
            this.enterOuterAlt(localctx, 1);
            this.state = 4497;
            this.match(PLSQLParser.WITHIN);
            this.state = 4498;
            this.match(PLSQLParser.GROUP);
            this.state = 4499;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4500;
            this.order_by_clause();
            this.state = 4501;
            this.match(PLSQLParser.RIGHT_PAREN);
            break;
        case PLSQLParser.OVER:
            this.enterOuterAlt(localctx, 2);
            this.state = 4503;
            this.over_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cost_matrix_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cost_matrix_clause;
    return this;
}

Cost_matrix_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cost_matrix_clauseContext.prototype.constructor = Cost_matrix_clauseContext;

Cost_matrix_clauseContext.prototype.COST = function() {
    return this.getToken(PLSQLParser.COST, 0);
};

Cost_matrix_clauseContext.prototype.MODEL = function() {
    return this.getToken(PLSQLParser.MODEL, 0);
};

Cost_matrix_clauseContext.prototype.cost_class_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cost_class_nameContext);
    } else {
        return this.getTypedRuleContext(Cost_class_nameContext,i);
    }
};

Cost_matrix_clauseContext.prototype.VALUES = function() {
    return this.getToken(PLSQLParser.VALUES, 0);
};

Cost_matrix_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Cost_matrix_clauseContext.prototype.AUTO = function() {
    return this.getToken(PLSQLParser.AUTO, 0);
};

Cost_matrix_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCost_matrix_clause(this);
	}
};

Cost_matrix_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCost_matrix_clause(this);
	}
};




PLSQLParser.Cost_matrix_clauseContext = Cost_matrix_clauseContext;

PLSQLParser.prototype.cost_matrix_clause = function() {

    var localctx = new Cost_matrix_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, PLSQLParser.RULE_cost_matrix_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4506;
        this.match(PLSQLParser.COST);
        this.state = 4524;
        switch(this._input.LA(1)) {
        case PLSQLParser.MODEL:
            this.state = 4507;
            this.match(PLSQLParser.MODEL);
            this.state = 4509;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.AUTO) {
                this.state = 4508;
                this.match(PLSQLParser.AUTO);
            }

            break;
        case PLSQLParser.LEFT_PAREN:
            this.state = 4511;
            this.match(PLSQLParser.LEFT_PAREN);
            this.state = 4512;
            this.cost_class_name();
            this.state = 4517;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 4513;
                this.match(PLSQLParser.COMMA);
                this.state = 4514;
                this.cost_class_name();
                this.state = 4519;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4520;
            this.match(PLSQLParser.RIGHT_PAREN);
            this.state = 4521;
            this.match(PLSQLParser.VALUES);
            this.state = 4522;
            this.expression_list();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_passing_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xml_passing_clause;
    return this;
}

Xml_passing_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_passing_clauseContext.prototype.constructor = Xml_passing_clauseContext;

Xml_passing_clauseContext.prototype.PASSING = function() {
    return this.getToken(PLSQLParser.PASSING, 0);
};

Xml_passing_clauseContext.prototype.expression_wrapper = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_wrapperContext);
    } else {
        return this.getTypedRuleContext(Expression_wrapperContext,i);
    }
};

Xml_passing_clauseContext.prototype.BY = function() {
    return this.getToken(PLSQLParser.BY, 0);
};

Xml_passing_clauseContext.prototype.VALUE = function() {
    return this.getToken(PLSQLParser.VALUE, 0);
};

Xml_passing_clauseContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Xml_passing_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXml_passing_clause(this);
	}
};

Xml_passing_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXml_passing_clause(this);
	}
};




PLSQLParser.Xml_passing_clauseContext = Xml_passing_clauseContext;

PLSQLParser.prototype.xml_passing_clause = function() {

    var localctx = new Xml_passing_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, PLSQLParser.RULE_xml_passing_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4526;
        this.match(PLSQLParser.PASSING);
        this.state = 4529;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.BY) {
            this.state = 4527;
            this.match(PLSQLParser.BY);
            this.state = 4528;
            this.match(PLSQLParser.VALUE);
        }

        this.state = 4531;
        this.expression_wrapper();
        this.state = 4533;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.AS) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 450)))) !== 0) || ((((_la - 484)) & ~0x1f) == 0 && ((1 << (_la - 484)) & ((1 << (PLSQLParser.CHAR_STRING - 484)) | (1 << (PLSQLParser.DELIMITED_ID - 484)) | (1 << (PLSQLParser.INTRODUCER - 484)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 4532;
            this.column_alias();
        }

        this.state = 4535;
        this.match(PLSQLParser.COMMA);
        this.state = 4536;
        this.expression_wrapper();
        this.state = 4538;
        var la_ = this._interp.adaptivePredict(this._input,575,this._ctx);
        if(la_===1) {
            this.state = 4537;
            this.column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_attributes_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xml_attributes_clause;
    return this;
}

Xml_attributes_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_attributes_clauseContext.prototype.constructor = Xml_attributes_clauseContext;

Xml_attributes_clauseContext.prototype.XMLATTRIBUTES = function() {
    return this.getToken(PLSQLParser.XMLATTRIBUTES, 0);
};

Xml_attributes_clauseContext.prototype.xml_multiuse_expression_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_multiuse_expression_elementContext);
    } else {
        return this.getTypedRuleContext(Xml_multiuse_expression_elementContext,i);
    }
};

Xml_attributes_clauseContext.prototype.ENTITYESCAPING = function() {
    return this.getToken(PLSQLParser.ENTITYESCAPING, 0);
};

Xml_attributes_clauseContext.prototype.NOENTITYESCAPING = function() {
    return this.getToken(PLSQLParser.NOENTITYESCAPING, 0);
};

Xml_attributes_clauseContext.prototype.SCHEMACHECK = function() {
    return this.getToken(PLSQLParser.SCHEMACHECK, 0);
};

Xml_attributes_clauseContext.prototype.NOSCHEMACHECK = function() {
    return this.getToken(PLSQLParser.NOSCHEMACHECK, 0);
};

Xml_attributes_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXml_attributes_clause(this);
	}
};

Xml_attributes_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXml_attributes_clause(this);
	}
};




PLSQLParser.Xml_attributes_clauseContext = Xml_attributes_clauseContext;

PLSQLParser.prototype.xml_attributes_clause = function() {

    var localctx = new Xml_attributes_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, PLSQLParser.RULE_xml_attributes_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4540;
        this.match(PLSQLParser.XMLATTRIBUTES);
        this.state = 4541;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 4543;
        var la_ = this._interp.adaptivePredict(this._input,576,this._ctx);
        if(la_===1) {
            this.state = 4542;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.ENTITYESCAPING || _la===PLSQLParser.NOENTITYESCAPING)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }

        }
        this.state = 4546;
        var la_ = this._interp.adaptivePredict(this._input,577,this._ctx);
        if(la_===1) {
            this.state = 4545;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.NOSCHEMACHECK || _la===PLSQLParser.SCHEMACHECK)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }

        }
        this.state = 4548;
        this.xml_multiuse_expression_element();
        this.state = 4553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 4549;
            this.match(PLSQLParser.COMMA);
            this.state = 4550;
            this.xml_multiuse_expression_element();
            this.state = 4555;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4556;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_namespaces_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xml_namespaces_clause;
    return this;
}

Xml_namespaces_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_namespaces_clauseContext.prototype.constructor = Xml_namespaces_clauseContext;

Xml_namespaces_clauseContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(PLSQLParser.XMLNAMESPACES, 0);
};

Xml_namespaces_clauseContext.prototype.concatenation_wrapper = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Concatenation_wrapperContext);
    } else {
        return this.getTypedRuleContext(Concatenation_wrapperContext,i);
    }
};

Xml_namespaces_clauseContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Xml_namespaces_clauseContext.prototype.xml_general_default_part = function() {
    return this.getTypedRuleContext(Xml_general_default_partContext,0);
};

Xml_namespaces_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXml_namespaces_clause(this);
	}
};

Xml_namespaces_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXml_namespaces_clause(this);
	}
};




PLSQLParser.Xml_namespaces_clauseContext = Xml_namespaces_clauseContext;

PLSQLParser.prototype.xml_namespaces_clause = function() {

    var localctx = new Xml_namespaces_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, PLSQLParser.RULE_xml_namespaces_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4558;
        this.match(PLSQLParser.XMLNAMESPACES);
        this.state = 4559;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 4563;
        var la_ = this._interp.adaptivePredict(this._input,579,this._ctx);
        if(la_===1) {
            this.state = 4560;
            this.concatenation_wrapper();
            this.state = 4561;
            this.column_alias();

        }
        this.state = 4571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 4565;
            this.match(PLSQLParser.COMMA);
            this.state = 4566;
            this.concatenation_wrapper();
            this.state = 4567;
            this.column_alias();
            this.state = 4573;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4575;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.DEFAULT) {
            this.state = 4574;
            this.xml_general_default_part();
        }

        this.state = 4577;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_table_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xml_table_column;
    return this;
}

Xml_table_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_table_columnContext.prototype.constructor = Xml_table_columnContext;

Xml_table_columnContext.prototype.xml_column_name = function() {
    return this.getTypedRuleContext(Xml_column_nameContext,0);
};

Xml_table_columnContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

Xml_table_columnContext.prototype.ORDINALITY = function() {
    return this.getToken(PLSQLParser.ORDINALITY, 0);
};

Xml_table_columnContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Xml_table_columnContext.prototype.PATH = function() {
    return this.getToken(PLSQLParser.PATH, 0);
};

Xml_table_columnContext.prototype.concatenation_wrapper = function() {
    return this.getTypedRuleContext(Concatenation_wrapperContext,0);
};

Xml_table_columnContext.prototype.xml_general_default_part = function() {
    return this.getTypedRuleContext(Xml_general_default_partContext,0);
};

Xml_table_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXml_table_column(this);
	}
};

Xml_table_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXml_table_column(this);
	}
};




PLSQLParser.Xml_table_columnContext = Xml_table_columnContext;

PLSQLParser.prototype.xml_table_column = function() {

    var localctx = new Xml_table_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, PLSQLParser.RULE_xml_table_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4579;
        this.xml_column_name();
        this.state = 4590;
        switch(this._input.LA(1)) {
        case PLSQLParser.FOR:
            this.state = 4580;
            this.match(PLSQLParser.FOR);
            this.state = 4581;
            this.match(PLSQLParser.ORDINALITY);
            break;
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DATE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.REGULAR_ID:
            this.state = 4582;
            this.type_spec();
            this.state = 4585;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PATH) {
                this.state = 4583;
                this.match(PLSQLParser.PATH);
                this.state = 4584;
                this.concatenation_wrapper();
            }

            this.state = 4588;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.DEFAULT) {
                this.state = 4587;
                this.xml_general_default_part();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_general_default_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xml_general_default_part;
    return this;
}

Xml_general_default_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_general_default_partContext.prototype.constructor = Xml_general_default_partContext;

Xml_general_default_partContext.prototype.DEFAULT = function() {
    return this.getToken(PLSQLParser.DEFAULT, 0);
};

Xml_general_default_partContext.prototype.concatenation_wrapper = function() {
    return this.getTypedRuleContext(Concatenation_wrapperContext,0);
};

Xml_general_default_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXml_general_default_part(this);
	}
};

Xml_general_default_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXml_general_default_part(this);
	}
};




PLSQLParser.Xml_general_default_partContext = Xml_general_default_partContext;

PLSQLParser.prototype.xml_general_default_part = function() {

    var localctx = new Xml_general_default_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, PLSQLParser.RULE_xml_general_default_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4592;
        this.match(PLSQLParser.DEFAULT);
        this.state = 4593;
        this.concatenation_wrapper();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_multiuse_expression_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xml_multiuse_expression_element;
    return this;
}

Xml_multiuse_expression_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_multiuse_expression_elementContext.prototype.constructor = Xml_multiuse_expression_elementContext;

Xml_multiuse_expression_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Xml_multiuse_expression_elementContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Xml_multiuse_expression_elementContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Xml_multiuse_expression_elementContext.prototype.EVALNAME = function() {
    return this.getToken(PLSQLParser.EVALNAME, 0);
};

Xml_multiuse_expression_elementContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xml_multiuse_expression_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXml_multiuse_expression_element(this);
	}
};

Xml_multiuse_expression_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXml_multiuse_expression_element(this);
	}
};




PLSQLParser.Xml_multiuse_expression_elementContext = Xml_multiuse_expression_elementContext;

PLSQLParser.prototype.xml_multiuse_expression_element = function() {

    var localctx = new Xml_multiuse_expression_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, PLSQLParser.RULE_xml_multiuse_expression_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4595;
        this.expression();
        this.state = 4602;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AS) {
            this.state = 4596;
            this.match(PLSQLParser.AS);
            this.state = 4600;
            var la_ = this._interp.adaptivePredict(this._input,585,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4597;
                this.id_expression();
                break;

            case 2:
                this.state = 4598;
                this.match(PLSQLParser.EVALNAME);
                this.state = 4599;
                this.concatenation();
                break;

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlroot_param_version_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xmlroot_param_version_part;
    return this;
}

Xmlroot_param_version_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlroot_param_version_partContext.prototype.constructor = Xmlroot_param_version_partContext;

Xmlroot_param_version_partContext.prototype.VERSION = function() {
    return this.getToken(PLSQLParser.VERSION, 0);
};

Xmlroot_param_version_partContext.prototype.NO = function() {
    return this.getToken(PLSQLParser.NO, 0);
};

Xmlroot_param_version_partContext.prototype.VALUE = function() {
    return this.getToken(PLSQLParser.VALUE, 0);
};

Xmlroot_param_version_partContext.prototype.expression_wrapper = function() {
    return this.getTypedRuleContext(Expression_wrapperContext,0);
};

Xmlroot_param_version_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXmlroot_param_version_part(this);
	}
};

Xmlroot_param_version_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXmlroot_param_version_part(this);
	}
};




PLSQLParser.Xmlroot_param_version_partContext = Xmlroot_param_version_partContext;

PLSQLParser.prototype.xmlroot_param_version_part = function() {

    var localctx = new Xmlroot_param_version_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, PLSQLParser.RULE_xmlroot_param_version_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4604;
        this.match(PLSQLParser.VERSION);
        this.state = 4608;
        var la_ = this._interp.adaptivePredict(this._input,587,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4605;
            this.match(PLSQLParser.NO);
            this.state = 4606;
            this.match(PLSQLParser.VALUE);
            break;

        case 2:
            this.state = 4607;
            this.expression_wrapper();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlroot_param_standalone_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xmlroot_param_standalone_part;
    return this;
}

Xmlroot_param_standalone_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlroot_param_standalone_partContext.prototype.constructor = Xmlroot_param_standalone_partContext;

Xmlroot_param_standalone_partContext.prototype.STANDALONE = function() {
    return this.getToken(PLSQLParser.STANDALONE, 0);
};

Xmlroot_param_standalone_partContext.prototype.YES = function() {
    return this.getToken(PLSQLParser.YES, 0);
};

Xmlroot_param_standalone_partContext.prototype.NO = function() {
    return this.getToken(PLSQLParser.NO, 0);
};

Xmlroot_param_standalone_partContext.prototype.VALUE = function() {
    return this.getToken(PLSQLParser.VALUE, 0);
};

Xmlroot_param_standalone_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXmlroot_param_standalone_part(this);
	}
};

Xmlroot_param_standalone_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXmlroot_param_standalone_part(this);
	}
};




PLSQLParser.Xmlroot_param_standalone_partContext = Xmlroot_param_standalone_partContext;

PLSQLParser.prototype.xmlroot_param_standalone_part = function() {

    var localctx = new Xmlroot_param_standalone_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, PLSQLParser.RULE_xmlroot_param_standalone_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4610;
        this.match(PLSQLParser.STANDALONE);
        this.state = 4616;
        switch(this._input.LA(1)) {
        case PLSQLParser.YES:
            this.state = 4611;
            this.match(PLSQLParser.YES);
            break;
        case PLSQLParser.NO:
            this.state = 4612;
            this.match(PLSQLParser.NO);
            this.state = 4614;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.VALUE) {
                this.state = 4613;
                this.match(PLSQLParser.VALUE);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlserialize_param_enconding_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xmlserialize_param_enconding_part;
    return this;
}

Xmlserialize_param_enconding_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlserialize_param_enconding_partContext.prototype.constructor = Xmlserialize_param_enconding_partContext;

Xmlserialize_param_enconding_partContext.prototype.ENCODING = function() {
    return this.getToken(PLSQLParser.ENCODING, 0);
};

Xmlserialize_param_enconding_partContext.prototype.concatenation_wrapper = function() {
    return this.getTypedRuleContext(Concatenation_wrapperContext,0);
};

Xmlserialize_param_enconding_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXmlserialize_param_enconding_part(this);
	}
};

Xmlserialize_param_enconding_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXmlserialize_param_enconding_part(this);
	}
};




PLSQLParser.Xmlserialize_param_enconding_partContext = Xmlserialize_param_enconding_partContext;

PLSQLParser.prototype.xmlserialize_param_enconding_part = function() {

    var localctx = new Xmlserialize_param_enconding_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, PLSQLParser.RULE_xmlserialize_param_enconding_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4618;
        this.match(PLSQLParser.ENCODING);
        this.state = 4619;
        this.concatenation_wrapper();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlserialize_param_version_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xmlserialize_param_version_part;
    return this;
}

Xmlserialize_param_version_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlserialize_param_version_partContext.prototype.constructor = Xmlserialize_param_version_partContext;

Xmlserialize_param_version_partContext.prototype.VERSION = function() {
    return this.getToken(PLSQLParser.VERSION, 0);
};

Xmlserialize_param_version_partContext.prototype.concatenation_wrapper = function() {
    return this.getTypedRuleContext(Concatenation_wrapperContext,0);
};

Xmlserialize_param_version_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXmlserialize_param_version_part(this);
	}
};

Xmlserialize_param_version_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXmlserialize_param_version_part(this);
	}
};




PLSQLParser.Xmlserialize_param_version_partContext = Xmlserialize_param_version_partContext;

PLSQLParser.prototype.xmlserialize_param_version_part = function() {

    var localctx = new Xmlserialize_param_version_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, PLSQLParser.RULE_xmlserialize_param_version_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4621;
        this.match(PLSQLParser.VERSION);
        this.state = 4622;
        this.concatenation_wrapper();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlserialize_param_ident_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xmlserialize_param_ident_part;
    return this;
}

Xmlserialize_param_ident_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlserialize_param_ident_partContext.prototype.constructor = Xmlserialize_param_ident_partContext;

Xmlserialize_param_ident_partContext.prototype.NO = function() {
    return this.getToken(PLSQLParser.NO, 0);
};

Xmlserialize_param_ident_partContext.prototype.INDENT = function() {
    return this.getToken(PLSQLParser.INDENT, 0);
};

Xmlserialize_param_ident_partContext.prototype.SIZE = function() {
    return this.getToken(PLSQLParser.SIZE, 0);
};

Xmlserialize_param_ident_partContext.prototype.concatenation_wrapper = function() {
    return this.getTypedRuleContext(Concatenation_wrapperContext,0);
};

Xmlserialize_param_ident_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXmlserialize_param_ident_part(this);
	}
};

Xmlserialize_param_ident_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXmlserialize_param_ident_part(this);
	}
};




PLSQLParser.Xmlserialize_param_ident_partContext = Xmlserialize_param_ident_partContext;

PLSQLParser.prototype.xmlserialize_param_ident_part = function() {

    var localctx = new Xmlserialize_param_ident_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, PLSQLParser.RULE_xmlserialize_param_ident_part);
    var _la = 0; // Token type
    try {
        this.state = 4632;
        switch(this._input.LA(1)) {
        case PLSQLParser.NO:
            this.enterOuterAlt(localctx, 1);
            this.state = 4624;
            this.match(PLSQLParser.NO);
            this.state = 4625;
            this.match(PLSQLParser.INDENT);
            break;
        case PLSQLParser.INDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 4626;
            this.match(PLSQLParser.INDENT);
            this.state = 4630;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.SIZE) {
                this.state = 4627;
                this.match(PLSQLParser.SIZE);
                this.state = 4628;
                this.match(PLSQLParser.EQUALS_OP);
                this.state = 4629;
                this.concatenation_wrapper();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_plus_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_sql_plus_command;
    return this;
}

Sql_plus_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_plus_commandContext.prototype.constructor = Sql_plus_commandContext;

Sql_plus_commandContext.prototype.whenever_command = function() {
    return this.getTypedRuleContext(Whenever_commandContext,0);
};

Sql_plus_commandContext.prototype.exit_command = function() {
    return this.getTypedRuleContext(Exit_commandContext,0);
};

Sql_plus_commandContext.prototype.prompt_command = function() {
    return this.getTypedRuleContext(Prompt_commandContext,0);
};

Sql_plus_commandContext.prototype.set_command = function() {
    return this.getTypedRuleContext(Set_commandContext,0);
};

Sql_plus_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSql_plus_command(this);
	}
};

Sql_plus_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSql_plus_command(this);
	}
};




PLSQLParser.Sql_plus_commandContext = Sql_plus_commandContext;

PLSQLParser.prototype.sql_plus_command = function() {

    var localctx = new Sql_plus_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, PLSQLParser.RULE_sql_plus_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4639;
        switch(this._input.LA(1)) {
        case PLSQLParser.SOLIDUS:
            this.state = 4634;
            this.match(PLSQLParser.SOLIDUS);
            break;
        case PLSQLParser.WHENEVER:
            this.state = 4635;
            this.whenever_command();
            break;
        case PLSQLParser.EXIT:
            this.state = 4636;
            this.exit_command();
            break;
        case PLSQLParser.PROMPT:
            this.state = 4637;
            this.prompt_command();
            break;
        case PLSQLParser.SET:
            this.state = 4638;
            this.set_command();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 4642;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.SEMICOLON) {
            this.state = 4641;
            this.match(PLSQLParser.SEMICOLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Whenever_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_whenever_command;
    return this;
}

Whenever_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Whenever_commandContext.prototype.constructor = Whenever_commandContext;

Whenever_commandContext.prototype.WHENEVER = function() {
    return this.getToken(PLSQLParser.WHENEVER, 0);
};

Whenever_commandContext.prototype.SQLERROR = function() {
    return this.getToken(PLSQLParser.SQLERROR, 0);
};

Whenever_commandContext.prototype.OSERROR = function() {
    return this.getToken(PLSQLParser.OSERROR, 0);
};

Whenever_commandContext.prototype.EXIT = function() {
    return this.getToken(PLSQLParser.EXIT, 0);
};

Whenever_commandContext.prototype.CONTINUE = function() {
    return this.getToken(PLSQLParser.CONTINUE, 0);
};

Whenever_commandContext.prototype.SUCCESS = function() {
    return this.getToken(PLSQLParser.SUCCESS, 0);
};

Whenever_commandContext.prototype.FAILURE = function() {
    return this.getToken(PLSQLParser.FAILURE, 0);
};

Whenever_commandContext.prototype.WARNING = function() {
    return this.getToken(PLSQLParser.WARNING, 0);
};

Whenever_commandContext.prototype.COMMIT = function() {
    return this.getToken(PLSQLParser.COMMIT, 0);
};

Whenever_commandContext.prototype.ROLLBACK = function() {
    return this.getToken(PLSQLParser.ROLLBACK, 0);
};

Whenever_commandContext.prototype.NONE = function() {
    return this.getToken(PLSQLParser.NONE, 0);
};

Whenever_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterWhenever_command(this);
	}
};

Whenever_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitWhenever_command(this);
	}
};




PLSQLParser.Whenever_commandContext = Whenever_commandContext;

PLSQLParser.prototype.whenever_command = function() {

    var localctx = new Whenever_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, PLSQLParser.RULE_whenever_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4644;
        this.match(PLSQLParser.WHENEVER);
        this.state = 4645;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.OSERROR || _la===PLSQLParser.SQLERROR)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 4651;
        switch(this._input.LA(1)) {
        case PLSQLParser.EXIT:
            this.state = 4646;
            this.match(PLSQLParser.EXIT);
            this.state = 4647;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.FAILURE || _la===PLSQLParser.SUCCESS || _la===PLSQLParser.WARNING)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 4648;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.COMMIT || _la===PLSQLParser.ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;
        case PLSQLParser.CONTINUE:
            this.state = 4649;
            this.match(PLSQLParser.CONTINUE);
            this.state = 4650;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.COMMIT || _la===PLSQLParser.NONE || _la===PLSQLParser.ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_set_command;
    return this;
}

Set_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_commandContext.prototype.constructor = Set_commandContext;

Set_commandContext.prototype.SET = function() {
    return this.getToken(PLSQLParser.SET, 0);
};

Set_commandContext.prototype.regular_id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Regular_idContext);
    } else {
        return this.getTypedRuleContext(Regular_idContext,i);
    }
};

Set_commandContext.prototype.CHAR_STRING = function() {
    return this.getToken(PLSQLParser.CHAR_STRING, 0);
};

Set_commandContext.prototype.ON = function() {
    return this.getToken(PLSQLParser.ON, 0);
};

Set_commandContext.prototype.OFF = function() {
    return this.getToken(PLSQLParser.OFF, 0);
};

Set_commandContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

Set_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSet_command(this);
	}
};

Set_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSet_command(this);
	}
};




PLSQLParser.Set_commandContext = Set_commandContext;

PLSQLParser.prototype.set_command = function() {

    var localctx = new Set_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, PLSQLParser.RULE_set_command);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4653;
        this.match(PLSQLParser.SET);
        this.state = 4654;
        this.regular_id();
        this.state = 4660;
        var la_ = this._interp.adaptivePredict(this._input,595,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4655;
            this.match(PLSQLParser.CHAR_STRING);
            break;

        case 2:
            this.state = 4656;
            this.match(PLSQLParser.ON);
            break;

        case 3:
            this.state = 4657;
            this.match(PLSQLParser.OFF);
            break;

        case 4:
            this.state = 4658;
            this.numeric();
            break;

        case 5:
            this.state = 4659;
            this.regular_id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exit_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_exit_command;
    return this;
}

Exit_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exit_commandContext.prototype.constructor = Exit_commandContext;

Exit_commandContext.prototype.EXIT = function() {
    return this.getToken(PLSQLParser.EXIT, 0);
};

Exit_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterExit_command(this);
	}
};

Exit_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitExit_command(this);
	}
};




PLSQLParser.Exit_commandContext = Exit_commandContext;

PLSQLParser.prototype.exit_command = function() {

    var localctx = new Exit_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, PLSQLParser.RULE_exit_command);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4662;
        this.match(PLSQLParser.EXIT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Prompt_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_prompt_command;
    return this;
}

Prompt_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Prompt_commandContext.prototype.constructor = Prompt_commandContext;

Prompt_commandContext.prototype.PROMPT = function() {
    return this.getToken(PLSQLParser.PROMPT, 0);
};

Prompt_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPrompt_command(this);
	}
};

Prompt_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPrompt_command(this);
	}
};




PLSQLParser.Prompt_commandContext = Prompt_commandContext;

PLSQLParser.prototype.prompt_command = function() {

    var localctx = new Prompt_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, PLSQLParser.RULE_prompt_command);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4664;
        this.match(PLSQLParser.PROMPT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partition_extension_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_partition_extension_clause;
    return this;
}

Partition_extension_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partition_extension_clauseContext.prototype.constructor = Partition_extension_clauseContext;

Partition_extension_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Partition_extension_clauseContext.prototype.SUBPARTITION = function() {
    return this.getToken(PLSQLParser.SUBPARTITION, 0);
};

Partition_extension_clauseContext.prototype.PARTITION = function() {
    return this.getToken(PLSQLParser.PARTITION, 0);
};

Partition_extension_clauseContext.prototype.FOR = function() {
    return this.getToken(PLSQLParser.FOR, 0);
};

Partition_extension_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPartition_extension_clause(this);
	}
};

Partition_extension_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPartition_extension_clause(this);
	}
};




PLSQLParser.Partition_extension_clauseContext = Partition_extension_clauseContext;

PLSQLParser.prototype.partition_extension_clause = function() {

    var localctx = new Partition_extension_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, PLSQLParser.RULE_partition_extension_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4666;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.PARTITION || _la===PLSQLParser.SUBPARTITION)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 4668;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.FOR) {
            this.state = 4667;
            this.match(PLSQLParser.FOR);
        }

        this.state = 4670;
        this.expression_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_column_alias;
    return this;
}

Column_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_aliasContext.prototype.constructor = Column_aliasContext;

Column_aliasContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Column_aliasContext.prototype.alias_quoted_string = function() {
    return this.getTypedRuleContext(Alias_quoted_stringContext,0);
};

Column_aliasContext.prototype.AS = function() {
    return this.getToken(PLSQLParser.AS, 0);
};

Column_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterColumn_alias(this);
	}
};

Column_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitColumn_alias(this);
	}
};




PLSQLParser.Column_aliasContext = Column_aliasContext;

PLSQLParser.prototype.column_alias = function() {

    var localctx = new Column_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, PLSQLParser.RULE_column_alias);
    var _la = 0; // Token type
    try {
        this.state = 4680;
        var la_ = this._interp.adaptivePredict(this._input,599,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4673;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.AS) {
                this.state = 4672;
                this.match(PLSQLParser.AS);
            }

            this.state = 4677;
            switch(this._input.LA(1)) {
            case PLSQLParser.A_LETTER:
            case PLSQLParser.ADD:
            case PLSQLParser.AFTER:
            case PLSQLParser.AGENT:
            case PLSQLParser.AGGREGATE:
            case PLSQLParser.ANALYZE:
            case PLSQLParser.ARRAY:
            case PLSQLParser.ASSOCIATE:
            case PLSQLParser.AT:
            case PLSQLParser.ATTRIBUTE:
            case PLSQLParser.AUDIT:
            case PLSQLParser.AUTHID:
            case PLSQLParser.AUTO:
            case PLSQLParser.AUTOMATIC:
            case PLSQLParser.AUTONOMOUS_TRANSACTION:
            case PLSQLParser.BATCH:
            case PLSQLParser.BEFORE:
            case PLSQLParser.BFILE:
            case PLSQLParser.BINARY_DOUBLE:
            case PLSQLParser.BINARY_FLOAT:
            case PLSQLParser.BINARY_INTEGER:
            case PLSQLParser.BLOB:
            case PLSQLParser.BLOCK:
            case PLSQLParser.BODY:
            case PLSQLParser.BOOLEAN:
            case PLSQLParser.BOTH:
            case PLSQLParser.BULK:
            case PLSQLParser.BYTE:
            case PLSQLParser.C_LETTER:
            case PLSQLParser.CALL:
            case PLSQLParser.CANONICAL:
            case PLSQLParser.CASCADE:
            case PLSQLParser.CAST:
            case PLSQLParser.CHAR:
            case PLSQLParser.CHAR_CS:
            case PLSQLParser.CHARACTER:
            case PLSQLParser.CHR:
            case PLSQLParser.CLOB:
            case PLSQLParser.CLOSE:
            case PLSQLParser.CLUSTER:
            case PLSQLParser.COLLECT:
            case PLSQLParser.COLUMNS:
            case PLSQLParser.COMMENT:
            case PLSQLParser.COMMIT:
            case PLSQLParser.COMMITTED:
            case PLSQLParser.COMPATIBILITY:
            case PLSQLParser.COMPILE:
            case PLSQLParser.COMPOUND:
            case PLSQLParser.CONSTANT:
            case PLSQLParser.CONSTRAINT:
            case PLSQLParser.CONSTRAINTS:
            case PLSQLParser.CONSTRUCTOR:
            case PLSQLParser.CONTENT:
            case PLSQLParser.CONTEXT:
            case PLSQLParser.CONTINUE:
            case PLSQLParser.CONVERT:
            case PLSQLParser.CORRUPT_XID:
            case PLSQLParser.CORRUPT_XID_ALL:
            case PLSQLParser.COST:
            case PLSQLParser.COUNT:
            case PLSQLParser.CROSS:
            case PLSQLParser.CUBE:
            case PLSQLParser.CURRENT_USER:
            case PLSQLParser.CURSOR:
            case PLSQLParser.CUSTOMDATUM:
            case PLSQLParser.CYCLE:
            case PLSQLParser.DATA:
            case PLSQLParser.DATABASE:
            case PLSQLParser.DAY:
            case PLSQLParser.DB_ROLE_CHANGE:
            case PLSQLParser.DBTIMEZONE:
            case PLSQLParser.DDL:
            case PLSQLParser.DEBUG:
            case PLSQLParser.DEC:
            case PLSQLParser.DECIMAL:
            case PLSQLParser.DECOMPOSE:
            case PLSQLParser.DECREMENT:
            case PLSQLParser.DEFAULTS:
            case PLSQLParser.DEFERRED:
            case PLSQLParser.DEFINER:
            case PLSQLParser.DETERMINISTIC:
            case PLSQLParser.DIMENSION:
            case PLSQLParser.DISABLE:
            case PLSQLParser.DISASSOCIATE:
            case PLSQLParser.DOCUMENT:
            case PLSQLParser.DOUBLE:
            case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
            case PLSQLParser.EACH:
            case PLSQLParser.ELEMENT:
            case PLSQLParser.EMPTY:
            case PLSQLParser.ENABLE:
            case PLSQLParser.ENCODING:
            case PLSQLParser.ENTITYESCAPING:
            case PLSQLParser.ERRORS:
            case PLSQLParser.ESCAPE:
            case PLSQLParser.EVALNAME:
            case PLSQLParser.EXCEPTION:
            case PLSQLParser.EXCEPTION_INIT:
            case PLSQLParser.EXCEPTIONS:
            case PLSQLParser.EXCLUDE:
            case PLSQLParser.EXECUTE:
            case PLSQLParser.EXIT:
            case PLSQLParser.EXPLAIN:
            case PLSQLParser.EXTERNAL:
            case PLSQLParser.EXTRACT:
            case PLSQLParser.FAILURE:
            case PLSQLParser.FINAL:
            case PLSQLParser.FIRST:
            case PLSQLParser.FIRST_VALUE:
            case PLSQLParser.FLOAT:
            case PLSQLParser.FOLLOWING:
            case PLSQLParser.FOLLOWS:
            case PLSQLParser.FORALL:
            case PLSQLParser.FORCE:
            case PLSQLParser.FULL:
            case PLSQLParser.FUNCTION:
            case PLSQLParser.GROUPING:
            case PLSQLParser.HASH:
            case PLSQLParser.HIDE:
            case PLSQLParser.HOUR:
            case PLSQLParser.IGNORE:
            case PLSQLParser.IMMEDIATE:
            case PLSQLParser.INCLUDE:
            case PLSQLParser.INCLUDING:
            case PLSQLParser.INCREMENT:
            case PLSQLParser.INDENT:
            case PLSQLParser.INDEXED:
            case PLSQLParser.INDICATOR:
            case PLSQLParser.INDICES:
            case PLSQLParser.INFINITE:
            case PLSQLParser.INLINE:
            case PLSQLParser.INNER:
            case PLSQLParser.INOUT:
            case PLSQLParser.INSTANTIABLE:
            case PLSQLParser.INSTEAD:
            case PLSQLParser.INT:
            case PLSQLParser.INTEGER:
            case PLSQLParser.INTERVAL:
            case PLSQLParser.INVALIDATE:
            case PLSQLParser.ISOLATION:
            case PLSQLParser.ITERATE:
            case PLSQLParser.JAVA:
            case PLSQLParser.JOIN:
            case PLSQLParser.KEEP:
            case PLSQLParser.LANGUAGE:
            case PLSQLParser.LAST:
            case PLSQLParser.LAST_VALUE:
            case PLSQLParser.LEADING:
            case PLSQLParser.LEFT:
            case PLSQLParser.LEVEL:
            case PLSQLParser.LIBRARY:
            case PLSQLParser.LIKE2:
            case PLSQLParser.LIKE4:
            case PLSQLParser.LIKEC:
            case PLSQLParser.LIMIT:
            case PLSQLParser.LOCAL:
            case PLSQLParser.LOCKED:
            case PLSQLParser.LOG:
            case PLSQLParser.LOGOFF:
            case PLSQLParser.LOGON:
            case PLSQLParser.LONG:
            case PLSQLParser.LOOP:
            case PLSQLParser.MAIN:
            case PLSQLParser.MAP:
            case PLSQLParser.MATCHED:
            case PLSQLParser.MAXVALUE:
            case PLSQLParser.MEASURES:
            case PLSQLParser.MEMBER:
            case PLSQLParser.MERGE:
            case PLSQLParser.MINUTE:
            case PLSQLParser.MINVALUE:
            case PLSQLParser.MLSLABEL:
            case PLSQLParser.MODEL:
            case PLSQLParser.MODIFY:
            case PLSQLParser.MONTH:
            case PLSQLParser.MULTISET:
            case PLSQLParser.NAME:
            case PLSQLParser.NAN:
            case PLSQLParser.NATURAL:
            case PLSQLParser.NATURALN:
            case PLSQLParser.NAV:
            case PLSQLParser.NCHAR:
            case PLSQLParser.NCHAR_CS:
            case PLSQLParser.NCLOB:
            case PLSQLParser.NESTED:
            case PLSQLParser.NEW:
            case PLSQLParser.NO:
            case PLSQLParser.NOAUDIT:
            case PLSQLParser.NOCOPY:
            case PLSQLParser.NOCYCLE:
            case PLSQLParser.NOENTITYESCAPING:
            case PLSQLParser.NONE:
            case PLSQLParser.NOSCHEMACHECK:
            case PLSQLParser.NULLS:
            case PLSQLParser.NUMBER:
            case PLSQLParser.NUMERIC:
            case PLSQLParser.NVARCHAR2:
            case PLSQLParser.OBJECT:
            case PLSQLParser.OFF:
            case PLSQLParser.OID:
            case PLSQLParser.OLD:
            case PLSQLParser.ONLY:
            case PLSQLParser.OPEN:
            case PLSQLParser.ORADATA:
            case PLSQLParser.ORDINALITY:
            case PLSQLParser.OSERROR:
            case PLSQLParser.OUT:
            case PLSQLParser.OUTER:
            case PLSQLParser.OVER:
            case PLSQLParser.OVERRIDING:
            case PLSQLParser.PACKAGE:
            case PLSQLParser.PARALLEL_ENABLE:
            case PLSQLParser.PARAMETERS:
            case PLSQLParser.PARENT:
            case PLSQLParser.PARTITION:
            case PLSQLParser.PASSING:
            case PLSQLParser.PATH:
            case PLSQLParser.PIPELINED:
            case PLSQLParser.PLAN:
            case PLSQLParser.PLS_INTEGER:
            case PLSQLParser.POSITIVE:
            case PLSQLParser.POSITIVEN:
            case PLSQLParser.PRAGMA:
            case PLSQLParser.PRECEDING:
            case PLSQLParser.PRECISION:
            case PLSQLParser.PRESENT:
            case PLSQLParser.RAISE:
            case PLSQLParser.RANGE:
            case PLSQLParser.RAW:
            case PLSQLParser.READ:
            case PLSQLParser.REAL:
            case PLSQLParser.RECORD:
            case PLSQLParser.REF:
            case PLSQLParser.REFERENCE:
            case PLSQLParser.REFERENCING:
            case PLSQLParser.REJECT:
            case PLSQLParser.RELIES_ON:
            case PLSQLParser.RENAME:
            case PLSQLParser.REPLACE:
            case PLSQLParser.RESPECT:
            case PLSQLParser.RESTRICT_REFERENCES:
            case PLSQLParser.RESULT:
            case PLSQLParser.RESULT_CACHE:
            case PLSQLParser.RETURN:
            case PLSQLParser.RETURNING:
            case PLSQLParser.REUSE:
            case PLSQLParser.REVERSE:
            case PLSQLParser.RIGHT:
            case PLSQLParser.ROLLBACK:
            case PLSQLParser.ROLLUP:
            case PLSQLParser.ROW:
            case PLSQLParser.ROWID:
            case PLSQLParser.ROWS:
            case PLSQLParser.RULES:
            case PLSQLParser.SAMPLE:
            case PLSQLParser.SAVE:
            case PLSQLParser.SAVEPOINT:
            case PLSQLParser.SCHEMA:
            case PLSQLParser.SCHEMACHECK:
            case PLSQLParser.SCN:
            case PLSQLParser.SECOND:
            case PLSQLParser.SEED:
            case PLSQLParser.SEGMENT:
            case PLSQLParser.SELF:
            case PLSQLParser.SEQUENTIAL:
            case PLSQLParser.SERIALIZABLE:
            case PLSQLParser.SERIALLY_REUSABLE:
            case PLSQLParser.SERVERERROR:
            case PLSQLParser.SESSIONTIMEZONE:
            case PLSQLParser.SET:
            case PLSQLParser.SETS:
            case PLSQLParser.SETTINGS:
            case PLSQLParser.SHOW:
            case PLSQLParser.SHUTDOWN:
            case PLSQLParser.SIBLINGS:
            case PLSQLParser.SIGNTYPE:
            case PLSQLParser.SIMPLE_INTEGER:
            case PLSQLParser.SINGLE:
            case PLSQLParser.SKIP:
            case PLSQLParser.SMALLINT:
            case PLSQLParser.SNAPSHOT:
            case PLSQLParser.SOME:
            case PLSQLParser.SPECIFICATION:
            case PLSQLParser.SQLDATA:
            case PLSQLParser.SQLERROR:
            case PLSQLParser.STANDALONE:
            case PLSQLParser.STARTUP:
            case PLSQLParser.STATEMENT:
            case PLSQLParser.STATEMENT_ID:
            case PLSQLParser.STATIC:
            case PLSQLParser.STATISTICS:
            case PLSQLParser.STRING:
            case PLSQLParser.SUBMULTISET:
            case PLSQLParser.SUBPARTITION:
            case PLSQLParser.SUBSTITUTABLE:
            case PLSQLParser.SUBTYPE:
            case PLSQLParser.SUCCESS:
            case PLSQLParser.SUSPEND:
            case PLSQLParser.TIME:
            case PLSQLParser.TIMESTAMP:
            case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
            case PLSQLParser.TIMEZONE_ABBR:
            case PLSQLParser.TIMEZONE_HOUR:
            case PLSQLParser.TIMEZONE_MINUTE:
            case PLSQLParser.TIMEZONE_REGION:
            case PLSQLParser.TRAILING:
            case PLSQLParser.TRANSACTION:
            case PLSQLParser.TRANSLATE:
            case PLSQLParser.TREAT:
            case PLSQLParser.TRIGGER:
            case PLSQLParser.TRIM:
            case PLSQLParser.TRUNCATE:
            case PLSQLParser.TYPE:
            case PLSQLParser.UNBOUNDED:
            case PLSQLParser.UNDER:
            case PLSQLParser.UNLIMITED:
            case PLSQLParser.UNTIL:
            case PLSQLParser.UPDATED:
            case PLSQLParser.UPSERT:
            case PLSQLParser.UROWID:
            case PLSQLParser.USE:
            case PLSQLParser.VALIDATE:
            case PLSQLParser.VALUE:
            case PLSQLParser.VARCHAR:
            case PLSQLParser.VARCHAR2:
            case PLSQLParser.VARIABLE:
            case PLSQLParser.VARRAY:
            case PLSQLParser.VARYING:
            case PLSQLParser.VERSION:
            case PLSQLParser.VERSIONS:
            case PLSQLParser.WAIT:
            case PLSQLParser.WARNING:
            case PLSQLParser.WELLFORMED:
            case PLSQLParser.WHENEVER:
            case PLSQLParser.WHILE:
            case PLSQLParser.WITHIN:
            case PLSQLParser.WORK:
            case PLSQLParser.WRITE:
            case PLSQLParser.XML:
            case PLSQLParser.XMLAGG:
            case PLSQLParser.XMLATTRIBUTES:
            case PLSQLParser.XMLCAST:
            case PLSQLParser.XMLCOLATTVAL:
            case PLSQLParser.XMLELEMENT:
            case PLSQLParser.XMLEXISTS:
            case PLSQLParser.XMLFOREST:
            case PLSQLParser.XMLNAMESPACES:
            case PLSQLParser.XMLPARSE:
            case PLSQLParser.XMLPI:
            case PLSQLParser.XMLQUERY:
            case PLSQLParser.XMLROOT:
            case PLSQLParser.XMLSERIALIZE:
            case PLSQLParser.XMLTABLE:
            case PLSQLParser.YEAR:
            case PLSQLParser.YES:
            case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
            case PLSQLParser.ZONE:
            case PLSQLParser.PREDICTION:
            case PLSQLParser.PREDICTION_BOUNDS:
            case PLSQLParser.PREDICTION_COST:
            case PLSQLParser.PREDICTION_DETAILS:
            case PLSQLParser.PREDICTION_PROBABILITY:
            case PLSQLParser.PREDICTION_SET:
            case PLSQLParser.CUME_DIST:
            case PLSQLParser.DENSE_RANK:
            case PLSQLParser.LISTAGG:
            case PLSQLParser.PERCENT_RANK:
            case PLSQLParser.PERCENTILE_CONT:
            case PLSQLParser.PERCENTILE_DISC:
            case PLSQLParser.RANK:
            case PLSQLParser.AVG:
            case PLSQLParser.CORR:
            case PLSQLParser.LAG:
            case PLSQLParser.LEAD:
            case PLSQLParser.MAX:
            case PLSQLParser.MEDIAN:
            case PLSQLParser.MIN:
            case PLSQLParser.NTILE:
            case PLSQLParser.RATIO_TO_REPORT:
            case PLSQLParser.ROW_NUMBER:
            case PLSQLParser.SUM:
            case PLSQLParser.VARIANCE:
            case PLSQLParser.REGR_:
            case PLSQLParser.STDDEV:
            case PLSQLParser.VAR_:
            case PLSQLParser.COVAR_:
            case PLSQLParser.DELIMITED_ID:
            case PLSQLParser.INTRODUCER:
            case PLSQLParser.REGULAR_ID:
                this.state = 4675;
                this.id();
                break;
            case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
            case PLSQLParser.CHAR_STRING:
                this.state = 4676;
                this.alias_quoted_string();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4679;
            this.match(PLSQLParser.AS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_alias;
    return this;
}

Table_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_aliasContext.prototype.constructor = Table_aliasContext;

Table_aliasContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Table_aliasContext.prototype.alias_quoted_string = function() {
    return this.getTypedRuleContext(Alias_quoted_stringContext,0);
};

Table_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_alias(this);
	}
};

Table_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_alias(this);
	}
};




PLSQLParser.Table_aliasContext = Table_aliasContext;

PLSQLParser.prototype.table_alias = function() {

    var localctx = new Table_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, PLSQLParser.RULE_table_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4684;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 4682;
            this.id();
            break;
        case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
        case PLSQLParser.CHAR_STRING:
            this.state = 4683;
            this.alias_quoted_string();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alias_quoted_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_alias_quoted_string;
    return this;
}

Alias_quoted_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alias_quoted_stringContext.prototype.constructor = Alias_quoted_stringContext;

Alias_quoted_stringContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Alias_quoted_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAlias_quoted_string(this);
	}
};

Alias_quoted_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAlias_quoted_string(this);
	}
};




PLSQLParser.Alias_quoted_stringContext = Alias_quoted_stringContext;

PLSQLParser.prototype.alias_quoted_string = function() {

    var localctx = new Alias_quoted_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, PLSQLParser.RULE_alias_quoted_string);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4686;
        this.quoted_string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Where_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_where_clause;
    return this;
}

Where_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_clauseContext.prototype.constructor = Where_clauseContext;

Where_clauseContext.prototype.WHERE = function() {
    return this.getToken(PLSQLParser.WHERE, 0);
};

Where_clauseContext.prototype.current_of_clause = function() {
    return this.getTypedRuleContext(Current_of_clauseContext,0);
};

Where_clauseContext.prototype.condition_wrapper = function() {
    return this.getTypedRuleContext(Condition_wrapperContext,0);
};

Where_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterWhere_clause(this);
	}
};

Where_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitWhere_clause(this);
	}
};




PLSQLParser.Where_clauseContext = Where_clauseContext;

PLSQLParser.prototype.where_clause = function() {

    var localctx = new Where_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, PLSQLParser.RULE_where_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4688;
        this.match(PLSQLParser.WHERE);
        this.state = 4691;
        switch(this._input.LA(1)) {
        case PLSQLParser.CURRENT:
            this.state = 4689;
            this.current_of_clause();
            break;
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ALL:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ANY:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CASE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONNECT_BY_ROOT:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DATE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DISTINCT:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXISTS:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FALSE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NOT:
        case PLSQLParser.NULL:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.PRIOR:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUE:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
        case PLSQLParser.UNSIGNED_INTEGER:
        case PLSQLParser.APPROXIMATE_NUM_LIT:
        case PLSQLParser.CHAR_STRING:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.LEFT_PAREN:
        case PLSQLParser.PLUS_SIGN:
        case PLSQLParser.MINUS_SIGN:
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.state = 4690;
            this.condition_wrapper();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Current_of_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_current_of_clause;
    return this;
}

Current_of_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Current_of_clauseContext.prototype.constructor = Current_of_clauseContext;

Current_of_clauseContext.prototype.CURRENT = function() {
    return this.getToken(PLSQLParser.CURRENT, 0);
};

Current_of_clauseContext.prototype.OF = function() {
    return this.getToken(PLSQLParser.OF, 0);
};

Current_of_clauseContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Current_of_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCurrent_of_clause(this);
	}
};

Current_of_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCurrent_of_clause(this);
	}
};




PLSQLParser.Current_of_clauseContext = Current_of_clauseContext;

PLSQLParser.prototype.current_of_clause = function() {

    var localctx = new Current_of_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 638, PLSQLParser.RULE_current_of_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4693;
        this.match(PLSQLParser.CURRENT);
        this.state = 4694;
        this.match(PLSQLParser.OF);
        this.state = 4695;
        this.cursor_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Into_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_into_clause;
    return this;
}

Into_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Into_clauseContext.prototype.constructor = Into_clauseContext;

Into_clauseContext.prototype.INTO = function() {
    return this.getToken(PLSQLParser.INTO, 0);
};

Into_clauseContext.prototype.variable_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_nameContext);
    } else {
        return this.getTypedRuleContext(Variable_nameContext,i);
    }
};

Into_clauseContext.prototype.BULK = function() {
    return this.getToken(PLSQLParser.BULK, 0);
};

Into_clauseContext.prototype.COLLECT = function() {
    return this.getToken(PLSQLParser.COLLECT, 0);
};

Into_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterInto_clause(this);
	}
};

Into_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitInto_clause(this);
	}
};




PLSQLParser.Into_clauseContext = Into_clauseContext;

PLSQLParser.prototype.into_clause = function() {

    var localctx = new Into_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 640, PLSQLParser.RULE_into_clause);
    var _la = 0; // Token type
    try {
        this.state = 4717;
        switch(this._input.LA(1)) {
        case PLSQLParser.INTO:
            this.enterOuterAlt(localctx, 1);
            this.state = 4697;
            this.match(PLSQLParser.INTO);
            this.state = 4698;
            this.variable_name();
            this.state = 4703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 4699;
                this.match(PLSQLParser.COMMA);
                this.state = 4700;
                this.variable_name();
                this.state = 4705;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case PLSQLParser.BULK:
            this.enterOuterAlt(localctx, 2);
            this.state = 4706;
            this.match(PLSQLParser.BULK);
            this.state = 4707;
            this.match(PLSQLParser.COLLECT);
            this.state = 4708;
            this.match(PLSQLParser.INTO);
            this.state = 4709;
            this.variable_name();
            this.state = 4714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 4710;
                this.match(PLSQLParser.COMMA);
                this.state = 4711;
                this.variable_name();
                this.state = 4716;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_xml_column_name;
    return this;
}

Xml_column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_column_nameContext.prototype.constructor = Xml_column_nameContext;

Xml_column_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Xml_column_nameContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Xml_column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterXml_column_name(this);
	}
};

Xml_column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitXml_column_name(this);
	}
};




PLSQLParser.Xml_column_nameContext = Xml_column_nameContext;

PLSQLParser.prototype.xml_column_name = function() {

    var localctx = new Xml_column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, PLSQLParser.RULE_xml_column_name);
    try {
        this.state = 4721;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 4719;
            this.id();
            break;
        case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
        case PLSQLParser.CHAR_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 4720;
            this.quoted_string();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cost_class_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cost_class_name;
    return this;
}

Cost_class_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cost_class_nameContext.prototype.constructor = Cost_class_nameContext;

Cost_class_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Cost_class_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCost_class_name(this);
	}
};

Cost_class_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCost_class_name(this);
	}
};




PLSQLParser.Cost_class_nameContext = Cost_class_nameContext;

PLSQLParser.prototype.cost_class_name = function() {

    var localctx = new Cost_class_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, PLSQLParser.RULE_cost_class_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4723;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_attribute_name;
    return this;
}

Attribute_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_nameContext.prototype.constructor = Attribute_nameContext;

Attribute_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Attribute_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAttribute_name(this);
	}
};

Attribute_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAttribute_name(this);
	}
};




PLSQLParser.Attribute_nameContext = Attribute_nameContext;

PLSQLParser.prototype.attribute_name = function() {

    var localctx = new Attribute_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, PLSQLParser.RULE_attribute_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4725;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_savepoint_name;
    return this;
}

Savepoint_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_nameContext.prototype.constructor = Savepoint_nameContext;

Savepoint_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Savepoint_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSavepoint_name(this);
	}
};

Savepoint_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSavepoint_name(this);
	}
};




PLSQLParser.Savepoint_nameContext = Savepoint_nameContext;

PLSQLParser.prototype.savepoint_name = function() {

    var localctx = new Savepoint_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 648, PLSQLParser.RULE_savepoint_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4727;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollback_segment_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_rollback_segment_name;
    return this;
}

Rollback_segment_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollback_segment_nameContext.prototype.constructor = Rollback_segment_nameContext;

Rollback_segment_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Rollback_segment_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRollback_segment_name(this);
	}
};

Rollback_segment_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRollback_segment_name(this);
	}
};




PLSQLParser.Rollback_segment_nameContext = Rollback_segment_nameContext;

PLSQLParser.prototype.rollback_segment_name = function() {

    var localctx = new Rollback_segment_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, PLSQLParser.RULE_rollback_segment_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4729;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_var_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_var_name;
    return this;
}

Table_var_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_var_nameContext.prototype.constructor = Table_var_nameContext;

Table_var_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Table_var_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_var_name(this);
	}
};

Table_var_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_var_name(this);
	}
};




PLSQLParser.Table_var_nameContext = Table_var_nameContext;

PLSQLParser.prototype.table_var_name = function() {

    var localctx = new Table_var_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, PLSQLParser.RULE_table_var_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4731;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Schema_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_schema_name;
    return this;
}

Schema_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Schema_nameContext.prototype.constructor = Schema_nameContext;

Schema_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Schema_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSchema_name(this);
	}
};

Schema_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSchema_name(this);
	}
};




PLSQLParser.Schema_nameContext = Schema_nameContext;

PLSQLParser.prototype.schema_name = function() {

    var localctx = new Schema_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, PLSQLParser.RULE_schema_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4733;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Routine_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_routine_name;
    return this;
}

Routine_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Routine_nameContext.prototype.constructor = Routine_nameContext;

Routine_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Routine_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Routine_nameContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Routine_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRoutine_name(this);
	}
};

Routine_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRoutine_name(this);
	}
};




PLSQLParser.Routine_nameContext = Routine_nameContext;

PLSQLParser.prototype.routine_name = function() {

    var localctx = new Routine_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, PLSQLParser.RULE_routine_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4735;
        this.id();
        this.state = 4740;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 4736;
            this.match(PLSQLParser.PERIOD);
            this.state = 4737;
            this.id_expression();
            this.state = 4742;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4745;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AT_SIGN) {
            this.state = 4743;
            this.match(PLSQLParser.AT_SIGN);
            this.state = 4744;
            this.link_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_package_name;
    return this;
}

Package_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_nameContext.prototype.constructor = Package_nameContext;

Package_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Package_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPackage_name(this);
	}
};

Package_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPackage_name(this);
	}
};




PLSQLParser.Package_nameContext = Package_nameContext;

PLSQLParser.prototype.package_name = function() {

    var localctx = new Package_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, PLSQLParser.RULE_package_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4747;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Implementation_type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_implementation_type_name;
    return this;
}

Implementation_type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Implementation_type_nameContext.prototype.constructor = Implementation_type_nameContext;

Implementation_type_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Implementation_type_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Implementation_type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterImplementation_type_name(this);
	}
};

Implementation_type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitImplementation_type_name(this);
	}
};




PLSQLParser.Implementation_type_nameContext = Implementation_type_nameContext;

PLSQLParser.prototype.implementation_type_name = function() {

    var localctx = new Implementation_type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, PLSQLParser.RULE_implementation_type_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4749;
        this.id();
        this.state = 4752;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PERIOD) {
            this.state = 4750;
            this.match(PLSQLParser.PERIOD);
            this.state = 4751;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_parameter_name;
    return this;
}

Parameter_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_nameContext.prototype.constructor = Parameter_nameContext;

Parameter_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Parameter_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterParameter_name(this);
	}
};

Parameter_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitParameter_name(this);
	}
};




PLSQLParser.Parameter_nameContext = Parameter_nameContext;

PLSQLParser.prototype.parameter_name = function() {

    var localctx = new Parameter_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, PLSQLParser.RULE_parameter_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4754;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Reference_model_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_reference_model_name;
    return this;
}

Reference_model_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reference_model_nameContext.prototype.constructor = Reference_model_nameContext;

Reference_model_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Reference_model_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterReference_model_name(this);
	}
};

Reference_model_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitReference_model_name(this);
	}
};




PLSQLParser.Reference_model_nameContext = Reference_model_nameContext;

PLSQLParser.prototype.reference_model_name = function() {

    var localctx = new Reference_model_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 664, PLSQLParser.RULE_reference_model_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4756;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Main_model_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_main_model_name;
    return this;
}

Main_model_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Main_model_nameContext.prototype.constructor = Main_model_nameContext;

Main_model_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Main_model_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterMain_model_name(this);
	}
};

Main_model_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitMain_model_name(this);
	}
};




PLSQLParser.Main_model_nameContext = Main_model_nameContext;

PLSQLParser.prototype.main_model_name = function() {

    var localctx = new Main_model_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 666, PLSQLParser.RULE_main_model_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4758;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Aggregate_function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_aggregate_function_name;
    return this;
}

Aggregate_function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_function_nameContext.prototype.constructor = Aggregate_function_nameContext;

Aggregate_function_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Aggregate_function_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Aggregate_function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterAggregate_function_name(this);
	}
};

Aggregate_function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitAggregate_function_name(this);
	}
};




PLSQLParser.Aggregate_function_nameContext = Aggregate_function_nameContext;

PLSQLParser.prototype.aggregate_function_name = function() {

    var localctx = new Aggregate_function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 668, PLSQLParser.RULE_aggregate_function_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4760;
        this.id();
        this.state = 4765;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 4761;
            this.match(PLSQLParser.PERIOD);
            this.state = 4762;
            this.id_expression();
            this.state = 4767;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_query_name;
    return this;
}

Query_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_nameContext.prototype.constructor = Query_nameContext;

Query_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Query_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterQuery_name(this);
	}
};

Query_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitQuery_name(this);
	}
};




PLSQLParser.Query_nameContext = Query_nameContext;

PLSQLParser.prototype.query_name = function() {

    var localctx = new Query_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, PLSQLParser.RULE_query_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4768;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constraint_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_constraint_name;
    return this;
}

Constraint_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constraint_nameContext.prototype.constructor = Constraint_nameContext;

Constraint_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Constraint_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Constraint_nameContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Constraint_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConstraint_name(this);
	}
};

Constraint_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConstraint_name(this);
	}
};




PLSQLParser.Constraint_nameContext = Constraint_nameContext;

PLSQLParser.prototype.constraint_name = function() {

    var localctx = new Constraint_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, PLSQLParser.RULE_constraint_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4770;
        this.id();
        this.state = 4775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 4771;
            this.match(PLSQLParser.PERIOD);
            this.state = 4772;
            this.id_expression();
            this.state = 4777;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4780;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.AT_SIGN) {
            this.state = 4778;
            this.match(PLSQLParser.AT_SIGN);
            this.state = 4779;
            this.link_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Label_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_label_name;
    return this;
}

Label_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_nameContext.prototype.constructor = Label_nameContext;

Label_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Label_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLabel_name(this);
	}
};

Label_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLabel_name(this);
	}
};




PLSQLParser.Label_nameContext = Label_nameContext;

PLSQLParser.prototype.label_name = function() {

    var localctx = new Label_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 674, PLSQLParser.RULE_label_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4782;
        this.id_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_type_name;
    return this;
}

Type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_nameContext.prototype.constructor = Type_nameContext;

Type_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterType_name(this);
	}
};

Type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitType_name(this);
	}
};




PLSQLParser.Type_nameContext = Type_nameContext;

PLSQLParser.prototype.type_name = function() {

    var localctx = new Type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 676, PLSQLParser.RULE_type_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4784;
        this.id_expression();
        this.state = 4789;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 4785;
            this.match(PLSQLParser.PERIOD);
            this.state = 4786;
            this.id_expression();
            this.state = 4791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sequence_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_sequence_name;
    return this;
}

Sequence_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_nameContext.prototype.constructor = Sequence_nameContext;

Sequence_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Sequence_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterSequence_name(this);
	}
};

Sequence_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitSequence_name(this);
	}
};




PLSQLParser.Sequence_nameContext = Sequence_nameContext;

PLSQLParser.prototype.sequence_name = function() {

    var localctx = new Sequence_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 678, PLSQLParser.RULE_sequence_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4792;
        this.id_expression();
        this.state = 4797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 4793;
            this.match(PLSQLParser.PERIOD);
            this.state = 4794;
            this.id_expression();
            this.state = 4799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_exception_name;
    return this;
}

Exception_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_nameContext.prototype.constructor = Exception_nameContext;

Exception_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Exception_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Exception_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterException_name(this);
	}
};

Exception_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitException_name(this);
	}
};




PLSQLParser.Exception_nameContext = Exception_nameContext;

PLSQLParser.prototype.exception_name = function() {

    var localctx = new Exception_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, PLSQLParser.RULE_exception_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4800;
        this.id();
        this.state = 4805;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 4801;
            this.match(PLSQLParser.PERIOD);
            this.state = 4802;
            this.id_expression();
            this.state = 4807;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Function_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFunction_name(this);
	}
};




PLSQLParser.Function_nameContext = Function_nameContext;

PLSQLParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 682, PLSQLParser.RULE_function_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4808;
        this.id();
        this.state = 4811;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PERIOD) {
            this.state = 4809;
            this.match(PLSQLParser.PERIOD);
            this.state = 4810;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_procedure_name;
    return this;
}

Procedure_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_nameContext.prototype.constructor = Procedure_nameContext;

Procedure_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Procedure_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Procedure_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterProcedure_name(this);
	}
};

Procedure_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitProcedure_name(this);
	}
};




PLSQLParser.Procedure_nameContext = Procedure_nameContext;

PLSQLParser.prototype.procedure_name = function() {

    var localctx = new Procedure_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 684, PLSQLParser.RULE_procedure_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4813;
        this.id();
        this.state = 4816;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PERIOD) {
            this.state = 4814;
            this.match(PLSQLParser.PERIOD);
            this.state = 4815;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_trigger_name;
    return this;
}

Trigger_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_nameContext.prototype.constructor = Trigger_nameContext;

Trigger_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Trigger_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Trigger_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTrigger_name(this);
	}
};

Trigger_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTrigger_name(this);
	}
};




PLSQLParser.Trigger_nameContext = Trigger_nameContext;

PLSQLParser.prototype.trigger_name = function() {

    var localctx = new Trigger_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 686, PLSQLParser.RULE_trigger_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4818;
        this.id();
        this.state = 4821;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PERIOD) {
            this.state = 4819;
            this.match(PLSQLParser.PERIOD);
            this.state = 4820;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_variable_name;
    return this;
}

Variable_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_nameContext.prototype.constructor = Variable_nameContext;

Variable_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Variable_nameContext.prototype.INTRODUCER = function() {
    return this.getToken(PLSQLParser.INTRODUCER, 0);
};

Variable_nameContext.prototype.char_set_name = function() {
    return this.getTypedRuleContext(Char_set_nameContext,0);
};

Variable_nameContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Variable_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterVariable_name(this);
	}
};

Variable_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitVariable_name(this);
	}
};




PLSQLParser.Variable_nameContext = Variable_nameContext;

PLSQLParser.prototype.variable_name = function() {

    var localctx = new Variable_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 688, PLSQLParser.RULE_variable_name);
    var _la = 0; // Token type
    try {
        this.state = 4833;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 4825;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.INTRODUCER) {
                this.state = 4823;
                this.match(PLSQLParser.INTRODUCER);
                this.state = 4824;
                this.char_set_name();
            }

            this.state = 4827;
            this.id_expression();
            this.state = 4830;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERIOD) {
                this.state = 4828;
                this.match(PLSQLParser.PERIOD);
                this.state = 4829;
                this.id_expression();
            }

            break;
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 4832;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_index_name;
    return this;
}

Index_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_nameContext.prototype.constructor = Index_nameContext;

Index_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Index_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterIndex_name(this);
	}
};

Index_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitIndex_name(this);
	}
};




PLSQLParser.Index_nameContext = Index_nameContext;

PLSQLParser.prototype.index_name = function() {

    var localctx = new Index_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 690, PLSQLParser.RULE_index_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4835;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_cursor_name;
    return this;
}

Cursor_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_nameContext.prototype.constructor = Cursor_nameContext;

Cursor_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Cursor_nameContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Cursor_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCursor_name(this);
	}
};

Cursor_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCursor_name(this);
	}
};




PLSQLParser.Cursor_nameContext = Cursor_nameContext;

PLSQLParser.prototype.cursor_name = function() {

    var localctx = new Cursor_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 692, PLSQLParser.RULE_cursor_name);
    try {
        this.state = 4839;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 4837;
            this.id();
            break;
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 4838;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_record_name;
    return this;
}

Record_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_nameContext.prototype.constructor = Record_nameContext;

Record_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Record_nameContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Record_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRecord_name(this);
	}
};

Record_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRecord_name(this);
	}
};




PLSQLParser.Record_nameContext = Record_nameContext;

PLSQLParser.prototype.record_name = function() {

    var localctx = new Record_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 694, PLSQLParser.RULE_record_name);
    try {
        this.state = 4843;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.DELIMITED_ID:
        case PLSQLParser.INTRODUCER:
        case PLSQLParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 4841;
            this.id();
            break;
        case PLSQLParser.BINDVAR:
        case PLSQLParser.COLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 4842;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_collection_name;
    return this;
}

Collection_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_nameContext.prototype.constructor = Collection_nameContext;

Collection_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Collection_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Collection_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterCollection_name(this);
	}
};

Collection_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitCollection_name(this);
	}
};




PLSQLParser.Collection_nameContext = Collection_nameContext;

PLSQLParser.prototype.collection_name = function() {

    var localctx = new Collection_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 696, PLSQLParser.RULE_collection_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4845;
        this.id();
        this.state = 4848;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.PERIOD) {
            this.state = 4846;
            this.match(PLSQLParser.PERIOD);
            this.state = 4847;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Link_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_link_name;
    return this;
}

Link_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Link_nameContext.prototype.constructor = Link_nameContext;

Link_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Link_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLink_name(this);
	}
};

Link_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLink_name(this);
	}
};




PLSQLParser.Link_nameContext = Link_nameContext;

PLSQLParser.prototype.link_name = function() {

    var localctx = new Link_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 698, PLSQLParser.RULE_link_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4850;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_column_name;
    return this;
}

Column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_nameContext.prototype.constructor = Column_nameContext;

Column_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Column_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterColumn_name(this);
	}
};

Column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitColumn_name(this);
	}
};




PLSQLParser.Column_nameContext = Column_nameContext;

PLSQLParser.prototype.column_name = function() {

    var localctx = new Column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 700, PLSQLParser.RULE_column_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4852;
        this.id();
        this.state = 4857;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 4853;
            this.match(PLSQLParser.PERIOD);
            this.state = 4854;
            this.id_expression();
            this.state = 4859;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Tableview_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_tableview_name;
    return this;
}

Tableview_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tableview_nameContext.prototype.constructor = Tableview_nameContext;

Tableview_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Tableview_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Tableview_nameContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Tableview_nameContext.prototype.partition_extension_clause = function() {
    return this.getTypedRuleContext(Partition_extension_clauseContext,0);
};

Tableview_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTableview_name(this);
	}
};

Tableview_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTableview_name(this);
	}
};




PLSQLParser.Tableview_nameContext = Tableview_nameContext;

PLSQLParser.prototype.tableview_name = function() {

    var localctx = new Tableview_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 702, PLSQLParser.RULE_tableview_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4860;
        this.id();
        this.state = 4863;
        var la_ = this._interp.adaptivePredict(this._input,625,this._ctx);
        if(la_===1) {
            this.state = 4861;
            this.match(PLSQLParser.PERIOD);
            this.state = 4862;
            this.id_expression();

        }
        this.state = 4868;
        var la_ = this._interp.adaptivePredict(this._input,626,this._ctx);
        if(la_===1) {
            this.state = 4865;
            this.match(PLSQLParser.AT_SIGN);
            this.state = 4866;
            this.link_name();

        } else if(la_===2) {
            this.state = 4867;
            this.partition_extension_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Char_set_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_char_set_name;
    return this;
}

Char_set_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Char_set_nameContext.prototype.constructor = Char_set_nameContext;

Char_set_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Char_set_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterChar_set_name(this);
	}
};

Char_set_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitChar_set_name(this);
	}
};




PLSQLParser.Char_set_nameContext = Char_set_nameContext;

PLSQLParser.prototype.char_set_name = function() {

    var localctx = new Char_set_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 704, PLSQLParser.RULE_char_set_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4870;
        this.id_expression();
        this.state = 4875;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 4871;
            this.match(PLSQLParser.PERIOD);
            this.state = 4872;
            this.id_expression();
            this.state = 4877;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Keep_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_keep_clause;
    return this;
}

Keep_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Keep_clauseContext.prototype.constructor = Keep_clauseContext;

Keep_clauseContext.prototype.KEEP = function() {
    return this.getToken(PLSQLParser.KEEP, 0);
};

Keep_clauseContext.prototype.DENSE_RANK = function() {
    return this.getToken(PLSQLParser.DENSE_RANK, 0);
};

Keep_clauseContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Keep_clauseContext.prototype.FIRST = function() {
    return this.getToken(PLSQLParser.FIRST, 0);
};

Keep_clauseContext.prototype.LAST = function() {
    return this.getToken(PLSQLParser.LAST, 0);
};

Keep_clauseContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Keep_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterKeep_clause(this);
	}
};

Keep_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitKeep_clause(this);
	}
};




PLSQLParser.Keep_clauseContext = Keep_clauseContext;

PLSQLParser.prototype.keep_clause = function() {

    var localctx = new Keep_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 706, PLSQLParser.RULE_keep_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4878;
        this.match(PLSQLParser.KEEP);
        this.state = 4879;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 4880;
        this.match(PLSQLParser.DENSE_RANK);
        this.state = 4881;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.FIRST || _la===PLSQLParser.LAST)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 4882;
        this.order_by_clause();
        this.state = 4883;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 4885;
        var la_ = this._interp.adaptivePredict(this._input,628,this._ctx);
        if(la_===1) {
            this.state = 4884;
            this.over_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_function_argument;
    return this;
}

Function_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argumentContext.prototype.constructor = Function_argumentContext;

Function_argumentContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Function_argumentContext.prototype.keep_clause = function() {
    return this.getTypedRuleContext(Keep_clauseContext,0);
};

Function_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFunction_argument(this);
	}
};

Function_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFunction_argument(this);
	}
};




PLSQLParser.Function_argumentContext = Function_argumentContext;

PLSQLParser.prototype.function_argument = function() {

    var localctx = new Function_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 708, PLSQLParser.RULE_function_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4887;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 4889;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ALL - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ANY - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CASE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONNECT_BY_ROOT - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DATE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (PLSQLParser.DEFAULT - 98)) | (1 << (PLSQLParser.DEFAULTS - 98)) | (1 << (PLSQLParser.DEFERRED - 98)) | (1 << (PLSQLParser.DEFINER - 98)) | (1 << (PLSQLParser.DETERMINISTIC - 98)) | (1 << (PLSQLParser.DIMENSION - 98)) | (1 << (PLSQLParser.DISABLE - 98)) | (1 << (PLSQLParser.DISASSOCIATE - 98)) | (1 << (PLSQLParser.DISTINCT - 98)) | (1 << (PLSQLParser.DOCUMENT - 98)) | (1 << (PLSQLParser.DOUBLE - 98)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 98)) | (1 << (PLSQLParser.EACH - 98)) | (1 << (PLSQLParser.ELEMENT - 98)) | (1 << (PLSQLParser.EMPTY - 98)) | (1 << (PLSQLParser.ENABLE - 98)) | (1 << (PLSQLParser.ENCODING - 98)) | (1 << (PLSQLParser.ENTITYESCAPING - 98)) | (1 << (PLSQLParser.ERRORS - 98)) | (1 << (PLSQLParser.ESCAPE - 98)) | (1 << (PLSQLParser.EVALNAME - 98)) | (1 << (PLSQLParser.EXCEPTION - 98)) | (1 << (PLSQLParser.EXCEPTION_INIT - 98)) | (1 << (PLSQLParser.EXCEPTIONS - 98)) | (1 << (PLSQLParser.EXCLUDE - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXISTS - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FALSE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NOT - 228)) | (1 << (PLSQLParser.NULL - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)) | (1 << (PLSQLParser.PRIOR - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUE - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 454)) | (1 << (PLSQLParser.UNSIGNED_INTEGER - 454)) | (1 << (PLSQLParser.APPROXIMATE_NUM_LIT - 454)) | (1 << (PLSQLParser.CHAR_STRING - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PLSQLParser.LEFT_PAREN - 488)) | (1 << (PLSQLParser.PLUS_SIGN - 488)) | (1 << (PLSQLParser.MINUS_SIGN - 488)) | (1 << (PLSQLParser.BINDVAR - 488)) | (1 << (PLSQLParser.COLON - 488)) | (1 << (PLSQLParser.INTRODUCER - 488)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 4888;
            this.argument();
        }

        this.state = 4895;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 4891;
            this.match(PLSQLParser.COMMA);
            this.state = 4892;
            this.argument();
            this.state = 4897;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4898;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 4900;
        var la_ = this._interp.adaptivePredict(this._input,631,this._ctx);
        if(la_===1) {
            this.state = 4899;
            this.keep_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_argument_analyticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_function_argument_analytic;
    return this;
}

Function_argument_analyticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argument_analyticContext.prototype.constructor = Function_argument_analyticContext;

Function_argument_analyticContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Function_argument_analyticContext.prototype.keep_clause = function() {
    return this.getTypedRuleContext(Keep_clauseContext,0);
};

Function_argument_analyticContext.prototype.respect_or_ignore_nulls = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Respect_or_ignore_nullsContext);
    } else {
        return this.getTypedRuleContext(Respect_or_ignore_nullsContext,i);
    }
};

Function_argument_analyticContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFunction_argument_analytic(this);
	}
};

Function_argument_analyticContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFunction_argument_analytic(this);
	}
};




PLSQLParser.Function_argument_analyticContext = Function_argument_analyticContext;

PLSQLParser.prototype.function_argument_analytic = function() {

    var localctx = new Function_argument_analyticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 710, PLSQLParser.RULE_function_argument_analytic);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4902;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 4907;
        _la = this._input.LA(1);
        if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PLSQLParser.A_LETTER - 2)) | (1 << (PLSQLParser.ADD - 2)) | (1 << (PLSQLParser.AFTER - 2)) | (1 << (PLSQLParser.AGENT - 2)) | (1 << (PLSQLParser.AGGREGATE - 2)) | (1 << (PLSQLParser.ALL - 2)) | (1 << (PLSQLParser.ANALYZE - 2)) | (1 << (PLSQLParser.ANY - 2)) | (1 << (PLSQLParser.ARRAY - 2)) | (1 << (PLSQLParser.ASSOCIATE - 2)) | (1 << (PLSQLParser.AT - 2)) | (1 << (PLSQLParser.ATTRIBUTE - 2)) | (1 << (PLSQLParser.AUDIT - 2)) | (1 << (PLSQLParser.AUTHID - 2)) | (1 << (PLSQLParser.AUTO - 2)) | (1 << (PLSQLParser.AUTOMATIC - 2)) | (1 << (PLSQLParser.AUTONOMOUS_TRANSACTION - 2)) | (1 << (PLSQLParser.BATCH - 2)) | (1 << (PLSQLParser.BEFORE - 2)) | (1 << (PLSQLParser.BFILE - 2)) | (1 << (PLSQLParser.BINARY_DOUBLE - 2)) | (1 << (PLSQLParser.BINARY_FLOAT - 2)) | (1 << (PLSQLParser.BINARY_INTEGER - 2)) | (1 << (PLSQLParser.BLOB - 2)) | (1 << (PLSQLParser.BLOCK - 2)) | (1 << (PLSQLParser.BODY - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PLSQLParser.BOOLEAN - 34)) | (1 << (PLSQLParser.BOTH - 34)) | (1 << (PLSQLParser.BULK - 34)) | (1 << (PLSQLParser.BYTE - 34)) | (1 << (PLSQLParser.C_LETTER - 34)) | (1 << (PLSQLParser.CALL - 34)) | (1 << (PLSQLParser.CANONICAL - 34)) | (1 << (PLSQLParser.CASCADE - 34)) | (1 << (PLSQLParser.CASE - 34)) | (1 << (PLSQLParser.CAST - 34)) | (1 << (PLSQLParser.CHAR - 34)) | (1 << (PLSQLParser.CHAR_CS - 34)) | (1 << (PLSQLParser.CHARACTER - 34)) | (1 << (PLSQLParser.CHR - 34)) | (1 << (PLSQLParser.CLOB - 34)) | (1 << (PLSQLParser.CLOSE - 34)) | (1 << (PLSQLParser.CLUSTER - 34)) | (1 << (PLSQLParser.COLLECT - 34)) | (1 << (PLSQLParser.COLUMNS - 34)) | (1 << (PLSQLParser.COMMENT - 34)) | (1 << (PLSQLParser.COMMIT - 34)) | (1 << (PLSQLParser.COMMITTED - 34)) | (1 << (PLSQLParser.COMPATIBILITY - 34)) | (1 << (PLSQLParser.COMPILE - 34)) | (1 << (PLSQLParser.COMPOUND - 34)) | (1 << (PLSQLParser.CONNECT_BY_ROOT - 34)) | (1 << (PLSQLParser.CONSTANT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PLSQLParser.CONSTRAINT - 66)) | (1 << (PLSQLParser.CONSTRAINTS - 66)) | (1 << (PLSQLParser.CONSTRUCTOR - 66)) | (1 << (PLSQLParser.CONTENT - 66)) | (1 << (PLSQLParser.CONTEXT - 66)) | (1 << (PLSQLParser.CONTINUE - 66)) | (1 << (PLSQLParser.CONVERT - 66)) | (1 << (PLSQLParser.CORRUPT_XID - 66)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 66)) | (1 << (PLSQLParser.COST - 66)) | (1 << (PLSQLParser.COUNT - 66)) | (1 << (PLSQLParser.CROSS - 66)) | (1 << (PLSQLParser.CUBE - 66)) | (1 << (PLSQLParser.CURRENT_USER - 66)) | (1 << (PLSQLParser.CURSOR - 66)) | (1 << (PLSQLParser.CUSTOMDATUM - 66)) | (1 << (PLSQLParser.CYCLE - 66)) | (1 << (PLSQLParser.DATA - 66)) | (1 << (PLSQLParser.DATABASE - 66)) | (1 << (PLSQLParser.DATE - 66)) | (1 << (PLSQLParser.DAY - 66)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 66)) | (1 << (PLSQLParser.DBTIMEZONE - 66)) | (1 << (PLSQLParser.DDL - 66)) | (1 << (PLSQLParser.DEBUG - 66)) | (1 << (PLSQLParser.DEC - 66)) | (1 << (PLSQLParser.DECIMAL - 66)) | (1 << (PLSQLParser.DECOMPOSE - 66)) | (1 << (PLSQLParser.DECREMENT - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (PLSQLParser.DEFAULT - 98)) | (1 << (PLSQLParser.DEFAULTS - 98)) | (1 << (PLSQLParser.DEFERRED - 98)) | (1 << (PLSQLParser.DEFINER - 98)) | (1 << (PLSQLParser.DETERMINISTIC - 98)) | (1 << (PLSQLParser.DIMENSION - 98)) | (1 << (PLSQLParser.DISABLE - 98)) | (1 << (PLSQLParser.DISASSOCIATE - 98)) | (1 << (PLSQLParser.DISTINCT - 98)) | (1 << (PLSQLParser.DOCUMENT - 98)) | (1 << (PLSQLParser.DOUBLE - 98)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 98)) | (1 << (PLSQLParser.EACH - 98)) | (1 << (PLSQLParser.ELEMENT - 98)) | (1 << (PLSQLParser.EMPTY - 98)) | (1 << (PLSQLParser.ENABLE - 98)) | (1 << (PLSQLParser.ENCODING - 98)) | (1 << (PLSQLParser.ENTITYESCAPING - 98)) | (1 << (PLSQLParser.ERRORS - 98)) | (1 << (PLSQLParser.ESCAPE - 98)) | (1 << (PLSQLParser.EVALNAME - 98)) | (1 << (PLSQLParser.EXCEPTION - 98)) | (1 << (PLSQLParser.EXCEPTION_INIT - 98)) | (1 << (PLSQLParser.EXCEPTIONS - 98)) | (1 << (PLSQLParser.EXCLUDE - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (PLSQLParser.EXECUTE - 131)) | (1 << (PLSQLParser.EXISTS - 131)) | (1 << (PLSQLParser.EXIT - 131)) | (1 << (PLSQLParser.EXPLAIN - 131)) | (1 << (PLSQLParser.EXTERNAL - 131)) | (1 << (PLSQLParser.EXTRACT - 131)) | (1 << (PLSQLParser.FAILURE - 131)) | (1 << (PLSQLParser.FALSE - 131)) | (1 << (PLSQLParser.FINAL - 131)) | (1 << (PLSQLParser.FIRST - 131)) | (1 << (PLSQLParser.FIRST_VALUE - 131)) | (1 << (PLSQLParser.FLOAT - 131)) | (1 << (PLSQLParser.FOLLOWING - 131)) | (1 << (PLSQLParser.FOLLOWS - 131)) | (1 << (PLSQLParser.FORALL - 131)) | (1 << (PLSQLParser.FORCE - 131)) | (1 << (PLSQLParser.FULL - 131)) | (1 << (PLSQLParser.FUNCTION - 131)) | (1 << (PLSQLParser.GROUPING - 131)) | (1 << (PLSQLParser.HASH - 131)) | (1 << (PLSQLParser.HIDE - 131)) | (1 << (PLSQLParser.HOUR - 131)) | (1 << (PLSQLParser.IGNORE - 131)) | (1 << (PLSQLParser.IMMEDIATE - 131)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PLSQLParser.INCLUDE - 164)) | (1 << (PLSQLParser.INCLUDING - 164)) | (1 << (PLSQLParser.INCREMENT - 164)) | (1 << (PLSQLParser.INDENT - 164)) | (1 << (PLSQLParser.INDEXED - 164)) | (1 << (PLSQLParser.INDICATOR - 164)) | (1 << (PLSQLParser.INDICES - 164)) | (1 << (PLSQLParser.INFINITE - 164)) | (1 << (PLSQLParser.INLINE - 164)) | (1 << (PLSQLParser.INNER - 164)) | (1 << (PLSQLParser.INOUT - 164)) | (1 << (PLSQLParser.INSTANTIABLE - 164)) | (1 << (PLSQLParser.INSTEAD - 164)) | (1 << (PLSQLParser.INT - 164)) | (1 << (PLSQLParser.INTEGER - 164)) | (1 << (PLSQLParser.INTERVAL - 164)) | (1 << (PLSQLParser.INVALIDATE - 164)) | (1 << (PLSQLParser.ISOLATION - 164)) | (1 << (PLSQLParser.ITERATE - 164)) | (1 << (PLSQLParser.JAVA - 164)) | (1 << (PLSQLParser.JOIN - 164)) | (1 << (PLSQLParser.KEEP - 164)) | (1 << (PLSQLParser.LANGUAGE - 164)) | (1 << (PLSQLParser.LAST - 164)) | (1 << (PLSQLParser.LAST_VALUE - 164)) | (1 << (PLSQLParser.LEADING - 164)) | (1 << (PLSQLParser.LEFT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PLSQLParser.LEVEL - 196)) | (1 << (PLSQLParser.LIBRARY - 196)) | (1 << (PLSQLParser.LIKE2 - 196)) | (1 << (PLSQLParser.LIKE4 - 196)) | (1 << (PLSQLParser.LIKEC - 196)) | (1 << (PLSQLParser.LIMIT - 196)) | (1 << (PLSQLParser.LOCAL - 196)) | (1 << (PLSQLParser.LOCKED - 196)) | (1 << (PLSQLParser.LOG - 196)) | (1 << (PLSQLParser.LOGOFF - 196)) | (1 << (PLSQLParser.LOGON - 196)) | (1 << (PLSQLParser.LONG - 196)) | (1 << (PLSQLParser.LOOP - 196)) | (1 << (PLSQLParser.MAIN - 196)) | (1 << (PLSQLParser.MAP - 196)) | (1 << (PLSQLParser.MATCHED - 196)) | (1 << (PLSQLParser.MAXVALUE - 196)) | (1 << (PLSQLParser.MEASURES - 196)) | (1 << (PLSQLParser.MEMBER - 196)) | (1 << (PLSQLParser.MERGE - 196)) | (1 << (PLSQLParser.MINUTE - 196)) | (1 << (PLSQLParser.MINVALUE - 196)) | (1 << (PLSQLParser.MLSLABEL - 196)) | (1 << (PLSQLParser.MODEL - 196)) | (1 << (PLSQLParser.MODIFY - 196)) | (1 << (PLSQLParser.MONTH - 196)) | (1 << (PLSQLParser.MULTISET - 196)) | (1 << (PLSQLParser.NAME - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PLSQLParser.NAN - 228)) | (1 << (PLSQLParser.NATURAL - 228)) | (1 << (PLSQLParser.NATURALN - 228)) | (1 << (PLSQLParser.NAV - 228)) | (1 << (PLSQLParser.NCHAR - 228)) | (1 << (PLSQLParser.NCHAR_CS - 228)) | (1 << (PLSQLParser.NCLOB - 228)) | (1 << (PLSQLParser.NESTED - 228)) | (1 << (PLSQLParser.NEW - 228)) | (1 << (PLSQLParser.NO - 228)) | (1 << (PLSQLParser.NOAUDIT - 228)) | (1 << (PLSQLParser.NOCOPY - 228)) | (1 << (PLSQLParser.NOCYCLE - 228)) | (1 << (PLSQLParser.NOENTITYESCAPING - 228)) | (1 << (PLSQLParser.NONE - 228)) | (1 << (PLSQLParser.NOSCHEMACHECK - 228)) | (1 << (PLSQLParser.NOT - 228)) | (1 << (PLSQLParser.NULL - 228)) | (1 << (PLSQLParser.NULLS - 228)) | (1 << (PLSQLParser.NUMBER - 228)) | (1 << (PLSQLParser.NUMERIC - 228)) | (1 << (PLSQLParser.NVARCHAR2 - 228)) | (1 << (PLSQLParser.OBJECT - 228)) | (1 << (PLSQLParser.OFF - 228)) | (1 << (PLSQLParser.OID - 228)) | (1 << (PLSQLParser.OLD - 228)))) !== 0) || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (PLSQLParser.ONLY - 261)) | (1 << (PLSQLParser.OPEN - 261)) | (1 << (PLSQLParser.ORADATA - 261)) | (1 << (PLSQLParser.ORDINALITY - 261)) | (1 << (PLSQLParser.OSERROR - 261)) | (1 << (PLSQLParser.OUT - 261)) | (1 << (PLSQLParser.OUTER - 261)) | (1 << (PLSQLParser.OVER - 261)) | (1 << (PLSQLParser.OVERRIDING - 261)) | (1 << (PLSQLParser.PACKAGE - 261)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 261)) | (1 << (PLSQLParser.PARAMETERS - 261)) | (1 << (PLSQLParser.PARENT - 261)) | (1 << (PLSQLParser.PARTITION - 261)) | (1 << (PLSQLParser.PASSING - 261)) | (1 << (PLSQLParser.PATH - 261)) | (1 << (PLSQLParser.PIPELINED - 261)) | (1 << (PLSQLParser.PLAN - 261)) | (1 << (PLSQLParser.PLS_INTEGER - 261)) | (1 << (PLSQLParser.POSITIVE - 261)) | (1 << (PLSQLParser.POSITIVEN - 261)) | (1 << (PLSQLParser.PRAGMA - 261)) | (1 << (PLSQLParser.PRECEDING - 261)) | (1 << (PLSQLParser.PRECISION - 261)) | (1 << (PLSQLParser.PRESENT - 261)) | (1 << (PLSQLParser.PRIOR - 261)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (PLSQLParser.RAISE - 294)) | (1 << (PLSQLParser.RANGE - 294)) | (1 << (PLSQLParser.RAW - 294)) | (1 << (PLSQLParser.READ - 294)) | (1 << (PLSQLParser.REAL - 294)) | (1 << (PLSQLParser.RECORD - 294)) | (1 << (PLSQLParser.REF - 294)) | (1 << (PLSQLParser.REFERENCE - 294)) | (1 << (PLSQLParser.REFERENCING - 294)) | (1 << (PLSQLParser.REJECT - 294)) | (1 << (PLSQLParser.RELIES_ON - 294)) | (1 << (PLSQLParser.RENAME - 294)) | (1 << (PLSQLParser.REPLACE - 294)) | (1 << (PLSQLParser.RESPECT - 294)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 294)) | (1 << (PLSQLParser.RESULT - 294)) | (1 << (PLSQLParser.RESULT_CACHE - 294)) | (1 << (PLSQLParser.RETURN - 294)) | (1 << (PLSQLParser.RETURNING - 294)) | (1 << (PLSQLParser.REUSE - 294)) | (1 << (PLSQLParser.REVERSE - 294)) | (1 << (PLSQLParser.RIGHT - 294)) | (1 << (PLSQLParser.ROLLBACK - 294)) | (1 << (PLSQLParser.ROLLUP - 294)) | (1 << (PLSQLParser.ROW - 294)) | (1 << (PLSQLParser.ROWID - 294)) | (1 << (PLSQLParser.ROWS - 294)) | (1 << (PLSQLParser.RULES - 294)) | (1 << (PLSQLParser.SAMPLE - 294)) | (1 << (PLSQLParser.SAVE - 294)) | (1 << (PLSQLParser.SAVEPOINT - 294)))) !== 0) || ((((_la - 326)) & ~0x1f) == 0 && ((1 << (_la - 326)) & ((1 << (PLSQLParser.SCHEMA - 326)) | (1 << (PLSQLParser.SCHEMACHECK - 326)) | (1 << (PLSQLParser.SCN - 326)) | (1 << (PLSQLParser.SECOND - 326)) | (1 << (PLSQLParser.SEED - 326)) | (1 << (PLSQLParser.SEGMENT - 326)) | (1 << (PLSQLParser.SELF - 326)) | (1 << (PLSQLParser.SEQUENTIAL - 326)) | (1 << (PLSQLParser.SERIALIZABLE - 326)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 326)) | (1 << (PLSQLParser.SERVERERROR - 326)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 326)) | (1 << (PLSQLParser.SET - 326)) | (1 << (PLSQLParser.SETS - 326)) | (1 << (PLSQLParser.SETTINGS - 326)) | (1 << (PLSQLParser.SHOW - 326)) | (1 << (PLSQLParser.SHUTDOWN - 326)) | (1 << (PLSQLParser.SIBLINGS - 326)) | (1 << (PLSQLParser.SIGNTYPE - 326)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 326)) | (1 << (PLSQLParser.SINGLE - 326)) | (1 << (PLSQLParser.SKIP - 326)) | (1 << (PLSQLParser.SMALLINT - 326)) | (1 << (PLSQLParser.SNAPSHOT - 326)) | (1 << (PLSQLParser.SOME - 326)) | (1 << (PLSQLParser.SPECIFICATION - 326)) | (1 << (PLSQLParser.SQLDATA - 326)))) !== 0) || ((((_la - 358)) & ~0x1f) == 0 && ((1 << (_la - 358)) & ((1 << (PLSQLParser.SQLERROR - 358)) | (1 << (PLSQLParser.STANDALONE - 358)) | (1 << (PLSQLParser.STARTUP - 358)) | (1 << (PLSQLParser.STATEMENT - 358)) | (1 << (PLSQLParser.STATEMENT_ID - 358)) | (1 << (PLSQLParser.STATIC - 358)) | (1 << (PLSQLParser.STATISTICS - 358)) | (1 << (PLSQLParser.STRING - 358)) | (1 << (PLSQLParser.SUBMULTISET - 358)) | (1 << (PLSQLParser.SUBPARTITION - 358)) | (1 << (PLSQLParser.SUBSTITUTABLE - 358)) | (1 << (PLSQLParser.SUBTYPE - 358)) | (1 << (PLSQLParser.SUCCESS - 358)) | (1 << (PLSQLParser.SUSPEND - 358)) | (1 << (PLSQLParser.TIME - 358)) | (1 << (PLSQLParser.TIMESTAMP - 358)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 358)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 358)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 358)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 358)) | (1 << (PLSQLParser.TIMEZONE_REGION - 358)) | (1 << (PLSQLParser.TRAILING - 358)) | (1 << (PLSQLParser.TRANSACTION - 358)) | (1 << (PLSQLParser.TRANSLATE - 358)) | (1 << (PLSQLParser.TREAT - 358)))) !== 0) || ((((_la - 390)) & ~0x1f) == 0 && ((1 << (_la - 390)) & ((1 << (PLSQLParser.TRIGGER - 390)) | (1 << (PLSQLParser.TRIM - 390)) | (1 << (PLSQLParser.TRUE - 390)) | (1 << (PLSQLParser.TRUNCATE - 390)) | (1 << (PLSQLParser.TYPE - 390)) | (1 << (PLSQLParser.UNBOUNDED - 390)) | (1 << (PLSQLParser.UNDER - 390)) | (1 << (PLSQLParser.UNLIMITED - 390)) | (1 << (PLSQLParser.UNTIL - 390)) | (1 << (PLSQLParser.UPDATED - 390)) | (1 << (PLSQLParser.UPSERT - 390)) | (1 << (PLSQLParser.UROWID - 390)) | (1 << (PLSQLParser.USE - 390)) | (1 << (PLSQLParser.VALIDATE - 390)) | (1 << (PLSQLParser.VALUE - 390)) | (1 << (PLSQLParser.VARCHAR - 390)) | (1 << (PLSQLParser.VARCHAR2 - 390)) | (1 << (PLSQLParser.VARIABLE - 390)) | (1 << (PLSQLParser.VARRAY - 390)) | (1 << (PLSQLParser.VARYING - 390)) | (1 << (PLSQLParser.VERSION - 390)) | (1 << (PLSQLParser.VERSIONS - 390)) | (1 << (PLSQLParser.WAIT - 390)) | (1 << (PLSQLParser.WARNING - 390)) | (1 << (PLSQLParser.WELLFORMED - 390)))) !== 0) || ((((_la - 422)) & ~0x1f) == 0 && ((1 << (_la - 422)) & ((1 << (PLSQLParser.WHENEVER - 422)) | (1 << (PLSQLParser.WHILE - 422)) | (1 << (PLSQLParser.WITHIN - 422)) | (1 << (PLSQLParser.WORK - 422)) | (1 << (PLSQLParser.WRITE - 422)) | (1 << (PLSQLParser.XML - 422)) | (1 << (PLSQLParser.XMLAGG - 422)) | (1 << (PLSQLParser.XMLATTRIBUTES - 422)) | (1 << (PLSQLParser.XMLCAST - 422)) | (1 << (PLSQLParser.XMLCOLATTVAL - 422)) | (1 << (PLSQLParser.XMLELEMENT - 422)) | (1 << (PLSQLParser.XMLEXISTS - 422)) | (1 << (PLSQLParser.XMLFOREST - 422)) | (1 << (PLSQLParser.XMLNAMESPACES - 422)) | (1 << (PLSQLParser.XMLPARSE - 422)) | (1 << (PLSQLParser.XMLPI - 422)) | (1 << (PLSQLParser.XMLQUERY - 422)) | (1 << (PLSQLParser.XMLROOT - 422)) | (1 << (PLSQLParser.XMLSERIALIZE - 422)) | (1 << (PLSQLParser.XMLTABLE - 422)) | (1 << (PLSQLParser.YEAR - 422)) | (1 << (PLSQLParser.YES - 422)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 422)) | (1 << (PLSQLParser.ZONE - 422)) | (1 << (PLSQLParser.PREDICTION - 422)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 422)) | (1 << (PLSQLParser.PREDICTION_COST - 422)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 422)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 422)) | (1 << (PLSQLParser.PREDICTION_SET - 422)))) !== 0) || ((((_la - 454)) & ~0x1f) == 0 && ((1 << (_la - 454)) & ((1 << (PLSQLParser.CUME_DIST - 454)) | (1 << (PLSQLParser.DENSE_RANK - 454)) | (1 << (PLSQLParser.LISTAGG - 454)) | (1 << (PLSQLParser.PERCENT_RANK - 454)) | (1 << (PLSQLParser.PERCENTILE_CONT - 454)) | (1 << (PLSQLParser.PERCENTILE_DISC - 454)) | (1 << (PLSQLParser.RANK - 454)) | (1 << (PLSQLParser.AVG - 454)) | (1 << (PLSQLParser.CORR - 454)) | (1 << (PLSQLParser.LAG - 454)) | (1 << (PLSQLParser.LEAD - 454)) | (1 << (PLSQLParser.MAX - 454)) | (1 << (PLSQLParser.MEDIAN - 454)) | (1 << (PLSQLParser.MIN - 454)) | (1 << (PLSQLParser.NTILE - 454)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 454)) | (1 << (PLSQLParser.ROW_NUMBER - 454)) | (1 << (PLSQLParser.SUM - 454)) | (1 << (PLSQLParser.VARIANCE - 454)) | (1 << (PLSQLParser.REGR_ - 454)) | (1 << (PLSQLParser.STDDEV - 454)) | (1 << (PLSQLParser.VAR_ - 454)) | (1 << (PLSQLParser.COVAR_ - 454)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 454)) | (1 << (PLSQLParser.UNSIGNED_INTEGER - 454)) | (1 << (PLSQLParser.APPROXIMATE_NUM_LIT - 454)) | (1 << (PLSQLParser.CHAR_STRING - 454)) | (1 << (PLSQLParser.DELIMITED_ID - 454)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PLSQLParser.LEFT_PAREN - 488)) | (1 << (PLSQLParser.PLUS_SIGN - 488)) | (1 << (PLSQLParser.MINUS_SIGN - 488)) | (1 << (PLSQLParser.BINDVAR - 488)) | (1 << (PLSQLParser.COLON - 488)) | (1 << (PLSQLParser.INTRODUCER - 488)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
            this.state = 4903;
            this.argument();
            this.state = 4905;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.IGNORE || _la===PLSQLParser.RESPECT) {
                this.state = 4904;
                this.respect_or_ignore_nulls();
            }

        }

        this.state = 4916;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.COMMA) {
            this.state = 4909;
            this.match(PLSQLParser.COMMA);
            this.state = 4910;
            this.argument();
            this.state = 4912;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.IGNORE || _la===PLSQLParser.RESPECT) {
                this.state = 4911;
                this.respect_or_ignore_nulls();
            }

            this.state = 4918;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4919;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 4921;
        var la_ = this._interp.adaptivePredict(this._input,636,this._ctx);
        if(la_===1) {
            this.state = 4920;
            this.keep_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_argument_modelingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_function_argument_modeling;
    return this;
}

Function_argument_modelingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argument_modelingContext.prototype.constructor = Function_argument_modelingContext;

Function_argument_modelingContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Function_argument_modelingContext.prototype.USING = function() {
    return this.getToken(PLSQLParser.USING, 0);
};

Function_argument_modelingContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Function_argument_modelingContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Function_argument_modelingContext.prototype.keep_clause = function() {
    return this.getTypedRuleContext(Keep_clauseContext,0);
};

Function_argument_modelingContext.prototype.numeric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericContext);
    } else {
        return this.getTypedRuleContext(NumericContext,i);
    }
};

Function_argument_modelingContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.NULL);
    } else {
        return this.getToken(PLSQLParser.NULL, i);
    }
};


Function_argument_modelingContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Function_argument_modelingContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterFunction_argument_modeling(this);
	}
};

Function_argument_modelingContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitFunction_argument_modeling(this);
	}
};




PLSQLParser.Function_argument_modelingContext = Function_argument_modelingContext;

PLSQLParser.prototype.function_argument_modeling = function() {

    var localctx = new Function_argument_modelingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 712, PLSQLParser.RULE_function_argument_modeling);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4923;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 4924;
        this.column_name();
        this.state = 4937;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.COMMA) {
            this.state = 4925;
            this.match(PLSQLParser.COMMA);
            this.state = 4928;
            switch(this._input.LA(1)) {
            case PLSQLParser.UNSIGNED_INTEGER:
            case PLSQLParser.APPROXIMATE_NUM_LIT:
                this.state = 4926;
                this.numeric();
                break;
            case PLSQLParser.NULL:
                this.state = 4927;
                this.match(PLSQLParser.NULL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4935;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.COMMA) {
                this.state = 4930;
                this.match(PLSQLParser.COMMA);
                this.state = 4933;
                switch(this._input.LA(1)) {
                case PLSQLParser.UNSIGNED_INTEGER:
                case PLSQLParser.APPROXIMATE_NUM_LIT:
                    this.state = 4931;
                    this.numeric();
                    break;
                case PLSQLParser.NULL:
                    this.state = 4932;
                    this.match(PLSQLParser.NULL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

        }

        this.state = 4939;
        this.match(PLSQLParser.USING);
        this.state = 4959;
        var la_ = this._interp.adaptivePredict(this._input,644,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4940;
            this.tableview_name();
            this.state = 4941;
            this.match(PLSQLParser.PERIOD);
            this.state = 4942;
            this.match(PLSQLParser.ASTERISK);
            break;

        case 2:
            this.state = 4944;
            this.match(PLSQLParser.ASTERISK);
            break;

        case 3:
            this.state = 4945;
            this.expression();
            this.state = 4947;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.AS) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 450)))) !== 0) || ((((_la - 484)) & ~0x1f) == 0 && ((1 << (_la - 484)) & ((1 << (PLSQLParser.CHAR_STRING - 484)) | (1 << (PLSQLParser.DELIMITED_ID - 484)) | (1 << (PLSQLParser.INTRODUCER - 484)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
                this.state = 4946;
                this.column_alias();
            }

            this.state = 4956;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PLSQLParser.COMMA) {
                this.state = 4949;
                this.match(PLSQLParser.COMMA);
                this.state = 4950;
                this.expression();
                this.state = 4952;
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.AS) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)) | (1 << (PLSQLParser.NATIONAL_CHAR_STRING_LIT - 450)))) !== 0) || ((((_la - 484)) & ~0x1f) == 0 && ((1 << (_la - 484)) & ((1 << (PLSQLParser.CHAR_STRING - 484)) | (1 << (PLSQLParser.DELIMITED_ID - 484)) | (1 << (PLSQLParser.INTRODUCER - 484)))) !== 0) || _la===PLSQLParser.REGULAR_ID) {
                    this.state = 4951;
                    this.column_alias();
                }

                this.state = 4958;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
        this.state = 4961;
        this.match(PLSQLParser.RIGHT_PAREN);
        this.state = 4963;
        var la_ = this._interp.adaptivePredict(this._input,645,this._ctx);
        if(la_===1) {
            this.state = 4962;
            this.keep_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Respect_or_ignore_nullsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_respect_or_ignore_nulls;
    return this;
}

Respect_or_ignore_nullsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Respect_or_ignore_nullsContext.prototype.constructor = Respect_or_ignore_nullsContext;

Respect_or_ignore_nullsContext.prototype.NULLS = function() {
    return this.getToken(PLSQLParser.NULLS, 0);
};

Respect_or_ignore_nullsContext.prototype.RESPECT = function() {
    return this.getToken(PLSQLParser.RESPECT, 0);
};

Respect_or_ignore_nullsContext.prototype.IGNORE = function() {
    return this.getToken(PLSQLParser.IGNORE, 0);
};

Respect_or_ignore_nullsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRespect_or_ignore_nulls(this);
	}
};

Respect_or_ignore_nullsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRespect_or_ignore_nulls(this);
	}
};




PLSQLParser.Respect_or_ignore_nullsContext = Respect_or_ignore_nullsContext;

PLSQLParser.prototype.respect_or_ignore_nulls = function() {

    var localctx = new Respect_or_ignore_nullsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 714, PLSQLParser.RULE_respect_or_ignore_nulls);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4965;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.IGNORE || _la===PLSQLParser.RESPECT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 4966;
        this.match(PLSQLParser.NULLS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.expression_wrapper = function() {
    return this.getTypedRuleContext(Expression_wrapperContext,0);
};

ArgumentContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitArgument(this);
	}
};




PLSQLParser.ArgumentContext = ArgumentContext;

PLSQLParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 716, PLSQLParser.RULE_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4972;
        var la_ = this._interp.adaptivePredict(this._input,646,this._ctx);
        if(la_===1) {
            this.state = 4968;
            this.id();
            this.state = 4969;
            this.match(PLSQLParser.EQUALS_OP);
            this.state = 4970;
            this.match(PLSQLParser.GREATER_THAN_OP);

        }
        this.state = 4974;
        this.expression_wrapper();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_type_spec;
    return this;
}

Type_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specContext.prototype.constructor = Type_specContext;

Type_specContext.prototype.datatype = function() {
    return this.getTypedRuleContext(DatatypeContext,0);
};

Type_specContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_specContext.prototype.REF = function() {
    return this.getToken(PLSQLParser.REF, 0);
};

Type_specContext.prototype.PERCENT_ROWTYPE = function() {
    return this.getToken(PLSQLParser.PERCENT_ROWTYPE, 0);
};

Type_specContext.prototype.PERCENT_TYPE = function() {
    return this.getToken(PLSQLParser.PERCENT_TYPE, 0);
};

Type_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterType_spec(this);
	}
};

Type_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitType_spec(this);
	}
};




PLSQLParser.Type_specContext = Type_specContext;

PLSQLParser.prototype.type_spec = function() {

    var localctx = new Type_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 718, PLSQLParser.RULE_type_spec);
    var _la = 0; // Token type
    try {
        this.state = 4984;
        var la_ = this._interp.adaptivePredict(this._input,649,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4976;
            this.datatype();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4978;
            var la_ = this._interp.adaptivePredict(this._input,647,this._ctx);
            if(la_===1) {
                this.state = 4977;
                this.match(PLSQLParser.REF);

            }
            this.state = 4980;
            this.type_name();
            this.state = 4982;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PERCENT_ROWTYPE || _la===PLSQLParser.PERCENT_TYPE) {
                this.state = 4981;
                _la = this._input.LA(1);
                if(!(_la===PLSQLParser.PERCENT_ROWTYPE || _la===PLSQLParser.PERCENT_TYPE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatatypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_datatype;
    return this;
}

DatatypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatatypeContext.prototype.constructor = DatatypeContext;

DatatypeContext.prototype.native_datatype_element = function() {
    return this.getTypedRuleContext(Native_datatype_elementContext,0);
};

DatatypeContext.prototype.precision_part = function() {
    return this.getTypedRuleContext(Precision_partContext,0);
};

DatatypeContext.prototype.WITH = function() {
    return this.getToken(PLSQLParser.WITH, 0);
};

DatatypeContext.prototype.TIME = function() {
    return this.getToken(PLSQLParser.TIME, 0);
};

DatatypeContext.prototype.ZONE = function() {
    return this.getToken(PLSQLParser.ZONE, 0);
};

DatatypeContext.prototype.LOCAL = function() {
    return this.getToken(PLSQLParser.LOCAL, 0);
};

DatatypeContext.prototype.INTERVAL = function() {
    return this.getToken(PLSQLParser.INTERVAL, 0);
};

DatatypeContext.prototype.TO = function() {
    return this.getToken(PLSQLParser.TO, 0);
};

DatatypeContext.prototype.YEAR = function() {
    return this.getToken(PLSQLParser.YEAR, 0);
};

DatatypeContext.prototype.DAY = function() {
    return this.getToken(PLSQLParser.DAY, 0);
};

DatatypeContext.prototype.MONTH = function() {
    return this.getToken(PLSQLParser.MONTH, 0);
};

DatatypeContext.prototype.SECOND = function() {
    return this.getToken(PLSQLParser.SECOND, 0);
};

DatatypeContext.prototype.expression_wrapper = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_wrapperContext);
    } else {
        return this.getTypedRuleContext(Expression_wrapperContext,i);
    }
};

DatatypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterDatatype(this);
	}
};

DatatypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitDatatype(this);
	}
};




PLSQLParser.DatatypeContext = DatatypeContext;

PLSQLParser.prototype.datatype = function() {

    var localctx = new DatatypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 720, PLSQLParser.RULE_datatype);
    var _la = 0; // Token type
    try {
        this.state = 5014;
        switch(this._input.LA(1)) {
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CLOB:
        case PLSQLParser.DATE:
        case PLSQLParser.DAY:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.FLOAT:
        case PLSQLParser.HOUR:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.LONG:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MONTH:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.RAW:
        case PLSQLParser.REAL:
        case PLSQLParser.ROWID:
        case PLSQLParser.SECOND:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.STRING:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.UROWID:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.YEAR:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 1);
            this.state = 4986;
            this.native_datatype_element();
            this.state = 4988;
            var la_ = this._interp.adaptivePredict(this._input,650,this._ctx);
            if(la_===1) {
                this.state = 4987;
                this.precision_part();

            }
            this.state = 4996;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.WITH) {
                this.state = 4990;
                this.match(PLSQLParser.WITH);
                this.state = 4992;
                _la = this._input.LA(1);
                if(_la===PLSQLParser.LOCAL) {
                    this.state = 4991;
                    this.match(PLSQLParser.LOCAL);
                }

                this.state = 4994;
                this.match(PLSQLParser.TIME);
                this.state = 4995;
                this.match(PLSQLParser.ZONE);
            }

            break;
        case PLSQLParser.INTERVAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4998;
            this.match(PLSQLParser.INTERVAL);
            this.state = 4999;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.DAY || _la===PLSQLParser.YEAR)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 5004;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.LEFT_PAREN) {
                this.state = 5000;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 5001;
                this.expression_wrapper();
                this.state = 5002;
                this.match(PLSQLParser.RIGHT_PAREN);
            }

            this.state = 5006;
            this.match(PLSQLParser.TO);
            this.state = 5007;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.MONTH || _la===PLSQLParser.SECOND)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 5012;
            var la_ = this._interp.adaptivePredict(this._input,654,this._ctx);
            if(la_===1) {
                this.state = 5008;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 5009;
                this.expression_wrapper();
                this.state = 5010;
                this.match(PLSQLParser.RIGHT_PAREN);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Precision_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_precision_part;
    return this;
}

Precision_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precision_partContext.prototype.constructor = Precision_partContext;

Precision_partContext.prototype.numeric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericContext);
    } else {
        return this.getTypedRuleContext(NumericContext,i);
    }
};

Precision_partContext.prototype.CHAR = function() {
    return this.getToken(PLSQLParser.CHAR, 0);
};

Precision_partContext.prototype.BYTE = function() {
    return this.getToken(PLSQLParser.BYTE, 0);
};

Precision_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterPrecision_part(this);
	}
};

Precision_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitPrecision_part(this);
	}
};




PLSQLParser.Precision_partContext = Precision_partContext;

PLSQLParser.prototype.precision_part = function() {

    var localctx = new Precision_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 722, PLSQLParser.RULE_precision_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5016;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 5017;
        this.numeric();
        this.state = 5020;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.COMMA) {
            this.state = 5018;
            this.match(PLSQLParser.COMMA);
            this.state = 5019;
            this.numeric();
        }

        this.state = 5023;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.BYTE || _la===PLSQLParser.CHAR) {
            this.state = 5022;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.BYTE || _la===PLSQLParser.CHAR)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 5025;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_datatype_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_native_datatype_element;
    return this;
}

Native_datatype_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_datatype_elementContext.prototype.constructor = Native_datatype_elementContext;

Native_datatype_elementContext.prototype.BINARY_INTEGER = function() {
    return this.getToken(PLSQLParser.BINARY_INTEGER, 0);
};

Native_datatype_elementContext.prototype.PLS_INTEGER = function() {
    return this.getToken(PLSQLParser.PLS_INTEGER, 0);
};

Native_datatype_elementContext.prototype.NATURAL = function() {
    return this.getToken(PLSQLParser.NATURAL, 0);
};

Native_datatype_elementContext.prototype.BINARY_FLOAT = function() {
    return this.getToken(PLSQLParser.BINARY_FLOAT, 0);
};

Native_datatype_elementContext.prototype.BINARY_DOUBLE = function() {
    return this.getToken(PLSQLParser.BINARY_DOUBLE, 0);
};

Native_datatype_elementContext.prototype.NATURALN = function() {
    return this.getToken(PLSQLParser.NATURALN, 0);
};

Native_datatype_elementContext.prototype.POSITIVE = function() {
    return this.getToken(PLSQLParser.POSITIVE, 0);
};

Native_datatype_elementContext.prototype.POSITIVEN = function() {
    return this.getToken(PLSQLParser.POSITIVEN, 0);
};

Native_datatype_elementContext.prototype.SIGNTYPE = function() {
    return this.getToken(PLSQLParser.SIGNTYPE, 0);
};

Native_datatype_elementContext.prototype.SIMPLE_INTEGER = function() {
    return this.getToken(PLSQLParser.SIMPLE_INTEGER, 0);
};

Native_datatype_elementContext.prototype.NVARCHAR2 = function() {
    return this.getToken(PLSQLParser.NVARCHAR2, 0);
};

Native_datatype_elementContext.prototype.DEC = function() {
    return this.getToken(PLSQLParser.DEC, 0);
};

Native_datatype_elementContext.prototype.INTEGER = function() {
    return this.getToken(PLSQLParser.INTEGER, 0);
};

Native_datatype_elementContext.prototype.INT = function() {
    return this.getToken(PLSQLParser.INT, 0);
};

Native_datatype_elementContext.prototype.NUMERIC = function() {
    return this.getToken(PLSQLParser.NUMERIC, 0);
};

Native_datatype_elementContext.prototype.SMALLINT = function() {
    return this.getToken(PLSQLParser.SMALLINT, 0);
};

Native_datatype_elementContext.prototype.NUMBER = function() {
    return this.getToken(PLSQLParser.NUMBER, 0);
};

Native_datatype_elementContext.prototype.DECIMAL = function() {
    return this.getToken(PLSQLParser.DECIMAL, 0);
};

Native_datatype_elementContext.prototype.DOUBLE = function() {
    return this.getToken(PLSQLParser.DOUBLE, 0);
};

Native_datatype_elementContext.prototype.PRECISION = function() {
    return this.getToken(PLSQLParser.PRECISION, 0);
};

Native_datatype_elementContext.prototype.FLOAT = function() {
    return this.getToken(PLSQLParser.FLOAT, 0);
};

Native_datatype_elementContext.prototype.REAL = function() {
    return this.getToken(PLSQLParser.REAL, 0);
};

Native_datatype_elementContext.prototype.NCHAR = function() {
    return this.getToken(PLSQLParser.NCHAR, 0);
};

Native_datatype_elementContext.prototype.LONG = function() {
    return this.getToken(PLSQLParser.LONG, 0);
};

Native_datatype_elementContext.prototype.RAW = function() {
    return this.getToken(PLSQLParser.RAW, 0);
};

Native_datatype_elementContext.prototype.CHAR = function() {
    return this.getToken(PLSQLParser.CHAR, 0);
};

Native_datatype_elementContext.prototype.CHARACTER = function() {
    return this.getToken(PLSQLParser.CHARACTER, 0);
};

Native_datatype_elementContext.prototype.VARCHAR2 = function() {
    return this.getToken(PLSQLParser.VARCHAR2, 0);
};

Native_datatype_elementContext.prototype.VARCHAR = function() {
    return this.getToken(PLSQLParser.VARCHAR, 0);
};

Native_datatype_elementContext.prototype.STRING = function() {
    return this.getToken(PLSQLParser.STRING, 0);
};

Native_datatype_elementContext.prototype.BOOLEAN = function() {
    return this.getToken(PLSQLParser.BOOLEAN, 0);
};

Native_datatype_elementContext.prototype.DATE = function() {
    return this.getToken(PLSQLParser.DATE, 0);
};

Native_datatype_elementContext.prototype.ROWID = function() {
    return this.getToken(PLSQLParser.ROWID, 0);
};

Native_datatype_elementContext.prototype.UROWID = function() {
    return this.getToken(PLSQLParser.UROWID, 0);
};

Native_datatype_elementContext.prototype.YEAR = function() {
    return this.getToken(PLSQLParser.YEAR, 0);
};

Native_datatype_elementContext.prototype.MONTH = function() {
    return this.getToken(PLSQLParser.MONTH, 0);
};

Native_datatype_elementContext.prototype.DAY = function() {
    return this.getToken(PLSQLParser.DAY, 0);
};

Native_datatype_elementContext.prototype.HOUR = function() {
    return this.getToken(PLSQLParser.HOUR, 0);
};

Native_datatype_elementContext.prototype.MINUTE = function() {
    return this.getToken(PLSQLParser.MINUTE, 0);
};

Native_datatype_elementContext.prototype.SECOND = function() {
    return this.getToken(PLSQLParser.SECOND, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(PLSQLParser.TIMEZONE_HOUR, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(PLSQLParser.TIMEZONE_MINUTE, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_REGION = function() {
    return this.getToken(PLSQLParser.TIMEZONE_REGION, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_ABBR = function() {
    return this.getToken(PLSQLParser.TIMEZONE_ABBR, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP = function() {
    return this.getToken(PLSQLParser.TIMESTAMP, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.TIMESTAMP_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP_TZ_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP_LTZ_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.YMINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.YMINTERVAL_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.DSINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.DSINTERVAL_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.BFILE = function() {
    return this.getToken(PLSQLParser.BFILE, 0);
};

Native_datatype_elementContext.prototype.BLOB = function() {
    return this.getToken(PLSQLParser.BLOB, 0);
};

Native_datatype_elementContext.prototype.CLOB = function() {
    return this.getToken(PLSQLParser.CLOB, 0);
};

Native_datatype_elementContext.prototype.NCLOB = function() {
    return this.getToken(PLSQLParser.NCLOB, 0);
};

Native_datatype_elementContext.prototype.MLSLABEL = function() {
    return this.getToken(PLSQLParser.MLSLABEL, 0);
};

Native_datatype_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterNative_datatype_element(this);
	}
};

Native_datatype_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitNative_datatype_element(this);
	}
};




PLSQLParser.Native_datatype_elementContext = Native_datatype_elementContext;

PLSQLParser.prototype.native_datatype_element = function() {

    var localctx = new Native_datatype_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 724, PLSQLParser.RULE_native_datatype_element);
    var _la = 0; // Token type
    try {
        this.state = 5087;
        switch(this._input.LA(1)) {
        case PLSQLParser.BINARY_INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 5027;
            this.match(PLSQLParser.BINARY_INTEGER);
            break;
        case PLSQLParser.PLS_INTEGER:
            this.enterOuterAlt(localctx, 2);
            this.state = 5028;
            this.match(PLSQLParser.PLS_INTEGER);
            break;
        case PLSQLParser.NATURAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 5029;
            this.match(PLSQLParser.NATURAL);
            break;
        case PLSQLParser.BINARY_FLOAT:
            this.enterOuterAlt(localctx, 4);
            this.state = 5030;
            this.match(PLSQLParser.BINARY_FLOAT);
            break;
        case PLSQLParser.BINARY_DOUBLE:
            this.enterOuterAlt(localctx, 5);
            this.state = 5031;
            this.match(PLSQLParser.BINARY_DOUBLE);
            break;
        case PLSQLParser.NATURALN:
            this.enterOuterAlt(localctx, 6);
            this.state = 5032;
            this.match(PLSQLParser.NATURALN);
            break;
        case PLSQLParser.POSITIVE:
            this.enterOuterAlt(localctx, 7);
            this.state = 5033;
            this.match(PLSQLParser.POSITIVE);
            break;
        case PLSQLParser.POSITIVEN:
            this.enterOuterAlt(localctx, 8);
            this.state = 5034;
            this.match(PLSQLParser.POSITIVEN);
            break;
        case PLSQLParser.SIGNTYPE:
            this.enterOuterAlt(localctx, 9);
            this.state = 5035;
            this.match(PLSQLParser.SIGNTYPE);
            break;
        case PLSQLParser.SIMPLE_INTEGER:
            this.enterOuterAlt(localctx, 10);
            this.state = 5036;
            this.match(PLSQLParser.SIMPLE_INTEGER);
            break;
        case PLSQLParser.NVARCHAR2:
            this.enterOuterAlt(localctx, 11);
            this.state = 5037;
            this.match(PLSQLParser.NVARCHAR2);
            break;
        case PLSQLParser.DEC:
            this.enterOuterAlt(localctx, 12);
            this.state = 5038;
            this.match(PLSQLParser.DEC);
            break;
        case PLSQLParser.INTEGER:
            this.enterOuterAlt(localctx, 13);
            this.state = 5039;
            this.match(PLSQLParser.INTEGER);
            break;
        case PLSQLParser.INT:
            this.enterOuterAlt(localctx, 14);
            this.state = 5040;
            this.match(PLSQLParser.INT);
            break;
        case PLSQLParser.NUMERIC:
            this.enterOuterAlt(localctx, 15);
            this.state = 5041;
            this.match(PLSQLParser.NUMERIC);
            break;
        case PLSQLParser.SMALLINT:
            this.enterOuterAlt(localctx, 16);
            this.state = 5042;
            this.match(PLSQLParser.SMALLINT);
            break;
        case PLSQLParser.NUMBER:
            this.enterOuterAlt(localctx, 17);
            this.state = 5043;
            this.match(PLSQLParser.NUMBER);
            break;
        case PLSQLParser.DECIMAL:
            this.enterOuterAlt(localctx, 18);
            this.state = 5044;
            this.match(PLSQLParser.DECIMAL);
            break;
        case PLSQLParser.DOUBLE:
            this.enterOuterAlt(localctx, 19);
            this.state = 5045;
            this.match(PLSQLParser.DOUBLE);
            this.state = 5047;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.PRECISION) {
                this.state = 5046;
                this.match(PLSQLParser.PRECISION);
            }

            break;
        case PLSQLParser.FLOAT:
            this.enterOuterAlt(localctx, 20);
            this.state = 5049;
            this.match(PLSQLParser.FLOAT);
            break;
        case PLSQLParser.REAL:
            this.enterOuterAlt(localctx, 21);
            this.state = 5050;
            this.match(PLSQLParser.REAL);
            break;
        case PLSQLParser.NCHAR:
            this.enterOuterAlt(localctx, 22);
            this.state = 5051;
            this.match(PLSQLParser.NCHAR);
            break;
        case PLSQLParser.LONG:
            this.enterOuterAlt(localctx, 23);
            this.state = 5052;
            this.match(PLSQLParser.LONG);
            this.state = 5054;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.RAW) {
                this.state = 5053;
                this.match(PLSQLParser.RAW);
            }

            break;
        case PLSQLParser.CHAR:
            this.enterOuterAlt(localctx, 24);
            this.state = 5056;
            this.match(PLSQLParser.CHAR);
            break;
        case PLSQLParser.CHARACTER:
            this.enterOuterAlt(localctx, 25);
            this.state = 5057;
            this.match(PLSQLParser.CHARACTER);
            break;
        case PLSQLParser.VARCHAR2:
            this.enterOuterAlt(localctx, 26);
            this.state = 5058;
            this.match(PLSQLParser.VARCHAR2);
            break;
        case PLSQLParser.VARCHAR:
            this.enterOuterAlt(localctx, 27);
            this.state = 5059;
            this.match(PLSQLParser.VARCHAR);
            break;
        case PLSQLParser.STRING:
            this.enterOuterAlt(localctx, 28);
            this.state = 5060;
            this.match(PLSQLParser.STRING);
            break;
        case PLSQLParser.RAW:
            this.enterOuterAlt(localctx, 29);
            this.state = 5061;
            this.match(PLSQLParser.RAW);
            break;
        case PLSQLParser.BOOLEAN:
            this.enterOuterAlt(localctx, 30);
            this.state = 5062;
            this.match(PLSQLParser.BOOLEAN);
            break;
        case PLSQLParser.DATE:
            this.enterOuterAlt(localctx, 31);
            this.state = 5063;
            this.match(PLSQLParser.DATE);
            break;
        case PLSQLParser.ROWID:
            this.enterOuterAlt(localctx, 32);
            this.state = 5064;
            this.match(PLSQLParser.ROWID);
            break;
        case PLSQLParser.UROWID:
            this.enterOuterAlt(localctx, 33);
            this.state = 5065;
            this.match(PLSQLParser.UROWID);
            break;
        case PLSQLParser.YEAR:
            this.enterOuterAlt(localctx, 34);
            this.state = 5066;
            this.match(PLSQLParser.YEAR);
            break;
        case PLSQLParser.MONTH:
            this.enterOuterAlt(localctx, 35);
            this.state = 5067;
            this.match(PLSQLParser.MONTH);
            break;
        case PLSQLParser.DAY:
            this.enterOuterAlt(localctx, 36);
            this.state = 5068;
            this.match(PLSQLParser.DAY);
            break;
        case PLSQLParser.HOUR:
            this.enterOuterAlt(localctx, 37);
            this.state = 5069;
            this.match(PLSQLParser.HOUR);
            break;
        case PLSQLParser.MINUTE:
            this.enterOuterAlt(localctx, 38);
            this.state = 5070;
            this.match(PLSQLParser.MINUTE);
            break;
        case PLSQLParser.SECOND:
            this.enterOuterAlt(localctx, 39);
            this.state = 5071;
            this.match(PLSQLParser.SECOND);
            break;
        case PLSQLParser.TIMEZONE_HOUR:
            this.enterOuterAlt(localctx, 40);
            this.state = 5072;
            this.match(PLSQLParser.TIMEZONE_HOUR);
            break;
        case PLSQLParser.TIMEZONE_MINUTE:
            this.enterOuterAlt(localctx, 41);
            this.state = 5073;
            this.match(PLSQLParser.TIMEZONE_MINUTE);
            break;
        case PLSQLParser.TIMEZONE_REGION:
            this.enterOuterAlt(localctx, 42);
            this.state = 5074;
            this.match(PLSQLParser.TIMEZONE_REGION);
            break;
        case PLSQLParser.TIMEZONE_ABBR:
            this.enterOuterAlt(localctx, 43);
            this.state = 5075;
            this.match(PLSQLParser.TIMEZONE_ABBR);
            break;
        case PLSQLParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 44);
            this.state = 5076;
            this.match(PLSQLParser.TIMESTAMP);
            break;
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 45);
            this.state = 5077;
            this.match(PLSQLParser.TIMESTAMP_UNCONSTRAINED);
            break;
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 46);
            this.state = 5078;
            this.match(PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED);
            break;
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 47);
            this.state = 5079;
            this.match(PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED);
            break;
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 48);
            this.state = 5080;
            this.match(PLSQLParser.YMINTERVAL_UNCONSTRAINED);
            break;
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 49);
            this.state = 5081;
            this.match(PLSQLParser.DSINTERVAL_UNCONSTRAINED);
            break;
        case PLSQLParser.BFILE:
            this.enterOuterAlt(localctx, 50);
            this.state = 5082;
            this.match(PLSQLParser.BFILE);
            break;
        case PLSQLParser.BLOB:
            this.enterOuterAlt(localctx, 51);
            this.state = 5083;
            this.match(PLSQLParser.BLOB);
            break;
        case PLSQLParser.CLOB:
            this.enterOuterAlt(localctx, 52);
            this.state = 5084;
            this.match(PLSQLParser.CLOB);
            break;
        case PLSQLParser.NCLOB:
            this.enterOuterAlt(localctx, 53);
            this.state = 5085;
            this.match(PLSQLParser.NCLOB);
            break;
        case PLSQLParser.MLSLABEL:
            this.enterOuterAlt(localctx, 54);
            this.state = 5086;
            this.match(PLSQLParser.MLSLABEL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bind_variableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_bind_variable;
    return this;
}

Bind_variableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bind_variableContext.prototype.constructor = Bind_variableContext;

Bind_variableContext.prototype.BINDVAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.BINDVAR);
    } else {
        return this.getToken(PLSQLParser.BINDVAR, i);
    }
};


Bind_variableContext.prototype.UNSIGNED_INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.UNSIGNED_INTEGER);
    } else {
        return this.getToken(PLSQLParser.UNSIGNED_INTEGER, i);
    }
};


Bind_variableContext.prototype.general_element_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(General_element_partContext);
    } else {
        return this.getTypedRuleContext(General_element_partContext,i);
    }
};

Bind_variableContext.prototype.INDICATOR = function() {
    return this.getToken(PLSQLParser.INDICATOR, 0);
};

Bind_variableContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterBind_variable(this);
	}
};

Bind_variableContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitBind_variable(this);
	}
};




PLSQLParser.Bind_variableContext = Bind_variableContext;

PLSQLParser.prototype.bind_variable = function() {

    var localctx = new Bind_variableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 726, PLSQLParser.RULE_bind_variable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5092;
        switch(this._input.LA(1)) {
        case PLSQLParser.BINDVAR:
            this.state = 5089;
            this.match(PLSQLParser.BINDVAR);
            break;
        case PLSQLParser.COLON:
            this.state = 5090;
            this.match(PLSQLParser.COLON);
            this.state = 5091;
            this.match(PLSQLParser.UNSIGNED_INTEGER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5102;
        var la_ = this._interp.adaptivePredict(this._input,664,this._ctx);
        if(la_===1) {
            this.state = 5095;
            _la = this._input.LA(1);
            if(_la===PLSQLParser.INDICATOR) {
                this.state = 5094;
                this.match(PLSQLParser.INDICATOR);
            }

            this.state = 5100;
            switch(this._input.LA(1)) {
            case PLSQLParser.BINDVAR:
                this.state = 5097;
                this.match(PLSQLParser.BINDVAR);
                break;
            case PLSQLParser.COLON:
                this.state = 5098;
                this.match(PLSQLParser.COLON);
                this.state = 5099;
                this.match(PLSQLParser.UNSIGNED_INTEGER);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
        this.state = 5108;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 5104;
            this.match(PLSQLParser.PERIOD);
            this.state = 5105;
            this.general_element_part();
            this.state = 5110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_general_element;
    return this;
}

General_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_elementContext.prototype.constructor = General_elementContext;

General_elementContext.prototype.general_element_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(General_element_partContext);
    } else {
        return this.getTypedRuleContext(General_element_partContext,i);
    }
};

General_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterGeneral_element(this);
	}
};

General_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitGeneral_element(this);
	}
};




PLSQLParser.General_elementContext = General_elementContext;

PLSQLParser.prototype.general_element = function() {

    var localctx = new General_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 728, PLSQLParser.RULE_general_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5111;
        this.general_element_part();
        this.state = 5116;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 5112;
            this.match(PLSQLParser.PERIOD);
            this.state = 5113;
            this.general_element_part();
            this.state = 5118;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_element_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_general_element_part;
    return this;
}

General_element_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_element_partContext.prototype.constructor = General_element_partContext;

General_element_partContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

General_element_partContext.prototype.INTRODUCER = function() {
    return this.getToken(PLSQLParser.INTRODUCER, 0);
};

General_element_partContext.prototype.char_set_name = function() {
    return this.getTypedRuleContext(Char_set_nameContext,0);
};

General_element_partContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

General_element_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterGeneral_element_part(this);
	}
};

General_element_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitGeneral_element_part(this);
	}
};




PLSQLParser.General_element_partContext = General_element_partContext;

PLSQLParser.prototype.general_element_part = function() {

    var localctx = new General_element_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 730, PLSQLParser.RULE_general_element_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5121;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.INTRODUCER) {
            this.state = 5119;
            this.match(PLSQLParser.INTRODUCER);
            this.state = 5120;
            this.char_set_name();
        }

        this.state = 5123;
        this.id_expression();
        this.state = 5128;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,668,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 5124;
                this.match(PLSQLParser.PERIOD);
                this.state = 5125;
                this.id_expression(); 
            }
            this.state = 5130;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,668,this._ctx);
        }

        this.state = 5132;
        var la_ = this._interp.adaptivePredict(this._input,669,this._ctx);
        if(la_===1) {
            this.state = 5131;
            this.function_argument();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_table_element;
    return this;
}

Table_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_elementContext.prototype.constructor = Table_elementContext;

Table_elementContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Table_elementContext.prototype.INTRODUCER = function() {
    return this.getToken(PLSQLParser.INTRODUCER, 0);
};

Table_elementContext.prototype.char_set_name = function() {
    return this.getTypedRuleContext(Char_set_nameContext,0);
};

Table_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterTable_element(this);
	}
};

Table_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitTable_element(this);
	}
};




PLSQLParser.Table_elementContext = Table_elementContext;

PLSQLParser.prototype.table_element = function() {

    var localctx = new Table_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 732, PLSQLParser.RULE_table_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5136;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.INTRODUCER) {
            this.state = 5134;
            this.match(PLSQLParser.INTRODUCER);
            this.state = 5135;
            this.char_set_name();
        }

        this.state = 5138;
        this.id_expression();
        this.state = 5143;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLSQLParser.PERIOD) {
            this.state = 5139;
            this.match(PLSQLParser.PERIOD);
            this.state = 5140;
            this.id_expression();
            this.state = 5145;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.TIMESTAMP = function() {
    return this.getToken(PLSQLParser.TIMESTAMP, 0);
};

ConstantContext.prototype.quoted_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Quoted_stringContext);
    } else {
        return this.getTypedRuleContext(Quoted_stringContext,i);
    }
};

ConstantContext.prototype.bind_variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bind_variableContext);
    } else {
        return this.getTypedRuleContext(Bind_variableContext,i);
    }
};

ConstantContext.prototype.AT = function() {
    return this.getToken(PLSQLParser.AT, 0);
};

ConstantContext.prototype.TIME = function() {
    return this.getToken(PLSQLParser.TIME, 0);
};

ConstantContext.prototype.ZONE = function() {
    return this.getToken(PLSQLParser.ZONE, 0);
};

ConstantContext.prototype.INTERVAL = function() {
    return this.getToken(PLSQLParser.INTERVAL, 0);
};

ConstantContext.prototype.DAY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.DAY);
    } else {
        return this.getToken(PLSQLParser.DAY, i);
    }
};


ConstantContext.prototype.HOUR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.HOUR);
    } else {
        return this.getToken(PLSQLParser.HOUR, i);
    }
};


ConstantContext.prototype.MINUTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.MINUTE);
    } else {
        return this.getToken(PLSQLParser.MINUTE, i);
    }
};


ConstantContext.prototype.SECOND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.SECOND);
    } else {
        return this.getToken(PLSQLParser.SECOND, i);
    }
};


ConstantContext.prototype.general_element_part = function() {
    return this.getTypedRuleContext(General_element_partContext,0);
};

ConstantContext.prototype.TO = function() {
    return this.getToken(PLSQLParser.TO, 0);
};

ConstantContext.prototype.UNSIGNED_INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLSQLParser.UNSIGNED_INTEGER);
    } else {
        return this.getToken(PLSQLParser.UNSIGNED_INTEGER, i);
    }
};


ConstantContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

ConstantContext.prototype.DATE = function() {
    return this.getToken(PLSQLParser.DATE, 0);
};

ConstantContext.prototype.NULL = function() {
    return this.getToken(PLSQLParser.NULL, 0);
};

ConstantContext.prototype.TRUE = function() {
    return this.getToken(PLSQLParser.TRUE, 0);
};

ConstantContext.prototype.FALSE = function() {
    return this.getToken(PLSQLParser.FALSE, 0);
};

ConstantContext.prototype.DBTIMEZONE = function() {
    return this.getToken(PLSQLParser.DBTIMEZONE, 0);
};

ConstantContext.prototype.SESSIONTIMEZONE = function() {
    return this.getToken(PLSQLParser.SESSIONTIMEZONE, 0);
};

ConstantContext.prototype.MINVALUE = function() {
    return this.getToken(PLSQLParser.MINVALUE, 0);
};

ConstantContext.prototype.MAXVALUE = function() {
    return this.getToken(PLSQLParser.MAXVALUE, 0);
};

ConstantContext.prototype.DEFAULT = function() {
    return this.getToken(PLSQLParser.DEFAULT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConstant(this);
	}
};




PLSQLParser.ConstantContext = ConstantContext;

PLSQLParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 734, PLSQLParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 5208;
        switch(this._input.LA(1)) {
        case PLSQLParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5146;
            this.match(PLSQLParser.TIMESTAMP);
            this.state = 5149;
            switch(this._input.LA(1)) {
            case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
            case PLSQLParser.CHAR_STRING:
                this.state = 5147;
                this.quoted_string();
                break;
            case PLSQLParser.BINDVAR:
            case PLSQLParser.COLON:
                this.state = 5148;
                this.bind_variable();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5155;
            var la_ = this._interp.adaptivePredict(this._input,673,this._ctx);
            if(la_===1) {
                this.state = 5151;
                this.match(PLSQLParser.AT);
                this.state = 5152;
                this.match(PLSQLParser.TIME);
                this.state = 5153;
                this.match(PLSQLParser.ZONE);
                this.state = 5154;
                this.quoted_string();

            }
            break;
        case PLSQLParser.INTERVAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 5157;
            this.match(PLSQLParser.INTERVAL);
            this.state = 5161;
            switch(this._input.LA(1)) {
            case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
            case PLSQLParser.CHAR_STRING:
                this.state = 5158;
                this.quoted_string();
                break;
            case PLSQLParser.BINDVAR:
            case PLSQLParser.COLON:
                this.state = 5159;
                this.bind_variable();
                break;
            case PLSQLParser.A_LETTER:
            case PLSQLParser.ADD:
            case PLSQLParser.AFTER:
            case PLSQLParser.AGENT:
            case PLSQLParser.AGGREGATE:
            case PLSQLParser.ANALYZE:
            case PLSQLParser.ARRAY:
            case PLSQLParser.ASSOCIATE:
            case PLSQLParser.AT:
            case PLSQLParser.ATTRIBUTE:
            case PLSQLParser.AUDIT:
            case PLSQLParser.AUTHID:
            case PLSQLParser.AUTO:
            case PLSQLParser.AUTOMATIC:
            case PLSQLParser.AUTONOMOUS_TRANSACTION:
            case PLSQLParser.BATCH:
            case PLSQLParser.BEFORE:
            case PLSQLParser.BFILE:
            case PLSQLParser.BINARY_DOUBLE:
            case PLSQLParser.BINARY_FLOAT:
            case PLSQLParser.BINARY_INTEGER:
            case PLSQLParser.BLOB:
            case PLSQLParser.BLOCK:
            case PLSQLParser.BODY:
            case PLSQLParser.BOOLEAN:
            case PLSQLParser.BOTH:
            case PLSQLParser.BULK:
            case PLSQLParser.BYTE:
            case PLSQLParser.C_LETTER:
            case PLSQLParser.CALL:
            case PLSQLParser.CANONICAL:
            case PLSQLParser.CASCADE:
            case PLSQLParser.CAST:
            case PLSQLParser.CHAR:
            case PLSQLParser.CHAR_CS:
            case PLSQLParser.CHARACTER:
            case PLSQLParser.CHR:
            case PLSQLParser.CLOB:
            case PLSQLParser.CLOSE:
            case PLSQLParser.CLUSTER:
            case PLSQLParser.COLLECT:
            case PLSQLParser.COLUMNS:
            case PLSQLParser.COMMENT:
            case PLSQLParser.COMMIT:
            case PLSQLParser.COMMITTED:
            case PLSQLParser.COMPATIBILITY:
            case PLSQLParser.COMPILE:
            case PLSQLParser.COMPOUND:
            case PLSQLParser.CONSTANT:
            case PLSQLParser.CONSTRAINT:
            case PLSQLParser.CONSTRAINTS:
            case PLSQLParser.CONSTRUCTOR:
            case PLSQLParser.CONTENT:
            case PLSQLParser.CONTEXT:
            case PLSQLParser.CONTINUE:
            case PLSQLParser.CONVERT:
            case PLSQLParser.CORRUPT_XID:
            case PLSQLParser.CORRUPT_XID_ALL:
            case PLSQLParser.COST:
            case PLSQLParser.COUNT:
            case PLSQLParser.CROSS:
            case PLSQLParser.CUBE:
            case PLSQLParser.CURRENT_USER:
            case PLSQLParser.CURSOR:
            case PLSQLParser.CUSTOMDATUM:
            case PLSQLParser.CYCLE:
            case PLSQLParser.DATA:
            case PLSQLParser.DATABASE:
            case PLSQLParser.DAY:
            case PLSQLParser.DB_ROLE_CHANGE:
            case PLSQLParser.DBTIMEZONE:
            case PLSQLParser.DDL:
            case PLSQLParser.DEBUG:
            case PLSQLParser.DEC:
            case PLSQLParser.DECIMAL:
            case PLSQLParser.DECOMPOSE:
            case PLSQLParser.DECREMENT:
            case PLSQLParser.DEFAULTS:
            case PLSQLParser.DEFERRED:
            case PLSQLParser.DEFINER:
            case PLSQLParser.DETERMINISTIC:
            case PLSQLParser.DIMENSION:
            case PLSQLParser.DISABLE:
            case PLSQLParser.DISASSOCIATE:
            case PLSQLParser.DOCUMENT:
            case PLSQLParser.DOUBLE:
            case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
            case PLSQLParser.EACH:
            case PLSQLParser.ELEMENT:
            case PLSQLParser.EMPTY:
            case PLSQLParser.ENABLE:
            case PLSQLParser.ENCODING:
            case PLSQLParser.ENTITYESCAPING:
            case PLSQLParser.ERRORS:
            case PLSQLParser.ESCAPE:
            case PLSQLParser.EVALNAME:
            case PLSQLParser.EXCEPTION:
            case PLSQLParser.EXCEPTION_INIT:
            case PLSQLParser.EXCEPTIONS:
            case PLSQLParser.EXCLUDE:
            case PLSQLParser.EXECUTE:
            case PLSQLParser.EXIT:
            case PLSQLParser.EXPLAIN:
            case PLSQLParser.EXTERNAL:
            case PLSQLParser.EXTRACT:
            case PLSQLParser.FAILURE:
            case PLSQLParser.FINAL:
            case PLSQLParser.FIRST:
            case PLSQLParser.FIRST_VALUE:
            case PLSQLParser.FLOAT:
            case PLSQLParser.FOLLOWING:
            case PLSQLParser.FOLLOWS:
            case PLSQLParser.FORALL:
            case PLSQLParser.FORCE:
            case PLSQLParser.FULL:
            case PLSQLParser.FUNCTION:
            case PLSQLParser.GROUPING:
            case PLSQLParser.HASH:
            case PLSQLParser.HIDE:
            case PLSQLParser.HOUR:
            case PLSQLParser.IGNORE:
            case PLSQLParser.IMMEDIATE:
            case PLSQLParser.INCLUDE:
            case PLSQLParser.INCLUDING:
            case PLSQLParser.INCREMENT:
            case PLSQLParser.INDENT:
            case PLSQLParser.INDEXED:
            case PLSQLParser.INDICATOR:
            case PLSQLParser.INDICES:
            case PLSQLParser.INFINITE:
            case PLSQLParser.INLINE:
            case PLSQLParser.INNER:
            case PLSQLParser.INOUT:
            case PLSQLParser.INSTANTIABLE:
            case PLSQLParser.INSTEAD:
            case PLSQLParser.INT:
            case PLSQLParser.INTEGER:
            case PLSQLParser.INTERVAL:
            case PLSQLParser.INVALIDATE:
            case PLSQLParser.ISOLATION:
            case PLSQLParser.ITERATE:
            case PLSQLParser.JAVA:
            case PLSQLParser.JOIN:
            case PLSQLParser.KEEP:
            case PLSQLParser.LANGUAGE:
            case PLSQLParser.LAST:
            case PLSQLParser.LAST_VALUE:
            case PLSQLParser.LEADING:
            case PLSQLParser.LEFT:
            case PLSQLParser.LEVEL:
            case PLSQLParser.LIBRARY:
            case PLSQLParser.LIKE2:
            case PLSQLParser.LIKE4:
            case PLSQLParser.LIKEC:
            case PLSQLParser.LIMIT:
            case PLSQLParser.LOCAL:
            case PLSQLParser.LOCKED:
            case PLSQLParser.LOG:
            case PLSQLParser.LOGOFF:
            case PLSQLParser.LOGON:
            case PLSQLParser.LONG:
            case PLSQLParser.LOOP:
            case PLSQLParser.MAIN:
            case PLSQLParser.MAP:
            case PLSQLParser.MATCHED:
            case PLSQLParser.MAXVALUE:
            case PLSQLParser.MEASURES:
            case PLSQLParser.MEMBER:
            case PLSQLParser.MERGE:
            case PLSQLParser.MINUTE:
            case PLSQLParser.MINVALUE:
            case PLSQLParser.MLSLABEL:
            case PLSQLParser.MODEL:
            case PLSQLParser.MODIFY:
            case PLSQLParser.MONTH:
            case PLSQLParser.MULTISET:
            case PLSQLParser.NAME:
            case PLSQLParser.NAN:
            case PLSQLParser.NATURAL:
            case PLSQLParser.NATURALN:
            case PLSQLParser.NAV:
            case PLSQLParser.NCHAR:
            case PLSQLParser.NCHAR_CS:
            case PLSQLParser.NCLOB:
            case PLSQLParser.NESTED:
            case PLSQLParser.NEW:
            case PLSQLParser.NO:
            case PLSQLParser.NOAUDIT:
            case PLSQLParser.NOCOPY:
            case PLSQLParser.NOCYCLE:
            case PLSQLParser.NOENTITYESCAPING:
            case PLSQLParser.NONE:
            case PLSQLParser.NOSCHEMACHECK:
            case PLSQLParser.NULLS:
            case PLSQLParser.NUMBER:
            case PLSQLParser.NUMERIC:
            case PLSQLParser.NVARCHAR2:
            case PLSQLParser.OBJECT:
            case PLSQLParser.OFF:
            case PLSQLParser.OID:
            case PLSQLParser.OLD:
            case PLSQLParser.ONLY:
            case PLSQLParser.OPEN:
            case PLSQLParser.ORADATA:
            case PLSQLParser.ORDINALITY:
            case PLSQLParser.OSERROR:
            case PLSQLParser.OUT:
            case PLSQLParser.OUTER:
            case PLSQLParser.OVER:
            case PLSQLParser.OVERRIDING:
            case PLSQLParser.PACKAGE:
            case PLSQLParser.PARALLEL_ENABLE:
            case PLSQLParser.PARAMETERS:
            case PLSQLParser.PARENT:
            case PLSQLParser.PARTITION:
            case PLSQLParser.PASSING:
            case PLSQLParser.PATH:
            case PLSQLParser.PIPELINED:
            case PLSQLParser.PLAN:
            case PLSQLParser.PLS_INTEGER:
            case PLSQLParser.POSITIVE:
            case PLSQLParser.POSITIVEN:
            case PLSQLParser.PRAGMA:
            case PLSQLParser.PRECEDING:
            case PLSQLParser.PRECISION:
            case PLSQLParser.PRESENT:
            case PLSQLParser.RAISE:
            case PLSQLParser.RANGE:
            case PLSQLParser.RAW:
            case PLSQLParser.READ:
            case PLSQLParser.REAL:
            case PLSQLParser.RECORD:
            case PLSQLParser.REF:
            case PLSQLParser.REFERENCE:
            case PLSQLParser.REFERENCING:
            case PLSQLParser.REJECT:
            case PLSQLParser.RELIES_ON:
            case PLSQLParser.RENAME:
            case PLSQLParser.REPLACE:
            case PLSQLParser.RESPECT:
            case PLSQLParser.RESTRICT_REFERENCES:
            case PLSQLParser.RESULT:
            case PLSQLParser.RESULT_CACHE:
            case PLSQLParser.RETURN:
            case PLSQLParser.RETURNING:
            case PLSQLParser.REUSE:
            case PLSQLParser.REVERSE:
            case PLSQLParser.RIGHT:
            case PLSQLParser.ROLLBACK:
            case PLSQLParser.ROLLUP:
            case PLSQLParser.ROW:
            case PLSQLParser.ROWID:
            case PLSQLParser.ROWS:
            case PLSQLParser.RULES:
            case PLSQLParser.SAMPLE:
            case PLSQLParser.SAVE:
            case PLSQLParser.SAVEPOINT:
            case PLSQLParser.SCHEMA:
            case PLSQLParser.SCHEMACHECK:
            case PLSQLParser.SCN:
            case PLSQLParser.SECOND:
            case PLSQLParser.SEED:
            case PLSQLParser.SEGMENT:
            case PLSQLParser.SELF:
            case PLSQLParser.SEQUENTIAL:
            case PLSQLParser.SERIALIZABLE:
            case PLSQLParser.SERIALLY_REUSABLE:
            case PLSQLParser.SERVERERROR:
            case PLSQLParser.SESSIONTIMEZONE:
            case PLSQLParser.SET:
            case PLSQLParser.SETS:
            case PLSQLParser.SETTINGS:
            case PLSQLParser.SHOW:
            case PLSQLParser.SHUTDOWN:
            case PLSQLParser.SIBLINGS:
            case PLSQLParser.SIGNTYPE:
            case PLSQLParser.SIMPLE_INTEGER:
            case PLSQLParser.SINGLE:
            case PLSQLParser.SKIP:
            case PLSQLParser.SMALLINT:
            case PLSQLParser.SNAPSHOT:
            case PLSQLParser.SOME:
            case PLSQLParser.SPECIFICATION:
            case PLSQLParser.SQLDATA:
            case PLSQLParser.SQLERROR:
            case PLSQLParser.STANDALONE:
            case PLSQLParser.STARTUP:
            case PLSQLParser.STATEMENT:
            case PLSQLParser.STATEMENT_ID:
            case PLSQLParser.STATIC:
            case PLSQLParser.STATISTICS:
            case PLSQLParser.STRING:
            case PLSQLParser.SUBMULTISET:
            case PLSQLParser.SUBPARTITION:
            case PLSQLParser.SUBSTITUTABLE:
            case PLSQLParser.SUBTYPE:
            case PLSQLParser.SUCCESS:
            case PLSQLParser.SUSPEND:
            case PLSQLParser.TIME:
            case PLSQLParser.TIMESTAMP:
            case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
            case PLSQLParser.TIMEZONE_ABBR:
            case PLSQLParser.TIMEZONE_HOUR:
            case PLSQLParser.TIMEZONE_MINUTE:
            case PLSQLParser.TIMEZONE_REGION:
            case PLSQLParser.TRAILING:
            case PLSQLParser.TRANSACTION:
            case PLSQLParser.TRANSLATE:
            case PLSQLParser.TREAT:
            case PLSQLParser.TRIGGER:
            case PLSQLParser.TRIM:
            case PLSQLParser.TRUNCATE:
            case PLSQLParser.TYPE:
            case PLSQLParser.UNBOUNDED:
            case PLSQLParser.UNDER:
            case PLSQLParser.UNLIMITED:
            case PLSQLParser.UNTIL:
            case PLSQLParser.UPDATED:
            case PLSQLParser.UPSERT:
            case PLSQLParser.UROWID:
            case PLSQLParser.USE:
            case PLSQLParser.VALIDATE:
            case PLSQLParser.VALUE:
            case PLSQLParser.VARCHAR:
            case PLSQLParser.VARCHAR2:
            case PLSQLParser.VARIABLE:
            case PLSQLParser.VARRAY:
            case PLSQLParser.VARYING:
            case PLSQLParser.VERSION:
            case PLSQLParser.VERSIONS:
            case PLSQLParser.WAIT:
            case PLSQLParser.WARNING:
            case PLSQLParser.WELLFORMED:
            case PLSQLParser.WHENEVER:
            case PLSQLParser.WHILE:
            case PLSQLParser.WITHIN:
            case PLSQLParser.WORK:
            case PLSQLParser.WRITE:
            case PLSQLParser.XML:
            case PLSQLParser.XMLAGG:
            case PLSQLParser.XMLATTRIBUTES:
            case PLSQLParser.XMLCAST:
            case PLSQLParser.XMLCOLATTVAL:
            case PLSQLParser.XMLELEMENT:
            case PLSQLParser.XMLEXISTS:
            case PLSQLParser.XMLFOREST:
            case PLSQLParser.XMLNAMESPACES:
            case PLSQLParser.XMLPARSE:
            case PLSQLParser.XMLPI:
            case PLSQLParser.XMLQUERY:
            case PLSQLParser.XMLROOT:
            case PLSQLParser.XMLSERIALIZE:
            case PLSQLParser.XMLTABLE:
            case PLSQLParser.YEAR:
            case PLSQLParser.YES:
            case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
            case PLSQLParser.ZONE:
            case PLSQLParser.PREDICTION:
            case PLSQLParser.PREDICTION_BOUNDS:
            case PLSQLParser.PREDICTION_COST:
            case PLSQLParser.PREDICTION_DETAILS:
            case PLSQLParser.PREDICTION_PROBABILITY:
            case PLSQLParser.PREDICTION_SET:
            case PLSQLParser.CUME_DIST:
            case PLSQLParser.DENSE_RANK:
            case PLSQLParser.LISTAGG:
            case PLSQLParser.PERCENT_RANK:
            case PLSQLParser.PERCENTILE_CONT:
            case PLSQLParser.PERCENTILE_DISC:
            case PLSQLParser.RANK:
            case PLSQLParser.AVG:
            case PLSQLParser.CORR:
            case PLSQLParser.LAG:
            case PLSQLParser.LEAD:
            case PLSQLParser.MAX:
            case PLSQLParser.MEDIAN:
            case PLSQLParser.MIN:
            case PLSQLParser.NTILE:
            case PLSQLParser.RATIO_TO_REPORT:
            case PLSQLParser.ROW_NUMBER:
            case PLSQLParser.SUM:
            case PLSQLParser.VARIANCE:
            case PLSQLParser.REGR_:
            case PLSQLParser.STDDEV:
            case PLSQLParser.VAR_:
            case PLSQLParser.COVAR_:
            case PLSQLParser.DELIMITED_ID:
            case PLSQLParser.INTRODUCER:
            case PLSQLParser.REGULAR_ID:
                this.state = 5160;
                this.general_element_part();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5163;
            _la = this._input.LA(1);
            if(!(_la===PLSQLParser.DAY || _la===PLSQLParser.HOUR || _la===PLSQLParser.MINUTE || _la===PLSQLParser.SECOND)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 5177;
            var la_ = this._interp.adaptivePredict(this._input,678,this._ctx);
            if(la_===1) {
                this.state = 5164;
                this.match(PLSQLParser.LEFT_PAREN);
                this.state = 5167;
                switch(this._input.LA(1)) {
                case PLSQLParser.UNSIGNED_INTEGER:
                    this.state = 5165;
                    this.match(PLSQLParser.UNSIGNED_INTEGER);
                    break;
                case PLSQLParser.BINDVAR:
                case PLSQLParser.COLON:
                    this.state = 5166;
                    this.bind_variable();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 5174;
                _la = this._input.LA(1);
                if(_la===PLSQLParser.COMMA) {
                    this.state = 5169;
                    this.match(PLSQLParser.COMMA);
                    this.state = 5172;
                    switch(this._input.LA(1)) {
                    case PLSQLParser.UNSIGNED_INTEGER:
                        this.state = 5170;
                        this.match(PLSQLParser.UNSIGNED_INTEGER);
                        break;
                    case PLSQLParser.BINDVAR:
                    case PLSQLParser.COLON:
                        this.state = 5171;
                        this.bind_variable();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                }

                this.state = 5176;
                this.match(PLSQLParser.RIGHT_PAREN);

            }
            this.state = 5194;
            var la_ = this._interp.adaptivePredict(this._input,682,this._ctx);
            if(la_===1) {
                this.state = 5179;
                this.match(PLSQLParser.TO);
                this.state = 5192;
                switch(this._input.LA(1)) {
                case PLSQLParser.DAY:
                    this.state = 5180;
                    this.match(PLSQLParser.DAY);
                    break;
                case PLSQLParser.HOUR:
                    this.state = 5181;
                    this.match(PLSQLParser.HOUR);
                    break;
                case PLSQLParser.MINUTE:
                    this.state = 5182;
                    this.match(PLSQLParser.MINUTE);
                    break;
                case PLSQLParser.SECOND:
                    this.state = 5183;
                    this.match(PLSQLParser.SECOND);
                    this.state = 5190;
                    var la_ = this._interp.adaptivePredict(this._input,680,this._ctx);
                    if(la_===1) {
                        this.state = 5184;
                        this.match(PLSQLParser.LEFT_PAREN);
                        this.state = 5187;
                        switch(this._input.LA(1)) {
                        case PLSQLParser.UNSIGNED_INTEGER:
                            this.state = 5185;
                            this.match(PLSQLParser.UNSIGNED_INTEGER);
                            break;
                        case PLSQLParser.BINDVAR:
                        case PLSQLParser.COLON:
                            this.state = 5186;
                            this.bind_variable();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        this.state = 5189;
                        this.match(PLSQLParser.RIGHT_PAREN);

                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }

            }
            break;
        case PLSQLParser.UNSIGNED_INTEGER:
        case PLSQLParser.APPROXIMATE_NUM_LIT:
            this.enterOuterAlt(localctx, 3);
            this.state = 5196;
            this.numeric();
            break;
        case PLSQLParser.DATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 5197;
            this.match(PLSQLParser.DATE);
            this.state = 5198;
            this.quoted_string();
            break;
        case PLSQLParser.NATIONAL_CHAR_STRING_LIT:
        case PLSQLParser.CHAR_STRING:
            this.enterOuterAlt(localctx, 5);
            this.state = 5199;
            this.quoted_string();
            break;
        case PLSQLParser.NULL:
            this.enterOuterAlt(localctx, 6);
            this.state = 5200;
            this.match(PLSQLParser.NULL);
            break;
        case PLSQLParser.TRUE:
            this.enterOuterAlt(localctx, 7);
            this.state = 5201;
            this.match(PLSQLParser.TRUE);
            break;
        case PLSQLParser.FALSE:
            this.enterOuterAlt(localctx, 8);
            this.state = 5202;
            this.match(PLSQLParser.FALSE);
            break;
        case PLSQLParser.DBTIMEZONE:
            this.enterOuterAlt(localctx, 9);
            this.state = 5203;
            this.match(PLSQLParser.DBTIMEZONE);
            break;
        case PLSQLParser.SESSIONTIMEZONE:
            this.enterOuterAlt(localctx, 10);
            this.state = 5204;
            this.match(PLSQLParser.SESSIONTIMEZONE);
            break;
        case PLSQLParser.MINVALUE:
            this.enterOuterAlt(localctx, 11);
            this.state = 5205;
            this.match(PLSQLParser.MINVALUE);
            break;
        case PLSQLParser.MAXVALUE:
            this.enterOuterAlt(localctx, 12);
            this.state = 5206;
            this.match(PLSQLParser.MAXVALUE);
            break;
        case PLSQLParser.DEFAULT:
            this.enterOuterAlt(localctx, 13);
            this.state = 5207;
            this.match(PLSQLParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_numeric;
    return this;
}

NumericContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericContext.prototype.constructor = NumericContext;

NumericContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(PLSQLParser.UNSIGNED_INTEGER, 0);
};

NumericContext.prototype.APPROXIMATE_NUM_LIT = function() {
    return this.getToken(PLSQLParser.APPROXIMATE_NUM_LIT, 0);
};

NumericContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterNumeric(this);
	}
};

NumericContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitNumeric(this);
	}
};




PLSQLParser.NumericContext = NumericContext;

PLSQLParser.prototype.numeric = function() {

    var localctx = new NumericContext(this, this._ctx, this.state);
    this.enterRule(localctx, 736, PLSQLParser.RULE_numeric);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5210;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.UNSIGNED_INTEGER || _la===PLSQLParser.APPROXIMATE_NUM_LIT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quoted_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_quoted_string;
    return this;
}

Quoted_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quoted_stringContext.prototype.constructor = Quoted_stringContext;

Quoted_stringContext.prototype.CHAR_STRING = function() {
    return this.getToken(PLSQLParser.CHAR_STRING, 0);
};

Quoted_stringContext.prototype.NATIONAL_CHAR_STRING_LIT = function() {
    return this.getToken(PLSQLParser.NATIONAL_CHAR_STRING_LIT, 0);
};

Quoted_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterQuoted_string(this);
	}
};

Quoted_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitQuoted_string(this);
	}
};




PLSQLParser.Quoted_stringContext = Quoted_stringContext;

PLSQLParser.prototype.quoted_string = function() {

    var localctx = new Quoted_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 738, PLSQLParser.RULE_quoted_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5212;
        _la = this._input.LA(1);
        if(!(_la===PLSQLParser.NATIONAL_CHAR_STRING_LIT || _la===PLSQLParser.CHAR_STRING)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_id;
    return this;
}

IdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdContext.prototype.constructor = IdContext;

IdContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

IdContext.prototype.INTRODUCER = function() {
    return this.getToken(PLSQLParser.INTRODUCER, 0);
};

IdContext.prototype.char_set_name = function() {
    return this.getTypedRuleContext(Char_set_nameContext,0);
};

IdContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterId(this);
	}
};

IdContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitId(this);
	}
};




PLSQLParser.IdContext = IdContext;

PLSQLParser.prototype.id = function() {

    var localctx = new IdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 740, PLSQLParser.RULE_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5216;
        _la = this._input.LA(1);
        if(_la===PLSQLParser.INTRODUCER) {
            this.state = 5214;
            this.match(PLSQLParser.INTRODUCER);
            this.state = 5215;
            this.char_set_name();
        }

        this.state = 5218;
        this.id_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Id_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_id_expression;
    return this;
}

Id_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_expressionContext.prototype.constructor = Id_expressionContext;

Id_expressionContext.prototype.regular_id = function() {
    return this.getTypedRuleContext(Regular_idContext,0);
};

Id_expressionContext.prototype.DELIMITED_ID = function() {
    return this.getToken(PLSQLParser.DELIMITED_ID, 0);
};

Id_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterId_expression(this);
	}
};

Id_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitId_expression(this);
	}
};




PLSQLParser.Id_expressionContext = Id_expressionContext;

PLSQLParser.prototype.id_expression = function() {

    var localctx = new Id_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 742, PLSQLParser.RULE_id_expression);
    try {
        this.state = 5222;
        switch(this._input.LA(1)) {
        case PLSQLParser.A_LETTER:
        case PLSQLParser.ADD:
        case PLSQLParser.AFTER:
        case PLSQLParser.AGENT:
        case PLSQLParser.AGGREGATE:
        case PLSQLParser.ANALYZE:
        case PLSQLParser.ARRAY:
        case PLSQLParser.ASSOCIATE:
        case PLSQLParser.AT:
        case PLSQLParser.ATTRIBUTE:
        case PLSQLParser.AUDIT:
        case PLSQLParser.AUTHID:
        case PLSQLParser.AUTO:
        case PLSQLParser.AUTOMATIC:
        case PLSQLParser.AUTONOMOUS_TRANSACTION:
        case PLSQLParser.BATCH:
        case PLSQLParser.BEFORE:
        case PLSQLParser.BFILE:
        case PLSQLParser.BINARY_DOUBLE:
        case PLSQLParser.BINARY_FLOAT:
        case PLSQLParser.BINARY_INTEGER:
        case PLSQLParser.BLOB:
        case PLSQLParser.BLOCK:
        case PLSQLParser.BODY:
        case PLSQLParser.BOOLEAN:
        case PLSQLParser.BOTH:
        case PLSQLParser.BULK:
        case PLSQLParser.BYTE:
        case PLSQLParser.C_LETTER:
        case PLSQLParser.CALL:
        case PLSQLParser.CANONICAL:
        case PLSQLParser.CASCADE:
        case PLSQLParser.CAST:
        case PLSQLParser.CHAR:
        case PLSQLParser.CHAR_CS:
        case PLSQLParser.CHARACTER:
        case PLSQLParser.CHR:
        case PLSQLParser.CLOB:
        case PLSQLParser.CLOSE:
        case PLSQLParser.CLUSTER:
        case PLSQLParser.COLLECT:
        case PLSQLParser.COLUMNS:
        case PLSQLParser.COMMENT:
        case PLSQLParser.COMMIT:
        case PLSQLParser.COMMITTED:
        case PLSQLParser.COMPATIBILITY:
        case PLSQLParser.COMPILE:
        case PLSQLParser.COMPOUND:
        case PLSQLParser.CONSTANT:
        case PLSQLParser.CONSTRAINT:
        case PLSQLParser.CONSTRAINTS:
        case PLSQLParser.CONSTRUCTOR:
        case PLSQLParser.CONTENT:
        case PLSQLParser.CONTEXT:
        case PLSQLParser.CONTINUE:
        case PLSQLParser.CONVERT:
        case PLSQLParser.CORRUPT_XID:
        case PLSQLParser.CORRUPT_XID_ALL:
        case PLSQLParser.COST:
        case PLSQLParser.COUNT:
        case PLSQLParser.CROSS:
        case PLSQLParser.CUBE:
        case PLSQLParser.CURRENT_USER:
        case PLSQLParser.CURSOR:
        case PLSQLParser.CUSTOMDATUM:
        case PLSQLParser.CYCLE:
        case PLSQLParser.DATA:
        case PLSQLParser.DATABASE:
        case PLSQLParser.DAY:
        case PLSQLParser.DB_ROLE_CHANGE:
        case PLSQLParser.DBTIMEZONE:
        case PLSQLParser.DDL:
        case PLSQLParser.DEBUG:
        case PLSQLParser.DEC:
        case PLSQLParser.DECIMAL:
        case PLSQLParser.DECOMPOSE:
        case PLSQLParser.DECREMENT:
        case PLSQLParser.DEFAULTS:
        case PLSQLParser.DEFERRED:
        case PLSQLParser.DEFINER:
        case PLSQLParser.DETERMINISTIC:
        case PLSQLParser.DIMENSION:
        case PLSQLParser.DISABLE:
        case PLSQLParser.DISASSOCIATE:
        case PLSQLParser.DOCUMENT:
        case PLSQLParser.DOUBLE:
        case PLSQLParser.DSINTERVAL_UNCONSTRAINED:
        case PLSQLParser.EACH:
        case PLSQLParser.ELEMENT:
        case PLSQLParser.EMPTY:
        case PLSQLParser.ENABLE:
        case PLSQLParser.ENCODING:
        case PLSQLParser.ENTITYESCAPING:
        case PLSQLParser.ERRORS:
        case PLSQLParser.ESCAPE:
        case PLSQLParser.EVALNAME:
        case PLSQLParser.EXCEPTION:
        case PLSQLParser.EXCEPTION_INIT:
        case PLSQLParser.EXCEPTIONS:
        case PLSQLParser.EXCLUDE:
        case PLSQLParser.EXECUTE:
        case PLSQLParser.EXIT:
        case PLSQLParser.EXPLAIN:
        case PLSQLParser.EXTERNAL:
        case PLSQLParser.EXTRACT:
        case PLSQLParser.FAILURE:
        case PLSQLParser.FINAL:
        case PLSQLParser.FIRST:
        case PLSQLParser.FIRST_VALUE:
        case PLSQLParser.FLOAT:
        case PLSQLParser.FOLLOWING:
        case PLSQLParser.FOLLOWS:
        case PLSQLParser.FORALL:
        case PLSQLParser.FORCE:
        case PLSQLParser.FULL:
        case PLSQLParser.FUNCTION:
        case PLSQLParser.GROUPING:
        case PLSQLParser.HASH:
        case PLSQLParser.HIDE:
        case PLSQLParser.HOUR:
        case PLSQLParser.IGNORE:
        case PLSQLParser.IMMEDIATE:
        case PLSQLParser.INCLUDE:
        case PLSQLParser.INCLUDING:
        case PLSQLParser.INCREMENT:
        case PLSQLParser.INDENT:
        case PLSQLParser.INDEXED:
        case PLSQLParser.INDICATOR:
        case PLSQLParser.INDICES:
        case PLSQLParser.INFINITE:
        case PLSQLParser.INLINE:
        case PLSQLParser.INNER:
        case PLSQLParser.INOUT:
        case PLSQLParser.INSTANTIABLE:
        case PLSQLParser.INSTEAD:
        case PLSQLParser.INT:
        case PLSQLParser.INTEGER:
        case PLSQLParser.INTERVAL:
        case PLSQLParser.INVALIDATE:
        case PLSQLParser.ISOLATION:
        case PLSQLParser.ITERATE:
        case PLSQLParser.JAVA:
        case PLSQLParser.JOIN:
        case PLSQLParser.KEEP:
        case PLSQLParser.LANGUAGE:
        case PLSQLParser.LAST:
        case PLSQLParser.LAST_VALUE:
        case PLSQLParser.LEADING:
        case PLSQLParser.LEFT:
        case PLSQLParser.LEVEL:
        case PLSQLParser.LIBRARY:
        case PLSQLParser.LIKE2:
        case PLSQLParser.LIKE4:
        case PLSQLParser.LIKEC:
        case PLSQLParser.LIMIT:
        case PLSQLParser.LOCAL:
        case PLSQLParser.LOCKED:
        case PLSQLParser.LOG:
        case PLSQLParser.LOGOFF:
        case PLSQLParser.LOGON:
        case PLSQLParser.LONG:
        case PLSQLParser.LOOP:
        case PLSQLParser.MAIN:
        case PLSQLParser.MAP:
        case PLSQLParser.MATCHED:
        case PLSQLParser.MAXVALUE:
        case PLSQLParser.MEASURES:
        case PLSQLParser.MEMBER:
        case PLSQLParser.MERGE:
        case PLSQLParser.MINUTE:
        case PLSQLParser.MINVALUE:
        case PLSQLParser.MLSLABEL:
        case PLSQLParser.MODEL:
        case PLSQLParser.MODIFY:
        case PLSQLParser.MONTH:
        case PLSQLParser.MULTISET:
        case PLSQLParser.NAME:
        case PLSQLParser.NAN:
        case PLSQLParser.NATURAL:
        case PLSQLParser.NATURALN:
        case PLSQLParser.NAV:
        case PLSQLParser.NCHAR:
        case PLSQLParser.NCHAR_CS:
        case PLSQLParser.NCLOB:
        case PLSQLParser.NESTED:
        case PLSQLParser.NEW:
        case PLSQLParser.NO:
        case PLSQLParser.NOAUDIT:
        case PLSQLParser.NOCOPY:
        case PLSQLParser.NOCYCLE:
        case PLSQLParser.NOENTITYESCAPING:
        case PLSQLParser.NONE:
        case PLSQLParser.NOSCHEMACHECK:
        case PLSQLParser.NULLS:
        case PLSQLParser.NUMBER:
        case PLSQLParser.NUMERIC:
        case PLSQLParser.NVARCHAR2:
        case PLSQLParser.OBJECT:
        case PLSQLParser.OFF:
        case PLSQLParser.OID:
        case PLSQLParser.OLD:
        case PLSQLParser.ONLY:
        case PLSQLParser.OPEN:
        case PLSQLParser.ORADATA:
        case PLSQLParser.ORDINALITY:
        case PLSQLParser.OSERROR:
        case PLSQLParser.OUT:
        case PLSQLParser.OUTER:
        case PLSQLParser.OVER:
        case PLSQLParser.OVERRIDING:
        case PLSQLParser.PACKAGE:
        case PLSQLParser.PARALLEL_ENABLE:
        case PLSQLParser.PARAMETERS:
        case PLSQLParser.PARENT:
        case PLSQLParser.PARTITION:
        case PLSQLParser.PASSING:
        case PLSQLParser.PATH:
        case PLSQLParser.PIPELINED:
        case PLSQLParser.PLAN:
        case PLSQLParser.PLS_INTEGER:
        case PLSQLParser.POSITIVE:
        case PLSQLParser.POSITIVEN:
        case PLSQLParser.PRAGMA:
        case PLSQLParser.PRECEDING:
        case PLSQLParser.PRECISION:
        case PLSQLParser.PRESENT:
        case PLSQLParser.RAISE:
        case PLSQLParser.RANGE:
        case PLSQLParser.RAW:
        case PLSQLParser.READ:
        case PLSQLParser.REAL:
        case PLSQLParser.RECORD:
        case PLSQLParser.REF:
        case PLSQLParser.REFERENCE:
        case PLSQLParser.REFERENCING:
        case PLSQLParser.REJECT:
        case PLSQLParser.RELIES_ON:
        case PLSQLParser.RENAME:
        case PLSQLParser.REPLACE:
        case PLSQLParser.RESPECT:
        case PLSQLParser.RESTRICT_REFERENCES:
        case PLSQLParser.RESULT:
        case PLSQLParser.RESULT_CACHE:
        case PLSQLParser.RETURN:
        case PLSQLParser.RETURNING:
        case PLSQLParser.REUSE:
        case PLSQLParser.REVERSE:
        case PLSQLParser.RIGHT:
        case PLSQLParser.ROLLBACK:
        case PLSQLParser.ROLLUP:
        case PLSQLParser.ROW:
        case PLSQLParser.ROWID:
        case PLSQLParser.ROWS:
        case PLSQLParser.RULES:
        case PLSQLParser.SAMPLE:
        case PLSQLParser.SAVE:
        case PLSQLParser.SAVEPOINT:
        case PLSQLParser.SCHEMA:
        case PLSQLParser.SCHEMACHECK:
        case PLSQLParser.SCN:
        case PLSQLParser.SECOND:
        case PLSQLParser.SEED:
        case PLSQLParser.SEGMENT:
        case PLSQLParser.SELF:
        case PLSQLParser.SEQUENTIAL:
        case PLSQLParser.SERIALIZABLE:
        case PLSQLParser.SERIALLY_REUSABLE:
        case PLSQLParser.SERVERERROR:
        case PLSQLParser.SESSIONTIMEZONE:
        case PLSQLParser.SET:
        case PLSQLParser.SETS:
        case PLSQLParser.SETTINGS:
        case PLSQLParser.SHOW:
        case PLSQLParser.SHUTDOWN:
        case PLSQLParser.SIBLINGS:
        case PLSQLParser.SIGNTYPE:
        case PLSQLParser.SIMPLE_INTEGER:
        case PLSQLParser.SINGLE:
        case PLSQLParser.SKIP:
        case PLSQLParser.SMALLINT:
        case PLSQLParser.SNAPSHOT:
        case PLSQLParser.SOME:
        case PLSQLParser.SPECIFICATION:
        case PLSQLParser.SQLDATA:
        case PLSQLParser.SQLERROR:
        case PLSQLParser.STANDALONE:
        case PLSQLParser.STARTUP:
        case PLSQLParser.STATEMENT:
        case PLSQLParser.STATEMENT_ID:
        case PLSQLParser.STATIC:
        case PLSQLParser.STATISTICS:
        case PLSQLParser.STRING:
        case PLSQLParser.SUBMULTISET:
        case PLSQLParser.SUBPARTITION:
        case PLSQLParser.SUBSTITUTABLE:
        case PLSQLParser.SUBTYPE:
        case PLSQLParser.SUCCESS:
        case PLSQLParser.SUSPEND:
        case PLSQLParser.TIME:
        case PLSQLParser.TIMESTAMP:
        case PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PLSQLParser.TIMESTAMP_UNCONSTRAINED:
        case PLSQLParser.TIMEZONE_ABBR:
        case PLSQLParser.TIMEZONE_HOUR:
        case PLSQLParser.TIMEZONE_MINUTE:
        case PLSQLParser.TIMEZONE_REGION:
        case PLSQLParser.TRAILING:
        case PLSQLParser.TRANSACTION:
        case PLSQLParser.TRANSLATE:
        case PLSQLParser.TREAT:
        case PLSQLParser.TRIGGER:
        case PLSQLParser.TRIM:
        case PLSQLParser.TRUNCATE:
        case PLSQLParser.TYPE:
        case PLSQLParser.UNBOUNDED:
        case PLSQLParser.UNDER:
        case PLSQLParser.UNLIMITED:
        case PLSQLParser.UNTIL:
        case PLSQLParser.UPDATED:
        case PLSQLParser.UPSERT:
        case PLSQLParser.UROWID:
        case PLSQLParser.USE:
        case PLSQLParser.VALIDATE:
        case PLSQLParser.VALUE:
        case PLSQLParser.VARCHAR:
        case PLSQLParser.VARCHAR2:
        case PLSQLParser.VARIABLE:
        case PLSQLParser.VARRAY:
        case PLSQLParser.VARYING:
        case PLSQLParser.VERSION:
        case PLSQLParser.VERSIONS:
        case PLSQLParser.WAIT:
        case PLSQLParser.WARNING:
        case PLSQLParser.WELLFORMED:
        case PLSQLParser.WHENEVER:
        case PLSQLParser.WHILE:
        case PLSQLParser.WITHIN:
        case PLSQLParser.WORK:
        case PLSQLParser.WRITE:
        case PLSQLParser.XML:
        case PLSQLParser.XMLAGG:
        case PLSQLParser.XMLATTRIBUTES:
        case PLSQLParser.XMLCAST:
        case PLSQLParser.XMLCOLATTVAL:
        case PLSQLParser.XMLELEMENT:
        case PLSQLParser.XMLEXISTS:
        case PLSQLParser.XMLFOREST:
        case PLSQLParser.XMLNAMESPACES:
        case PLSQLParser.XMLPARSE:
        case PLSQLParser.XMLPI:
        case PLSQLParser.XMLQUERY:
        case PLSQLParser.XMLROOT:
        case PLSQLParser.XMLSERIALIZE:
        case PLSQLParser.XMLTABLE:
        case PLSQLParser.YEAR:
        case PLSQLParser.YES:
        case PLSQLParser.YMINTERVAL_UNCONSTRAINED:
        case PLSQLParser.ZONE:
        case PLSQLParser.PREDICTION:
        case PLSQLParser.PREDICTION_BOUNDS:
        case PLSQLParser.PREDICTION_COST:
        case PLSQLParser.PREDICTION_DETAILS:
        case PLSQLParser.PREDICTION_PROBABILITY:
        case PLSQLParser.PREDICTION_SET:
        case PLSQLParser.CUME_DIST:
        case PLSQLParser.DENSE_RANK:
        case PLSQLParser.LISTAGG:
        case PLSQLParser.PERCENT_RANK:
        case PLSQLParser.PERCENTILE_CONT:
        case PLSQLParser.PERCENTILE_DISC:
        case PLSQLParser.RANK:
        case PLSQLParser.AVG:
        case PLSQLParser.CORR:
        case PLSQLParser.LAG:
        case PLSQLParser.LEAD:
        case PLSQLParser.MAX:
        case PLSQLParser.MEDIAN:
        case PLSQLParser.MIN:
        case PLSQLParser.NTILE:
        case PLSQLParser.RATIO_TO_REPORT:
        case PLSQLParser.ROW_NUMBER:
        case PLSQLParser.SUM:
        case PLSQLParser.VARIANCE:
        case PLSQLParser.REGR_:
        case PLSQLParser.STDDEV:
        case PLSQLParser.VAR_:
        case PLSQLParser.COVAR_:
        case PLSQLParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5220;
            this.regular_id();
            break;
        case PLSQLParser.DELIMITED_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 5221;
            this.match(PLSQLParser.DELIMITED_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Not_equal_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_not_equal_op;
    return this;
}

Not_equal_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not_equal_opContext.prototype.constructor = Not_equal_opContext;

Not_equal_opContext.prototype.NOT_EQUAL_OP = function() {
    return this.getToken(PLSQLParser.NOT_EQUAL_OP, 0);
};

Not_equal_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterNot_equal_op(this);
	}
};

Not_equal_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitNot_equal_op(this);
	}
};




PLSQLParser.Not_equal_opContext = Not_equal_opContext;

PLSQLParser.prototype.not_equal_op = function() {

    var localctx = new Not_equal_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 744, PLSQLParser.RULE_not_equal_op);
    try {
        this.state = 5231;
        switch(this._input.LA(1)) {
        case PLSQLParser.NOT_EQUAL_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5224;
            this.match(PLSQLParser.NOT_EQUAL_OP);
            break;
        case PLSQLParser.LESS_THAN_OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 5225;
            this.match(PLSQLParser.LESS_THAN_OP);
            this.state = 5226;
            this.match(PLSQLParser.GREATER_THAN_OP);
            break;
        case PLSQLParser.EXCLAMATION_OPERATOR_PART:
            this.enterOuterAlt(localctx, 3);
            this.state = 5227;
            this.match(PLSQLParser.EXCLAMATION_OPERATOR_PART);
            this.state = 5228;
            this.match(PLSQLParser.EQUALS_OP);
            break;
        case PLSQLParser.CARRET_OPERATOR_PART:
            this.enterOuterAlt(localctx, 4);
            this.state = 5229;
            this.match(PLSQLParser.CARRET_OPERATOR_PART);
            this.state = 5230;
            this.match(PLSQLParser.EQUALS_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Greater_than_or_equals_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_greater_than_or_equals_op;
    return this;
}

Greater_than_or_equals_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Greater_than_or_equals_opContext.prototype.constructor = Greater_than_or_equals_opContext;


Greater_than_or_equals_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterGreater_than_or_equals_op(this);
	}
};

Greater_than_or_equals_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitGreater_than_or_equals_op(this);
	}
};




PLSQLParser.Greater_than_or_equals_opContext = Greater_than_or_equals_opContext;

PLSQLParser.prototype.greater_than_or_equals_op = function() {

    var localctx = new Greater_than_or_equals_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 746, PLSQLParser.RULE_greater_than_or_equals_op);
    try {
        this.state = 5236;
        switch(this._input.LA(1)) {
        case PLSQLParser.GREATER_THAN_OR_EQUALS_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5233;
            this.match(PLSQLParser.GREATER_THAN_OR_EQUALS_OP);
            break;
        case PLSQLParser.GREATER_THAN_OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 5234;
            this.match(PLSQLParser.GREATER_THAN_OP);
            this.state = 5235;
            this.match(PLSQLParser.EQUALS_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Less_than_or_equals_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_less_than_or_equals_op;
    return this;
}

Less_than_or_equals_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Less_than_or_equals_opContext.prototype.constructor = Less_than_or_equals_opContext;


Less_than_or_equals_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterLess_than_or_equals_op(this);
	}
};

Less_than_or_equals_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitLess_than_or_equals_op(this);
	}
};




PLSQLParser.Less_than_or_equals_opContext = Less_than_or_equals_opContext;

PLSQLParser.prototype.less_than_or_equals_op = function() {

    var localctx = new Less_than_or_equals_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 748, PLSQLParser.RULE_less_than_or_equals_op);
    try {
        this.state = 5241;
        switch(this._input.LA(1)) {
        case PLSQLParser.LESS_THAN_OR_EQUALS_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5238;
            this.match(PLSQLParser.LESS_THAN_OR_EQUALS_OP);
            break;
        case PLSQLParser.LESS_THAN_OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 5239;
            this.match(PLSQLParser.LESS_THAN_OP);
            this.state = 5240;
            this.match(PLSQLParser.EQUALS_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concatenation_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_concatenation_op;
    return this;
}

Concatenation_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concatenation_opContext.prototype.constructor = Concatenation_opContext;


Concatenation_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterConcatenation_op(this);
	}
};

Concatenation_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitConcatenation_op(this);
	}
};




PLSQLParser.Concatenation_opContext = Concatenation_opContext;

PLSQLParser.prototype.concatenation_op = function() {

    var localctx = new Concatenation_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 750, PLSQLParser.RULE_concatenation_op);
    try {
        this.state = 5246;
        switch(this._input.LA(1)) {
        case PLSQLParser.CONCATENATION_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5243;
            this.match(PLSQLParser.CONCATENATION_OP);
            break;
        case PLSQLParser.VERTICAL_BAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 5244;
            this.match(PLSQLParser.VERTICAL_BAR);
            this.state = 5245;
            this.match(PLSQLParser.VERTICAL_BAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_signContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_outer_join_sign;
    return this;
}

Outer_join_signContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_signContext.prototype.constructor = Outer_join_signContext;


Outer_join_signContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterOuter_join_sign(this);
	}
};

Outer_join_signContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitOuter_join_sign(this);
	}
};




PLSQLParser.Outer_join_signContext = Outer_join_signContext;

PLSQLParser.prototype.outer_join_sign = function() {

    var localctx = new Outer_join_signContext(this, this._ctx, this.state);
    this.enterRule(localctx, 752, PLSQLParser.RULE_outer_join_sign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5248;
        this.match(PLSQLParser.LEFT_PAREN);
        this.state = 5249;
        this.match(PLSQLParser.PLUS_SIGN);
        this.state = 5250;
        this.match(PLSQLParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Regular_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLSQLParser.RULE_regular_id;
    return this;
}

Regular_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Regular_idContext.prototype.constructor = Regular_idContext;

Regular_idContext.prototype.REGULAR_ID = function() {
    return this.getToken(PLSQLParser.REGULAR_ID, 0);
};

Regular_idContext.prototype.A_LETTER = function() {
    return this.getToken(PLSQLParser.A_LETTER, 0);
};

Regular_idContext.prototype.ADD = function() {
    return this.getToken(PLSQLParser.ADD, 0);
};

Regular_idContext.prototype.AFTER = function() {
    return this.getToken(PLSQLParser.AFTER, 0);
};

Regular_idContext.prototype.AGENT = function() {
    return this.getToken(PLSQLParser.AGENT, 0);
};

Regular_idContext.prototype.AGGREGATE = function() {
    return this.getToken(PLSQLParser.AGGREGATE, 0);
};

Regular_idContext.prototype.ANALYZE = function() {
    return this.getToken(PLSQLParser.ANALYZE, 0);
};

Regular_idContext.prototype.ARRAY = function() {
    return this.getToken(PLSQLParser.ARRAY, 0);
};

Regular_idContext.prototype.ASSOCIATE = function() {
    return this.getToken(PLSQLParser.ASSOCIATE, 0);
};

Regular_idContext.prototype.AT = function() {
    return this.getToken(PLSQLParser.AT, 0);
};

Regular_idContext.prototype.ATTRIBUTE = function() {
    return this.getToken(PLSQLParser.ATTRIBUTE, 0);
};

Regular_idContext.prototype.AUDIT = function() {
    return this.getToken(PLSQLParser.AUDIT, 0);
};

Regular_idContext.prototype.AUTHID = function() {
    return this.getToken(PLSQLParser.AUTHID, 0);
};

Regular_idContext.prototype.AUTO = function() {
    return this.getToken(PLSQLParser.AUTO, 0);
};

Regular_idContext.prototype.AUTOMATIC = function() {
    return this.getToken(PLSQLParser.AUTOMATIC, 0);
};

Regular_idContext.prototype.AUTONOMOUS_TRANSACTION = function() {
    return this.getToken(PLSQLParser.AUTONOMOUS_TRANSACTION, 0);
};

Regular_idContext.prototype.BATCH = function() {
    return this.getToken(PLSQLParser.BATCH, 0);
};

Regular_idContext.prototype.BEFORE = function() {
    return this.getToken(PLSQLParser.BEFORE, 0);
};

Regular_idContext.prototype.BFILE = function() {
    return this.getToken(PLSQLParser.BFILE, 0);
};

Regular_idContext.prototype.BINARY_DOUBLE = function() {
    return this.getToken(PLSQLParser.BINARY_DOUBLE, 0);
};

Regular_idContext.prototype.BINARY_FLOAT = function() {
    return this.getToken(PLSQLParser.BINARY_FLOAT, 0);
};

Regular_idContext.prototype.BINARY_INTEGER = function() {
    return this.getToken(PLSQLParser.BINARY_INTEGER, 0);
};

Regular_idContext.prototype.BLOB = function() {
    return this.getToken(PLSQLParser.BLOB, 0);
};

Regular_idContext.prototype.BLOCK = function() {
    return this.getToken(PLSQLParser.BLOCK, 0);
};

Regular_idContext.prototype.BODY = function() {
    return this.getToken(PLSQLParser.BODY, 0);
};

Regular_idContext.prototype.BOOLEAN = function() {
    return this.getToken(PLSQLParser.BOOLEAN, 0);
};

Regular_idContext.prototype.BOTH = function() {
    return this.getToken(PLSQLParser.BOTH, 0);
};

Regular_idContext.prototype.BULK = function() {
    return this.getToken(PLSQLParser.BULK, 0);
};

Regular_idContext.prototype.BYTE = function() {
    return this.getToken(PLSQLParser.BYTE, 0);
};

Regular_idContext.prototype.C_LETTER = function() {
    return this.getToken(PLSQLParser.C_LETTER, 0);
};

Regular_idContext.prototype.CALL = function() {
    return this.getToken(PLSQLParser.CALL, 0);
};

Regular_idContext.prototype.CANONICAL = function() {
    return this.getToken(PLSQLParser.CANONICAL, 0);
};

Regular_idContext.prototype.CASCADE = function() {
    return this.getToken(PLSQLParser.CASCADE, 0);
};

Regular_idContext.prototype.CAST = function() {
    return this.getToken(PLSQLParser.CAST, 0);
};

Regular_idContext.prototype.CHAR = function() {
    return this.getToken(PLSQLParser.CHAR, 0);
};

Regular_idContext.prototype.CHAR_CS = function() {
    return this.getToken(PLSQLParser.CHAR_CS, 0);
};

Regular_idContext.prototype.CHARACTER = function() {
    return this.getToken(PLSQLParser.CHARACTER, 0);
};

Regular_idContext.prototype.CHR = function() {
    return this.getToken(PLSQLParser.CHR, 0);
};

Regular_idContext.prototype.CLOB = function() {
    return this.getToken(PLSQLParser.CLOB, 0);
};

Regular_idContext.prototype.CLOSE = function() {
    return this.getToken(PLSQLParser.CLOSE, 0);
};

Regular_idContext.prototype.CLUSTER = function() {
    return this.getToken(PLSQLParser.CLUSTER, 0);
};

Regular_idContext.prototype.COLLECT = function() {
    return this.getToken(PLSQLParser.COLLECT, 0);
};

Regular_idContext.prototype.COLUMNS = function() {
    return this.getToken(PLSQLParser.COLUMNS, 0);
};

Regular_idContext.prototype.COMMENT = function() {
    return this.getToken(PLSQLParser.COMMENT, 0);
};

Regular_idContext.prototype.COMMIT = function() {
    return this.getToken(PLSQLParser.COMMIT, 0);
};

Regular_idContext.prototype.COMMITTED = function() {
    return this.getToken(PLSQLParser.COMMITTED, 0);
};

Regular_idContext.prototype.COMPATIBILITY = function() {
    return this.getToken(PLSQLParser.COMPATIBILITY, 0);
};

Regular_idContext.prototype.COMPILE = function() {
    return this.getToken(PLSQLParser.COMPILE, 0);
};

Regular_idContext.prototype.COMPOUND = function() {
    return this.getToken(PLSQLParser.COMPOUND, 0);
};

Regular_idContext.prototype.CONSTANT = function() {
    return this.getToken(PLSQLParser.CONSTANT, 0);
};

Regular_idContext.prototype.CONSTRAINT = function() {
    return this.getToken(PLSQLParser.CONSTRAINT, 0);
};

Regular_idContext.prototype.CONSTRAINTS = function() {
    return this.getToken(PLSQLParser.CONSTRAINTS, 0);
};

Regular_idContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(PLSQLParser.CONSTRUCTOR, 0);
};

Regular_idContext.prototype.CONTENT = function() {
    return this.getToken(PLSQLParser.CONTENT, 0);
};

Regular_idContext.prototype.CONTEXT = function() {
    return this.getToken(PLSQLParser.CONTEXT, 0);
};

Regular_idContext.prototype.CONTINUE = function() {
    return this.getToken(PLSQLParser.CONTINUE, 0);
};

Regular_idContext.prototype.CONVERT = function() {
    return this.getToken(PLSQLParser.CONVERT, 0);
};

Regular_idContext.prototype.CORRUPT_XID = function() {
    return this.getToken(PLSQLParser.CORRUPT_XID, 0);
};

Regular_idContext.prototype.CORRUPT_XID_ALL = function() {
    return this.getToken(PLSQLParser.CORRUPT_XID_ALL, 0);
};

Regular_idContext.prototype.COST = function() {
    return this.getToken(PLSQLParser.COST, 0);
};

Regular_idContext.prototype.COUNT = function() {
    return this.getToken(PLSQLParser.COUNT, 0);
};

Regular_idContext.prototype.CROSS = function() {
    return this.getToken(PLSQLParser.CROSS, 0);
};

Regular_idContext.prototype.CUBE = function() {
    return this.getToken(PLSQLParser.CUBE, 0);
};

Regular_idContext.prototype.CURRENT_USER = function() {
    return this.getToken(PLSQLParser.CURRENT_USER, 0);
};

Regular_idContext.prototype.CURSOR = function() {
    return this.getToken(PLSQLParser.CURSOR, 0);
};

Regular_idContext.prototype.CUSTOMDATUM = function() {
    return this.getToken(PLSQLParser.CUSTOMDATUM, 0);
};

Regular_idContext.prototype.CYCLE = function() {
    return this.getToken(PLSQLParser.CYCLE, 0);
};

Regular_idContext.prototype.DATA = function() {
    return this.getToken(PLSQLParser.DATA, 0);
};

Regular_idContext.prototype.DATABASE = function() {
    return this.getToken(PLSQLParser.DATABASE, 0);
};

Regular_idContext.prototype.DAY = function() {
    return this.getToken(PLSQLParser.DAY, 0);
};

Regular_idContext.prototype.DB_ROLE_CHANGE = function() {
    return this.getToken(PLSQLParser.DB_ROLE_CHANGE, 0);
};

Regular_idContext.prototype.DBTIMEZONE = function() {
    return this.getToken(PLSQLParser.DBTIMEZONE, 0);
};

Regular_idContext.prototype.DDL = function() {
    return this.getToken(PLSQLParser.DDL, 0);
};

Regular_idContext.prototype.DEBUG = function() {
    return this.getToken(PLSQLParser.DEBUG, 0);
};

Regular_idContext.prototype.DEC = function() {
    return this.getToken(PLSQLParser.DEC, 0);
};

Regular_idContext.prototype.DECIMAL = function() {
    return this.getToken(PLSQLParser.DECIMAL, 0);
};

Regular_idContext.prototype.DECOMPOSE = function() {
    return this.getToken(PLSQLParser.DECOMPOSE, 0);
};

Regular_idContext.prototype.DECREMENT = function() {
    return this.getToken(PLSQLParser.DECREMENT, 0);
};

Regular_idContext.prototype.DEFAULTS = function() {
    return this.getToken(PLSQLParser.DEFAULTS, 0);
};

Regular_idContext.prototype.DEFERRED = function() {
    return this.getToken(PLSQLParser.DEFERRED, 0);
};

Regular_idContext.prototype.DEFINER = function() {
    return this.getToken(PLSQLParser.DEFINER, 0);
};

Regular_idContext.prototype.DETERMINISTIC = function() {
    return this.getToken(PLSQLParser.DETERMINISTIC, 0);
};

Regular_idContext.prototype.DIMENSION = function() {
    return this.getToken(PLSQLParser.DIMENSION, 0);
};

Regular_idContext.prototype.DISABLE = function() {
    return this.getToken(PLSQLParser.DISABLE, 0);
};

Regular_idContext.prototype.DISASSOCIATE = function() {
    return this.getToken(PLSQLParser.DISASSOCIATE, 0);
};

Regular_idContext.prototype.DOCUMENT = function() {
    return this.getToken(PLSQLParser.DOCUMENT, 0);
};

Regular_idContext.prototype.DOUBLE = function() {
    return this.getToken(PLSQLParser.DOUBLE, 0);
};

Regular_idContext.prototype.DSINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.DSINTERVAL_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.EACH = function() {
    return this.getToken(PLSQLParser.EACH, 0);
};

Regular_idContext.prototype.ELEMENT = function() {
    return this.getToken(PLSQLParser.ELEMENT, 0);
};

Regular_idContext.prototype.EMPTY = function() {
    return this.getToken(PLSQLParser.EMPTY, 0);
};

Regular_idContext.prototype.ENABLE = function() {
    return this.getToken(PLSQLParser.ENABLE, 0);
};

Regular_idContext.prototype.ENCODING = function() {
    return this.getToken(PLSQLParser.ENCODING, 0);
};

Regular_idContext.prototype.ENTITYESCAPING = function() {
    return this.getToken(PLSQLParser.ENTITYESCAPING, 0);
};

Regular_idContext.prototype.ERRORS = function() {
    return this.getToken(PLSQLParser.ERRORS, 0);
};

Regular_idContext.prototype.ESCAPE = function() {
    return this.getToken(PLSQLParser.ESCAPE, 0);
};

Regular_idContext.prototype.EVALNAME = function() {
    return this.getToken(PLSQLParser.EVALNAME, 0);
};

Regular_idContext.prototype.EXCEPTION = function() {
    return this.getToken(PLSQLParser.EXCEPTION, 0);
};

Regular_idContext.prototype.EXCEPTION_INIT = function() {
    return this.getToken(PLSQLParser.EXCEPTION_INIT, 0);
};

Regular_idContext.prototype.EXCEPTIONS = function() {
    return this.getToken(PLSQLParser.EXCEPTIONS, 0);
};

Regular_idContext.prototype.EXCLUDE = function() {
    return this.getToken(PLSQLParser.EXCLUDE, 0);
};

Regular_idContext.prototype.EXECUTE = function() {
    return this.getToken(PLSQLParser.EXECUTE, 0);
};

Regular_idContext.prototype.EXIT = function() {
    return this.getToken(PLSQLParser.EXIT, 0);
};

Regular_idContext.prototype.EXPLAIN = function() {
    return this.getToken(PLSQLParser.EXPLAIN, 0);
};

Regular_idContext.prototype.EXTERNAL = function() {
    return this.getToken(PLSQLParser.EXTERNAL, 0);
};

Regular_idContext.prototype.EXTRACT = function() {
    return this.getToken(PLSQLParser.EXTRACT, 0);
};

Regular_idContext.prototype.FAILURE = function() {
    return this.getToken(PLSQLParser.FAILURE, 0);
};

Regular_idContext.prototype.FINAL = function() {
    return this.getToken(PLSQLParser.FINAL, 0);
};

Regular_idContext.prototype.FIRST = function() {
    return this.getToken(PLSQLParser.FIRST, 0);
};

Regular_idContext.prototype.FIRST_VALUE = function() {
    return this.getToken(PLSQLParser.FIRST_VALUE, 0);
};

Regular_idContext.prototype.FLOAT = function() {
    return this.getToken(PLSQLParser.FLOAT, 0);
};

Regular_idContext.prototype.FOLLOWING = function() {
    return this.getToken(PLSQLParser.FOLLOWING, 0);
};

Regular_idContext.prototype.FOLLOWS = function() {
    return this.getToken(PLSQLParser.FOLLOWS, 0);
};

Regular_idContext.prototype.FORALL = function() {
    return this.getToken(PLSQLParser.FORALL, 0);
};

Regular_idContext.prototype.FORCE = function() {
    return this.getToken(PLSQLParser.FORCE, 0);
};

Regular_idContext.prototype.FULL = function() {
    return this.getToken(PLSQLParser.FULL, 0);
};

Regular_idContext.prototype.FUNCTION = function() {
    return this.getToken(PLSQLParser.FUNCTION, 0);
};

Regular_idContext.prototype.GROUPING = function() {
    return this.getToken(PLSQLParser.GROUPING, 0);
};

Regular_idContext.prototype.HASH = function() {
    return this.getToken(PLSQLParser.HASH, 0);
};

Regular_idContext.prototype.HIDE = function() {
    return this.getToken(PLSQLParser.HIDE, 0);
};

Regular_idContext.prototype.HOUR = function() {
    return this.getToken(PLSQLParser.HOUR, 0);
};

Regular_idContext.prototype.IGNORE = function() {
    return this.getToken(PLSQLParser.IGNORE, 0);
};

Regular_idContext.prototype.IMMEDIATE = function() {
    return this.getToken(PLSQLParser.IMMEDIATE, 0);
};

Regular_idContext.prototype.INCLUDE = function() {
    return this.getToken(PLSQLParser.INCLUDE, 0);
};

Regular_idContext.prototype.INCLUDING = function() {
    return this.getToken(PLSQLParser.INCLUDING, 0);
};

Regular_idContext.prototype.INCREMENT = function() {
    return this.getToken(PLSQLParser.INCREMENT, 0);
};

Regular_idContext.prototype.INDENT = function() {
    return this.getToken(PLSQLParser.INDENT, 0);
};

Regular_idContext.prototype.INDEXED = function() {
    return this.getToken(PLSQLParser.INDEXED, 0);
};

Regular_idContext.prototype.INDICATOR = function() {
    return this.getToken(PLSQLParser.INDICATOR, 0);
};

Regular_idContext.prototype.INDICES = function() {
    return this.getToken(PLSQLParser.INDICES, 0);
};

Regular_idContext.prototype.INFINITE = function() {
    return this.getToken(PLSQLParser.INFINITE, 0);
};

Regular_idContext.prototype.INLINE = function() {
    return this.getToken(PLSQLParser.INLINE, 0);
};

Regular_idContext.prototype.INNER = function() {
    return this.getToken(PLSQLParser.INNER, 0);
};

Regular_idContext.prototype.INOUT = function() {
    return this.getToken(PLSQLParser.INOUT, 0);
};

Regular_idContext.prototype.INSTANTIABLE = function() {
    return this.getToken(PLSQLParser.INSTANTIABLE, 0);
};

Regular_idContext.prototype.INSTEAD = function() {
    return this.getToken(PLSQLParser.INSTEAD, 0);
};

Regular_idContext.prototype.INT = function() {
    return this.getToken(PLSQLParser.INT, 0);
};

Regular_idContext.prototype.INTEGER = function() {
    return this.getToken(PLSQLParser.INTEGER, 0);
};

Regular_idContext.prototype.INTERVAL = function() {
    return this.getToken(PLSQLParser.INTERVAL, 0);
};

Regular_idContext.prototype.INVALIDATE = function() {
    return this.getToken(PLSQLParser.INVALIDATE, 0);
};

Regular_idContext.prototype.ISOLATION = function() {
    return this.getToken(PLSQLParser.ISOLATION, 0);
};

Regular_idContext.prototype.ITERATE = function() {
    return this.getToken(PLSQLParser.ITERATE, 0);
};

Regular_idContext.prototype.JAVA = function() {
    return this.getToken(PLSQLParser.JAVA, 0);
};

Regular_idContext.prototype.JOIN = function() {
    return this.getToken(PLSQLParser.JOIN, 0);
};

Regular_idContext.prototype.KEEP = function() {
    return this.getToken(PLSQLParser.KEEP, 0);
};

Regular_idContext.prototype.LANGUAGE = function() {
    return this.getToken(PLSQLParser.LANGUAGE, 0);
};

Regular_idContext.prototype.LAST = function() {
    return this.getToken(PLSQLParser.LAST, 0);
};

Regular_idContext.prototype.LAST_VALUE = function() {
    return this.getToken(PLSQLParser.LAST_VALUE, 0);
};

Regular_idContext.prototype.LEADING = function() {
    return this.getToken(PLSQLParser.LEADING, 0);
};

Regular_idContext.prototype.LEFT = function() {
    return this.getToken(PLSQLParser.LEFT, 0);
};

Regular_idContext.prototype.LEVEL = function() {
    return this.getToken(PLSQLParser.LEVEL, 0);
};

Regular_idContext.prototype.LIBRARY = function() {
    return this.getToken(PLSQLParser.LIBRARY, 0);
};

Regular_idContext.prototype.LIKE2 = function() {
    return this.getToken(PLSQLParser.LIKE2, 0);
};

Regular_idContext.prototype.LIKE4 = function() {
    return this.getToken(PLSQLParser.LIKE4, 0);
};

Regular_idContext.prototype.LIKEC = function() {
    return this.getToken(PLSQLParser.LIKEC, 0);
};

Regular_idContext.prototype.LIMIT = function() {
    return this.getToken(PLSQLParser.LIMIT, 0);
};

Regular_idContext.prototype.LOCAL = function() {
    return this.getToken(PLSQLParser.LOCAL, 0);
};

Regular_idContext.prototype.LOCKED = function() {
    return this.getToken(PLSQLParser.LOCKED, 0);
};

Regular_idContext.prototype.LOG = function() {
    return this.getToken(PLSQLParser.LOG, 0);
};

Regular_idContext.prototype.LOGOFF = function() {
    return this.getToken(PLSQLParser.LOGOFF, 0);
};

Regular_idContext.prototype.LOGON = function() {
    return this.getToken(PLSQLParser.LOGON, 0);
};

Regular_idContext.prototype.LONG = function() {
    return this.getToken(PLSQLParser.LONG, 0);
};

Regular_idContext.prototype.LOOP = function() {
    return this.getToken(PLSQLParser.LOOP, 0);
};

Regular_idContext.prototype.MAIN = function() {
    return this.getToken(PLSQLParser.MAIN, 0);
};

Regular_idContext.prototype.MAP = function() {
    return this.getToken(PLSQLParser.MAP, 0);
};

Regular_idContext.prototype.MATCHED = function() {
    return this.getToken(PLSQLParser.MATCHED, 0);
};

Regular_idContext.prototype.MAXVALUE = function() {
    return this.getToken(PLSQLParser.MAXVALUE, 0);
};

Regular_idContext.prototype.MEASURES = function() {
    return this.getToken(PLSQLParser.MEASURES, 0);
};

Regular_idContext.prototype.MEMBER = function() {
    return this.getToken(PLSQLParser.MEMBER, 0);
};

Regular_idContext.prototype.MERGE = function() {
    return this.getToken(PLSQLParser.MERGE, 0);
};

Regular_idContext.prototype.MINUTE = function() {
    return this.getToken(PLSQLParser.MINUTE, 0);
};

Regular_idContext.prototype.MINVALUE = function() {
    return this.getToken(PLSQLParser.MINVALUE, 0);
};

Regular_idContext.prototype.MLSLABEL = function() {
    return this.getToken(PLSQLParser.MLSLABEL, 0);
};

Regular_idContext.prototype.MODEL = function() {
    return this.getToken(PLSQLParser.MODEL, 0);
};

Regular_idContext.prototype.MODIFY = function() {
    return this.getToken(PLSQLParser.MODIFY, 0);
};

Regular_idContext.prototype.MONTH = function() {
    return this.getToken(PLSQLParser.MONTH, 0);
};

Regular_idContext.prototype.MULTISET = function() {
    return this.getToken(PLSQLParser.MULTISET, 0);
};

Regular_idContext.prototype.NAME = function() {
    return this.getToken(PLSQLParser.NAME, 0);
};

Regular_idContext.prototype.NAN = function() {
    return this.getToken(PLSQLParser.NAN, 0);
};

Regular_idContext.prototype.NATURAL = function() {
    return this.getToken(PLSQLParser.NATURAL, 0);
};

Regular_idContext.prototype.NATURALN = function() {
    return this.getToken(PLSQLParser.NATURALN, 0);
};

Regular_idContext.prototype.NAV = function() {
    return this.getToken(PLSQLParser.NAV, 0);
};

Regular_idContext.prototype.NCHAR = function() {
    return this.getToken(PLSQLParser.NCHAR, 0);
};

Regular_idContext.prototype.NCHAR_CS = function() {
    return this.getToken(PLSQLParser.NCHAR_CS, 0);
};

Regular_idContext.prototype.NCLOB = function() {
    return this.getToken(PLSQLParser.NCLOB, 0);
};

Regular_idContext.prototype.NESTED = function() {
    return this.getToken(PLSQLParser.NESTED, 0);
};

Regular_idContext.prototype.NEW = function() {
    return this.getToken(PLSQLParser.NEW, 0);
};

Regular_idContext.prototype.NO = function() {
    return this.getToken(PLSQLParser.NO, 0);
};

Regular_idContext.prototype.NOAUDIT = function() {
    return this.getToken(PLSQLParser.NOAUDIT, 0);
};

Regular_idContext.prototype.NOCOPY = function() {
    return this.getToken(PLSQLParser.NOCOPY, 0);
};

Regular_idContext.prototype.NOCYCLE = function() {
    return this.getToken(PLSQLParser.NOCYCLE, 0);
};

Regular_idContext.prototype.NOENTITYESCAPING = function() {
    return this.getToken(PLSQLParser.NOENTITYESCAPING, 0);
};

Regular_idContext.prototype.NONE = function() {
    return this.getToken(PLSQLParser.NONE, 0);
};

Regular_idContext.prototype.NOSCHEMACHECK = function() {
    return this.getToken(PLSQLParser.NOSCHEMACHECK, 0);
};

Regular_idContext.prototype.NULLS = function() {
    return this.getToken(PLSQLParser.NULLS, 0);
};

Regular_idContext.prototype.NUMBER = function() {
    return this.getToken(PLSQLParser.NUMBER, 0);
};

Regular_idContext.prototype.NUMERIC = function() {
    return this.getToken(PLSQLParser.NUMERIC, 0);
};

Regular_idContext.prototype.NVARCHAR2 = function() {
    return this.getToken(PLSQLParser.NVARCHAR2, 0);
};

Regular_idContext.prototype.OBJECT = function() {
    return this.getToken(PLSQLParser.OBJECT, 0);
};

Regular_idContext.prototype.OFF = function() {
    return this.getToken(PLSQLParser.OFF, 0);
};

Regular_idContext.prototype.OID = function() {
    return this.getToken(PLSQLParser.OID, 0);
};

Regular_idContext.prototype.OLD = function() {
    return this.getToken(PLSQLParser.OLD, 0);
};

Regular_idContext.prototype.ONLY = function() {
    return this.getToken(PLSQLParser.ONLY, 0);
};

Regular_idContext.prototype.OPEN = function() {
    return this.getToken(PLSQLParser.OPEN, 0);
};

Regular_idContext.prototype.ORADATA = function() {
    return this.getToken(PLSQLParser.ORADATA, 0);
};

Regular_idContext.prototype.ORDINALITY = function() {
    return this.getToken(PLSQLParser.ORDINALITY, 0);
};

Regular_idContext.prototype.OSERROR = function() {
    return this.getToken(PLSQLParser.OSERROR, 0);
};

Regular_idContext.prototype.OUT = function() {
    return this.getToken(PLSQLParser.OUT, 0);
};

Regular_idContext.prototype.OUTER = function() {
    return this.getToken(PLSQLParser.OUTER, 0);
};

Regular_idContext.prototype.OVER = function() {
    return this.getToken(PLSQLParser.OVER, 0);
};

Regular_idContext.prototype.OVERRIDING = function() {
    return this.getToken(PLSQLParser.OVERRIDING, 0);
};

Regular_idContext.prototype.PACKAGE = function() {
    return this.getToken(PLSQLParser.PACKAGE, 0);
};

Regular_idContext.prototype.PARALLEL_ENABLE = function() {
    return this.getToken(PLSQLParser.PARALLEL_ENABLE, 0);
};

Regular_idContext.prototype.PARAMETERS = function() {
    return this.getToken(PLSQLParser.PARAMETERS, 0);
};

Regular_idContext.prototype.PARENT = function() {
    return this.getToken(PLSQLParser.PARENT, 0);
};

Regular_idContext.prototype.PARTITION = function() {
    return this.getToken(PLSQLParser.PARTITION, 0);
};

Regular_idContext.prototype.PASSING = function() {
    return this.getToken(PLSQLParser.PASSING, 0);
};

Regular_idContext.prototype.PATH = function() {
    return this.getToken(PLSQLParser.PATH, 0);
};

Regular_idContext.prototype.PIPELINED = function() {
    return this.getToken(PLSQLParser.PIPELINED, 0);
};

Regular_idContext.prototype.PLAN = function() {
    return this.getToken(PLSQLParser.PLAN, 0);
};

Regular_idContext.prototype.PLS_INTEGER = function() {
    return this.getToken(PLSQLParser.PLS_INTEGER, 0);
};

Regular_idContext.prototype.POSITIVE = function() {
    return this.getToken(PLSQLParser.POSITIVE, 0);
};

Regular_idContext.prototype.POSITIVEN = function() {
    return this.getToken(PLSQLParser.POSITIVEN, 0);
};

Regular_idContext.prototype.PRAGMA = function() {
    return this.getToken(PLSQLParser.PRAGMA, 0);
};

Regular_idContext.prototype.PRECEDING = function() {
    return this.getToken(PLSQLParser.PRECEDING, 0);
};

Regular_idContext.prototype.PRECISION = function() {
    return this.getToken(PLSQLParser.PRECISION, 0);
};

Regular_idContext.prototype.PRESENT = function() {
    return this.getToken(PLSQLParser.PRESENT, 0);
};

Regular_idContext.prototype.RAISE = function() {
    return this.getToken(PLSQLParser.RAISE, 0);
};

Regular_idContext.prototype.RANGE = function() {
    return this.getToken(PLSQLParser.RANGE, 0);
};

Regular_idContext.prototype.RAW = function() {
    return this.getToken(PLSQLParser.RAW, 0);
};

Regular_idContext.prototype.READ = function() {
    return this.getToken(PLSQLParser.READ, 0);
};

Regular_idContext.prototype.REAL = function() {
    return this.getToken(PLSQLParser.REAL, 0);
};

Regular_idContext.prototype.RECORD = function() {
    return this.getToken(PLSQLParser.RECORD, 0);
};

Regular_idContext.prototype.REF = function() {
    return this.getToken(PLSQLParser.REF, 0);
};

Regular_idContext.prototype.REFERENCE = function() {
    return this.getToken(PLSQLParser.REFERENCE, 0);
};

Regular_idContext.prototype.REFERENCING = function() {
    return this.getToken(PLSQLParser.REFERENCING, 0);
};

Regular_idContext.prototype.REJECT = function() {
    return this.getToken(PLSQLParser.REJECT, 0);
};

Regular_idContext.prototype.RELIES_ON = function() {
    return this.getToken(PLSQLParser.RELIES_ON, 0);
};

Regular_idContext.prototype.RENAME = function() {
    return this.getToken(PLSQLParser.RENAME, 0);
};

Regular_idContext.prototype.REPLACE = function() {
    return this.getToken(PLSQLParser.REPLACE, 0);
};

Regular_idContext.prototype.RESPECT = function() {
    return this.getToken(PLSQLParser.RESPECT, 0);
};

Regular_idContext.prototype.RESTRICT_REFERENCES = function() {
    return this.getToken(PLSQLParser.RESTRICT_REFERENCES, 0);
};

Regular_idContext.prototype.RESULT = function() {
    return this.getToken(PLSQLParser.RESULT, 0);
};

Regular_idContext.prototype.RESULT_CACHE = function() {
    return this.getToken(PLSQLParser.RESULT_CACHE, 0);
};

Regular_idContext.prototype.RETURN = function() {
    return this.getToken(PLSQLParser.RETURN, 0);
};

Regular_idContext.prototype.RETURNING = function() {
    return this.getToken(PLSQLParser.RETURNING, 0);
};

Regular_idContext.prototype.REUSE = function() {
    return this.getToken(PLSQLParser.REUSE, 0);
};

Regular_idContext.prototype.REVERSE = function() {
    return this.getToken(PLSQLParser.REVERSE, 0);
};

Regular_idContext.prototype.RIGHT = function() {
    return this.getToken(PLSQLParser.RIGHT, 0);
};

Regular_idContext.prototype.ROLLBACK = function() {
    return this.getToken(PLSQLParser.ROLLBACK, 0);
};

Regular_idContext.prototype.ROLLUP = function() {
    return this.getToken(PLSQLParser.ROLLUP, 0);
};

Regular_idContext.prototype.ROW = function() {
    return this.getToken(PLSQLParser.ROW, 0);
};

Regular_idContext.prototype.ROWID = function() {
    return this.getToken(PLSQLParser.ROWID, 0);
};

Regular_idContext.prototype.ROWS = function() {
    return this.getToken(PLSQLParser.ROWS, 0);
};

Regular_idContext.prototype.RULES = function() {
    return this.getToken(PLSQLParser.RULES, 0);
};

Regular_idContext.prototype.SAMPLE = function() {
    return this.getToken(PLSQLParser.SAMPLE, 0);
};

Regular_idContext.prototype.SAVE = function() {
    return this.getToken(PLSQLParser.SAVE, 0);
};

Regular_idContext.prototype.SAVEPOINT = function() {
    return this.getToken(PLSQLParser.SAVEPOINT, 0);
};

Regular_idContext.prototype.SCHEMA = function() {
    return this.getToken(PLSQLParser.SCHEMA, 0);
};

Regular_idContext.prototype.SCHEMACHECK = function() {
    return this.getToken(PLSQLParser.SCHEMACHECK, 0);
};

Regular_idContext.prototype.SCN = function() {
    return this.getToken(PLSQLParser.SCN, 0);
};

Regular_idContext.prototype.SECOND = function() {
    return this.getToken(PLSQLParser.SECOND, 0);
};

Regular_idContext.prototype.SEED = function() {
    return this.getToken(PLSQLParser.SEED, 0);
};

Regular_idContext.prototype.SEGMENT = function() {
    return this.getToken(PLSQLParser.SEGMENT, 0);
};

Regular_idContext.prototype.SELF = function() {
    return this.getToken(PLSQLParser.SELF, 0);
};

Regular_idContext.prototype.SEQUENTIAL = function() {
    return this.getToken(PLSQLParser.SEQUENTIAL, 0);
};

Regular_idContext.prototype.SERIALIZABLE = function() {
    return this.getToken(PLSQLParser.SERIALIZABLE, 0);
};

Regular_idContext.prototype.SERIALLY_REUSABLE = function() {
    return this.getToken(PLSQLParser.SERIALLY_REUSABLE, 0);
};

Regular_idContext.prototype.SERVERERROR = function() {
    return this.getToken(PLSQLParser.SERVERERROR, 0);
};

Regular_idContext.prototype.SESSIONTIMEZONE = function() {
    return this.getToken(PLSQLParser.SESSIONTIMEZONE, 0);
};

Regular_idContext.prototype.SET = function() {
    return this.getToken(PLSQLParser.SET, 0);
};

Regular_idContext.prototype.SETS = function() {
    return this.getToken(PLSQLParser.SETS, 0);
};

Regular_idContext.prototype.SETTINGS = function() {
    return this.getToken(PLSQLParser.SETTINGS, 0);
};

Regular_idContext.prototype.SHOW = function() {
    return this.getToken(PLSQLParser.SHOW, 0);
};

Regular_idContext.prototype.SHUTDOWN = function() {
    return this.getToken(PLSQLParser.SHUTDOWN, 0);
};

Regular_idContext.prototype.SIBLINGS = function() {
    return this.getToken(PLSQLParser.SIBLINGS, 0);
};

Regular_idContext.prototype.SIGNTYPE = function() {
    return this.getToken(PLSQLParser.SIGNTYPE, 0);
};

Regular_idContext.prototype.SIMPLE_INTEGER = function() {
    return this.getToken(PLSQLParser.SIMPLE_INTEGER, 0);
};

Regular_idContext.prototype.SINGLE = function() {
    return this.getToken(PLSQLParser.SINGLE, 0);
};

Regular_idContext.prototype.SKIP = function() {
    return this.getToken(PLSQLParser.SKIP, 0);
};

Regular_idContext.prototype.SMALLINT = function() {
    return this.getToken(PLSQLParser.SMALLINT, 0);
};

Regular_idContext.prototype.SNAPSHOT = function() {
    return this.getToken(PLSQLParser.SNAPSHOT, 0);
};

Regular_idContext.prototype.SOME = function() {
    return this.getToken(PLSQLParser.SOME, 0);
};

Regular_idContext.prototype.SPECIFICATION = function() {
    return this.getToken(PLSQLParser.SPECIFICATION, 0);
};

Regular_idContext.prototype.SQLDATA = function() {
    return this.getToken(PLSQLParser.SQLDATA, 0);
};

Regular_idContext.prototype.SQLERROR = function() {
    return this.getToken(PLSQLParser.SQLERROR, 0);
};

Regular_idContext.prototype.STANDALONE = function() {
    return this.getToken(PLSQLParser.STANDALONE, 0);
};

Regular_idContext.prototype.STARTUP = function() {
    return this.getToken(PLSQLParser.STARTUP, 0);
};

Regular_idContext.prototype.STATEMENT = function() {
    return this.getToken(PLSQLParser.STATEMENT, 0);
};

Regular_idContext.prototype.STATEMENT_ID = function() {
    return this.getToken(PLSQLParser.STATEMENT_ID, 0);
};

Regular_idContext.prototype.STATIC = function() {
    return this.getToken(PLSQLParser.STATIC, 0);
};

Regular_idContext.prototype.STATISTICS = function() {
    return this.getToken(PLSQLParser.STATISTICS, 0);
};

Regular_idContext.prototype.STRING = function() {
    return this.getToken(PLSQLParser.STRING, 0);
};

Regular_idContext.prototype.SUBMULTISET = function() {
    return this.getToken(PLSQLParser.SUBMULTISET, 0);
};

Regular_idContext.prototype.SUBPARTITION = function() {
    return this.getToken(PLSQLParser.SUBPARTITION, 0);
};

Regular_idContext.prototype.SUBSTITUTABLE = function() {
    return this.getToken(PLSQLParser.SUBSTITUTABLE, 0);
};

Regular_idContext.prototype.SUBTYPE = function() {
    return this.getToken(PLSQLParser.SUBTYPE, 0);
};

Regular_idContext.prototype.SUCCESS = function() {
    return this.getToken(PLSQLParser.SUCCESS, 0);
};

Regular_idContext.prototype.SUSPEND = function() {
    return this.getToken(PLSQLParser.SUSPEND, 0);
};

Regular_idContext.prototype.TIME = function() {
    return this.getToken(PLSQLParser.TIME, 0);
};

Regular_idContext.prototype.TIMESTAMP = function() {
    return this.getToken(PLSQLParser.TIMESTAMP, 0);
};

Regular_idContext.prototype.TIMESTAMP_LTZ_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.TIMESTAMP_TZ_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.TIMESTAMP_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.TIMESTAMP_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.TIMEZONE_ABBR = function() {
    return this.getToken(PLSQLParser.TIMEZONE_ABBR, 0);
};

Regular_idContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(PLSQLParser.TIMEZONE_HOUR, 0);
};

Regular_idContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(PLSQLParser.TIMEZONE_MINUTE, 0);
};

Regular_idContext.prototype.TIMEZONE_REGION = function() {
    return this.getToken(PLSQLParser.TIMEZONE_REGION, 0);
};

Regular_idContext.prototype.TRAILING = function() {
    return this.getToken(PLSQLParser.TRAILING, 0);
};

Regular_idContext.prototype.TRANSACTION = function() {
    return this.getToken(PLSQLParser.TRANSACTION, 0);
};

Regular_idContext.prototype.TRANSLATE = function() {
    return this.getToken(PLSQLParser.TRANSLATE, 0);
};

Regular_idContext.prototype.TREAT = function() {
    return this.getToken(PLSQLParser.TREAT, 0);
};

Regular_idContext.prototype.TRIGGER = function() {
    return this.getToken(PLSQLParser.TRIGGER, 0);
};

Regular_idContext.prototype.TRIM = function() {
    return this.getToken(PLSQLParser.TRIM, 0);
};

Regular_idContext.prototype.TRUNCATE = function() {
    return this.getToken(PLSQLParser.TRUNCATE, 0);
};

Regular_idContext.prototype.TYPE = function() {
    return this.getToken(PLSQLParser.TYPE, 0);
};

Regular_idContext.prototype.UNBOUNDED = function() {
    return this.getToken(PLSQLParser.UNBOUNDED, 0);
};

Regular_idContext.prototype.UNDER = function() {
    return this.getToken(PLSQLParser.UNDER, 0);
};

Regular_idContext.prototype.UNLIMITED = function() {
    return this.getToken(PLSQLParser.UNLIMITED, 0);
};

Regular_idContext.prototype.UNTIL = function() {
    return this.getToken(PLSQLParser.UNTIL, 0);
};

Regular_idContext.prototype.UPDATED = function() {
    return this.getToken(PLSQLParser.UPDATED, 0);
};

Regular_idContext.prototype.UPSERT = function() {
    return this.getToken(PLSQLParser.UPSERT, 0);
};

Regular_idContext.prototype.UROWID = function() {
    return this.getToken(PLSQLParser.UROWID, 0);
};

Regular_idContext.prototype.USE = function() {
    return this.getToken(PLSQLParser.USE, 0);
};

Regular_idContext.prototype.VALIDATE = function() {
    return this.getToken(PLSQLParser.VALIDATE, 0);
};

Regular_idContext.prototype.VALUE = function() {
    return this.getToken(PLSQLParser.VALUE, 0);
};

Regular_idContext.prototype.VARCHAR = function() {
    return this.getToken(PLSQLParser.VARCHAR, 0);
};

Regular_idContext.prototype.VARCHAR2 = function() {
    return this.getToken(PLSQLParser.VARCHAR2, 0);
};

Regular_idContext.prototype.VARIABLE = function() {
    return this.getToken(PLSQLParser.VARIABLE, 0);
};

Regular_idContext.prototype.VARRAY = function() {
    return this.getToken(PLSQLParser.VARRAY, 0);
};

Regular_idContext.prototype.VARYING = function() {
    return this.getToken(PLSQLParser.VARYING, 0);
};

Regular_idContext.prototype.VERSION = function() {
    return this.getToken(PLSQLParser.VERSION, 0);
};

Regular_idContext.prototype.VERSIONS = function() {
    return this.getToken(PLSQLParser.VERSIONS, 0);
};

Regular_idContext.prototype.WAIT = function() {
    return this.getToken(PLSQLParser.WAIT, 0);
};

Regular_idContext.prototype.WARNING = function() {
    return this.getToken(PLSQLParser.WARNING, 0);
};

Regular_idContext.prototype.WELLFORMED = function() {
    return this.getToken(PLSQLParser.WELLFORMED, 0);
};

Regular_idContext.prototype.WHENEVER = function() {
    return this.getToken(PLSQLParser.WHENEVER, 0);
};

Regular_idContext.prototype.WHILE = function() {
    return this.getToken(PLSQLParser.WHILE, 0);
};

Regular_idContext.prototype.WITHIN = function() {
    return this.getToken(PLSQLParser.WITHIN, 0);
};

Regular_idContext.prototype.WORK = function() {
    return this.getToken(PLSQLParser.WORK, 0);
};

Regular_idContext.prototype.WRITE = function() {
    return this.getToken(PLSQLParser.WRITE, 0);
};

Regular_idContext.prototype.XML = function() {
    return this.getToken(PLSQLParser.XML, 0);
};

Regular_idContext.prototype.XMLAGG = function() {
    return this.getToken(PLSQLParser.XMLAGG, 0);
};

Regular_idContext.prototype.XMLATTRIBUTES = function() {
    return this.getToken(PLSQLParser.XMLATTRIBUTES, 0);
};

Regular_idContext.prototype.XMLCAST = function() {
    return this.getToken(PLSQLParser.XMLCAST, 0);
};

Regular_idContext.prototype.XMLCOLATTVAL = function() {
    return this.getToken(PLSQLParser.XMLCOLATTVAL, 0);
};

Regular_idContext.prototype.XMLELEMENT = function() {
    return this.getToken(PLSQLParser.XMLELEMENT, 0);
};

Regular_idContext.prototype.XMLEXISTS = function() {
    return this.getToken(PLSQLParser.XMLEXISTS, 0);
};

Regular_idContext.prototype.XMLFOREST = function() {
    return this.getToken(PLSQLParser.XMLFOREST, 0);
};

Regular_idContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(PLSQLParser.XMLNAMESPACES, 0);
};

Regular_idContext.prototype.XMLPARSE = function() {
    return this.getToken(PLSQLParser.XMLPARSE, 0);
};

Regular_idContext.prototype.XMLPI = function() {
    return this.getToken(PLSQLParser.XMLPI, 0);
};

Regular_idContext.prototype.XMLQUERY = function() {
    return this.getToken(PLSQLParser.XMLQUERY, 0);
};

Regular_idContext.prototype.XMLROOT = function() {
    return this.getToken(PLSQLParser.XMLROOT, 0);
};

Regular_idContext.prototype.XMLSERIALIZE = function() {
    return this.getToken(PLSQLParser.XMLSERIALIZE, 0);
};

Regular_idContext.prototype.XMLTABLE = function() {
    return this.getToken(PLSQLParser.XMLTABLE, 0);
};

Regular_idContext.prototype.YEAR = function() {
    return this.getToken(PLSQLParser.YEAR, 0);
};

Regular_idContext.prototype.YES = function() {
    return this.getToken(PLSQLParser.YES, 0);
};

Regular_idContext.prototype.YMINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(PLSQLParser.YMINTERVAL_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.ZONE = function() {
    return this.getToken(PLSQLParser.ZONE, 0);
};

Regular_idContext.prototype.PREDICTION = function() {
    return this.getToken(PLSQLParser.PREDICTION, 0);
};

Regular_idContext.prototype.PREDICTION_BOUNDS = function() {
    return this.getToken(PLSQLParser.PREDICTION_BOUNDS, 0);
};

Regular_idContext.prototype.PREDICTION_COST = function() {
    return this.getToken(PLSQLParser.PREDICTION_COST, 0);
};

Regular_idContext.prototype.PREDICTION_DETAILS = function() {
    return this.getToken(PLSQLParser.PREDICTION_DETAILS, 0);
};

Regular_idContext.prototype.PREDICTION_PROBABILITY = function() {
    return this.getToken(PLSQLParser.PREDICTION_PROBABILITY, 0);
};

Regular_idContext.prototype.PREDICTION_SET = function() {
    return this.getToken(PLSQLParser.PREDICTION_SET, 0);
};

Regular_idContext.prototype.CUME_DIST = function() {
    return this.getToken(PLSQLParser.CUME_DIST, 0);
};

Regular_idContext.prototype.DENSE_RANK = function() {
    return this.getToken(PLSQLParser.DENSE_RANK, 0);
};

Regular_idContext.prototype.LISTAGG = function() {
    return this.getToken(PLSQLParser.LISTAGG, 0);
};

Regular_idContext.prototype.PERCENT_RANK = function() {
    return this.getToken(PLSQLParser.PERCENT_RANK, 0);
};

Regular_idContext.prototype.PERCENTILE_CONT = function() {
    return this.getToken(PLSQLParser.PERCENTILE_CONT, 0);
};

Regular_idContext.prototype.PERCENTILE_DISC = function() {
    return this.getToken(PLSQLParser.PERCENTILE_DISC, 0);
};

Regular_idContext.prototype.RANK = function() {
    return this.getToken(PLSQLParser.RANK, 0);
};

Regular_idContext.prototype.AVG = function() {
    return this.getToken(PLSQLParser.AVG, 0);
};

Regular_idContext.prototype.CORR = function() {
    return this.getToken(PLSQLParser.CORR, 0);
};

Regular_idContext.prototype.LAG = function() {
    return this.getToken(PLSQLParser.LAG, 0);
};

Regular_idContext.prototype.LEAD = function() {
    return this.getToken(PLSQLParser.LEAD, 0);
};

Regular_idContext.prototype.MAX = function() {
    return this.getToken(PLSQLParser.MAX, 0);
};

Regular_idContext.prototype.MEDIAN = function() {
    return this.getToken(PLSQLParser.MEDIAN, 0);
};

Regular_idContext.prototype.MIN = function() {
    return this.getToken(PLSQLParser.MIN, 0);
};

Regular_idContext.prototype.NTILE = function() {
    return this.getToken(PLSQLParser.NTILE, 0);
};

Regular_idContext.prototype.RATIO_TO_REPORT = function() {
    return this.getToken(PLSQLParser.RATIO_TO_REPORT, 0);
};

Regular_idContext.prototype.ROW_NUMBER = function() {
    return this.getToken(PLSQLParser.ROW_NUMBER, 0);
};

Regular_idContext.prototype.SUM = function() {
    return this.getToken(PLSQLParser.SUM, 0);
};

Regular_idContext.prototype.VARIANCE = function() {
    return this.getToken(PLSQLParser.VARIANCE, 0);
};

Regular_idContext.prototype.REGR_ = function() {
    return this.getToken(PLSQLParser.REGR_, 0);
};

Regular_idContext.prototype.STDDEV = function() {
    return this.getToken(PLSQLParser.STDDEV, 0);
};

Regular_idContext.prototype.VAR_ = function() {
    return this.getToken(PLSQLParser.VAR_, 0);
};

Regular_idContext.prototype.COVAR_ = function() {
    return this.getToken(PLSQLParser.COVAR_, 0);
};

Regular_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.enterRegular_id(this);
	}
};

Regular_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLSQLListener ) {
        listener.exitRegular_id(this);
	}
};




PLSQLParser.Regular_idContext = Regular_idContext;

PLSQLParser.prototype.regular_id = function() {

    var localctx = new Regular_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 754, PLSQLParser.RULE_regular_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5252;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLSQLParser.A_LETTER) | (1 << PLSQLParser.ADD) | (1 << PLSQLParser.AFTER) | (1 << PLSQLParser.AGENT) | (1 << PLSQLParser.AGGREGATE) | (1 << PLSQLParser.ANALYZE) | (1 << PLSQLParser.ARRAY) | (1 << PLSQLParser.ASSOCIATE) | (1 << PLSQLParser.AT) | (1 << PLSQLParser.ATTRIBUTE) | (1 << PLSQLParser.AUDIT) | (1 << PLSQLParser.AUTHID) | (1 << PLSQLParser.AUTO) | (1 << PLSQLParser.AUTOMATIC) | (1 << PLSQLParser.AUTONOMOUS_TRANSACTION) | (1 << PLSQLParser.BATCH) | (1 << PLSQLParser.BEFORE) | (1 << PLSQLParser.BFILE) | (1 << PLSQLParser.BINARY_DOUBLE) | (1 << PLSQLParser.BINARY_FLOAT) | (1 << PLSQLParser.BINARY_INTEGER) | (1 << PLSQLParser.BLOB))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PLSQLParser.BLOCK - 32)) | (1 << (PLSQLParser.BODY - 32)) | (1 << (PLSQLParser.BOOLEAN - 32)) | (1 << (PLSQLParser.BOTH - 32)) | (1 << (PLSQLParser.BULK - 32)) | (1 << (PLSQLParser.BYTE - 32)) | (1 << (PLSQLParser.C_LETTER - 32)) | (1 << (PLSQLParser.CALL - 32)) | (1 << (PLSQLParser.CANONICAL - 32)) | (1 << (PLSQLParser.CASCADE - 32)) | (1 << (PLSQLParser.CAST - 32)) | (1 << (PLSQLParser.CHAR - 32)) | (1 << (PLSQLParser.CHAR_CS - 32)) | (1 << (PLSQLParser.CHARACTER - 32)) | (1 << (PLSQLParser.CHR - 32)) | (1 << (PLSQLParser.CLOB - 32)) | (1 << (PLSQLParser.CLOSE - 32)) | (1 << (PLSQLParser.CLUSTER - 32)) | (1 << (PLSQLParser.COLLECT - 32)) | (1 << (PLSQLParser.COLUMNS - 32)) | (1 << (PLSQLParser.COMMENT - 32)) | (1 << (PLSQLParser.COMMIT - 32)) | (1 << (PLSQLParser.COMMITTED - 32)) | (1 << (PLSQLParser.COMPATIBILITY - 32)) | (1 << (PLSQLParser.COMPILE - 32)) | (1 << (PLSQLParser.COMPOUND - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (PLSQLParser.CONSTANT - 65)) | (1 << (PLSQLParser.CONSTRAINT - 65)) | (1 << (PLSQLParser.CONSTRAINTS - 65)) | (1 << (PLSQLParser.CONSTRUCTOR - 65)) | (1 << (PLSQLParser.CONTENT - 65)) | (1 << (PLSQLParser.CONTEXT - 65)) | (1 << (PLSQLParser.CONTINUE - 65)) | (1 << (PLSQLParser.CONVERT - 65)) | (1 << (PLSQLParser.CORRUPT_XID - 65)) | (1 << (PLSQLParser.CORRUPT_XID_ALL - 65)) | (1 << (PLSQLParser.COST - 65)) | (1 << (PLSQLParser.COUNT - 65)) | (1 << (PLSQLParser.CROSS - 65)) | (1 << (PLSQLParser.CUBE - 65)) | (1 << (PLSQLParser.CURRENT_USER - 65)) | (1 << (PLSQLParser.CURSOR - 65)) | (1 << (PLSQLParser.CUSTOMDATUM - 65)) | (1 << (PLSQLParser.CYCLE - 65)) | (1 << (PLSQLParser.DATA - 65)) | (1 << (PLSQLParser.DATABASE - 65)) | (1 << (PLSQLParser.DAY - 65)) | (1 << (PLSQLParser.DB_ROLE_CHANGE - 65)) | (1 << (PLSQLParser.DBTIMEZONE - 65)) | (1 << (PLSQLParser.DDL - 65)) | (1 << (PLSQLParser.DEBUG - 65)) | (1 << (PLSQLParser.DEC - 65)) | (1 << (PLSQLParser.DECIMAL - 65)) | (1 << (PLSQLParser.DECOMPOSE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (PLSQLParser.DECREMENT - 97)) | (1 << (PLSQLParser.DEFAULTS - 97)) | (1 << (PLSQLParser.DEFERRED - 97)) | (1 << (PLSQLParser.DEFINER - 97)) | (1 << (PLSQLParser.DETERMINISTIC - 97)) | (1 << (PLSQLParser.DIMENSION - 97)) | (1 << (PLSQLParser.DISABLE - 97)) | (1 << (PLSQLParser.DISASSOCIATE - 97)) | (1 << (PLSQLParser.DOCUMENT - 97)) | (1 << (PLSQLParser.DOUBLE - 97)) | (1 << (PLSQLParser.DSINTERVAL_UNCONSTRAINED - 97)) | (1 << (PLSQLParser.EACH - 97)) | (1 << (PLSQLParser.ELEMENT - 97)) | (1 << (PLSQLParser.EMPTY - 97)) | (1 << (PLSQLParser.ENABLE - 97)) | (1 << (PLSQLParser.ENCODING - 97)) | (1 << (PLSQLParser.ENTITYESCAPING - 97)) | (1 << (PLSQLParser.ERRORS - 97)) | (1 << (PLSQLParser.ESCAPE - 97)) | (1 << (PLSQLParser.EVALNAME - 97)) | (1 << (PLSQLParser.EXCEPTION - 97)) | (1 << (PLSQLParser.EXCEPTION_INIT - 97)) | (1 << (PLSQLParser.EXCEPTIONS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (PLSQLParser.EXCLUDE - 129)) | (1 << (PLSQLParser.EXECUTE - 129)) | (1 << (PLSQLParser.EXIT - 129)) | (1 << (PLSQLParser.EXPLAIN - 129)) | (1 << (PLSQLParser.EXTERNAL - 129)) | (1 << (PLSQLParser.EXTRACT - 129)) | (1 << (PLSQLParser.FAILURE - 129)) | (1 << (PLSQLParser.FINAL - 129)) | (1 << (PLSQLParser.FIRST - 129)) | (1 << (PLSQLParser.FIRST_VALUE - 129)) | (1 << (PLSQLParser.FLOAT - 129)) | (1 << (PLSQLParser.FOLLOWING - 129)) | (1 << (PLSQLParser.FOLLOWS - 129)) | (1 << (PLSQLParser.FORALL - 129)) | (1 << (PLSQLParser.FORCE - 129)) | (1 << (PLSQLParser.FULL - 129)) | (1 << (PLSQLParser.FUNCTION - 129)) | (1 << (PLSQLParser.GROUPING - 129)) | (1 << (PLSQLParser.HASH - 129)) | (1 << (PLSQLParser.HIDE - 129)) | (1 << (PLSQLParser.HOUR - 129)))) !== 0) || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PLSQLParser.IGNORE - 161)) | (1 << (PLSQLParser.IMMEDIATE - 161)) | (1 << (PLSQLParser.INCLUDE - 161)) | (1 << (PLSQLParser.INCLUDING - 161)) | (1 << (PLSQLParser.INCREMENT - 161)) | (1 << (PLSQLParser.INDENT - 161)) | (1 << (PLSQLParser.INDEXED - 161)) | (1 << (PLSQLParser.INDICATOR - 161)) | (1 << (PLSQLParser.INDICES - 161)) | (1 << (PLSQLParser.INFINITE - 161)) | (1 << (PLSQLParser.INLINE - 161)) | (1 << (PLSQLParser.INNER - 161)) | (1 << (PLSQLParser.INOUT - 161)) | (1 << (PLSQLParser.INSTANTIABLE - 161)) | (1 << (PLSQLParser.INSTEAD - 161)) | (1 << (PLSQLParser.INT - 161)) | (1 << (PLSQLParser.INTEGER - 161)) | (1 << (PLSQLParser.INTERVAL - 161)) | (1 << (PLSQLParser.INVALIDATE - 161)) | (1 << (PLSQLParser.ISOLATION - 161)) | (1 << (PLSQLParser.ITERATE - 161)) | (1 << (PLSQLParser.JAVA - 161)) | (1 << (PLSQLParser.JOIN - 161)) | (1 << (PLSQLParser.KEEP - 161)) | (1 << (PLSQLParser.LANGUAGE - 161)) | (1 << (PLSQLParser.LAST - 161)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (PLSQLParser.LAST_VALUE - 193)) | (1 << (PLSQLParser.LEADING - 193)) | (1 << (PLSQLParser.LEFT - 193)) | (1 << (PLSQLParser.LEVEL - 193)) | (1 << (PLSQLParser.LIBRARY - 193)) | (1 << (PLSQLParser.LIKE2 - 193)) | (1 << (PLSQLParser.LIKE4 - 193)) | (1 << (PLSQLParser.LIKEC - 193)) | (1 << (PLSQLParser.LIMIT - 193)) | (1 << (PLSQLParser.LOCAL - 193)) | (1 << (PLSQLParser.LOCKED - 193)) | (1 << (PLSQLParser.LOG - 193)) | (1 << (PLSQLParser.LOGOFF - 193)) | (1 << (PLSQLParser.LOGON - 193)) | (1 << (PLSQLParser.LONG - 193)) | (1 << (PLSQLParser.LOOP - 193)) | (1 << (PLSQLParser.MAIN - 193)) | (1 << (PLSQLParser.MAP - 193)) | (1 << (PLSQLParser.MATCHED - 193)) | (1 << (PLSQLParser.MAXVALUE - 193)) | (1 << (PLSQLParser.MEASURES - 193)) | (1 << (PLSQLParser.MEMBER - 193)) | (1 << (PLSQLParser.MERGE - 193)) | (1 << (PLSQLParser.MINUTE - 193)) | (1 << (PLSQLParser.MINVALUE - 193)) | (1 << (PLSQLParser.MLSLABEL - 193)) | (1 << (PLSQLParser.MODEL - 193)) | (1 << (PLSQLParser.MODIFY - 193)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (PLSQLParser.MONTH - 225)) | (1 << (PLSQLParser.MULTISET - 225)) | (1 << (PLSQLParser.NAME - 225)) | (1 << (PLSQLParser.NAN - 225)) | (1 << (PLSQLParser.NATURAL - 225)) | (1 << (PLSQLParser.NATURALN - 225)) | (1 << (PLSQLParser.NAV - 225)) | (1 << (PLSQLParser.NCHAR - 225)) | (1 << (PLSQLParser.NCHAR_CS - 225)) | (1 << (PLSQLParser.NCLOB - 225)) | (1 << (PLSQLParser.NESTED - 225)) | (1 << (PLSQLParser.NEW - 225)) | (1 << (PLSQLParser.NO - 225)) | (1 << (PLSQLParser.NOAUDIT - 225)) | (1 << (PLSQLParser.NOCOPY - 225)) | (1 << (PLSQLParser.NOCYCLE - 225)) | (1 << (PLSQLParser.NOENTITYESCAPING - 225)) | (1 << (PLSQLParser.NONE - 225)) | (1 << (PLSQLParser.NOSCHEMACHECK - 225)) | (1 << (PLSQLParser.NULLS - 225)) | (1 << (PLSQLParser.NUMBER - 225)) | (1 << (PLSQLParser.NUMERIC - 225)) | (1 << (PLSQLParser.NVARCHAR2 - 225)) | (1 << (PLSQLParser.OBJECT - 225)))) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & ((1 << (PLSQLParser.OFF - 257)) | (1 << (PLSQLParser.OID - 257)) | (1 << (PLSQLParser.OLD - 257)) | (1 << (PLSQLParser.ONLY - 257)) | (1 << (PLSQLParser.OPEN - 257)) | (1 << (PLSQLParser.ORADATA - 257)) | (1 << (PLSQLParser.ORDINALITY - 257)) | (1 << (PLSQLParser.OSERROR - 257)) | (1 << (PLSQLParser.OUT - 257)) | (1 << (PLSQLParser.OUTER - 257)) | (1 << (PLSQLParser.OVER - 257)) | (1 << (PLSQLParser.OVERRIDING - 257)) | (1 << (PLSQLParser.PACKAGE - 257)) | (1 << (PLSQLParser.PARALLEL_ENABLE - 257)) | (1 << (PLSQLParser.PARAMETERS - 257)) | (1 << (PLSQLParser.PARENT - 257)) | (1 << (PLSQLParser.PARTITION - 257)) | (1 << (PLSQLParser.PASSING - 257)) | (1 << (PLSQLParser.PATH - 257)) | (1 << (PLSQLParser.PIPELINED - 257)) | (1 << (PLSQLParser.PLAN - 257)) | (1 << (PLSQLParser.PLS_INTEGER - 257)) | (1 << (PLSQLParser.POSITIVE - 257)) | (1 << (PLSQLParser.POSITIVEN - 257)) | (1 << (PLSQLParser.PRAGMA - 257)))) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (PLSQLParser.PRECEDING - 289)) | (1 << (PLSQLParser.PRECISION - 289)) | (1 << (PLSQLParser.PRESENT - 289)) | (1 << (PLSQLParser.RAISE - 289)) | (1 << (PLSQLParser.RANGE - 289)) | (1 << (PLSQLParser.RAW - 289)) | (1 << (PLSQLParser.READ - 289)) | (1 << (PLSQLParser.REAL - 289)) | (1 << (PLSQLParser.RECORD - 289)) | (1 << (PLSQLParser.REF - 289)) | (1 << (PLSQLParser.REFERENCE - 289)) | (1 << (PLSQLParser.REFERENCING - 289)) | (1 << (PLSQLParser.REJECT - 289)) | (1 << (PLSQLParser.RELIES_ON - 289)) | (1 << (PLSQLParser.RENAME - 289)) | (1 << (PLSQLParser.REPLACE - 289)) | (1 << (PLSQLParser.RESPECT - 289)) | (1 << (PLSQLParser.RESTRICT_REFERENCES - 289)) | (1 << (PLSQLParser.RESULT - 289)) | (1 << (PLSQLParser.RESULT_CACHE - 289)) | (1 << (PLSQLParser.RETURN - 289)) | (1 << (PLSQLParser.RETURNING - 289)) | (1 << (PLSQLParser.REUSE - 289)) | (1 << (PLSQLParser.REVERSE - 289)) | (1 << (PLSQLParser.RIGHT - 289)) | (1 << (PLSQLParser.ROLLBACK - 289)) | (1 << (PLSQLParser.ROLLUP - 289)) | (1 << (PLSQLParser.ROW - 289)) | (1 << (PLSQLParser.ROWID - 289)))) !== 0) || ((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (PLSQLParser.ROWS - 321)) | (1 << (PLSQLParser.RULES - 321)) | (1 << (PLSQLParser.SAMPLE - 321)) | (1 << (PLSQLParser.SAVE - 321)) | (1 << (PLSQLParser.SAVEPOINT - 321)) | (1 << (PLSQLParser.SCHEMA - 321)) | (1 << (PLSQLParser.SCHEMACHECK - 321)) | (1 << (PLSQLParser.SCN - 321)) | (1 << (PLSQLParser.SECOND - 321)) | (1 << (PLSQLParser.SEED - 321)) | (1 << (PLSQLParser.SEGMENT - 321)) | (1 << (PLSQLParser.SELF - 321)) | (1 << (PLSQLParser.SEQUENTIAL - 321)) | (1 << (PLSQLParser.SERIALIZABLE - 321)) | (1 << (PLSQLParser.SERIALLY_REUSABLE - 321)) | (1 << (PLSQLParser.SERVERERROR - 321)) | (1 << (PLSQLParser.SESSIONTIMEZONE - 321)) | (1 << (PLSQLParser.SET - 321)) | (1 << (PLSQLParser.SETS - 321)) | (1 << (PLSQLParser.SETTINGS - 321)) | (1 << (PLSQLParser.SHOW - 321)) | (1 << (PLSQLParser.SHUTDOWN - 321)) | (1 << (PLSQLParser.SIBLINGS - 321)) | (1 << (PLSQLParser.SIGNTYPE - 321)) | (1 << (PLSQLParser.SIMPLE_INTEGER - 321)) | (1 << (PLSQLParser.SINGLE - 321)) | (1 << (PLSQLParser.SKIP - 321)))) !== 0) || ((((_la - 353)) & ~0x1f) == 0 && ((1 << (_la - 353)) & ((1 << (PLSQLParser.SMALLINT - 353)) | (1 << (PLSQLParser.SNAPSHOT - 353)) | (1 << (PLSQLParser.SOME - 353)) | (1 << (PLSQLParser.SPECIFICATION - 353)) | (1 << (PLSQLParser.SQLDATA - 353)) | (1 << (PLSQLParser.SQLERROR - 353)) | (1 << (PLSQLParser.STANDALONE - 353)) | (1 << (PLSQLParser.STARTUP - 353)) | (1 << (PLSQLParser.STATEMENT - 353)) | (1 << (PLSQLParser.STATEMENT_ID - 353)) | (1 << (PLSQLParser.STATIC - 353)) | (1 << (PLSQLParser.STATISTICS - 353)) | (1 << (PLSQLParser.STRING - 353)) | (1 << (PLSQLParser.SUBMULTISET - 353)) | (1 << (PLSQLParser.SUBPARTITION - 353)) | (1 << (PLSQLParser.SUBSTITUTABLE - 353)) | (1 << (PLSQLParser.SUBTYPE - 353)) | (1 << (PLSQLParser.SUCCESS - 353)) | (1 << (PLSQLParser.SUSPEND - 353)) | (1 << (PLSQLParser.TIME - 353)) | (1 << (PLSQLParser.TIMESTAMP - 353)) | (1 << (PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMESTAMP_UNCONSTRAINED - 353)) | (1 << (PLSQLParser.TIMEZONE_ABBR - 353)) | (1 << (PLSQLParser.TIMEZONE_HOUR - 353)) | (1 << (PLSQLParser.TIMEZONE_MINUTE - 353)) | (1 << (PLSQLParser.TIMEZONE_REGION - 353)))) !== 0) || ((((_la - 386)) & ~0x1f) == 0 && ((1 << (_la - 386)) & ((1 << (PLSQLParser.TRAILING - 386)) | (1 << (PLSQLParser.TRANSACTION - 386)) | (1 << (PLSQLParser.TRANSLATE - 386)) | (1 << (PLSQLParser.TREAT - 386)) | (1 << (PLSQLParser.TRIGGER - 386)) | (1 << (PLSQLParser.TRIM - 386)) | (1 << (PLSQLParser.TRUNCATE - 386)) | (1 << (PLSQLParser.TYPE - 386)) | (1 << (PLSQLParser.UNBOUNDED - 386)) | (1 << (PLSQLParser.UNDER - 386)) | (1 << (PLSQLParser.UNLIMITED - 386)) | (1 << (PLSQLParser.UNTIL - 386)) | (1 << (PLSQLParser.UPDATED - 386)) | (1 << (PLSQLParser.UPSERT - 386)) | (1 << (PLSQLParser.UROWID - 386)) | (1 << (PLSQLParser.USE - 386)) | (1 << (PLSQLParser.VALIDATE - 386)) | (1 << (PLSQLParser.VALUE - 386)) | (1 << (PLSQLParser.VARCHAR - 386)) | (1 << (PLSQLParser.VARCHAR2 - 386)) | (1 << (PLSQLParser.VARIABLE - 386)) | (1 << (PLSQLParser.VARRAY - 386)) | (1 << (PLSQLParser.VARYING - 386)) | (1 << (PLSQLParser.VERSION - 386)) | (1 << (PLSQLParser.VERSIONS - 386)))) !== 0) || ((((_la - 418)) & ~0x1f) == 0 && ((1 << (_la - 418)) & ((1 << (PLSQLParser.WAIT - 418)) | (1 << (PLSQLParser.WARNING - 418)) | (1 << (PLSQLParser.WELLFORMED - 418)) | (1 << (PLSQLParser.WHENEVER - 418)) | (1 << (PLSQLParser.WHILE - 418)) | (1 << (PLSQLParser.WITHIN - 418)) | (1 << (PLSQLParser.WORK - 418)) | (1 << (PLSQLParser.WRITE - 418)) | (1 << (PLSQLParser.XML - 418)) | (1 << (PLSQLParser.XMLAGG - 418)) | (1 << (PLSQLParser.XMLATTRIBUTES - 418)) | (1 << (PLSQLParser.XMLCAST - 418)) | (1 << (PLSQLParser.XMLCOLATTVAL - 418)) | (1 << (PLSQLParser.XMLELEMENT - 418)) | (1 << (PLSQLParser.XMLEXISTS - 418)) | (1 << (PLSQLParser.XMLFOREST - 418)) | (1 << (PLSQLParser.XMLNAMESPACES - 418)) | (1 << (PLSQLParser.XMLPARSE - 418)) | (1 << (PLSQLParser.XMLPI - 418)) | (1 << (PLSQLParser.XMLQUERY - 418)) | (1 << (PLSQLParser.XMLROOT - 418)) | (1 << (PLSQLParser.XMLSERIALIZE - 418)) | (1 << (PLSQLParser.XMLTABLE - 418)) | (1 << (PLSQLParser.YEAR - 418)) | (1 << (PLSQLParser.YES - 418)) | (1 << (PLSQLParser.YMINTERVAL_UNCONSTRAINED - 418)) | (1 << (PLSQLParser.ZONE - 418)) | (1 << (PLSQLParser.PREDICTION - 418)) | (1 << (PLSQLParser.PREDICTION_BOUNDS - 418)))) !== 0) || ((((_la - 450)) & ~0x1f) == 0 && ((1 << (_la - 450)) & ((1 << (PLSQLParser.PREDICTION_COST - 450)) | (1 << (PLSQLParser.PREDICTION_DETAILS - 450)) | (1 << (PLSQLParser.PREDICTION_PROBABILITY - 450)) | (1 << (PLSQLParser.PREDICTION_SET - 450)) | (1 << (PLSQLParser.CUME_DIST - 450)) | (1 << (PLSQLParser.DENSE_RANK - 450)) | (1 << (PLSQLParser.LISTAGG - 450)) | (1 << (PLSQLParser.PERCENT_RANK - 450)) | (1 << (PLSQLParser.PERCENTILE_CONT - 450)) | (1 << (PLSQLParser.PERCENTILE_DISC - 450)) | (1 << (PLSQLParser.RANK - 450)) | (1 << (PLSQLParser.AVG - 450)) | (1 << (PLSQLParser.CORR - 450)) | (1 << (PLSQLParser.LAG - 450)) | (1 << (PLSQLParser.LEAD - 450)) | (1 << (PLSQLParser.MAX - 450)) | (1 << (PLSQLParser.MEDIAN - 450)) | (1 << (PLSQLParser.MIN - 450)) | (1 << (PLSQLParser.NTILE - 450)) | (1 << (PLSQLParser.RATIO_TO_REPORT - 450)) | (1 << (PLSQLParser.ROW_NUMBER - 450)) | (1 << (PLSQLParser.SUM - 450)) | (1 << (PLSQLParser.VARIANCE - 450)) | (1 << (PLSQLParser.REGR_ - 450)) | (1 << (PLSQLParser.STDDEV - 450)) | (1 << (PLSQLParser.VAR_ - 450)) | (1 << (PLSQLParser.COVAR_ - 450)))) !== 0) || _la===PLSQLParser.REGULAR_ID)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.PLSQLParser = PLSQLParser;
